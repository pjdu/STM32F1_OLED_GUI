
OLED_MENU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f28  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  0800210c  0800210c  0001210c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002930  08002930  00012930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d0  20000000  08002938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000021e8  200000d0  08002a08  000200d0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200022b8  08002a08  000222b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c400  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003c24  00000000  00000000  0003c4f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b08  00000000  00000000  00040120  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000de8  00000000  00000000  00040c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007337  00000000  00000000  00041a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003e7f  00000000  00000000  00048d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004cbc6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002064  00000000  00000000  0004cc44  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00009cf4  00000000  00000000  0004eca8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000d0 	.word	0x200000d0
 8000200:	00000000 	.word	0x00000000
 8000204:	080020f4 	.word	0x080020f4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000d4 	.word	0x200000d4
 8000220:	080020f4 	.word	0x080020f4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8000238:	b510      	push	{r4, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000240:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024e:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f000 fe45 	bl	8000ee4 <HAL_RCC_OscConfig>
 800025a:	b100      	cbz	r0, 800025e <SystemClock_Config+0x2a>
 800025c:	e7fe      	b.n	800025c <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	4621      	mov	r1, r4
 800026c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	f000 ffff 	bl	8001274 <HAL_RCC_ClockConfig>
 8000276:	4604      	mov	r4, r0
 8000278:	b100      	cbz	r0, 800027c <SystemClock_Config+0x48>
 800027a:	e7fe      	b.n	800027a <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800027c:	f001 f89e 	bl	80013bc <HAL_RCC_GetHCLKFreq>
 8000280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000284:	fbb0 f0f3 	udiv	r0, r0, r3
 8000288:	f000 fd12 	bl	8000cb0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800028c:	2004      	movs	r0, #4
 800028e:	f000 fd25 	bl	8000cdc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000292:	4622      	mov	r2, r4
 8000294:	4621      	mov	r1, r4
 8000296:	f04f 30ff 	mov.w	r0, #4294967295
 800029a:	f000 fcd5 	bl	8000c48 <HAL_NVIC_SetPriority>
}
 800029e:	b010      	add	sp, #64	; 0x40
 80002a0:	bd10      	pop	{r4, pc}
	...

080002a4 <main>:
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 80002a8:	f000 fc86 	bl	8000bb8 <HAL_Init>
  SystemClock_Config();
 80002ac:	f7ff ffc2 	bl	8000234 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b0:	4b5f      	ldr	r3, [pc, #380]	; (8000430 <main+0x18c>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ROTARY_SW_Pin */
  GPIO_InitStruct.Pin = ROTARY_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b2:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002b6:	2401      	movs	r4, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b8:	f042 0220 	orr.w	r2, r2, #32
 80002bc:	619a      	str	r2, [r3, #24]
 80002be:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = ROTARY_SW_Pin;
 80002c0:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c4:	f002 0220 	and.w	r2, r2, #32
 80002c8:	9201      	str	r2, [sp, #4]
 80002ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 80002ce:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d2:	f042 0210 	orr.w	r2, r2, #16
 80002d6:	619a      	str	r2, [r3, #24]
 80002d8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 80002da:	4856      	ldr	r0, [pc, #344]	; (8000434 <main+0x190>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002dc:	f002 0210 	and.w	r2, r2, #16
 80002e0:	9202      	str	r2, [sp, #8]
 80002e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002e6:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	f042 0204 	orr.w	r2, r2, #4
 80002ec:	619a      	str	r2, [r3, #24]
 80002ee:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f2:	f002 0204 	and.w	r2, r2, #4
 80002f6:	9203      	str	r2, [sp, #12]
 80002f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fa:	699a      	ldr	r2, [r3, #24]
 80002fc:	f042 0208 	orr.w	r2, r2, #8
 8000300:	619a      	str	r2, [r3, #24]
 8000302:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	f003 0308 	and.w	r3, r3, #8
 800030a:	9304      	str	r3, [sp, #16]
 800030c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 800030e:	f000 fde3 	bl	8000ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	4848      	ldr	r0, [pc, #288]	; (8000438 <main+0x194>)
 8000318:	f000 fdde 	bl	8000ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000322:	4846      	ldr	r0, [pc, #280]	; (800043c <main+0x198>)
 8000324:	f000 fdd8 	bl	8000ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2104      	movs	r1, #4
 800032c:	4844      	ldr	r0, [pc, #272]	; (8000440 <main+0x19c>)
 800032e:	f000 fdd3 	bl	8000ed8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(ROTARY_SW_GPIO_Port, &GPIO_InitStruct);
 8000332:	a907      	add	r1, sp, #28
 8000334:	4840      	ldr	r0, [pc, #256]	; (8000438 <main+0x194>)
  GPIO_InitStruct.Pin = ROTARY_SW_Pin;
 8000336:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800033c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ROTARY_SW_GPIO_Port, &GPIO_InitStruct);
 800033e:	f000 fcdf 	bl	8000d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000346:	a907      	add	r1, sp, #28
 8000348:	483a      	ldr	r0, [pc, #232]	; (8000434 <main+0x190>)
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800034a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000350:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000352:	f000 fcd5 	bl	8000d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000356:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800035a:	a907      	add	r1, sp, #28
 800035c:	4835      	ldr	r0, [pc, #212]	; (8000434 <main+0x190>)
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800035e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000360:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000362:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000364:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000366:	f000 fccb 	bl	8000d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800036a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800036c:	a907      	add	r1, sp, #28
 800036e:	4832      	ldr	r0, [pc, #200]	; (8000438 <main+0x194>)
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000370:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000376:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000378:	f000 fcc2 	bl	8000d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED0_Pin;
 800037c:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000380:	a907      	add	r1, sp, #28
 8000382:	482e      	ldr	r0, [pc, #184]	; (800043c <main+0x198>)
  GPIO_InitStruct.Pin = LED0_Pin;
 8000384:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000386:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000388:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800038c:	f000 fcb8 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000390:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000392:	a907      	add	r1, sp, #28
 8000394:	482a      	ldr	r0, [pc, #168]	; (8000440 <main+0x19c>)
  GPIO_InitStruct.Pin = LED1_Pin;
 8000396:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000398:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800039e:	f000 fcaf 	bl	8000d00 <HAL_GPIO_Init>
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80003a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003a6:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Instance = SPI2;
 80003aa:	4826      	ldr	r0, [pc, #152]	; (8000444 <main+0x1a0>)
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80003ac:	4926      	ldr	r1, [pc, #152]	; (8000448 <main+0x1a4>)
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80003ae:	6107      	str	r7, [r0, #16]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80003b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hspi2.Init.CRCPolynomial = 10;
 80003b4:	270a      	movs	r7, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003b6:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003ba:	60c5      	str	r5, [r0, #12]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80003bc:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003be:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003c0:	f8c0 801c 	str.w	r8, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003c4:	6205      	str	r5, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c6:	6245      	str	r5, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c8:	6285      	str	r5, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003ca:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003cc:	f001 f8fc 	bl	80015c8 <HAL_SPI_Init>
 80003d0:	b100      	cbz	r0, 80003d4 <main+0x130>
 80003d2:	e7fe      	b.n	80003d2 <main+0x12e>
  htim2.Instance = TIM2;
 80003d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d8:	4d1c      	ldr	r5, [pc, #112]	; (800044c <main+0x1a8>)
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003da:	9008      	str	r0, [sp, #32]
  htim2.Init.Prescaler = 3;
 80003dc:	e885 0048 	stmia.w	r5, {r3, r6}
  htim2.Init.Period = 65535;
 80003e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e4:	60a8      	str	r0, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e6:	6128      	str	r0, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e8:	61a8      	str	r0, [r5, #24]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003ea:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003ec:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003ee:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80003f0:	a907      	add	r1, sp, #28
 80003f2:	4628      	mov	r0, r5
  htim2.Init.Period = 65535;
 80003f4:	60eb      	str	r3, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80003f6:	9607      	str	r6, [sp, #28]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003f8:	9409      	str	r4, [sp, #36]	; 0x24
  sConfig.IC1Filter = 10;
 80003fa:	970b      	str	r7, [sp, #44]	; 0x2c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003fc:	940d      	str	r4, [sp, #52]	; 0x34
  sConfig.IC2Filter = 10;
 80003fe:	970f      	str	r7, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000400:	f001 f98c 	bl	800171c <HAL_TIM_Encoder_Init>
 8000404:	b100      	cbz	r0, 8000408 <main+0x164>
 8000406:	e7fe      	b.n	8000406 <main+0x162>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000408:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040a:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800040c:	a905      	add	r1, sp, #20
 800040e:	4628      	mov	r0, r5
 8000410:	f001 f9cd 	bl	80017ae <HAL_TIMEx_MasterConfigSynchronization>
 8000414:	b100      	cbz	r0, 8000418 <main+0x174>
 8000416:	e7fe      	b.n	8000416 <main+0x172>
	RotaryEcncorder_Init();
 8000418:	f000 fb4a 	bl	8000ab0 <RotaryEcncorder_Init>
	OLED_Init();
 800041c:	f000 fa42 	bl	80008a4 <OLED_Init>
	mainMenuInit();
 8000420:	f001 f9ee 	bl	8001800 <mainMenuInit>
		Menu_Run();
 8000424:	f001 faca 	bl	80019bc <Menu_Run>
		HAL_Delay(30);
 8000428:	201e      	movs	r0, #30
 800042a:	f000 fbe9 	bl	8000c00 <HAL_Delay>
 800042e:	e7f9      	b.n	8000424 <main+0x180>
 8000430:	40021000 	.word	0x40021000
 8000434:	40010c00 	.word	0x40010c00
 8000438:	40011000 	.word	0x40011000
 800043c:	40010800 	.word	0x40010800
 8000440:	40011400 	.word	0x40011400
 8000444:	20002104 	.word	0x20002104
 8000448:	40003800 	.word	0x40003800
 800044c:	2000215c 	.word	0x2000215c

08000450 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000450:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <HAL_MspInit+0x98>)
{
 8000452:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000454:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000456:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000458:	f042 0201 	orr.w	r2, r2, #1
 800045c:	619a      	str	r2, [r3, #24]
 800045e:	699a      	ldr	r2, [r3, #24]
 8000460:	f002 0201 	and.w	r2, r2, #1
 8000464:	9200      	str	r2, [sp, #0]
 8000466:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800046e:	61da      	str	r2, [r3, #28]
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	9301      	str	r3, [sp, #4]
 8000478:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800047a:	f000 fbd3 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	f06f 000b 	mvn.w	r0, #11
 8000484:	4611      	mov	r1, r2
 8000486:	f000 fbdf 	bl	8000c48 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	f06f 000a 	mvn.w	r0, #10
 8000490:	4611      	mov	r1, r2
 8000492:	f000 fbd9 	bl	8000c48 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	f06f 0009 	mvn.w	r0, #9
 800049c:	4611      	mov	r1, r2
 800049e:	f000 fbd3 	bl	8000c48 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f06f 0004 	mvn.w	r0, #4
 80004a8:	4611      	mov	r1, r2
 80004aa:	f000 fbcd 	bl	8000c48 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f06f 0003 	mvn.w	r0, #3
 80004b4:	4611      	mov	r1, r2
 80004b6:	f000 fbc7 	bl	8000c48 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f06f 0001 	mvn.w	r0, #1
 80004c0:	4611      	mov	r1, r2
 80004c2:	f000 fbc1 	bl	8000c48 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f04f 30ff 	mov.w	r0, #4294967295
 80004cc:	4611      	mov	r1, r2
 80004ce:	f000 fbbb 	bl	8000c48 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d2:	4a06      	ldr	r2, [pc, #24]	; (80004ec <HAL_MspInit+0x9c>)
 80004d4:	6853      	ldr	r3, [r2, #4]
 80004d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004de:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e0:	b003      	add	sp, #12
 80004e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010000 	.word	0x40010000

080004f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 80004f2:	6802      	ldr	r2, [r0, #0]
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <HAL_SPI_MspInit+0x3c>)
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d115      	bne.n	8000526 <HAL_SPI_MspInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004fa:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80004fe:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000506:	61da      	str	r2, [r3, #28]
 8000508:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <HAL_SPI_MspInit+0x40>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800050c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000514:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000518:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051e:	2303      	movs	r3, #3
 8000520:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	f000 fbed 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000526:	b007      	add	sp, #28
 8000528:	f85d fb04 	ldr.w	pc, [sp], #4
 800052c:	40003800 	.word	0x40003800
 8000530:	40010c00 	.word	0x40010c00

08000534 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM2)
 8000536:	6803      	ldr	r3, [r0, #0]
 8000538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800053c:	d114      	bne.n	8000568 <HAL_TIM_Encoder_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800053e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000542:	69da      	ldr	r2, [r3, #28]
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ROTARY_A_Pin|ROTARY_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000546:	f042 0201 	orr.w	r2, r2, #1
 800054a:	61da      	str	r2, [r3, #28]
 800054c:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	4808      	ldr	r0, [pc, #32]	; (8000570 <HAL_TIM_Encoder_MspInit+0x3c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ROTARY_A_Pin|ROTARY_B_Pin;
 8000558:	2303      	movs	r3, #3
 800055a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055c:	2300      	movs	r3, #0
 800055e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000560:	2301      	movs	r3, #1
 8000562:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f000 fbcc 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000568:	b007      	add	sp, #28
 800056a:	f85d fb04 	ldr.w	pc, [sp], #4
 800056e:	bf00      	nop
 8000570:	40010800 	.word	0x40010800

08000574 <NMI_Handler>:
 8000574:	4770      	bx	lr

08000576 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler>

08000578 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler>

0800057a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800057a:	e7fe      	b.n	800057a <BusFault_Handler>

0800057c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800057c:	e7fe      	b.n	800057c <UsageFault_Handler>

0800057e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800057e:	4770      	bx	lr

08000580 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000580:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000582:	f000 fb2b 	bl	8000bdc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800058a:	f000 bbb4 	b.w	8000cf6 <HAL_SYSTICK_IRQHandler>
	...

08000590 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <SystemInit+0x40>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	f042 0201 	orr.w	r2, r2, #1
 8000598:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800059a:	6859      	ldr	r1, [r3, #4]
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <SystemInit+0x44>)
 800059e:	400a      	ands	r2, r1
 80005a0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005bc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <SystemInit+0x48>)
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000
 80005d4:	f8ff0000 	.word	0xf8ff0000
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <write>:
#define Max_Column	0x3F			// 256/4-1
#define Max_Row		0x3F			// 64-1
#define	Brightness	0x0F

uint16_t gram[64][64] = { 0 }; // row : 64 col: 64 *4 = 256   u16 = [p1,p2,p3,p4]
static void write(uint8_t bytes, uint8_t is_data) {
 80005dc:	b513      	push	{r0, r1, r4, lr}
 80005de:	460c      	mov	r4, r1
	uint8_t tmp = bytes;
 80005e0:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ea:	480d      	ldr	r0, [pc, #52]	; (8000620 <write+0x44>)
 80005ec:	f000 fc74 	bl	8000ed8 <HAL_GPIO_WritePin>
	if (is_data) {
 80005f0:	b1a4      	cbz	r4, 800061c <write+0x40>
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, SET);
 80005f2:	2201      	movs	r2, #1
	}
	/* We are sending commands */
	else {
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <write+0x48>)
 80005f8:	f000 fc6e 	bl	8000ed8 <HAL_GPIO_WritePin>
	}
	HAL_SPI_Transmit(&hspi2, &tmp, 1, 1000);
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	f10d 0107 	add.w	r1, sp, #7
 8000604:	2201      	movs	r2, #1
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <write+0x4c>)
 8000608:	f000 ff35 	bl	8001476 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <write+0x44>)
 8000614:	f000 fc60 	bl	8000ed8 <HAL_GPIO_WritePin>
}
 8000618:	b002      	add	sp, #8
 800061a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 800061c:	4622      	mov	r2, r4
 800061e:	e7e9      	b.n	80005f4 <write+0x18>
 8000620:	40010c00 	.word	0x40010c00
 8000624:	40011000 	.word	0x40011000
 8000628:	20002104 	.word	0x20002104

0800062c <OLED_DrawPoint>:
//   y: OLED螢幕y座標
//	 mode: 0x00(滅) 0x01(亮)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t mode) {

	if (x > 255 || y > 63)
 800062c:	293f      	cmp	r1, #63	; 0x3f
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t mode) {
 800062e:	b510      	push	{r4, lr}
	if (x > 255 || y > 63)
 8000630:	d811      	bhi.n	8000656 <OLED_DrawPoint+0x2a>
		return;
	uint16_t point = 0x000f;
	uint8_t group = x >> 2;
 8000632:	0884      	lsrs	r4, r0, #2
	uint8_t group_bit = 3 - (x % 4);
 8000634:	43c0      	mvns	r0, r0
	point = point << (group_bit * 4);
 8000636:	f000 0303 	and.w	r3, r0, #3
 800063a:	0098      	lsls	r0, r3, #2
 800063c:	230f      	movs	r3, #15
 800063e:	0189      	lsls	r1, r1, #6
 8000640:	4083      	lsls	r3, r0
 8000642:	b29b      	uxth	r3, r3
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <OLED_DrawPoint+0x34>)

	if (!mode) {
		point = ~point;
		gram[y][group] &= point;
 8000646:	4421      	add	r1, r4
	if (!mode) {
 8000648:	b932      	cbnz	r2, 8000658 <OLED_DrawPoint+0x2c>
		gram[y][group] &= point;
 800064a:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 800064e:	ea22 0303 	bic.w	r3, r2, r3
	} else {
		gram[y][group] |= point;
 8000652:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8000656:	bd10      	pop	{r4, pc}
 8000658:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 800065c:	4313      	orrs	r3, r2
 800065e:	e7f8      	b.n	8000652 <OLED_DrawPoint+0x26>
 8000660:	200000ec 	.word	0x200000ec

08000664 <OLED_FillBlock>:
void OLED_FillBlock(unsigned char a, unsigned char b,unsigned char c, unsigned char d,unsigned char Data){
 8000664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000668:	4607      	mov	r7, r0
 800066a:	4688      	mov	r8, r1
 800066c:	461e      	mov	r6, r3
	for(int y=c;y<d;y++)
 800066e:	4614      	mov	r4, r2
void OLED_FillBlock(unsigned char a, unsigned char b,unsigned char c, unsigned char d,unsigned char Data){
 8000670:	f89d 9020 	ldrb.w	r9, [sp, #32]
	for(int y=c;y<d;y++)
 8000674:	42b4      	cmp	r4, r6
 8000676:	db01      	blt.n	800067c <OLED_FillBlock+0x18>
}
 8000678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for(int x=a;x<b;x++)
 800067c:	463d      	mov	r5, r7
			OLED_DrawPoint(x,y,Data);
 800067e:	fa5f fa84 	uxtb.w	sl, r4
		for(int x=a;x<b;x++)
 8000682:	4545      	cmp	r5, r8
 8000684:	db01      	blt.n	800068a <OLED_FillBlock+0x26>
	for(int y=c;y<d;y++)
 8000686:	3401      	adds	r4, #1
 8000688:	e7f4      	b.n	8000674 <OLED_FillBlock+0x10>
			OLED_DrawPoint(x,y,Data);
 800068a:	b2e8      	uxtb	r0, r5
 800068c:	464a      	mov	r2, r9
 800068e:	4651      	mov	r1, sl
 8000690:	f7ff ffcc 	bl	800062c <OLED_DrawPoint>
		for(int x=a;x<b;x++)
 8000694:	3501      	adds	r5, #1
 8000696:	e7f4      	b.n	8000682 <OLED_FillBlock+0x1e>

08000698 <OLED_FillRam>:
void OLED_FillRam(unsigned char Data) {
 8000698:	b507      	push	{r0, r1, r2, lr}
	OLED_FillBlock(0x00, Max_Column, 0x00, Max_Row,Data);
 800069a:	233f      	movs	r3, #63	; 0x3f
 800069c:	2200      	movs	r2, #0
 800069e:	9000      	str	r0, [sp, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	4610      	mov	r0, r2
 80006a4:	f7ff ffde 	bl	8000664 <OLED_FillBlock>
}
 80006a8:	b003      	add	sp, #12
 80006aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080006b0 <OLED_RefreshGram>:
	point = (gram[y][group] & (point << (group_bit * 4))) >> (group_bit * 4);
	point = point & 0x00ff;
	return point;

}
void OLED_RefreshGram() {
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Write_Command(0x15);			// Set Column Address
 80006b2:	2100      	movs	r1, #0
 80006b4:	2015      	movs	r0, #21
 80006b6:	f7ff ff91 	bl	80005dc <write>
	Write_Data(a);				//   Default => 0x00
 80006ba:	2101      	movs	r1, #1
 80006bc:	201c      	movs	r0, #28
 80006be:	f7ff ff8d 	bl	80005dc <write>
	Write_Data(b);				//   Default => 0x77
 80006c2:	2101      	movs	r1, #1
 80006c4:	205b      	movs	r0, #91	; 0x5b
 80006c6:	f7ff ff89 	bl	80005dc <write>
	Write_Command(0x75);			// Set Row Address
 80006ca:	2100      	movs	r1, #0
 80006cc:	2075      	movs	r0, #117	; 0x75
 80006ce:	f7ff ff85 	bl	80005dc <write>
	Write_Data(a);				//   Default => 0x00
 80006d2:	2101      	movs	r1, #1
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff ff81 	bl	80005dc <write>
	Write_Data(b);				//   Default => 0x7F
 80006da:	2101      	movs	r1, #1
 80006dc:	203f      	movs	r0, #63	; 0x3f
 80006de:	f7ff ff7d 	bl	80005dc <write>
	Write_Command(0x5C);			// Enable MCU to Write into RAM
 80006e2:	2100      	movs	r1, #0
 80006e4:	205c      	movs	r0, #92	; 0x5c
 80006e6:	f7ff ff79 	bl	80005dc <write>
 80006ea:	2500      	movs	r5, #0
 80006ec:	4f0a      	ldr	r7, [pc, #40]	; (8000718 <OLED_RefreshGram+0x68>)
void OLED_RefreshGram() {
 80006ee:	2400      	movs	r4, #0
 80006f0:	197e      	adds	r6, r7, r5
	Set_Column_Address(Shift + a, Shift + b);
	Set_Row_Address(c, d);
	Set_Write_RAM();
	for (int y = 0; y < (d - c+1); y++) {
		for (int x = 0; x < (b - a+1); x++) {
			Write_Data((gram[y][x] & 0xff00) >> 8); //draw 3,4 point
 80006f2:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 80006f6:	2101      	movs	r1, #1
 80006f8:	0a00      	lsrs	r0, r0, #8
 80006fa:	f7ff ff6f 	bl	80005dc <write>
			Write_Data(gram[y][x] & 0x00ff); 		//draw 1,2 point
 80006fe:	f816 0014 	ldrb.w	r0, [r6, r4, lsl #1]
 8000702:	2101      	movs	r1, #1
		for (int x = 0; x < (b - a+1); x++) {
 8000704:	3401      	adds	r4, #1
			Write_Data(gram[y][x] & 0x00ff); 		//draw 1,2 point
 8000706:	f7ff ff69 	bl	80005dc <write>
		for (int x = 0; x < (b - a+1); x++) {
 800070a:	2c40      	cmp	r4, #64	; 0x40
 800070c:	d1f1      	bne.n	80006f2 <OLED_RefreshGram+0x42>
 800070e:	3580      	adds	r5, #128	; 0x80
	for (int y = 0; y < (d - c+1); y++) {
 8000710:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8000714:	d1eb      	bne.n	80006ee <OLED_RefreshGram+0x3e>
 8000716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000718:	200000ec 	.word	0x200000ec

0800071c <OLED_Clear>:
{
 800071c:	b508      	push	{r3, lr}
	OLED_FillRam(0x00);
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff ffba 	bl	8000698 <OLED_FillRam>
}
 8000724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OLED_RefreshGram();
 8000728:	f7ff bfc2 	b.w	80006b0 <OLED_RefreshGram>

0800072c <OLED_ShowChar>:
//   chr: 字元
//   f_w:字元寬度像素
//   f_h:字元高度像素
//	 mode: 0x00(滅) 0x01(亮)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 800072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000730:	b085      	sub	sp, #20
 8000732:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8000736:	9300      	str	r3, [sp, #0]
	uint8_t temp,t,t1;
	uint8_t y0=y;
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 8000738:	f016 0307 	ands.w	r3, r6, #7
 800073c:	bf18      	it	ne
 800073e:	2301      	movne	r3, #1
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 8000740:	4688      	mov	r8, r1
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 8000742:	9900      	ldr	r1, [sp, #0]
 8000744:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8000748:	434b      	muls	r3, r1
 800074a:	210c      	movs	r1, #12
 800074c:	b2db      	uxtb	r3, r3
 800074e:	9301      	str	r3, [sp, #4]
	chr=chr-' ';//得到偏移后的值
 8000750:	3a20      	subs	r2, #32
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <OLED_ShowChar+0xb0>)
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	fb01 3302 	mla	r3, r1, r2, r3
 800075a:	2106      	movs	r1, #6
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 800075c:	4605      	mov	r5, r0
	for(t=0;t<csize;t++)
 800075e:	4644      	mov	r4, r8
 8000760:	f04f 0a00 	mov.w	sl, #0
 8000764:	9303      	str	r3, [sp, #12]
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <OLED_ShowChar+0xb4>)
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 8000768:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
 800076c:	fb01 3302 	mla	r3, r1, r2, r3
 8000770:	9302      	str	r3, [sp, #8]
	for(t=0;t<csize;t++)
 8000772:	9b01      	ldr	r3, [sp, #4]
 8000774:	fa5f f28a 	uxtb.w	r2, sl
 8000778:	4293      	cmp	r3, r2
 800077a:	d802      	bhi.n	8000782 <OLED_ShowChar+0x56>
				x++;
				break;
			}
		}
	}
}
 800077c:	b005      	add	sp, #20
 800077e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(f_w==6&&f_h==8)temp=asc2_0608[chr][t];		//调用0608ascii字体
 8000782:	9b00      	ldr	r3, [sp, #0]
 8000784:	2b06      	cmp	r3, #6
 8000786:	d1f9      	bne.n	800077c <OLED_ShowChar+0x50>
 8000788:	2e08      	cmp	r6, #8
 800078a:	d120      	bne.n	80007ce <OLED_ShowChar+0xa2>
 800078c:	9b02      	ldr	r3, [sp, #8]
 800078e:	f104 0908 	add.w	r9, r4, #8
		else if(f_w==6&&f_h==12)temp=asc2_0612[chr][t];	//调用0612ascii字体
 8000792:	f813 700a 	ldrb.w	r7, [r3, sl]
 8000796:	fa5f f989 	uxtb.w	r9, r9
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800079a:	063b      	lsls	r3, r7, #24
			else OLED_DrawPoint(x,y,!mode);
 800079c:	bf58      	it	pl
 800079e:	fabb f28b 	clzpl	r2, fp
 80007a2:	4621      	mov	r1, r4
			y++;
 80007a4:	f104 0401 	add.w	r4, r4, #1
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80007a8:	bf4c      	ite	mi
 80007aa:	465a      	movmi	r2, fp
			else OLED_DrawPoint(x,y,!mode);
 80007ac:	0952      	lsrpl	r2, r2, #5
 80007ae:	4628      	mov	r0, r5
			y++;
 80007b0:	b2e4      	uxtb	r4, r4
			else OLED_DrawPoint(x,y,!mode);
 80007b2:	f7ff ff3b 	bl	800062c <OLED_DrawPoint>
			if((y-y0)==f_h)
 80007b6:	eba4 0208 	sub.w	r2, r4, r8
			temp<<=1;
 80007ba:	007f      	lsls	r7, r7, #1
			if((y-y0)==f_h)
 80007bc:	42b2      	cmp	r2, r6
			temp<<=1;
 80007be:	b2ff      	uxtb	r7, r7
			if((y-y0)==f_h)
 80007c0:	d109      	bne.n	80007d6 <OLED_ShowChar+0xaa>
				y=y0;
 80007c2:	4644      	mov	r4, r8
				x++;
 80007c4:	3501      	adds	r5, #1
 80007c6:	b2ed      	uxtb	r5, r5
 80007c8:	f10a 0a01 	add.w	sl, sl, #1
 80007cc:	e7d1      	b.n	8000772 <OLED_ShowChar+0x46>
		else if(f_w==6&&f_h==12)temp=asc2_0612[chr][t];	//调用0612ascii字体
 80007ce:	2e0c      	cmp	r6, #12
 80007d0:	d1d4      	bne.n	800077c <OLED_ShowChar+0x50>
 80007d2:	9b03      	ldr	r3, [sp, #12]
 80007d4:	e7db      	b.n	800078e <OLED_ShowChar+0x62>
		for(t1=0;t1<8;t1++)
 80007d6:	45a1      	cmp	r9, r4
 80007d8:	d1df      	bne.n	800079a <OLED_ShowChar+0x6e>
 80007da:	e7f5      	b.n	80007c8 <OLED_ShowChar+0x9c>
 80007dc:	080024ac 	.word	0x080024ac
 80007e0:	08002272 	.word	0x08002272

080007e4 <OLED_ShowPicture>:
//   p_w:圖片寬度像素
//   p_h:圖片高度像素
//	 mode: 0x00(滅) 0x01(亮)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void OLED_ShowPicture(uint8_t x,uint8_t y,const uint8_t *p,uint8_t p_w,uint8_t p_h)
{
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e8:	468a      	mov	sl, r1
 80007ea:	4698      	mov	r8, r3
 80007ec:	b087      	sub	sp, #28
 80007ee:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	uint8_t temp,i,col,row;
	uint8_t y0=y;
	uint8_t width=p_w;
	if(x+p_w>OLED_PIXEL_WIDTH)width=OLED_PIXEL_WIDTH-p_w;//实际显示宽度
 80007f2:	18c3      	adds	r3, r0, r3
 80007f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007f8:	bfc8      	it	gt
 80007fa:	f1c8 0800 	rsbgt	r8, r8, #0
	uint8_t high=p_h;
	if(y+p_h>OLED_PIXEL_HEIGHT)high=OLED_PIXEL_HEIGHT-p_h;//实际显示高度
 80007fe:	eb01 030a 	add.w	r3, r1, sl
	if(x+p_w>OLED_PIXEL_WIDTH)width=OLED_PIXEL_WIDTH-p_w;//实际显示宽度
 8000802:	bfc8      	it	gt
 8000804:	fa5f f888 	uxtbgt.w	r8, r8
	if(y+p_h>OLED_PIXEL_HEIGHT)high=OLED_PIXEL_HEIGHT-p_h;//实际显示高度
 8000808:	2b40      	cmp	r3, #64	; 0x40
	uint8_t high=p_h;
 800080a:	bfd2      	itee	le
 800080c:	460d      	movle	r5, r1
	if(y+p_h>OLED_PIXEL_HEIGHT)high=OLED_PIXEL_HEIGHT-p_h;//实际显示高度
 800080e:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 8000812:	b2ed      	uxtbgt	r5, r5
	uint8_t exp_col_bytes=(p_h/8+((p_h%8)?1:0));//显示一列的字节数
	uint8_t act_col_bytes=(high/8+((high%8)?1:0));//实际显示一列的字节数
 8000814:	f015 0307 	ands.w	r3, r5, #7
 8000818:	bf18      	it	ne
 800081a:	2301      	movne	r3, #1
 800081c:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 8000820:	9301      	str	r3, [sp, #4]
	uint8_t exp_col_bytes=(p_h/8+((p_h%8)?1:0));//显示一列的字节数
 8000822:	f011 0307 	ands.w	r3, r1, #7
 8000826:	bf18      	it	ne
 8000828:	2301      	movne	r3, #1
 800082a:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
 800082e:	9303      	str	r3, [sp, #12]
{
 8000830:	4606      	mov	r6, r0
 8000832:	4617      	mov	r7, r2

	for(row=0;row<width;row++)//列++
 8000834:	4654      	mov	r4, sl
 8000836:	2300      	movs	r3, #0
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4590      	cmp	r8, r2
 800083c:	d92e      	bls.n	800089c <OLED_ShowPicture+0xb8>
 800083e:	9a01      	ldr	r2, [sp, #4]
 8000840:	46bb      	mov	fp, r7
 8000842:	443a      	add	r2, r7
 8000844:	9204      	str	r2, [sp, #16]
 8000846:	e01e      	b.n	8000886 <OLED_ShowPicture+0xa2>
 8000848:	f104 0208 	add.w	r2, r4, #8
 800084c:	b2d2      	uxtb	r2, r2
	{
		for(col=0;col<act_col_bytes;col++)//显示一列
		{
			temp = p[col+row*exp_col_bytes];
 800084e:	f81b 9b01 	ldrb.w	r9, [fp], #1
 8000852:	9202      	str	r2, [sp, #8]
			for(i=0;i<8;i++)
			{
				if(temp&0x80)OLED_DrawPoint(x,y,1);
 8000854:	f019 0f80 	tst.w	r9, #128	; 0x80
				else OLED_DrawPoint(x,y,0);
 8000858:	4621      	mov	r1, r4
				temp<<=1;
				y++;
 800085a:	f104 0401 	add.w	r4, r4, #1
				if(temp&0x80)OLED_DrawPoint(x,y,1);
 800085e:	bf14      	ite	ne
 8000860:	2201      	movne	r2, #1
				else OLED_DrawPoint(x,y,0);
 8000862:	2200      	moveq	r2, #0
 8000864:	4630      	mov	r0, r6
				y++;
 8000866:	b2e4      	uxtb	r4, r4
 8000868:	9305      	str	r3, [sp, #20]
				else OLED_DrawPoint(x,y,0);
 800086a:	f7ff fedf 	bl	800062c <OLED_DrawPoint>
				if((y-y0)==high)
 800086e:	eba4 020a 	sub.w	r2, r4, sl
				temp<<=1;
 8000872:	ea4f 0949 	mov.w	r9, r9, lsl #1
				if((y-y0)==high)
 8000876:	42aa      	cmp	r2, r5
				else OLED_DrawPoint(x,y,0);
 8000878:	9b05      	ldr	r3, [sp, #20]
				temp<<=1;
 800087a:	fa5f f989 	uxtb.w	r9, r9
				if((y-y0)==high)
 800087e:	d109      	bne.n	8000894 <OLED_ShowPicture+0xb0>
				{
					y=y0;
 8000880:	4654      	mov	r4, sl
					x++;
 8000882:	3601      	adds	r6, #1
 8000884:	b2f6      	uxtb	r6, r6
		for(col=0;col<act_col_bytes;col++)//显示一列
 8000886:	9a04      	ldr	r2, [sp, #16]
 8000888:	4593      	cmp	fp, r2
 800088a:	d1dd      	bne.n	8000848 <OLED_ShowPicture+0x64>
 800088c:	9a03      	ldr	r2, [sp, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	4417      	add	r7, r2
 8000892:	e7d1      	b.n	8000838 <OLED_ShowPicture+0x54>
			for(i=0;i<8;i++)
 8000894:	9a02      	ldr	r2, [sp, #8]
 8000896:	4294      	cmp	r4, r2
 8000898:	d1dc      	bne.n	8000854 <OLED_ShowPicture+0x70>
 800089a:	e7f4      	b.n	8000886 <OLED_ShowPicture+0xa2>
					break;
				}
			}
		}
	}
}
 800089c:	b007      	add	sp, #28
 800089e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080008a4 <OLED_Init>:
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  OLED Initialization
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void OLED_Init() {
 80008a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t dummy = 0x0;
 80008a6:	2400      	movs	r4, #0


	//LCD_RST_SetLow();
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 80008a8:	4e7f      	ldr	r6, [pc, #508]	; (8000aa8 <OLED_Init+0x204>)
 80008aa:	4622      	mov	r2, r4
	uint8_t dummy = 0x0;
 80008ac:	ad02      	add	r5, sp, #8
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 80008ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b2:	4630      	mov	r0, r6
	uint8_t dummy = 0x0;
 80008b4:	f805 4d01 	strb.w	r4, [r5, #-1]!
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 80008b8:	f000 fb0e 	bl	8000ed8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80008bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c0:	f000 f99e 	bl	8000c00 <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,SET);
 80008c4:	4630      	mov	r0, r6
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008cc:	f000 fb04 	bl	8000ed8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &dummy, 1, 1000);
 80008d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d4:	2201      	movs	r2, #1
 80008d6:	4629      	mov	r1, r5
 80008d8:	4874      	ldr	r0, [pc, #464]	; (8000aac <OLED_Init+0x208>)
 80008da:	f000 fdcc 	bl	8001476 <HAL_SPI_Transmit>
	Write_Command(0xFD);			// Set Command Lock
 80008de:	4621      	mov	r1, r4
 80008e0:	20fd      	movs	r0, #253	; 0xfd
 80008e2:	f7ff fe7b 	bl	80005dc <write>
	Write_Data(0x12 | d);			//   Default => 0x12
 80008e6:	2101      	movs	r1, #1
 80008e8:	2012      	movs	r0, #18
 80008ea:	f7ff fe77 	bl	80005dc <write>
	Write_Command(0xAE | d);			// Set Display On/Off
 80008ee:	4621      	mov	r1, r4
 80008f0:	20ae      	movs	r0, #174	; 0xae
 80008f2:	f7ff fe73 	bl	80005dc <write>
	Write_Command(0xB3);	// Set Display Clock Divider / Oscillator Frequency
 80008f6:	4621      	mov	r1, r4
 80008f8:	20b3      	movs	r0, #179	; 0xb3
 80008fa:	f7ff fe6f 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0xD0
 80008fe:	2101      	movs	r1, #1
 8000900:	2091      	movs	r0, #145	; 0x91
 8000902:	f7ff fe6b 	bl	80005dc <write>
	Write_Command(0xCA);			// Set Multiplex Ratio
 8000906:	4621      	mov	r1, r4
 8000908:	20ca      	movs	r0, #202	; 0xca
 800090a:	f7ff fe67 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0x7F (1/128 Duty)
 800090e:	2101      	movs	r1, #1
 8000910:	203f      	movs	r0, #63	; 0x3f
 8000912:	f7ff fe63 	bl	80005dc <write>
	Write_Command(0xA2);			// Set Vertical Scroll by Row
 8000916:	4621      	mov	r1, r4
 8000918:	20a2      	movs	r0, #162	; 0xa2
 800091a:	f7ff fe5f 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0x00
 800091e:	4620      	mov	r0, r4
 8000920:	2101      	movs	r1, #1
 8000922:	f7ff fe5b 	bl	80005dc <write>
	Write_Command(0xA1);			// Set Vertical Scroll by RAM
 8000926:	4621      	mov	r1, r4
 8000928:	20a1      	movs	r0, #161	; 0xa1
 800092a:	f7ff fe57 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0x00
 800092e:	4620      	mov	r0, r4
 8000930:	2101      	movs	r1, #1
 8000932:	f7ff fe53 	bl	80005dc <write>
	Write_Command(0xA0);			// Set Re-Map / Dual COM Line Mode
 8000936:	4621      	mov	r1, r4
 8000938:	20a0      	movs	r0, #160	; 0xa0
 800093a:	f7ff fe4f 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0x40
 800093e:	2101      	movs	r1, #1
 8000940:	2014      	movs	r0, #20
 8000942:	f7ff fe4b 	bl	80005dc <write>
	Write_Data(0x11);			//   Default => 0x01 (Disable Dual COM Mode)
 8000946:	2101      	movs	r1, #1
 8000948:	2011      	movs	r0, #17
 800094a:	f7ff fe47 	bl	80005dc <write>
	Write_Command(0xB5);			// General Purpose IO
 800094e:	4621      	mov	r1, r4
 8000950:	20b5      	movs	r0, #181	; 0xb5
 8000952:	f7ff fe43 	bl	80005dc <write>
	Write_Data(d);			//   Default => 0x0A (GPIO Pins output Low Level.)
 8000956:	4620      	mov	r0, r4
 8000958:	2101      	movs	r1, #1
 800095a:	f7ff fe3f 	bl	80005dc <write>
	Write_Command(0xAB);			// Function Selection
 800095e:	4621      	mov	r1, r4
 8000960:	20ab      	movs	r0, #171	; 0xab
 8000962:	f7ff fe3b 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0x01
 8000966:	2101      	movs	r1, #1
 8000968:	4608      	mov	r0, r1
 800096a:	f7ff fe37 	bl	80005dc <write>
	Write_Command(0xB4);			// Display Enhancement
 800096e:	4621      	mov	r1, r4
 8000970:	20b4      	movs	r0, #180	; 0xb4
 8000972:	f7ff fe33 	bl	80005dc <write>
	Write_Data(0xA0 | a);			//   Default => 0xA2
 8000976:	2101      	movs	r1, #1
 8000978:	20a0      	movs	r0, #160	; 0xa0
 800097a:	f7ff fe2f 	bl	80005dc <write>
	Write_Data(0x05 | b);			//   Default => 0xB5
 800097e:	2101      	movs	r1, #1
 8000980:	20fd      	movs	r0, #253	; 0xfd
 8000982:	f7ff fe2b 	bl	80005dc <write>
	Write_Command(0xC1);			// Set Contrast Current
 8000986:	4621      	mov	r1, r4
 8000988:	20c1      	movs	r0, #193	; 0xc1
 800098a:	f7ff fe27 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0x7F
 800098e:	2101      	movs	r1, #1
 8000990:	209f      	movs	r0, #159	; 0x9f
 8000992:	f7ff fe23 	bl	80005dc <write>
	Write_Command(0xC7);			// Master Contrast Current Control
 8000996:	4621      	mov	r1, r4
 8000998:	20c7      	movs	r0, #199	; 0xc7
 800099a:	f7ff fe1f 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0x0f (Maximum)
 800099e:	2101      	movs	r1, #1
 80009a0:	200f      	movs	r0, #15
 80009a2:	f7ff fe1b 	bl	80005dc <write>
	Write_Command(0xB8);			// Set Gray Scale Table
 80009a6:	4621      	mov	r1, r4
 80009a8:	20b8      	movs	r0, #184	; 0xb8
 80009aa:	f7ff fe17 	bl	80005dc <write>
	Write_Data(0x0C);			//   Gray Scale Level 1
 80009ae:	2101      	movs	r1, #1
 80009b0:	200c      	movs	r0, #12
 80009b2:	f7ff fe13 	bl	80005dc <write>
	Write_Data(0x18);			//   Gray Scale Level 2
 80009b6:	2101      	movs	r1, #1
 80009b8:	2018      	movs	r0, #24
 80009ba:	f7ff fe0f 	bl	80005dc <write>
	Write_Data(0x24);			//   Gray Scale Level 3
 80009be:	2101      	movs	r1, #1
 80009c0:	2024      	movs	r0, #36	; 0x24
 80009c2:	f7ff fe0b 	bl	80005dc <write>
	Write_Data(0x30);			//   Gray Scale Level 4
 80009c6:	2101      	movs	r1, #1
 80009c8:	2030      	movs	r0, #48	; 0x30
 80009ca:	f7ff fe07 	bl	80005dc <write>
	Write_Data(0x3C);			//   Gray Scale Level 5
 80009ce:	2101      	movs	r1, #1
 80009d0:	203c      	movs	r0, #60	; 0x3c
 80009d2:	f7ff fe03 	bl	80005dc <write>
	Write_Data(0x48);			//   Gray Scale Level 6
 80009d6:	2101      	movs	r1, #1
 80009d8:	2048      	movs	r0, #72	; 0x48
 80009da:	f7ff fdff 	bl	80005dc <write>
	Write_Data(0x54);			//   Gray Scale Level 7
 80009de:	2101      	movs	r1, #1
 80009e0:	2054      	movs	r0, #84	; 0x54
 80009e2:	f7ff fdfb 	bl	80005dc <write>
	Write_Data(0x60);			//   Gray Scale Level 8
 80009e6:	2101      	movs	r1, #1
 80009e8:	2060      	movs	r0, #96	; 0x60
 80009ea:	f7ff fdf7 	bl	80005dc <write>
	Write_Data(0x6C);			//   Gray Scale Level 9
 80009ee:	2101      	movs	r1, #1
 80009f0:	206c      	movs	r0, #108	; 0x6c
 80009f2:	f7ff fdf3 	bl	80005dc <write>
	Write_Data(0x78);			//   Gray Scale Level 10
 80009f6:	2101      	movs	r1, #1
 80009f8:	2078      	movs	r0, #120	; 0x78
 80009fa:	f7ff fdef 	bl	80005dc <write>
	Write_Data(0x84);			//   Gray Scale Level 11
 80009fe:	2101      	movs	r1, #1
 8000a00:	2084      	movs	r0, #132	; 0x84
 8000a02:	f7ff fdeb 	bl	80005dc <write>
	Write_Data(0x90);			//   Gray Scale Level 12
 8000a06:	2101      	movs	r1, #1
 8000a08:	2090      	movs	r0, #144	; 0x90
 8000a0a:	f7ff fde7 	bl	80005dc <write>
	Write_Data(0x9C);			//   Gray Scale Level 13
 8000a0e:	2101      	movs	r1, #1
 8000a10:	209c      	movs	r0, #156	; 0x9c
 8000a12:	f7ff fde3 	bl	80005dc <write>
	Write_Data(0xA8);			//   Gray Scale Level 14
 8000a16:	2101      	movs	r1, #1
 8000a18:	20a8      	movs	r0, #168	; 0xa8
 8000a1a:	f7ff fddf 	bl	80005dc <write>
	Write_Data(0xB4);			//   Gray Scale Level 15
 8000a1e:	2101      	movs	r1, #1
 8000a20:	20b4      	movs	r0, #180	; 0xb4
 8000a22:	f7ff fddb 	bl	80005dc <write>
	Write_Command(0x00);			// Enable Gray Scale Table
 8000a26:	4621      	mov	r1, r4
 8000a28:	4620      	mov	r0, r4
 8000a2a:	f7ff fdd7 	bl	80005dc <write>
	Write_Command(0xB1);// Phase 1 (Reset) & Phase 2 (Pre-Charge) Period Adjustment
 8000a2e:	4621      	mov	r1, r4
 8000a30:	20b1      	movs	r0, #177	; 0xb1
 8000a32:	f7ff fdd3 	bl	80005dc <write>
	Write_Data(d);//   Default => 0x74 (7 Display Clocks [Phase 2] / 9 Display Clocks [Phase 1])
 8000a36:	2101      	movs	r1, #1
 8000a38:	20e2      	movs	r0, #226	; 0xe2
 8000a3a:	f7ff fdcf 	bl	80005dc <write>
	Write_Command(0xD1);			// Display Enhancement
 8000a3e:	4621      	mov	r1, r4
 8000a40:	20d1      	movs	r0, #209	; 0xd1
 8000a42:	f7ff fdcb 	bl	80005dc <write>
	Write_Data(0x82 | d);			//   Default => 0xA2
 8000a46:	2101      	movs	r1, #1
 8000a48:	20a2      	movs	r0, #162	; 0xa2
 8000a4a:	f7ff fdc7 	bl	80005dc <write>
	Write_Data(0x20);
 8000a4e:	2101      	movs	r1, #1
 8000a50:	2020      	movs	r0, #32
 8000a52:	f7ff fdc3 	bl	80005dc <write>
	Write_Command(0xBB);			// Set Pre-Charge Voltage Level
 8000a56:	4621      	mov	r1, r4
 8000a58:	20bb      	movs	r0, #187	; 0xbb
 8000a5a:	f7ff fdbf 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0x17 (0.50*VCC)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	201f      	movs	r0, #31
 8000a62:	f7ff fdbb 	bl	80005dc <write>
	Write_Command(0xB6);			// Set Second Pre-Charge Period
 8000a66:	4621      	mov	r1, r4
 8000a68:	20b6      	movs	r0, #182	; 0xb6
 8000a6a:	f7ff fdb7 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0x08 (8 Display Clocks)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2008      	movs	r0, #8
 8000a72:	f7ff fdb3 	bl	80005dc <write>
	Write_Command(0xBE);			// Set COM Deselect Voltage Level
 8000a76:	4621      	mov	r1, r4
 8000a78:	20be      	movs	r0, #190	; 0xbe
 8000a7a:	f7ff fdaf 	bl	80005dc <write>
	Write_Data(d);				//   Default => 0x04 (0.80*VCC)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	2007      	movs	r0, #7
 8000a82:	f7ff fdab 	bl	80005dc <write>
	Write_Command(0xA4 | d);			// Set Display Mode
 8000a86:	4621      	mov	r1, r4
 8000a88:	20a6      	movs	r0, #166	; 0xa6
 8000a8a:	f7ff fda7 	bl	80005dc <write>
	Write_Command(0xA8 | a);
 8000a8e:	4621      	mov	r1, r4
 8000a90:	20a9      	movs	r0, #169	; 0xa9
 8000a92:	f7ff fda3 	bl	80005dc <write>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
	Set_VCOMH(0x07);	// Set Common Pins Deselect Voltage Level as 0.86*VCC
	Set_Display_Mode(0x02);			// Normal Display Mode (0x00/0x01/0x02/0x03)
	Set_Partial_Display(0x01, 0x00, 0x00);	// Disable Partial Display

	OLED_Clear();				// Clear Screen
 8000a96:	f7ff fe41 	bl	800071c <OLED_Clear>
	Write_Command(0xAE | d);			// Set Display On/Off
 8000a9a:	4621      	mov	r1, r4
 8000a9c:	20af      	movs	r0, #175	; 0xaf
 8000a9e:	f7ff fd9d 	bl	80005dc <write>

	Set_Display_On_Off(0x01);		// Display On (0x00/0x01)

}
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd70      	pop	{r4, r5, r6, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40010c00 	.word	0x40010c00
 8000aac:	20002104 	.word	0x20002104

08000ab0 <RotaryEcncorder_Init>:
	}
	return button_state;

}

void RotaryEcncorder_Init() {
 8000ab0:	b510      	push	{r4, lr}
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ab2:	4c05      	ldr	r4, [pc, #20]	; (8000ac8 <RotaryEcncorder_Init+0x18>)
 8000ab4:	2118      	movs	r1, #24
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	f000 fdc1 	bl	800163e <HAL_TIM_Encoder_Start>
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//   設定旋轉編碼器數值
//   count:設定值範圍-32767~32767
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
int32_t RotaryEcncorder_SetCount(int32_t count) {
	__HAL_TIM_SET_COUNTER(&htim2,32767+count);
 8000abc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ac4:	bd10      	pop	{r4, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000215c 	.word	0x2000215c

08000acc <RotaryEcncorder_SetCount>:
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <RotaryEcncorder_SetCount+0x10>)
 8000ace:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	307f      	adds	r0, #127	; 0x7f
 8000ad6:	6258      	str	r0, [r3, #36]	; 0x24
}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000215c 	.word	0x2000215c

08000ae0 <RotaryEcncorder_SetRange>:
	}

	if(min < -32767)min = -32767;
	if(max > 32767)max = 32767;

	range_min = min;
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <RotaryEcncorder_SetRange+0x24>)
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <RotaryEcncorder_SetRange+0x28>)
 8000ae4:	4281      	cmp	r1, r0
 8000ae6:	bfb8      	it	lt
 8000ae8:	4601      	movlt	r1, r0
 8000aea:	4290      	cmp	r0, r2
 8000aec:	bfac      	ite	ge
 8000aee:	6018      	strge	r0, [r3, #0]
 8000af0:	601a      	strlt	r2, [r3, #0]
	range_max = max;
 8000af2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <RotaryEcncorder_SetRange+0x2c>)
 8000af8:	4291      	cmp	r1, r2
 8000afa:	bfd4      	ite	le
 8000afc:	6019      	strle	r1, [r3, #0]
 8000afe:	601a      	strgt	r2, [r3, #0]
}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	ffff8001 	.word	0xffff8001
 8000b08:	200020f0 	.word	0x200020f0
 8000b0c:	20000004 	.word	0x20000004

08000b10 <RotaryEcncorder_GetCount>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//   取得旋轉編碼器計數值
//   返回值範圍0~32767
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
int32_t RotaryEcncorder_GetCount() {
 8000b10:	b508      	push	{r3, lr}
	int32_t count;

	count = __HAL_TIM_GET_COUNTER(&htim2);  //value: cw:0->65535  or  ccw:0<-65535<-0
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <RotaryEcncorder_GetCount+0x2c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	6a58      	ldr	r0, [r3, #36]	; 0x24
	count -= 32767; //-32767 ~ 32767
	if(count > range_max)
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <RotaryEcncorder_GetCount+0x30>)
	count -= 32767; //-32767 ~ 32767
 8000b1a:	f5a0 40ff 	sub.w	r0, r0, #32640	; 0x7f80
	if(count > range_max)
 8000b1e:	681a      	ldr	r2, [r3, #0]
	count -= 32767; //-32767 ~ 32767
 8000b20:	387f      	subs	r0, #127	; 0x7f
	if(count > range_max)
 8000b22:	4290      	cmp	r0, r2
 8000b24:	dd04      	ble.n	8000b30 <RotaryEcncorder_GetCount+0x20>
		RotaryEcncorder_SetCount(count);
	}
	else if(count < range_min)
	{
		count = range_min;
		RotaryEcncorder_SetCount(count);
 8000b26:	4610      	mov	r0, r2
 8000b28:	f7ff ffd0 	bl	8000acc <RotaryEcncorder_SetCount>
 8000b2c:	4610      	mov	r0, r2
	}
	return count;
 8000b2e:	e003      	b.n	8000b38 <RotaryEcncorder_GetCount+0x28>
	else if(count < range_min)
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <RotaryEcncorder_GetCount+0x34>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4290      	cmp	r0, r2
 8000b36:	dbf6      	blt.n	8000b26 <RotaryEcncorder_GetCount+0x16>
}
 8000b38:	bd08      	pop	{r3, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000215c 	.word	0x2000215c
 8000b40:	20000004 	.word	0x20000004
 8000b44:	200020f0 	.word	0x200020f0

08000b48 <RotaryEcncorder_GetState>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//   取得旋轉編碼器狀態
//   返回值範圍-32767~32767
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Rotary_state RotaryEcncorder_GetState() {
 8000b48:	b508      	push	{r3, lr}
	Rotary_state rstate;
	current_count = RotaryEcncorder_GetCount();  //value range: -32767~32767
 8000b4a:	f7ff ffe1 	bl	8000b10 <RotaryEcncorder_GetCount>
	if (current_count - last_count > 0) {
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <RotaryEcncorder_GetState+0x24>)
	current_count = RotaryEcncorder_GetCount();  //value range: -32767~32767
 8000b50:	4601      	mov	r1, r0
	if (current_count - last_count > 0) {
 8000b52:	6813      	ldr	r3, [r2, #0]
 8000b54:	1ac3      	subs	r3, r0, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	dc03      	bgt.n	8000b62 <RotaryEcncorder_GetState+0x1a>
		rstate = state_clock_wise;
	} else if (current_count - last_count < 0) {
 8000b5a:	d104      	bne.n	8000b66 <RotaryEcncorder_GetState+0x1e>
		rstate = state_counter_clock_wise;
	} else {
		rstate = state_no_changed;
 8000b5c:	4618      	mov	r0, r3
	}
	last_count = current_count;
 8000b5e:	6011      	str	r1, [r2, #0]
	return rstate;
}
 8000b60:	bd08      	pop	{r3, pc}
		rstate = state_clock_wise;
 8000b62:	2001      	movs	r0, #1
 8000b64:	e7fb      	b.n	8000b5e <RotaryEcncorder_GetState+0x16>
		rstate = state_counter_clock_wise;
 8000b66:	2002      	movs	r0, #2
 8000b68:	e7f9      	b.n	8000b5e <RotaryEcncorder_GetState+0x16>
 8000b6a:	bf00      	nop
 8000b6c:	200020ec 	.word	0x200020ec

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_InitTick+0x3c>)
{
 8000b74:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b76:	7818      	ldrb	r0, [r3, #0]
 8000b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b80:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <HAL_InitTick+0x40>)
 8000b82:	6810      	ldr	r0, [r2, #0]
 8000b84:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b88:	f000 f892 	bl	8000cb0 <HAL_SYSTICK_Config>
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	b958      	cbnz	r0, 8000ba8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b90:	2d0f      	cmp	r5, #15
 8000b92:	d809      	bhi.n	8000ba8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	4602      	mov	r2, r0
 8000b96:	4629      	mov	r1, r5
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f854 	bl	8000c48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <HAL_InitTick+0x44>)
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	601d      	str	r5, [r3, #0]
 8000ba6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ba8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000baa:	bd38      	pop	{r3, r4, r5, pc}
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	2000000c 	.word	0x2000000c

08000bb8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_Init+0x20>)
{
 8000bba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc6:	f000 f82d 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff ffd0 	bl	8000b70 <HAL_InitTick>
  HAL_MspInit();
 8000bd0:	f7ff fc3e 	bl	8000450 <HAL_MspInit>
}
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	bd08      	pop	{r3, pc}
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bdc:	4a03      	ldr	r2, [pc, #12]	; (8000bec <HAL_IncTick+0x10>)
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <HAL_IncTick+0x14>)
 8000be0:	6811      	ldr	r1, [r2, #0]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	440b      	add	r3, r1
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2000219c 	.word	0x2000219c
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bf4:	4b01      	ldr	r3, [pc, #4]	; (8000bfc <HAL_GetTick+0x8>)
 8000bf6:	6818      	ldr	r0, [r3, #0]
}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000219c 	.word	0x2000219c

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b538      	push	{r3, r4, r5, lr}
 8000c02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff fff6 	bl	8000bf4 <HAL_GetTick>
 8000c08:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	4b04      	ldrne	r3, [pc, #16]	; (8000c20 <HAL_Delay+0x20>)
 8000c10:	781b      	ldrbne	r3, [r3, #0]
 8000c12:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c14:	f7ff ffee 	bl	8000bf4 <HAL_GetTick>
 8000c18:	1b40      	subs	r0, r0, r5
 8000c1a:	4284      	cmp	r4, r0
 8000c1c:	d8fa      	bhi.n	8000c14 <HAL_Delay+0x14>
  {
  }
}
 8000c1e:	bd38      	pop	{r3, r4, r5, pc}
 8000c20:	20000008 	.word	0x20000008

08000c24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c26:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c2a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c32:	041b      	lsls	r3, r3, #16
 8000c34:	0c1b      	lsrs	r3, r3, #16
 8000c36:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000c3e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c40:	60d3      	str	r3, [r2, #12]
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b530      	push	{r4, r5, lr}
 8000c4c:	68dc      	ldr	r4, [r3, #12]
 8000c4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c52:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	bf28      	it	cs
 8000c5c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c64:	bf98      	it	ls
 8000c66:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	fa05 f303 	lsl.w	r3, r5, r3
 8000c6c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c70:	bf88      	it	hi
 8000c72:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4019      	ands	r1, r3
 8000c76:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	fa05 f404 	lsl.w	r4, r5, r4
 8000c7c:	3c01      	subs	r4, #1
 8000c7e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c80:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c82:	ea42 0201 	orr.w	r2, r2, r1
 8000c86:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	bfaf      	iteee	ge
 8000c8c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	4b06      	ldrlt	r3, [pc, #24]	; (8000cac <HAL_NVIC_SetPriority+0x64>)
 8000c92:	f000 000f 	andlt.w	r0, r0, #15
 8000c96:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	bfa5      	ittet	ge
 8000c9a:	b2d2      	uxtbge	r2, r2
 8000c9c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ca6:	bd30      	pop	{r4, r5, pc}
 8000ca8:	e000ed00 	.word	0xe000ed00
 8000cac:	e000ed14 	.word	0xe000ed14

08000cb0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	3801      	subs	r0, #1
 8000cb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cb6:	d20a      	bcs.n	8000cce <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cde:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	bf0c      	ite	eq
 8000ce4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ce8:	f022 0204 	bicne.w	r2, r2, #4
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	4770      	bx	lr
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_SYSTICK_IRQHandler>:
{
 8000cf6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000cf8:	f7ff fffc 	bl	8000cf4 <HAL_SYSTICK_Callback>
 8000cfc:	bd08      	pop	{r3, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000d04:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d06:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d08:	4f6c      	ldr	r7, [pc, #432]	; (8000ebc <HAL_GPIO_Init+0x1bc>)
 8000d0a:	4b6d      	ldr	r3, [pc, #436]	; (8000ec0 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d0c:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000ec8 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000d10:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000ecc <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 8000d14:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d18:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000d1a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1e:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000d22:	45a0      	cmp	r8, r4
 8000d24:	f040 8085 	bne.w	8000e32 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000d28:	684d      	ldr	r5, [r1, #4]
 8000d2a:	2d12      	cmp	r5, #18
 8000d2c:	f000 80b7 	beq.w	8000e9e <HAL_GPIO_Init+0x19e>
 8000d30:	f200 808d 	bhi.w	8000e4e <HAL_GPIO_Init+0x14e>
 8000d34:	2d02      	cmp	r5, #2
 8000d36:	f000 80af 	beq.w	8000e98 <HAL_GPIO_Init+0x198>
 8000d3a:	f200 8081 	bhi.w	8000e40 <HAL_GPIO_Init+0x140>
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	f000 8091 	beq.w	8000e66 <HAL_GPIO_Init+0x166>
 8000d44:	2d01      	cmp	r5, #1
 8000d46:	f000 80a5 	beq.w	8000e94 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d4a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d4e:	2cff      	cmp	r4, #255	; 0xff
 8000d50:	bf93      	iteet	ls
 8000d52:	4682      	movls	sl, r0
 8000d54:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000d58:	3d08      	subhi	r5, #8
 8000d5a:	f8d0 b000 	ldrls.w	fp, [r0]
 8000d5e:	bf92      	itee	ls
 8000d60:	00b5      	lslls	r5, r6, #2
 8000d62:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000d66:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d68:	fa09 f805 	lsl.w	r8, r9, r5
 8000d6c:	ea2b 0808 	bic.w	r8, fp, r8
 8000d70:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d74:	bf88      	it	hi
 8000d76:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d7a:	ea48 0505 	orr.w	r5, r8, r5
 8000d7e:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d82:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000d86:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000d8a:	d052      	beq.n	8000e32 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8c:	69bd      	ldr	r5, [r7, #24]
 8000d8e:	f026 0803 	bic.w	r8, r6, #3
 8000d92:	f045 0501 	orr.w	r5, r5, #1
 8000d96:	61bd      	str	r5, [r7, #24]
 8000d98:	69bd      	ldr	r5, [r7, #24]
 8000d9a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000d9e:	f005 0501 	and.w	r5, r5, #1
 8000da2:	9501      	str	r5, [sp, #4]
 8000da4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000da8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dac:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000dae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000db2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000db6:	fa09 f90b 	lsl.w	r9, r9, fp
 8000dba:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dbe:	4d41      	ldr	r5, [pc, #260]	; (8000ec4 <HAL_GPIO_Init+0x1c4>)
 8000dc0:	42a8      	cmp	r0, r5
 8000dc2:	d071      	beq.n	8000ea8 <HAL_GPIO_Init+0x1a8>
 8000dc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dc8:	42a8      	cmp	r0, r5
 8000dca:	d06f      	beq.n	8000eac <HAL_GPIO_Init+0x1ac>
 8000dcc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dd0:	42a8      	cmp	r0, r5
 8000dd2:	d06d      	beq.n	8000eb0 <HAL_GPIO_Init+0x1b0>
 8000dd4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dd8:	42a8      	cmp	r0, r5
 8000dda:	d06b      	beq.n	8000eb4 <HAL_GPIO_Init+0x1b4>
 8000ddc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000de0:	42a8      	cmp	r0, r5
 8000de2:	d069      	beq.n	8000eb8 <HAL_GPIO_Init+0x1b8>
 8000de4:	4570      	cmp	r0, lr
 8000de6:	bf0c      	ite	eq
 8000de8:	2505      	moveq	r5, #5
 8000dea:	2506      	movne	r5, #6
 8000dec:	fa05 f50b 	lsl.w	r5, r5, fp
 8000df0:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000df4:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfa:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000dfe:	bf14      	ite	ne
 8000e00:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e02:	43a5      	biceq	r5, r4
 8000e04:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e06:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e08:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000e0c:	bf14      	ite	ne
 8000e0e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e10:	43a5      	biceq	r5, r4
 8000e12:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e14:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e16:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e1a:	bf14      	ite	ne
 8000e1c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e1e:	43a5      	biceq	r5, r4
 8000e20:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e22:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e24:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e28:	bf14      	ite	ne
 8000e2a:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e2c:	ea25 0404 	biceq.w	r4, r5, r4
 8000e30:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	3601      	adds	r6, #1
 8000e34:	2e10      	cmp	r6, #16
 8000e36:	f47f af6d 	bne.w	8000d14 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 8000e3a:	b003      	add	sp, #12
 8000e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000e40:	2d03      	cmp	r5, #3
 8000e42:	d025      	beq.n	8000e90 <HAL_GPIO_Init+0x190>
 8000e44:	2d11      	cmp	r5, #17
 8000e46:	d180      	bne.n	8000d4a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e48:	68ca      	ldr	r2, [r1, #12]
 8000e4a:	3204      	adds	r2, #4
          break;
 8000e4c:	e77d      	b.n	8000d4a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000e4e:	4565      	cmp	r5, ip
 8000e50:	d009      	beq.n	8000e66 <HAL_GPIO_Init+0x166>
 8000e52:	d812      	bhi.n	8000e7a <HAL_GPIO_Init+0x17a>
 8000e54:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000ed0 <HAL_GPIO_Init+0x1d0>
 8000e58:	454d      	cmp	r5, r9
 8000e5a:	d004      	beq.n	8000e66 <HAL_GPIO_Init+0x166>
 8000e5c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000e60:	454d      	cmp	r5, r9
 8000e62:	f47f af72 	bne.w	8000d4a <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e66:	688a      	ldr	r2, [r1, #8]
 8000e68:	b1e2      	cbz	r2, 8000ea4 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e6a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000e6c:	bf0c      	ite	eq
 8000e6e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000e72:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e76:	2208      	movs	r2, #8
 8000e78:	e767      	b.n	8000d4a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000e7a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000ed4 <HAL_GPIO_Init+0x1d4>
 8000e7e:	454d      	cmp	r5, r9
 8000e80:	d0f1      	beq.n	8000e66 <HAL_GPIO_Init+0x166>
 8000e82:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000e86:	454d      	cmp	r5, r9
 8000e88:	d0ed      	beq.n	8000e66 <HAL_GPIO_Init+0x166>
 8000e8a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000e8e:	e7e7      	b.n	8000e60 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e90:	2200      	movs	r2, #0
 8000e92:	e75a      	b.n	8000d4a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e94:	68ca      	ldr	r2, [r1, #12]
          break;
 8000e96:	e758      	b.n	8000d4a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e98:	68ca      	ldr	r2, [r1, #12]
 8000e9a:	3208      	adds	r2, #8
          break;
 8000e9c:	e755      	b.n	8000d4a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e9e:	68ca      	ldr	r2, [r1, #12]
 8000ea0:	320c      	adds	r2, #12
          break;
 8000ea2:	e752      	b.n	8000d4a <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	e750      	b.n	8000d4a <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea8:	2500      	movs	r5, #0
 8000eaa:	e79f      	b.n	8000dec <HAL_GPIO_Init+0xec>
 8000eac:	2501      	movs	r5, #1
 8000eae:	e79d      	b.n	8000dec <HAL_GPIO_Init+0xec>
 8000eb0:	2502      	movs	r5, #2
 8000eb2:	e79b      	b.n	8000dec <HAL_GPIO_Init+0xec>
 8000eb4:	2503      	movs	r5, #3
 8000eb6:	e799      	b.n	8000dec <HAL_GPIO_Init+0xec>
 8000eb8:	2504      	movs	r5, #4
 8000eba:	e797      	b.n	8000dec <HAL_GPIO_Init+0xec>
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010400 	.word	0x40010400
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40011c00 	.word	0x40011c00
 8000ecc:	10210000 	.word	0x10210000
 8000ed0:	10110000 	.word	0x10110000
 8000ed4:	10310000 	.word	0x10310000

08000ed8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed8:	b10a      	cbz	r2, 8000ede <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eda:	6101      	str	r1, [r0, #16]
 8000edc:	4770      	bx	lr
 8000ede:	0409      	lsls	r1, r1, #16
 8000ee0:	e7fb      	b.n	8000eda <HAL_GPIO_WritePin+0x2>
	...

08000ee4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee4:	6803      	ldr	r3, [r0, #0]
{
 8000ee6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	07db      	lsls	r3, r3, #31
{
 8000eec:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	d410      	bmi.n	8000f12 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef0:	682b      	ldr	r3, [r5, #0]
 8000ef2:	079f      	lsls	r7, r3, #30
 8000ef4:	d45e      	bmi.n	8000fb4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	0719      	lsls	r1, r3, #28
 8000efa:	f100 8095 	bmi.w	8001028 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000efe:	682b      	ldr	r3, [r5, #0]
 8000f00:	075a      	lsls	r2, r3, #29
 8000f02:	f100 80bf 	bmi.w	8001084 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f06:	69ea      	ldr	r2, [r5, #28]
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	f040 812d 	bne.w	8001168 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000f0e:	2000      	movs	r0, #0
 8000f10:	e014      	b.n	8000f3c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f12:	4c90      	ldr	r4, [pc, #576]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f14:	6863      	ldr	r3, [r4, #4]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d007      	beq.n	8000f2e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f1e:	6863      	ldr	r3, [r4, #4]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d10c      	bne.n	8000f42 <HAL_RCC_OscConfig+0x5e>
 8000f28:	6863      	ldr	r3, [r4, #4]
 8000f2a:	03de      	lsls	r6, r3, #15
 8000f2c:	d509      	bpl.n	8000f42 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2e:	6823      	ldr	r3, [r4, #0]
 8000f30:	039c      	lsls	r4, r3, #14
 8000f32:	d5dd      	bpl.n	8000ef0 <HAL_RCC_OscConfig+0xc>
 8000f34:	686b      	ldr	r3, [r5, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1da      	bne.n	8000ef0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000f3a:	2001      	movs	r0, #1
}
 8000f3c:	b002      	add	sp, #8
 8000f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f42:	686b      	ldr	r3, [r5, #4]
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f48:	d110      	bne.n	8000f6c <HAL_RCC_OscConfig+0x88>
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f52:	f7ff fe4f 	bl	8000bf4 <HAL_GetTick>
 8000f56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	0398      	lsls	r0, r3, #14
 8000f5c:	d4c8      	bmi.n	8000ef0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fe49 	bl	8000bf4 <HAL_GetTick>
 8000f62:	1b80      	subs	r0, r0, r6
 8000f64:	2864      	cmp	r0, #100	; 0x64
 8000f66:	d9f7      	bls.n	8000f58 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000f68:	2003      	movs	r0, #3
 8000f6a:	e7e7      	b.n	8000f3c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6c:	b99b      	cbnz	r3, 8000f96 <HAL_RCC_OscConfig+0xb2>
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f74:	6023      	str	r3, [r4, #0]
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fe39 	bl	8000bf4 <HAL_GetTick>
 8000f82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	0399      	lsls	r1, r3, #14
 8000f88:	d5b2      	bpl.n	8000ef0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fe33 	bl	8000bf4 <HAL_GetTick>
 8000f8e:	1b80      	subs	r0, r0, r6
 8000f90:	2864      	cmp	r0, #100	; 0x64
 8000f92:	d9f7      	bls.n	8000f84 <HAL_RCC_OscConfig+0xa0>
 8000f94:	e7e8      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	d103      	bne.n	8000fa6 <HAL_RCC_OscConfig+0xc2>
 8000f9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa2:	6023      	str	r3, [r4, #0]
 8000fa4:	e7d1      	b.n	8000f4a <HAL_RCC_OscConfig+0x66>
 8000fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000faa:	6023      	str	r3, [r4, #0]
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb2:	e7cd      	b.n	8000f50 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fb4:	4c67      	ldr	r4, [pc, #412]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	6863      	ldr	r3, [r4, #4]
 8000fb8:	f013 0f0c 	tst.w	r3, #12
 8000fbc:	d007      	beq.n	8000fce <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fbe:	6863      	ldr	r3, [r4, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d110      	bne.n	8000fea <HAL_RCC_OscConfig+0x106>
 8000fc8:	6863      	ldr	r3, [r4, #4]
 8000fca:	03da      	lsls	r2, r3, #15
 8000fcc:	d40d      	bmi.n	8000fea <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	079b      	lsls	r3, r3, #30
 8000fd2:	d502      	bpl.n	8000fda <HAL_RCC_OscConfig+0xf6>
 8000fd4:	692b      	ldr	r3, [r5, #16]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d1af      	bne.n	8000f3a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	696a      	ldr	r2, [r5, #20]
 8000fde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fe2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fe6:	6023      	str	r3, [r4, #0]
 8000fe8:	e785      	b.n	8000ef6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fea:	692a      	ldr	r2, [r5, #16]
 8000fec:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <HAL_RCC_OscConfig+0x274>)
 8000fee:	b16a      	cbz	r2, 800100c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fdfe 	bl	8000bf4 <HAL_GetTick>
 8000ff8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	079f      	lsls	r7, r3, #30
 8000ffe:	d4ec      	bmi.n	8000fda <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001000:	f7ff fdf8 	bl	8000bf4 <HAL_GetTick>
 8001004:	1b80      	subs	r0, r0, r6
 8001006:	2802      	cmp	r0, #2
 8001008:	d9f7      	bls.n	8000ffa <HAL_RCC_OscConfig+0x116>
 800100a:	e7ad      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800100c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800100e:	f7ff fdf1 	bl	8000bf4 <HAL_GetTick>
 8001012:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	0798      	lsls	r0, r3, #30
 8001018:	f57f af6d 	bpl.w	8000ef6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800101c:	f7ff fdea 	bl	8000bf4 <HAL_GetTick>
 8001020:	1b80      	subs	r0, r0, r6
 8001022:	2802      	cmp	r0, #2
 8001024:	d9f6      	bls.n	8001014 <HAL_RCC_OscConfig+0x130>
 8001026:	e79f      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001028:	69aa      	ldr	r2, [r5, #24]
 800102a:	4c4a      	ldr	r4, [pc, #296]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 800102c:	4b4b      	ldr	r3, [pc, #300]	; (800115c <HAL_RCC_OscConfig+0x278>)
 800102e:	b1da      	cbz	r2, 8001068 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001034:	f7ff fdde 	bl	8000bf4 <HAL_GetTick>
 8001038:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800103c:	079b      	lsls	r3, r3, #30
 800103e:	d50d      	bpl.n	800105c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001040:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001044:	4b46      	ldr	r3, [pc, #280]	; (8001160 <HAL_RCC_OscConfig+0x27c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	fbb3 f3f2 	udiv	r3, r3, r2
 800104c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800104e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001050:	9b01      	ldr	r3, [sp, #4]
 8001052:	1e5a      	subs	r2, r3, #1
 8001054:	9201      	str	r2, [sp, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f9      	bne.n	800104e <HAL_RCC_OscConfig+0x16a>
 800105a:	e750      	b.n	8000efe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800105c:	f7ff fdca 	bl	8000bf4 <HAL_GetTick>
 8001060:	1b80      	subs	r0, r0, r6
 8001062:	2802      	cmp	r0, #2
 8001064:	d9e9      	bls.n	800103a <HAL_RCC_OscConfig+0x156>
 8001066:	e77f      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001068:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800106a:	f7ff fdc3 	bl	8000bf4 <HAL_GetTick>
 800106e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001072:	079f      	lsls	r7, r3, #30
 8001074:	f57f af43 	bpl.w	8000efe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001078:	f7ff fdbc 	bl	8000bf4 <HAL_GetTick>
 800107c:	1b80      	subs	r0, r0, r6
 800107e:	2802      	cmp	r0, #2
 8001080:	d9f6      	bls.n	8001070 <HAL_RCC_OscConfig+0x18c>
 8001082:	e771      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001084:	4c33      	ldr	r4, [pc, #204]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8001086:	69e3      	ldr	r3, [r4, #28]
 8001088:	00d8      	lsls	r0, r3, #3
 800108a:	d424      	bmi.n	80010d6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800108c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	69e3      	ldr	r3, [r4, #28]
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	61e3      	str	r3, [r4, #28]
 8001096:	69e3      	ldr	r3, [r4, #28]
 8001098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a0:	4e30      	ldr	r6, [pc, #192]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 80010a2:	6833      	ldr	r3, [r6, #0]
 80010a4:	05d9      	lsls	r1, r3, #23
 80010a6:	d518      	bpl.n	80010da <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a8:	68eb      	ldr	r3, [r5, #12]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d126      	bne.n	80010fc <HAL_RCC_OscConfig+0x218>
 80010ae:	6a23      	ldr	r3, [r4, #32]
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010b6:	f7ff fd9d 	bl	8000bf4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ba:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010be:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c0:	6a23      	ldr	r3, [r4, #32]
 80010c2:	079b      	lsls	r3, r3, #30
 80010c4:	d53f      	bpl.n	8001146 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80010c6:	2f00      	cmp	r7, #0
 80010c8:	f43f af1d 	beq.w	8000f06 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010cc:	69e3      	ldr	r3, [r4, #28]
 80010ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d2:	61e3      	str	r3, [r4, #28]
 80010d4:	e717      	b.n	8000f06 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80010d6:	2700      	movs	r7, #0
 80010d8:	e7e2      	b.n	80010a0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010da:	6833      	ldr	r3, [r6, #0]
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010e2:	f7ff fd87 	bl	8000bf4 <HAL_GetTick>
 80010e6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e8:	6833      	ldr	r3, [r6, #0]
 80010ea:	05da      	lsls	r2, r3, #23
 80010ec:	d4dc      	bmi.n	80010a8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ee:	f7ff fd81 	bl	8000bf4 <HAL_GetTick>
 80010f2:	eba0 0008 	sub.w	r0, r0, r8
 80010f6:	2864      	cmp	r0, #100	; 0x64
 80010f8:	d9f6      	bls.n	80010e8 <HAL_RCC_OscConfig+0x204>
 80010fa:	e735      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fc:	b9ab      	cbnz	r3, 800112a <HAL_RCC_OscConfig+0x246>
 80010fe:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001100:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6223      	str	r3, [r4, #32]
 800110a:	6a23      	ldr	r3, [r4, #32]
 800110c:	f023 0304 	bic.w	r3, r3, #4
 8001110:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001112:	f7ff fd6f 	bl	8000bf4 <HAL_GetTick>
 8001116:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001118:	6a23      	ldr	r3, [r4, #32]
 800111a:	0798      	lsls	r0, r3, #30
 800111c:	d5d3      	bpl.n	80010c6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff fd69 	bl	8000bf4 <HAL_GetTick>
 8001122:	1b80      	subs	r0, r0, r6
 8001124:	4540      	cmp	r0, r8
 8001126:	d9f7      	bls.n	8001118 <HAL_RCC_OscConfig+0x234>
 8001128:	e71e      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800112a:	2b05      	cmp	r3, #5
 800112c:	6a23      	ldr	r3, [r4, #32]
 800112e:	d103      	bne.n	8001138 <HAL_RCC_OscConfig+0x254>
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6223      	str	r3, [r4, #32]
 8001136:	e7ba      	b.n	80010ae <HAL_RCC_OscConfig+0x1ca>
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	6223      	str	r3, [r4, #32]
 800113e:	6a23      	ldr	r3, [r4, #32]
 8001140:	f023 0304 	bic.w	r3, r3, #4
 8001144:	e7b6      	b.n	80010b4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001146:	f7ff fd55 	bl	8000bf4 <HAL_GetTick>
 800114a:	eba0 0008 	sub.w	r0, r0, r8
 800114e:	42b0      	cmp	r0, r6
 8001150:	d9b6      	bls.n	80010c0 <HAL_RCC_OscConfig+0x1dc>
 8001152:	e709      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
 8001154:	40021000 	.word	0x40021000
 8001158:	42420000 	.word	0x42420000
 800115c:	42420480 	.word	0x42420480
 8001160:	20000000 	.word	0x20000000
 8001164:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001168:	4c22      	ldr	r4, [pc, #136]	; (80011f4 <HAL_RCC_OscConfig+0x310>)
 800116a:	6863      	ldr	r3, [r4, #4]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b08      	cmp	r3, #8
 8001172:	f43f aee2 	beq.w	8000f3a <HAL_RCC_OscConfig+0x56>
 8001176:	2300      	movs	r3, #0
 8001178:	4e1f      	ldr	r6, [pc, #124]	; (80011f8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800117a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800117c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800117e:	d12b      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001180:	f7ff fd38 	bl	8000bf4 <HAL_GetTick>
 8001184:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	0199      	lsls	r1, r3, #6
 800118a:	d41f      	bmi.n	80011cc <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800118c:	6a2b      	ldr	r3, [r5, #32]
 800118e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001192:	d105      	bne.n	80011a0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001194:	6862      	ldr	r2, [r4, #4]
 8001196:	68a9      	ldr	r1, [r5, #8]
 8001198:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800119c:	430a      	orrs	r2, r1
 800119e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80011a2:	6862      	ldr	r2, [r4, #4]
 80011a4:	430b      	orrs	r3, r1
 80011a6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80011aa:	4313      	orrs	r3, r2
 80011ac:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80011ae:	2301      	movs	r3, #1
 80011b0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80011b2:	f7ff fd1f 	bl	8000bf4 <HAL_GetTick>
 80011b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	019a      	lsls	r2, r3, #6
 80011bc:	f53f aea7 	bmi.w	8000f0e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c0:	f7ff fd18 	bl	8000bf4 <HAL_GetTick>
 80011c4:	1b40      	subs	r0, r0, r5
 80011c6:	2802      	cmp	r0, #2
 80011c8:	d9f6      	bls.n	80011b8 <HAL_RCC_OscConfig+0x2d4>
 80011ca:	e6cd      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011cc:	f7ff fd12 	bl	8000bf4 <HAL_GetTick>
 80011d0:	1bc0      	subs	r0, r0, r7
 80011d2:	2802      	cmp	r0, #2
 80011d4:	d9d7      	bls.n	8001186 <HAL_RCC_OscConfig+0x2a2>
 80011d6:	e6c7      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80011d8:	f7ff fd0c 	bl	8000bf4 <HAL_GetTick>
 80011dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	019b      	lsls	r3, r3, #6
 80011e2:	f57f ae94 	bpl.w	8000f0e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e6:	f7ff fd05 	bl	8000bf4 <HAL_GetTick>
 80011ea:	1b40      	subs	r0, r0, r5
 80011ec:	2802      	cmp	r0, #2
 80011ee:	d9f6      	bls.n	80011de <HAL_RCC_OscConfig+0x2fa>
 80011f0:	e6ba      	b.n	8000f68 <HAL_RCC_OscConfig+0x84>
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	42420060 	.word	0x42420060

080011fc <HAL_RCC_GetSysClockFreq>:
{
 80011fc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001200:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001202:	ac02      	add	r4, sp, #8
 8001204:	f103 0510 	add.w	r5, r3, #16
 8001208:	4622      	mov	r2, r4
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	6859      	ldr	r1, [r3, #4]
 800120e:	3308      	adds	r3, #8
 8001210:	c203      	stmia	r2!, {r0, r1}
 8001212:	42ab      	cmp	r3, r5
 8001214:	4614      	mov	r4, r2
 8001216:	d1f7      	bne.n	8001208 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001218:	2301      	movs	r3, #1
 800121a:	f88d 3004 	strb.w	r3, [sp, #4]
 800121e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001220:	4911      	ldr	r1, [pc, #68]	; (8001268 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001222:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001226:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001228:	f003 020c 	and.w	r2, r3, #12
 800122c:	2a08      	cmp	r2, #8
 800122e:	d117      	bne.n	8001260 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001230:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001234:	a806      	add	r0, sp, #24
 8001236:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001238:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800123a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800123e:	d50c      	bpl.n	800125a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001240:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001242:	480a      	ldr	r0, [pc, #40]	; (800126c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001244:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001248:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800124a:	aa06      	add	r2, sp, #24
 800124c:	4413      	add	r3, r2
 800124e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001252:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001256:	b007      	add	sp, #28
 8001258:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_RCC_GetSysClockFreq+0x74>)
 800125c:	4350      	muls	r0, r2
 800125e:	e7fa      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001262:	e7f8      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x5a>
 8001264:	0800210c 	.word	0x0800210c
 8001268:	40021000 	.word	0x40021000
 800126c:	007a1200 	.word	0x007a1200
 8001270:	003d0900 	.word	0x003d0900

08001274 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001274:	4a4d      	ldr	r2, [pc, #308]	; (80013ac <HAL_RCC_ClockConfig+0x138>)
{
 8001276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800127a:	6813      	ldr	r3, [r2, #0]
{
 800127c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	428b      	cmp	r3, r1
{
 8001284:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001286:	d328      	bcc.n	80012da <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001288:	682a      	ldr	r2, [r5, #0]
 800128a:	0791      	lsls	r1, r2, #30
 800128c:	d432      	bmi.n	80012f4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128e:	07d2      	lsls	r2, r2, #31
 8001290:	d438      	bmi.n	8001304 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001292:	4a46      	ldr	r2, [pc, #280]	; (80013ac <HAL_RCC_ClockConfig+0x138>)
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	429e      	cmp	r6, r3
 800129c:	d373      	bcc.n	8001386 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129e:	682a      	ldr	r2, [r5, #0]
 80012a0:	4c43      	ldr	r4, [pc, #268]	; (80013b0 <HAL_RCC_ClockConfig+0x13c>)
 80012a2:	f012 0f04 	tst.w	r2, #4
 80012a6:	d179      	bne.n	800139c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a8:	0713      	lsls	r3, r2, #28
 80012aa:	d506      	bpl.n	80012ba <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	692a      	ldr	r2, [r5, #16]
 80012b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80012b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012b8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ba:	f7ff ff9f 	bl	80011fc <HAL_RCC_GetSysClockFreq>
 80012be:	6863      	ldr	r3, [r4, #4]
 80012c0:	4a3c      	ldr	r2, [pc, #240]	; (80013b4 <HAL_RCC_ClockConfig+0x140>)
 80012c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	40d8      	lsrs	r0, r3
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_RCC_ClockConfig+0x144>)
 80012cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fc4e 	bl	8000b70 <HAL_InitTick>
  return HAL_OK;
 80012d4:	2000      	movs	r0, #0
}
 80012d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012da:	6813      	ldr	r3, [r2, #0]
 80012dc:	f023 0307 	bic.w	r3, r3, #7
 80012e0:	430b      	orrs	r3, r1
 80012e2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012e4:	6813      	ldr	r3, [r2, #0]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	4299      	cmp	r1, r3
 80012ec:	d0cc      	beq.n	8001288 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80012ee:	2001      	movs	r0, #1
 80012f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f4:	492e      	ldr	r1, [pc, #184]	; (80013b0 <HAL_RCC_ClockConfig+0x13c>)
 80012f6:	68a8      	ldr	r0, [r5, #8]
 80012f8:	684b      	ldr	r3, [r1, #4]
 80012fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012fe:	4303      	orrs	r3, r0
 8001300:	604b      	str	r3, [r1, #4]
 8001302:	e7c4      	b.n	800128e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001304:	686a      	ldr	r2, [r5, #4]
 8001306:	4c2a      	ldr	r4, [pc, #168]	; (80013b0 <HAL_RCC_ClockConfig+0x13c>)
 8001308:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130c:	d11c      	bne.n	8001348 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001312:	d0ec      	beq.n	80012ee <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001314:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001316:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800131a:	f023 0303 	bic.w	r3, r3, #3
 800131e:	4313      	orrs	r3, r2
 8001320:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001322:	f7ff fc67 	bl	8000bf4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001326:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001328:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132a:	2b01      	cmp	r3, #1
 800132c:	d114      	bne.n	8001358 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800132e:	6863      	ldr	r3, [r4, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b04      	cmp	r3, #4
 8001336:	d0ac      	beq.n	8001292 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001338:	f7ff fc5c 	bl	8000bf4 <HAL_GetTick>
 800133c:	1bc0      	subs	r0, r0, r7
 800133e:	4540      	cmp	r0, r8
 8001340:	d9f5      	bls.n	800132e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001342:	2003      	movs	r0, #3
 8001344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001348:	2a02      	cmp	r2, #2
 800134a:	d102      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001350:	e7df      	b.n	8001312 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	f013 0f02 	tst.w	r3, #2
 8001356:	e7dc      	b.n	8001312 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001358:	2b02      	cmp	r3, #2
 800135a:	d10f      	bne.n	800137c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800135c:	6863      	ldr	r3, [r4, #4]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b08      	cmp	r3, #8
 8001364:	d095      	beq.n	8001292 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001366:	f7ff fc45 	bl	8000bf4 <HAL_GetTick>
 800136a:	1bc0      	subs	r0, r0, r7
 800136c:	4540      	cmp	r0, r8
 800136e:	d9f5      	bls.n	800135c <HAL_RCC_ClockConfig+0xe8>
 8001370:	e7e7      	b.n	8001342 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001372:	f7ff fc3f 	bl	8000bf4 <HAL_GetTick>
 8001376:	1bc0      	subs	r0, r0, r7
 8001378:	4540      	cmp	r0, r8
 800137a:	d8e2      	bhi.n	8001342 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800137c:	6863      	ldr	r3, [r4, #4]
 800137e:	f013 0f0c 	tst.w	r3, #12
 8001382:	d1f6      	bne.n	8001372 <HAL_RCC_ClockConfig+0xfe>
 8001384:	e785      	b.n	8001292 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001386:	6813      	ldr	r3, [r2, #0]
 8001388:	f023 0307 	bic.w	r3, r3, #7
 800138c:	4333      	orrs	r3, r6
 800138e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001390:	6813      	ldr	r3, [r2, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	429e      	cmp	r6, r3
 8001398:	d1a9      	bne.n	80012ee <HAL_RCC_ClockConfig+0x7a>
 800139a:	e780      	b.n	800129e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800139c:	6863      	ldr	r3, [r4, #4]
 800139e:	68e9      	ldr	r1, [r5, #12]
 80013a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013a4:	430b      	orrs	r3, r1
 80013a6:	6063      	str	r3, [r4, #4]
 80013a8:	e77e      	b.n	80012a8 <HAL_RCC_ClockConfig+0x34>
 80013aa:	bf00      	nop
 80013ac:	40022000 	.word	0x40022000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	0800211c 	.word	0x0800211c
 80013b8:	20000000 	.word	0x20000000

080013bc <HAL_RCC_GetHCLKFreq>:
}
 80013bc:	4b01      	ldr	r3, [pc, #4]	; (80013c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000

080013c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80013c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013cc:	4604      	mov	r4, r0
 80013ce:	4688      	mov	r8, r1
 80013d0:	4617      	mov	r7, r2
 80013d2:	461d      	mov	r5, r3
 80013d4:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80013d6:	6822      	ldr	r2, [r4, #0]
 80013d8:	6893      	ldr	r3, [r2, #8]
 80013da:	ea38 0303 	bics.w	r3, r8, r3
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	429f      	cmp	r7, r3
 80013e6:	d102      	bne.n	80013ee <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80013e8:	2000      	movs	r0, #0
}
 80013ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80013ee:	1c6b      	adds	r3, r5, #1
 80013f0:	d0f2      	beq.n	80013d8 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80013f2:	bb55      	cbnz	r5, 800144a <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80013fc:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80013fe:	6862      	ldr	r2, [r4, #4]
 8001400:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001404:	d10a      	bne.n	800141c <SPI_WaitFlagStateUntilTimeout+0x54>
 8001406:	68a2      	ldr	r2, [r4, #8]
 8001408:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800140c:	d002      	beq.n	8001414 <SPI_WaitFlagStateUntilTimeout+0x4c>
 800140e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001412:	d103      	bne.n	800141c <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800141a:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800141c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800141e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001422:	d109      	bne.n	8001438 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800142a:	0412      	lsls	r2, r2, #16
 800142c:	0c12      	lsrs	r2, r2, #16
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001436:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001438:	2301      	movs	r3, #1
 800143a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800143e:	2300      	movs	r3, #0
 8001440:	2003      	movs	r0, #3
 8001442:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800144a:	f7ff fbd3 	bl	8000bf4 <HAL_GetTick>
 800144e:	1b80      	subs	r0, r0, r6
 8001450:	4285      	cmp	r5, r0
 8001452:	d8c0      	bhi.n	80013d6 <SPI_WaitFlagStateUntilTimeout+0xe>
 8001454:	e7ce      	b.n	80013f4 <SPI_WaitFlagStateUntilTimeout+0x2c>

08001456 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001456:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001458:	460b      	mov	r3, r1
 800145a:	9200      	str	r2, [sp, #0]
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	2200      	movs	r2, #0
{
 8001460:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001462:	f7ff ffb1 	bl	80013c8 <SPI_WaitFlagStateUntilTimeout>
 8001466:	b120      	cbz	r0, 8001472 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001468:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800146a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001472:	b002      	add	sp, #8
 8001474:	bd10      	pop	{r4, pc}

08001476 <HAL_SPI_Transmit>:
{
 8001476:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800147a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800147c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001480:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001482:	2b01      	cmp	r3, #1
{
 8001484:	460d      	mov	r5, r1
 8001486:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001488:	f000 809c 	beq.w	80015c4 <HAL_SPI_Transmit+0x14e>
 800148c:	2301      	movs	r3, #1
 800148e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001492:	f7ff fbaf 	bl	8000bf4 <HAL_GetTick>
 8001496:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001498:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800149c:	b2c0      	uxtb	r0, r0
 800149e:	2801      	cmp	r0, #1
 80014a0:	f040 808e 	bne.w	80015c0 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 80014a4:	2d00      	cmp	r5, #0
 80014a6:	d04e      	beq.n	8001546 <HAL_SPI_Transmit+0xd0>
 80014a8:	f1b8 0f00 	cmp.w	r8, #0
 80014ac:	d04b      	beq.n	8001546 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80014ae:	2303      	movs	r3, #3
 80014b0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80014b8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80014ba:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80014be:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80014c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80014c2:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80014c4:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014c6:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014c8:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014ce:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 80014d0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80014d4:	bf02      	ittt	eq
 80014d6:	681a      	ldreq	r2, [r3, #0]
 80014d8:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80014dc:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80014e2:	bf5e      	ittt	pl
 80014e4:	681a      	ldrpl	r2, [r3, #0]
 80014e6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80014ea:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80014ec:	68e2      	ldr	r2, [r4, #12]
 80014ee:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80014f2:	6862      	ldr	r2, [r4, #4]
 80014f4:	d138      	bne.n	8001568 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80014f6:	b11a      	cbz	r2, 8001500 <HAL_SPI_Transmit+0x8a>
 80014f8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80014fa:	b292      	uxth	r2, r2
 80014fc:	2a01      	cmp	r2, #1
 80014fe:	d106      	bne.n	800150e <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001500:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001504:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001506:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001508:	3b01      	subs	r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800150e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001510:	b29b      	uxth	r3, r3
 8001512:	b993      	cbnz	r3, 800153a <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001514:	9700      	str	r7, [sp, #0]
 8001516:	4633      	mov	r3, r6
 8001518:	2201      	movs	r2, #1
 800151a:	2102      	movs	r1, #2
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff ff53 	bl	80013c8 <SPI_WaitFlagStateUntilTimeout>
 8001522:	b978      	cbnz	r0, 8001544 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001524:	463a      	mov	r2, r7
 8001526:	4631      	mov	r1, r6
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff ff94 	bl	8001456 <SPI_CheckFlag_BSY>
 800152e:	2800      	cmp	r0, #0
 8001530:	d038      	beq.n	80015a4 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001532:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001534:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001536:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001538:	e005      	b.n	8001546 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	0790      	lsls	r0, r2, #30
 8001540:	d4de      	bmi.n	8001500 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001542:	b94e      	cbnz	r6, 8001558 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8001544:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001546:	2301      	movs	r3, #1
 8001548:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800154c:	2300      	movs	r3, #0
 800154e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001552:	b004      	add	sp, #16
 8001554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001558:	1c71      	adds	r1, r6, #1
 800155a:	d0d8      	beq.n	800150e <HAL_SPI_Transmit+0x98>
 800155c:	f7ff fb4a 	bl	8000bf4 <HAL_GetTick>
 8001560:	1bc0      	subs	r0, r0, r7
 8001562:	4286      	cmp	r6, r0
 8001564:	d8d3      	bhi.n	800150e <HAL_SPI_Transmit+0x98>
 8001566:	e7ed      	b.n	8001544 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001568:	b11a      	cbz	r2, 8001572 <HAL_SPI_Transmit+0xfc>
 800156a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800156c:	b292      	uxth	r2, r2
 800156e:	2a01      	cmp	r2, #1
 8001570:	d106      	bne.n	8001580 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001572:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001576:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001578:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800157a:	3b01      	subs	r3, #1
 800157c:	b29b      	uxth	r3, r3
 800157e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001580:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001582:	b29b      	uxth	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0c5      	beq.n	8001514 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	0792      	lsls	r2, r2, #30
 800158e:	d4f0      	bmi.n	8001572 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001590:	2e00      	cmp	r6, #0
 8001592:	d0d7      	beq.n	8001544 <HAL_SPI_Transmit+0xce>
 8001594:	1c73      	adds	r3, r6, #1
 8001596:	d0f3      	beq.n	8001580 <HAL_SPI_Transmit+0x10a>
 8001598:	f7ff fb2c 	bl	8000bf4 <HAL_GetTick>
 800159c:	1bc0      	subs	r0, r0, r7
 800159e:	4286      	cmp	r6, r0
 80015a0:	d8ee      	bhi.n	8001580 <HAL_SPI_Transmit+0x10a>
 80015a2:	e7cf      	b.n	8001544 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015a4:	68a3      	ldr	r3, [r4, #8]
 80015a6:	b933      	cbnz	r3, 80015b6 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015a8:	9303      	str	r3, [sp, #12]
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	9203      	str	r2, [sp, #12]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	9303      	str	r3, [sp, #12]
 80015b4:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80015b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80015b8:	3000      	adds	r0, #0
 80015ba:	bf18      	it	ne
 80015bc:	2001      	movne	r0, #1
 80015be:	e7c2      	b.n	8001546 <HAL_SPI_Transmit+0xd0>
 80015c0:	2002      	movs	r0, #2
 80015c2:	e7c0      	b.n	8001546 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 80015c4:	2002      	movs	r0, #2
 80015c6:	e7c4      	b.n	8001552 <HAL_SPI_Transmit+0xdc>

080015c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015c8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80015ca:	4604      	mov	r4, r0
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d034      	beq.n	800163a <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80015d4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80015d8:	b90b      	cbnz	r3, 80015de <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015da:	f7fe ff89 	bl	80004f0 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80015de:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015e0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80015e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80015e6:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015e8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80015ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015ee:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015f0:	6863      	ldr	r3, [r4, #4]
 80015f2:	69a2      	ldr	r2, [r4, #24]
 80015f4:	4303      	orrs	r3, r0
 80015f6:	68e0      	ldr	r0, [r4, #12]
 80015f8:	4303      	orrs	r3, r0
 80015fa:	6920      	ldr	r0, [r4, #16]
 80015fc:	4303      	orrs	r3, r0
 80015fe:	6960      	ldr	r0, [r4, #20]
 8001600:	4303      	orrs	r3, r0
 8001602:	69e0      	ldr	r0, [r4, #28]
 8001604:	4303      	orrs	r3, r0
 8001606:	6a20      	ldr	r0, [r4, #32]
 8001608:	4303      	orrs	r3, r0
 800160a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800160c:	4303      	orrs	r3, r0
 800160e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001612:	4303      	orrs	r3, r0
 8001614:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001616:	0c12      	lsrs	r2, r2, #16
 8001618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800161a:	f002 0204 	and.w	r2, r2, #4
 800161e:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001622:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001624:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001626:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001628:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800162a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800162e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001630:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001632:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001634:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001638:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800163a:	2001      	movs	r0, #1
}
 800163c:	bd10      	pop	{r4, pc}

0800163e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800163e:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001640:	b189      	cbz	r1, 8001666 <HAL_TIM_Encoder_Start+0x28>
 8001642:	2904      	cmp	r1, #4
 8001644:	d007      	beq.n	8001656 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001646:	6a1a      	ldr	r2, [r3, #32]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	f042 0201 	orr.w	r2, r2, #1
 8001654:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	f022 0210 	bic.w	r2, r2, #16
 800165c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	f042 0210 	orr.w	r2, r2, #16
 8001664:	e006      	b.n	8001674 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	f022 0201 	bic.w	r2, r2, #1
 800166c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	f042 0201 	orr.w	r2, r2, #1
 8001674:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001676:	681a      	ldr	r2, [r3, #0]
}
 8001678:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]
}
 8001680:	4770      	bx	lr
	...

08001684 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001684:	4a24      	ldr	r2, [pc, #144]	; (8001718 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001686:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001688:	4290      	cmp	r0, r2
 800168a:	d012      	beq.n	80016b2 <TIM_Base_SetConfig+0x2e>
 800168c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001690:	4290      	cmp	r0, r2
 8001692:	d00e      	beq.n	80016b2 <TIM_Base_SetConfig+0x2e>
 8001694:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001698:	d00b      	beq.n	80016b2 <TIM_Base_SetConfig+0x2e>
 800169a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800169e:	4290      	cmp	r0, r2
 80016a0:	d007      	beq.n	80016b2 <TIM_Base_SetConfig+0x2e>
 80016a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016a6:	4290      	cmp	r0, r2
 80016a8:	d003      	beq.n	80016b2 <TIM_Base_SetConfig+0x2e>
 80016aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ae:	4290      	cmp	r0, r2
 80016b0:	d11d      	bne.n	80016ee <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80016b2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016b8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <TIM_Base_SetConfig+0x94>)
 80016bc:	4290      	cmp	r0, r2
 80016be:	d012      	beq.n	80016e6 <TIM_Base_SetConfig+0x62>
 80016c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c4:	4290      	cmp	r0, r2
 80016c6:	d00e      	beq.n	80016e6 <TIM_Base_SetConfig+0x62>
 80016c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016cc:	d00b      	beq.n	80016e6 <TIM_Base_SetConfig+0x62>
 80016ce:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80016d2:	4290      	cmp	r0, r2
 80016d4:	d007      	beq.n	80016e6 <TIM_Base_SetConfig+0x62>
 80016d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016da:	4290      	cmp	r0, r2
 80016dc:	d003      	beq.n	80016e6 <TIM_Base_SetConfig+0x62>
 80016de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e2:	4290      	cmp	r0, r2
 80016e4:	d103      	bne.n	80016ee <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016e6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80016e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ec:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80016ee:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80016f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80016f4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016f8:	688b      	ldr	r3, [r1, #8]
 80016fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80016fc:	680b      	ldr	r3, [r1, #0]
 80016fe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <TIM_Base_SetConfig+0x94>)
 8001702:	4298      	cmp	r0, r3
 8001704:	d003      	beq.n	800170e <TIM_Base_SetConfig+0x8a>
 8001706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800170a:	4298      	cmp	r0, r3
 800170c:	d101      	bne.n	8001712 <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 800170e:	690b      	ldr	r3, [r1, #16]
 8001710:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001712:	2301      	movs	r3, #1
 8001714:	6143      	str	r3, [r0, #20]
 8001716:	4770      	bx	lr
 8001718:	40012c00 	.word	0x40012c00

0800171c <HAL_TIM_Encoder_Init>:
{
 800171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171e:	460c      	mov	r4, r1
  if(htim == NULL)
 8001720:	4605      	mov	r5, r0
 8001722:	2800      	cmp	r0, #0
 8001724:	d041      	beq.n	80017aa <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001726:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800172a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800172e:	b91b      	cbnz	r3, 8001738 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001730:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001734:	f7fe fefe 	bl	8000534 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001738:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 800173a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800173c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001740:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001744:	6883      	ldr	r3, [r0, #8]
 8001746:	f023 0307 	bic.w	r3, r3, #7
 800174a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800174c:	f7ff ff9a 	bl	8001684 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001750:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001752:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001754:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001756:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001758:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800175a:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800175c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800175e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001762:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001766:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800176a:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800176c:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001770:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001772:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800177a:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 800177c:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800177e:	430b      	orrs	r3, r1
 8001780:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001782:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001786:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800178a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800178c:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800178e:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001792:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001794:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8001796:	6183      	str	r3, [r0, #24]
  htim->State= HAL_TIM_STATE_READY;
 8001798:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800179a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 800179e:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 80017a0:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 80017a2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80017a6:	2000      	movs	r0, #0
 80017a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
}
 80017ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080017ae <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80017ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80017b2:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	f04f 0302 	mov.w	r3, #2
 80017ba:	d018      	beq.n	80017ee <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80017bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017c0:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80017c2:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017c4:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017c6:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017cc:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4322      	orrs	r2, r4
 80017d2:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017da:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	430a      	orrs	r2, r1
 80017e0:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017e8:	2300      	movs	r3, #0
 80017ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80017ee:	4618      	mov	r0, r3

  return HAL_OK;
}
 80017f0:	bd10      	pop	{r4, pc}

080017f2 <gotoResetUI>:
//	setShow_ui(MATCH_UI);
}

void gotoResetUI(void)
{
	exitMenu();
 80017f2:	f000 b855 	b.w	80018a0 <exitMenu>

080017f6 <gotoMatchMiniFlyUI>:
 80017f6:	f000 b853 	b.w	80018a0 <exitMenu>

080017fa <gotoJoystickCalibUI>:
 80017fa:	f000 b851 	b.w	80018a0 <exitMenu>
	...

08001800 <mainMenuInit>:
//	}
//}

/*初始化主菜單*/
void mainMenuInit(void)
{	
 8001800:	2100      	movs	r1, #0
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <mainMenuInit+0x60>)
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	4613      	mov	r3, r2
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
	{
		mainMenu[i].menuItemCount = MAIN_MENU_ITEMNUM;
 8001808:	270a      	movs	r7, #10
		mainMenu[i].isSelect = false;
 800180a:	4608      	mov	r0, r1
		mainMenu[i].icoSelected = finger_img;
 800180c:	4e15      	ldr	r6, [pc, #84]	; (8001864 <mainMenuInit+0x64>)
		mainMenu[i].icoUnselected = NULL;
		mainMenu[i].title = mainMenuLanguage[1][i];
 800180e:	4d16      	ldr	r5, [pc, #88]	; (8001868 <mainMenuInit+0x68>)
 8001810:	186c      	adds	r4, r5, r1
 8001812:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8001814:	3104      	adds	r1, #4
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
 8001816:	2928      	cmp	r1, #40	; 0x28
		mainMenu[i].menuItemCount = MAIN_MENU_ITEMNUM;
 8001818:	7057      	strb	r7, [r2, #1]
		mainMenu[i].isSelect = false;
 800181a:	7090      	strb	r0, [r2, #2]
		mainMenu[i].icoSelected = finger_img;
 800181c:	6056      	str	r6, [r2, #4]
		mainMenu[i].icoUnselected = NULL;
 800181e:	6090      	str	r0, [r2, #8]
		mainMenu[i].title = mainMenuLanguage[1][i];
 8001820:	60d4      	str	r4, [r2, #12]
		mainMenu[i].Function = NULL;
 8001822:	6110      	str	r0, [r2, #16]
		mainMenu[i].parentMenu = NULL;
 8001824:	6150      	str	r0, [r2, #20]
		mainMenu[i].childrenMenu = NULL;
 8001826:	6190      	str	r0, [r2, #24]
 8001828:	f102 021c 	add.w	r2, r2, #28
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
 800182c:	d1f0      	bne.n	8001810 <mainMenuInit+0x10>
	}
	mainMenu[0].isSelect = true;
 800182e:	2201      	movs	r2, #1
 8001830:	709a      	strb	r2, [r3, #2]
	mainMenu[0].Function = gotoNextMenu;
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <mainMenuInit+0x6c>)
	//mainMenu[3].childrenMenu = flipEnableMenu;
	
	mainMenu[4].Function = gotoNextMenu;
	//mainMenu[4].childrenMenu = &expModuleMenu[0];
	
	mainMenu[5].Function = gotoJoystickCalibUI;
 8001834:	490e      	ldr	r1, [pc, #56]	; (8001870 <mainMenuInit+0x70>)
	mainMenu[0].Function = gotoNextMenu;
 8001836:	611a      	str	r2, [r3, #16]
	mainMenu[1].Function = gotoNextMenu;
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu[2].Function = gotoNextMenu;
 800183a:	649a      	str	r2, [r3, #72]	; 0x48
	mainMenu[3].Function = gotoNextMenu;
 800183c:	665a      	str	r2, [r3, #100]	; 0x64
	mainMenu[4].Function = gotoNextMenu;
 800183e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	//mainMenu[5].childrenMenu = NULL;
	
	mainMenu[6].Function = gotoMatchMiniFlyUI;
	//mainMenu[6].childrenMenu = NULL;
	
	mainMenu[7].Function = gotoNextMenu;
 8001842:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	//mainMenu[7].childrenMenu = languageMenu;
	
	mainMenu[8].Function = gotoResetUI;
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <mainMenuInit+0x74>)
	mainMenu[5].Function = gotoJoystickCalibUI;
 8001848:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	mainMenu[8].Function = gotoResetUI;
 800184c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	mainMenu[6].Function = gotoMatchMiniFlyUI;
 8001850:	4909      	ldr	r1, [pc, #36]	; (8001878 <mainMenuInit+0x78>)
	//mainMenu[8].childrenMenu = NULL;
	
	mainMenu[9].Function = exitMenu;
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <mainMenuInit+0x7c>)
	mainMenu[6].Function = gotoMatchMiniFlyUI;
 8001854:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	mainMenu[9].Function = exitMenu;
 8001858:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185e:	bf00      	nop
 8001860:	200021a0 	.word	0x200021a0
 8001864:	0800212c 	.word	0x0800212c
 8001868:	20000010 	.word	0x20000010
 800186c:	080018cd 	.word	0x080018cd
 8001870:	080017fb 	.word	0x080017fb
 8001874:	080017f3 	.word	0x080017f3
 8001878:	080017f7 	.word	0x080017f7
 800187c:	080018a1 	.word	0x080018a1

08001880 <getMenuSelectitem>:
//  從menu清單中取得被選中的Menu項目
//  返回值 : 被選中的menu項目位於清單中的索引
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
uint8_t getMenuSelectitem(MenuItem_Typedef menu[]) {
	int i;
	for (i = 0; i < menu->menuItemCount; i++) {
 8001880:	2300      	movs	r3, #0
		if (menu[i].isSelect == true)
 8001882:	211c      	movs	r1, #28
uint8_t getMenuSelectitem(MenuItem_Typedef menu[]) {
 8001884:	b510      	push	{r4, lr}
	for (i = 0; i < menu->menuItemCount; i++) {
 8001886:	7842      	ldrb	r2, [r0, #1]
 8001888:	4293      	cmp	r3, r2
 800188a:	db01      	blt.n	8001890 <getMenuSelectitem+0x10>
			break;
	}
	return i;
 800188c:	b2d8      	uxtb	r0, r3
}
 800188e:	bd10      	pop	{r4, pc}
		if (menu[i].isSelect == true)
 8001890:	fb01 0403 	mla	r4, r1, r3, r0
 8001894:	78a4      	ldrb	r4, [r4, #2]
 8001896:	2c00      	cmp	r4, #0
 8001898:	d1f8      	bne.n	800188c <getMenuSelectitem+0xc>
	for (i = 0; i < menu->menuItemCount; i++) {
 800189a:	3301      	adds	r3, #1
 800189c:	e7f4      	b.n	8001888 <getMenuSelectitem+0x8>
	...

080018a0 <exitMenu>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  返回主menu選單
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void exitMenu(void) {
	CurMenu = mainMenu;
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <exitMenu+0x18>)
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <exitMenu+0x1c>)
 80018a4:	601a      	str	r2, [r3, #0]
	MenuWindow.title = defaultTitle;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <exitMenu+0x20>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <exitMenu+0x24>)
 80018ac:	619a      	str	r2, [r3, #24]
	//setShow_ui(MAIN_UI);
	isChangeMenu = true;
 80018ae:	2201      	movs	r2, #1
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <exitMenu+0x28>)
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200021a0 	.word	0x200021a0
 80018bc:	20000088 	.word	0x20000088
 80018c0:	200000c8 	.word	0x200000c8
 80018c4:	200000ac 	.word	0x200000ac
 80018c8:	200000cc 	.word	0x200000cc

080018cc <gotoNextMenu>:
}
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  前往下一個選單
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void gotoNextMenu(void) {
	if (CurItem->childrenMenu != NULL) {
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <gotoNextMenu+0x28>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	b14a      	cbz	r2, 80018e8 <gotoNextMenu+0x1c>
		CurMenu = CurItem->childrenMenu;
 80018d4:	4908      	ldr	r1, [pc, #32]	; (80018f8 <gotoNextMenu+0x2c>)
		MenuWindow.title = CurItem->title + 2;
 80018d6:	68db      	ldr	r3, [r3, #12]
		CurMenu = CurItem->childrenMenu;
 80018d8:	600a      	str	r2, [r1, #0]
		MenuWindow.title = CurItem->title + 2;
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <gotoNextMenu+0x30>)
 80018dc:	3302      	adds	r3, #2
 80018de:	6193      	str	r3, [r2, #24]
		isChangeMenu = true;
 80018e0:	2201      	movs	r2, #1
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <gotoNextMenu+0x34>)
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	4770      	bx	lr
	} else if (CurItem->Function != NULL && CurItem->parentMenu == NULL) {
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	b112      	cbz	r2, 80018f2 <gotoNextMenu+0x26>
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	b903      	cbnz	r3, 80018f2 <gotoNextMenu+0x26>
		CurItem->Function(); //執行選中子選單函數
 80018f0:	4710      	bx	r2
 80018f2:	4770      	bx	lr
 80018f4:	200020f4 	.word	0x200020f4
 80018f8:	20000088 	.word	0x20000088
 80018fc:	200000ac 	.word	0x200000ac
 8001900:	200000cc 	.word	0x200000cc

08001904 <DisplayMenuInit>:
		exitMenu();
	}
}

/*顯示菜單*/
void DisplayMenuInit(MenuItem_Typedef* menu) {
 8001904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t topitem;
	uint8_t showItems;

	if (isChangeMenu == false)
 8001908:	4f20      	ldr	r7, [pc, #128]	; (800198c <DisplayMenuInit+0x88>)
void DisplayMenuInit(MenuItem_Typedef* menu) {
 800190a:	4606      	mov	r6, r0
	if (isChangeMenu == false)
 800190c:	783b      	ldrb	r3, [r7, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d02f      	beq.n	8001972 <DisplayMenuInit+0x6e>
		return;

	selected = getMenuSelectitem(menu);
 8001912:	f7ff ffb5 	bl	8001880 <getMenuSelectitem>
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <DisplayMenuInit+0x8c>)
	cur_sequence = selected;
	if (selected < menu->cursorPosition)
		menu->cursorPosition = 0;
	topitem = selected - menu->cursorPosition;
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 8001918:	4d1e      	ldr	r5, [pc, #120]	; (8001994 <DisplayMenuInit+0x90>)
	selected = getMenuSelectitem(menu);
 800191a:	6018      	str	r0, [r3, #0]
	cur_sequence = selected;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <DisplayMenuInit+0x94>)
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 800191e:	7872      	ldrb	r2, [r6, #1]
	cur_sequence = selected;
 8001920:	6018      	str	r0, [r3, #0]
	if (selected < menu->cursorPosition)
 8001922:	f996 3000 	ldrsb.w	r3, [r6]
	showItems = MenuWindow.itemsperpage;
	if (menu->menuItemCount < MenuWindow.itemsperpage)
		showItems = menu->menuItemCount;
	for (int i = 0; i < showItems; i++) {
		MenuItem_Typedef* Item = &menu[topitem + i];
		GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
 8001926:	f04f 091c 	mov.w	r9, #28
	if (selected < menu->cursorPosition)
 800192a:	4298      	cmp	r0, r3
		menu->cursorPosition = 0;
 800192c:	bfbc      	itt	lt
 800192e:	2300      	movlt	r3, #0
 8001930:	7033      	strblt	r3, [r6, #0]
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 8001932:	692b      	ldr	r3, [r5, #16]
	topitem = selected - menu->cursorPosition;
 8001934:	f996 4000 	ldrsb.w	r4, [r6]
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 8001938:	429a      	cmp	r2, r3
		topitem = 0;
 800193a:	bf92      	itee	ls
 800193c:	2400      	movls	r4, #0
	topitem = selected - menu->cursorPosition;
 800193e:	1b00      	subhi	r0, r0, r4
 8001940:	b2c4      	uxtbhi	r4, r0
	GUI_WindowsDraw(&MenuWindow);
 8001942:	4814      	ldr	r0, [pc, #80]	; (8001994 <DisplayMenuInit+0x90>)
	MenuWindow.topitem = topitem;
 8001944:	616c      	str	r4, [r5, #20]
	GUI_WindowsDraw(&MenuWindow);
 8001946:	f000 fb37 	bl	8001fb8 <GUI_WindowsDraw>
	MenuScrollbar.topitem = topitem;
 800194a:	4814      	ldr	r0, [pc, #80]	; (800199c <DisplayMenuInit+0x98>)
 800194c:	6184      	str	r4, [r0, #24]
	MenuScrollbar.totalitems = menu->menuItemCount;
 800194e:	7873      	ldrb	r3, [r6, #1]
 8001950:	6103      	str	r3, [r0, #16]
	GUI_ScrollbarDraw(&MenuScrollbar);
 8001952:	f000 fa5d 	bl	8001e10 <GUI_ScrollbarDraw>
	showItems = MenuWindow.itemsperpage;
 8001956:	692b      	ldr	r3, [r5, #16]
	for (int i = 0; i < showItems; i++) {
 8001958:	2500      	movs	r5, #0
	if (menu->menuItemCount < MenuWindow.itemsperpage)
 800195a:	f896 8001 	ldrb.w	r8, [r6, #1]
 800195e:	4543      	cmp	r3, r8
	showItems = MenuWindow.itemsperpage;
 8001960:	bf98      	it	ls
 8001962:	fa5f f883 	uxtbls.w	r8, r3
	for (int i = 0; i < showItems; i++) {
 8001966:	4545      	cmp	r5, r8
 8001968:	db05      	blt.n	8001976 <DisplayMenuInit+0x72>
	}

//	CurItem = menu + cur_sequence;
//	CurItem->isSelect = true;

	GUI_Refresh(); //刷新屏幕
 800196a:	f000 fa16 	bl	8001d9a <GUI_Refresh>
	isChangeMenu = false;
 800196e:	2300      	movs	r3, #0
 8001970:	703b      	strb	r3, [r7, #0]
 8001972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
 8001976:	1962      	adds	r2, r4, r5
 8001978:	ebc5 1105 	rsb	r1, r5, r5, lsl #4
 800197c:	fb09 6202 	mla	r2, r9, r2, r6
 8001980:	3113      	adds	r1, #19
 8001982:	2014      	movs	r0, #20
 8001984:	f000 f9a6 	bl	8001cd4 <GUI_MenuItemDraw>
	for (int i = 0; i < showItems; i++) {
 8001988:	3501      	adds	r5, #1
 800198a:	e7ec      	b.n	8001966 <DisplayMenuInit+0x62>
 800198c:	200000cc 	.word	0x200000cc
 8001990:	20002100 	.word	0x20002100
 8001994:	200000ac 	.word	0x200000ac
 8001998:	200020fc 	.word	0x200020fc
 800199c:	2000008c 	.word	0x2000008c

080019a0 <Menu_SetSelected>:
}


void Menu_SetSelected(int item_index,bool selected){
	//判斷index是否越界
	CurItem = CurMenu + item_index;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <Menu_SetSelected+0x14>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	231c      	movs	r3, #28
 80019a6:	fb03 2000 	mla	r0, r3, r0, r2
 80019aa:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <Menu_SetSelected+0x18>)
	CurItem->isSelect = selected;
 80019ac:	7081      	strb	r1, [r0, #2]
	CurItem = CurMenu + item_index;
 80019ae:	6018      	str	r0, [r3, #0]
	CurItem->isSelect = selected;
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000088 	.word	0x20000088
 80019b8:	200020f4 	.word	0x200020f4

080019bc <Menu_Run>:
}

/*菜單運行*/
void Menu_Run(void) {
 80019bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
//	u8 keyState;
//	enum dir_e joystick2;
//	static int timeout;
	uint8_t showItems;
	Rotary_state rstate =state_no_changed;
	DisplayMenuInit(CurMenu);
 80019c0:	4c5d      	ldr	r4, [pc, #372]	; (8001b38 <Menu_Run+0x17c>)
	RotaryEcncorder_SetRange(0,CurMenu->menuItemCount-1);
	cur_rotateNum = RotaryEcncorder_GetCount();
 80019c2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8001b44 <Menu_Run+0x188>
	DisplayMenuInit(CurMenu);
 80019c6:	6820      	ldr	r0, [r4, #0]
 80019c8:	f7ff ff9c 	bl	8001904 <DisplayMenuInit>
	RotaryEcncorder_SetRange(0,CurMenu->menuItemCount-1);
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	2000      	movs	r0, #0
 80019d0:	7859      	ldrb	r1, [r3, #1]
 80019d2:	3901      	subs	r1, #1
 80019d4:	f7ff f884 	bl	8000ae0 <RotaryEcncorder_SetRange>
	cur_rotateNum = RotaryEcncorder_GetCount();
 80019d8:	f7ff f89a 	bl	8000b10 <RotaryEcncorder_GetCount>
 80019dc:	f8c9 0000 	str.w	r0, [r9]
	rstate = RotaryEcncorder_GetState();
 80019e0:	f7ff f8b2 	bl	8000b48 <RotaryEcncorder_GetState>
	switch(rstate){
 80019e4:	2801      	cmp	r0, #1
	rstate = RotaryEcncorder_GetState();
 80019e6:	4606      	mov	r6, r0
	switch(rstate){
 80019e8:	d053      	beq.n	8001a92 <Menu_Run+0xd6>
 80019ea:	2802      	cmp	r0, #2
 80019ec:	f040 80a1 	bne.w	8001b32 <Menu_Run+0x176>
		case state_no_changed:
			break;
		case state_counter_clock_wise:
			//清除窗口內容
			GUI_RectangleFill(MenuWindow.x+1,MenuScrollbar.y,MenuScrollbar.x-1,MenuWindow.height-2,0);
 80019f0:	2700      	movs	r7, #0
 80019f2:	4d52      	ldr	r5, [pc, #328]	; (8001b3c <Menu_Run+0x180>)
 80019f4:	4e52      	ldr	r6, [pc, #328]	; (8001b40 <Menu_Run+0x184>)
 80019f6:	68eb      	ldr	r3, [r5, #12]
 80019f8:	6832      	ldr	r2, [r6, #0]
 80019fa:	6828      	ldr	r0, [r5, #0]
 80019fc:	9700      	str	r7, [sp, #0]
			Menu_SetSelected(cur_sequence,false);
 80019fe:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8001b48 <Menu_Run+0x18c>
			GUI_RectangleFill(MenuWindow.x+1,MenuScrollbar.y,MenuScrollbar.x-1,MenuWindow.height-2,0);
 8001a02:	3b02      	subs	r3, #2
 8001a04:	3a01      	subs	r2, #1
 8001a06:	6871      	ldr	r1, [r6, #4]
 8001a08:	3001      	adds	r0, #1
 8001a0a:	f000 f8c3 	bl	8001b94 <GUI_RectangleFill>
			Menu_SetSelected(cur_sequence,false);
 8001a0e:	4639      	mov	r1, r7
 8001a10:	f8d8 0000 	ldr.w	r0, [r8]
 8001a14:	f7ff ffc4 	bl	80019a0 <Menu_SetSelected>
			//菜單項目序號--
			cur_sequence = cur_rotateNum;
 8001a18:	f8d9 0000 	ldr.w	r0, [r9]
			Menu_SetSelected(cur_sequence,true);
 8001a1c:	2101      	movs	r1, #1
			cur_sequence = cur_rotateNum;
 8001a1e:	f8c8 0000 	str.w	r0, [r8]
			Menu_SetSelected(cur_sequence,true);
 8001a22:	f7ff ffbd 	bl	80019a0 <Menu_SetSelected>
			//光標位置--
			CurMenu->cursorPosition--;
 8001a26:	6822      	ldr	r2, [r4, #0]
 8001a28:	46b2      	mov	sl, r6
 8001a2a:	7813      	ldrb	r3, [r2, #0]
			if (CurMenu->menuItemCount <= MenuWindow.itemsperpage) {
 8001a2c:	f892 9001 	ldrb.w	r9, [r2, #1]
			CurMenu->cursorPosition--;
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b25b      	sxtb	r3, r3
 8001a34:	7013      	strb	r3, [r2, #0]
			if (CurMenu->menuItemCount <= MenuWindow.itemsperpage) {
 8001a36:	6929      	ldr	r1, [r5, #16]
 8001a38:	4589      	cmp	r9, r1
 8001a3a:	d812      	bhi.n	8001a62 <Menu_Run+0xa6>
				showItems = CurMenu->menuItemCount;
				if (CurMenu->cursorPosition < 0)
 8001a3c:	42bb      	cmp	r3, r7
 8001a3e:	da00      	bge.n	8001a42 <Menu_Run+0x86>
					CurMenu->cursorPosition = 0;
 8001a40:	7017      	strb	r7, [r2, #0]
					CurMenu->cursorPosition = 0;
					if (MenuWindow.topitem > 0)
						MenuWindow.topitem--;
				}
			}
			for (int i = 0; i < showItems; i++) {
 8001a42:	2600      	movs	r6, #0
				MenuItem_Typedef* Item = CurMenu + MenuWindow.topitem + i;
 8001a44:	271c      	movs	r7, #28
			for (int i = 0; i < showItems; i++) {
 8001a46:	454e      	cmp	r6, r9
 8001a48:	db16      	blt.n	8001a78 <Menu_Run+0xbc>
				GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
			}
			MenuScrollbar.topitem = cur_sequence;
 8001a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8001a4e:	f8ca 3018 	str.w	r3, [sl, #24]
			for (int i = 0; i < showItems; i++) {
				MenuItem_Typedef* Item = CurMenu + MenuWindow.topitem + i;
				GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
			}
			MenuScrollbar.topitem = cur_sequence;
			GUI_Scrollbar_SetPos(&MenuScrollbar);
 8001a52:	483b      	ldr	r0, [pc, #236]	; (8001b40 <Menu_Run+0x184>)
 8001a54:	f000 f9a3 	bl	8001d9e <GUI_Scrollbar_SetPos>
//			CurItem = CurMenu + selected;
//			CurItem->isSelect = true;
//		}
//		exitMenu();
//	}
}
 8001a58:	b002      	add	sp, #8
 8001a5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			GUI_Refresh();
 8001a5e:	f000 b99c 	b.w	8001d9a <GUI_Refresh>
				if (CurMenu->cursorPosition < 0) {
 8001a62:	2b00      	cmp	r3, #0
				showItems = MenuWindow.itemsperpage;
 8001a64:	fa5f f981 	uxtb.w	r9, r1
				if (CurMenu->cursorPosition < 0) {
 8001a68:	daeb      	bge.n	8001a42 <Menu_Run+0x86>
					CurMenu->cursorPosition = 0;
 8001a6a:	7017      	strb	r7, [r2, #0]
					if (MenuWindow.topitem > 0)
 8001a6c:	696b      	ldr	r3, [r5, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0e7      	beq.n	8001a42 <Menu_Run+0x86>
						MenuWindow.topitem--;
 8001a72:	3b01      	subs	r3, #1
 8001a74:	616b      	str	r3, [r5, #20]
 8001a76:	e7e4      	b.n	8001a42 <Menu_Run+0x86>
				MenuItem_Typedef* Item = CurMenu + MenuWindow.topitem + i;
 8001a78:	696a      	ldr	r2, [r5, #20]
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	4432      	add	r2, r6
				GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
 8001a7e:	ebc6 1106 	rsb	r1, r6, r6, lsl #4
 8001a82:	fb07 3202 	mla	r2, r7, r2, r3
 8001a86:	3113      	adds	r1, #19
 8001a88:	2014      	movs	r0, #20
 8001a8a:	f000 f923 	bl	8001cd4 <GUI_MenuItemDraw>
			for (int i = 0; i < showItems; i++) {
 8001a8e:	3601      	adds	r6, #1
 8001a90:	e7d9      	b.n	8001a46 <Menu_Run+0x8a>
			GUI_RectangleFill(MenuWindow.x+1,MenuScrollbar.y,MenuScrollbar.x-1,MenuWindow.height-2,0);
 8001a92:	f04f 0a00 	mov.w	sl, #0
 8001a96:	4d29      	ldr	r5, [pc, #164]	; (8001b3c <Menu_Run+0x180>)
 8001a98:	4f29      	ldr	r7, [pc, #164]	; (8001b40 <Menu_Run+0x184>)
 8001a9a:	68eb      	ldr	r3, [r5, #12]
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	6828      	ldr	r0, [r5, #0]
 8001aa0:	f8cd a000 	str.w	sl, [sp]
			Menu_SetSelected(cur_sequence,false);
 8001aa4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8001b48 <Menu_Run+0x18c>
			GUI_RectangleFill(MenuWindow.x+1,MenuScrollbar.y,MenuScrollbar.x-1,MenuWindow.height-2,0);
 8001aa8:	3b02      	subs	r3, #2
 8001aaa:	3a01      	subs	r2, #1
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	3001      	adds	r0, #1
 8001ab0:	f000 f870 	bl	8001b94 <GUI_RectangleFill>
			Menu_SetSelected(cur_sequence,false);
 8001ab4:	4651      	mov	r1, sl
 8001ab6:	f8d8 0000 	ldr.w	r0, [r8]
 8001aba:	f7ff ff71 	bl	80019a0 <Menu_SetSelected>
			cur_sequence = cur_rotateNum;
 8001abe:	f8d9 0000 	ldr.w	r0, [r9]
			Menu_SetSelected(cur_sequence,true);
 8001ac2:	4631      	mov	r1, r6
			cur_sequence = cur_rotateNum;
 8001ac4:	f8c8 0000 	str.w	r0, [r8]
			Menu_SetSelected(cur_sequence,true);
 8001ac8:	f7ff ff6a 	bl	80019a0 <Menu_SetSelected>
			CurMenu->cursorPosition++;
 8001acc:	6822      	ldr	r2, [r4, #0]
 8001ace:	46b9      	mov	r9, r7
 8001ad0:	7813      	ldrb	r3, [r2, #0]
			if (CurMenu->menuItemCount <= MenuWindow.itemsperpage) {
 8001ad2:	7856      	ldrb	r6, [r2, #1]
			CurMenu->cursorPosition++;
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	7013      	strb	r3, [r2, #0]
			if (CurMenu->menuItemCount <= MenuWindow.itemsperpage) {
 8001ada:	6929      	ldr	r1, [r5, #16]
 8001adc:	4630      	mov	r0, r6
 8001ade:	428e      	cmp	r6, r1
 8001ae0:	d80d      	bhi.n	8001afe <Menu_Run+0x142>
				if (CurMenu->cursorPosition >= CurMenu->menuItemCount)
 8001ae2:	42b3      	cmp	r3, r6
 8001ae4:	db01      	blt.n	8001aea <Menu_Run+0x12e>
					CurMenu->cursorPosition = CurMenu->menuItemCount - 1;
 8001ae6:	1e73      	subs	r3, r6, #1
 8001ae8:	7013      	strb	r3, [r2, #0]
			for (int i = 0; i < showItems; i++) {
 8001aea:	2700      	movs	r7, #0
				MenuItem_Typedef* Item = CurMenu + MenuWindow.topitem + i;
 8001aec:	f04f 0a1c 	mov.w	sl, #28
			for (int i = 0; i < showItems; i++) {
 8001af0:	42b7      	cmp	r7, r6
 8001af2:	db11      	blt.n	8001b18 <Menu_Run+0x15c>
			MenuScrollbar.topitem = cur_sequence;
 8001af4:	f8d8 3000 	ldr.w	r3, [r8]
 8001af8:	f8c9 3018 	str.w	r3, [r9, #24]
 8001afc:	e7a9      	b.n	8001a52 <Menu_Run+0x96>
				if (CurMenu->cursorPosition > MenuWindow.itemsperpage - 1) {
 8001afe:	1e4f      	subs	r7, r1, #1
 8001b00:	42bb      	cmp	r3, r7
				showItems = MenuWindow.itemsperpage;
 8001b02:	b2ce      	uxtb	r6, r1
				if (CurMenu->cursorPosition > MenuWindow.itemsperpage - 1) {
 8001b04:	d9f1      	bls.n	8001aea <Menu_Run+0x12e>
					CurMenu->cursorPosition = MenuWindow.itemsperpage - 1;
 8001b06:	1e73      	subs	r3, r6, #1
 8001b08:	7013      	strb	r3, [r2, #0]
					if (MenuWindow.topitem < CurMenu->menuItemCount - MenuWindow.itemsperpage)
 8001b0a:	696b      	ldr	r3, [r5, #20]
 8001b0c:	1a41      	subs	r1, r0, r1
 8001b0e:	428b      	cmp	r3, r1
						MenuWindow.topitem++;
 8001b10:	bf3c      	itt	cc
 8001b12:	3301      	addcc	r3, #1
 8001b14:	616b      	strcc	r3, [r5, #20]
 8001b16:	e7e8      	b.n	8001aea <Menu_Run+0x12e>
				MenuItem_Typedef* Item = CurMenu + MenuWindow.topitem + i;
 8001b18:	696a      	ldr	r2, [r5, #20]
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	443a      	add	r2, r7
				GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
 8001b1e:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 8001b22:	fb0a 3202 	mla	r2, sl, r2, r3
 8001b26:	3113      	adds	r1, #19
 8001b28:	2014      	movs	r0, #20
 8001b2a:	f000 f8d3 	bl	8001cd4 <GUI_MenuItemDraw>
			for (int i = 0; i < showItems; i++) {
 8001b2e:	3701      	adds	r7, #1
 8001b30:	e7de      	b.n	8001af0 <Menu_Run+0x134>
}
 8001b32:	b002      	add	sp, #8
 8001b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b38:	20000088 	.word	0x20000088
 8001b3c:	200000ac 	.word	0x200000ac
 8001b40:	2000008c 	.word	0x2000008c
 8001b44:	200020f8 	.word	0x200020f8
 8001b48:	200020fc 	.word	0x200020fc

08001b4c <GUI_Rectangle>:
*           color	顯示顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_Rectangle(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8001b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b50:	461c      	mov	r4, r3
 8001b52:	f89d 5018 	ldrb.w	r5, [sp, #24]
	GUI_HLine(x0, y0, x1, color);
 8001b56:	fa1f f880 	uxth.w	r8, r0
 8001b5a:	b2cf      	uxtb	r7, r1
 8001b5c:	b296      	uxth	r6, r2
	GUI_HLine(x0, y1, x1, color);
 8001b5e:	b2e4      	uxtb	r4, r4
	GUI_HLine(x0, y0, x1, color);
 8001b60:	462b      	mov	r3, r5
 8001b62:	4632      	mov	r2, r6
 8001b64:	4639      	mov	r1, r7
 8001b66:	4640      	mov	r0, r8
 8001b68:	f000 f8ed 	bl	8001d46 <GUI_HLine>
	GUI_HLine(x0, y1, x1, color);
 8001b6c:	462b      	mov	r3, r5
 8001b6e:	4632      	mov	r2, r6
 8001b70:	4621      	mov	r1, r4
 8001b72:	4640      	mov	r0, r8
 8001b74:	f000 f8e7 	bl	8001d46 <GUI_HLine>
	GUI_RLine(x0, y0, y1, color);
 8001b78:	462b      	mov	r3, r5
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	4639      	mov	r1, r7
 8001b7e:	4640      	mov	r0, r8
 8001b80:	f000 f8f6 	bl	8001d70 <GUI_RLine>
	GUI_RLine(x1, y0, y1, color);
 8001b84:	462b      	mov	r3, r5
 8001b86:	4622      	mov	r2, r4
 8001b88:	4639      	mov	r1, r7
 8001b8a:	4630      	mov	r0, r6
}
 8001b8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	GUI_RLine(x1, y0, y1, color);
 8001b90:	f000 b8ee 	b.w	8001d70 <GUI_RLine>

08001b94 <GUI_RectangleFill>:
*           color	填充顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_RectangleFill(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8001b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t  i;

	/* 先找出矩形左上角與右下角的兩個點，保存在(x0,y0)，(x1,y1) */
	if(x0>x1) 						// 若x0>x1，則x0與x1交換
 8001b98:	4290      	cmp	r0, r2
{  
 8001b9a:	460c      	mov	r4, r1
 8001b9c:	461f      	mov	r7, r3
 8001b9e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if(x0>x1) 						// 若x0>x1，則x0與x1交換
 8001ba2:	d82b      	bhi.n	8001bfc <GUI_RectangleFill+0x68>
	{  
		i = x0;
		x0 = x1;
		x1 = i;
	}
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 8001ba4:	4299      	cmp	r1, r3
 8001ba6:	d809      	bhi.n	8001bbc <GUI_RectangleFill+0x28>
		y0 = y1;
		y1 = i;
	}

	/* 判斷是否只是直線 */
	if(y0==y1) 
 8001ba8:	42bc      	cmp	r4, r7
 8001baa:	d109      	bne.n	8001bc0 <GUI_RectangleFill+0x2c>
	{  
		GUI_HLine(x0, y0, x1, color);
 8001bac:	4643      	mov	r3, r8
 8001bae:	b2e1      	uxtb	r1, r4
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	b280      	uxth	r0, r0
	while(y0<=y1)						
	{  
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
		y0++;							// 下一行
	}
}
 8001bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GUI_HLine(x0, y0, x1, color);
 8001bb8:	f000 b8c5 	b.w	8001d46 <GUI_HLine>
 8001bbc:	463c      	mov	r4, r7
 8001bbe:	460f      	mov	r7, r1
	if(x0==x1) 
 8001bc0:	4290      	cmp	r0, r2
 8001bc2:	d10d      	bne.n	8001be0 <GUI_RectangleFill+0x4c>
		GUI_RLine(x0, y0, y1, color);
 8001bc4:	4643      	mov	r3, r8
 8001bc6:	b2fa      	uxtb	r2, r7
 8001bc8:	b2e1      	uxtb	r1, r4
 8001bca:	b280      	uxth	r0, r0
}
 8001bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GUI_RLine(x0, y0, y1, color);
 8001bd0:	f000 b8ce 	b.w	8001d70 <GUI_RLine>
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4627      	mov	r7, r4
 8001bd8:	461c      	mov	r4, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4610      	mov	r0, r2
 8001bde:	461a      	mov	r2, r3
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
 8001be0:	b296      	uxth	r6, r2
 8001be2:	b285      	uxth	r5, r0
	while(y0<=y1)						
 8001be4:	42bc      	cmp	r4, r7
 8001be6:	d901      	bls.n	8001bec <GUI_RectangleFill+0x58>
 8001be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
 8001bec:	b2e1      	uxtb	r1, r4
 8001bee:	4643      	mov	r3, r8
 8001bf0:	4632      	mov	r2, r6
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f000 f8a7 	bl	8001d46 <GUI_HLine>
		y0++;							// 下一行
 8001bf8:	3401      	adds	r4, #1
 8001bfa:	e7f3      	b.n	8001be4 <GUI_RectangleFill+0x50>
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 8001bfc:	4299      	cmp	r1, r3
 8001bfe:	d8e9      	bhi.n	8001bd4 <GUI_RectangleFill+0x40>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4610      	mov	r0, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	e7cf      	b.n	8001ba8 <GUI_RectangleFill+0x14>

08001c08 <GUI_Line>:
*           color	顯示顏色(對於黑白色LCM，為0時滅，為1時顯示)
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_Line(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8001c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c0c:	4699      	mov	r9, r3
	int8_t    dy_sym;				// y軸增長方向，為-1時減值方向，為1時增值方向
	int32_t   dx_x2;				// dx*2值變量，用於加快運算速度
	int32_t   dy_x2;				// dy*2值變量，用於加快運算速度
	int32_t   di;					// 決策變量

	dx = x1-x0;						// 求取兩點之間的差值
 8001c0e:	1a13      	subs	r3, r2, r0
	dy = y1-y0;
	/* 判斷增長方向，或是否為水平線、垂直線、點 */
	if(dx>0)						// 判斷x軸方向
 8001c10:	2b00      	cmp	r3, #0
{  
 8001c12:	4604      	mov	r4, r0
 8001c14:	460d      	mov	r5, r1
 8001c16:	4692      	mov	sl, r2
 8001c18:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	dy = y1-y0;
 8001c1c:	eba9 0201 	sub.w	r2, r9, r1
 8001c20:	b280      	uxth	r0, r0
 8001c22:	b2c9      	uxtb	r1, r1
	if(dx>0)						// 判斷x軸方向
 8001c24:	dc08      	bgt.n	8001c38 <GUI_Line+0x30>
	{  
		dx_sym = 1;					// dx>0，設置dx_sym=1
	}
	else
	{  
		if(dx<0)
 8001c26:	d113      	bne.n	8001c50 <GUI_Line+0x48>
			dx_sym = -1;			// dx<0，設置dx_sym=-1
		else
		{  							// dx==0，畫垂直線，或一點
			GUI_RLine(x0, y0, y1, color);
 8001c28:	4633      	mov	r3, r6
 8001c2a:	fa5f f289 	uxtb.w	r2, r9
				x0 += dx_sym;
			}
		}
		GUI_Point(x0, y0, color);		// 顯示最後一點
	} 
}
 8001c2e:	b003      	add	sp, #12
 8001c30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			GUI_RLine(x0, y0, y1, color);
 8001c34:	f000 b89c 	b.w	8001d70 <GUI_RLine>
		dx_sym = 1;					// dx>0，設置dx_sym=1
 8001c38:	2701      	movs	r7, #1
	if(dy>0)						// 判斷y軸方向
 8001c3a:	2a00      	cmp	r2, #0
 8001c3c:	dc0b      	bgt.n	8001c56 <GUI_Line+0x4e>
		if(dy<0)
 8001c3e:	d124      	bne.n	8001c8a <GUI_Line+0x82>
			GUI_HLine(x0, y0, x1, color);
 8001c40:	4633      	mov	r3, r6
 8001c42:	fa1f f28a 	uxth.w	r2, sl
}
 8001c46:	b003      	add	sp, #12
 8001c48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			GUI_HLine(x0, y0, x1, color);
 8001c4c:	f000 b87b 	b.w	8001d46 <GUI_HLine>
			dx_sym = -1;			// dx<0，設置dx_sym=-1
 8001c50:	f04f 37ff 	mov.w	r7, #4294967295
 8001c54:	e7f1      	b.n	8001c3a <GUI_Line+0x32>
		dy_sym = 1;					// dy>0，設置dy_sym=1
 8001c56:	f04f 0801 	mov.w	r8, #1
	dx = dx_sym * dx;
 8001c5a:	fb03 f107 	mul.w	r1, r3, r7
	dy = dy_sym * dy;
 8001c5e:	fb02 f208 	mul.w	r2, r2, r8
	if(dx>=dy)						// 對於dx>=dy，則使用x軸為基準
 8001c62:	4291      	cmp	r1, r2
	dx_x2 = dx*2;
 8001c64:	ea4f 0b41 	mov.w	fp, r1, lsl #1
	dy_x2 = dy*2;
 8001c68:	ea4f 0342 	mov.w	r3, r2, lsl #1
	if(dx>=dy)						// 對於dx>=dy，則使用x軸為基準
 8001c6c:	db1d      	blt.n	8001caa <GUI_Line+0xa2>
		di = dy_x2 - dx;
 8001c6e:	eba3 0901 	sub.w	r9, r3, r1
				di += dy_x2 - dx_x2;
 8001c72:	eba9 0b01 	sub.w	fp, r9, r1
		while(x0!=x1)
 8001c76:	4554      	cmp	r4, sl
 8001c78:	b2e9      	uxtb	r1, r5
 8001c7a:	b2a0      	uxth	r0, r4
 8001c7c:	d108      	bne.n	8001c90 <GUI_Line+0x88>
		GUI_Point(x0, y0, color);		// 顯示最後一點
 8001c7e:	4632      	mov	r2, r6
}
 8001c80:	b003      	add	sp, #12
 8001c82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Point(x0, y0, color);		// 顯示最後一點
 8001c86:	f000 b85b 	b.w	8001d40 <GUI_Point>
			dy_sym = -1;			// dy<0，設置dy_sym=-1
 8001c8a:	f04f 38ff 	mov.w	r8, #4294967295
 8001c8e:	e7e4      	b.n	8001c5a <GUI_Line+0x52>
			GUI_Point(x0, y0, color);
 8001c90:	4632      	mov	r2, r6
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	f000 f854 	bl	8001d40 <GUI_Point>
			if(di<0)
 8001c98:	9b01      	ldr	r3, [sp, #4]
 8001c9a:	f1b9 0f00 	cmp.w	r9, #0
 8001c9e:	443c      	add	r4, r7
				di += dy_x2;		// 計算出下一步的決策值
 8001ca0:	bfb2      	itee	lt
 8001ca2:	4499      	addlt	r9, r3
				di += dy_x2 - dx_x2;
 8001ca4:	44d9      	addge	r9, fp
				y0 += dy_sym;
 8001ca6:	4445      	addge	r5, r8
 8001ca8:	e7e5      	b.n	8001c76 <GUI_Line+0x6e>
		di = dx_x2 - dy;
 8001caa:	ebab 0a02 	sub.w	sl, fp, r2
				di += dx_x2 - dy_x2;
 8001cae:	ebaa 0302 	sub.w	r3, sl, r2
		while(y0!=y1)
 8001cb2:	454d      	cmp	r5, r9
 8001cb4:	b2e9      	uxtb	r1, r5
 8001cb6:	b2a0      	uxth	r0, r4
 8001cb8:	d0e1      	beq.n	8001c7e <GUI_Line+0x76>
			GUI_Point(x0, y0, color);
 8001cba:	4632      	mov	r2, r6
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	f000 f83f 	bl	8001d40 <GUI_Point>
			if(di<0)
 8001cc2:	9b01      	ldr	r3, [sp, #4]
 8001cc4:	f1ba 0f00 	cmp.w	sl, #0
 8001cc8:	4445      	add	r5, r8
				di += dx_x2;
 8001cca:	bfb2      	itee	lt
 8001ccc:	44da      	addlt	sl, fp
				di += dx_x2 - dy_x2;
 8001cce:	449a      	addge	sl, r3
				x0 += dx_sym;
 8001cd0:	19e4      	addge	r4, r4, r7
 8001cd2:	e7ee      	b.n	8001cb2 <GUI_Line+0xaa>

08001cd4 <GUI_MenuItemDraw>:
* 功能：顯示條目菜單
* 入口參數：ico		圖標菜單句柄
* 出口參數：返回0表示操作失敗，返回1表示操作成功
****************************************************************************/
uint8_t  GUI_MenuItemDraw(uint32_t x, uint32_t y, MenuItem_Typedef *item)
{  
 8001cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( x>GUI_LCM_XMAX || y>GUI_LCM_YMAX) return(0);
	if(y<2) return(0);
 8001cd6:	f1a1 0e02 	sub.w	lr, r1, #2
 8001cda:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
{  
 8001cde:	4615      	mov	r5, r2
	if(y<2) return(0);
 8001ce0:	d82a      	bhi.n	8001d38 <GUI_MenuItemDraw+0x64>
	if(x<18) return(0);
 8001ce2:	f1a0 0412 	sub.w	r4, r0, #18
 8001ce6:	2cee      	cmp	r4, #238	; 0xee
 8001ce8:	d826      	bhi.n	8001d38 <GUI_MenuItemDraw+0x64>
	if( (item->title)==NULL )  return(0);
 8001cea:	68d3      	ldr	r3, [r2, #12]
 8001cec:	b333      	cbz	r3, 8001d3c <GUI_MenuItemDraw+0x68>

	if(item->isSelect == false)
 8001cee:	7893      	ldrb	r3, [r2, #2]
 8001cf0:	b28f      	uxth	r7, r1
 8001cf2:	b286      	uxth	r6, r0
 8001cf4:	b9a3      	cbnz	r3, 8001d20 <GUI_MenuItemDraw+0x4c>
	{  
		if(item->icoUnselected != NULL)
 8001cf6:	6892      	ldr	r2, [r2, #8]
 8001cf8:	b132      	cbz	r2, 8001d08 <GUI_MenuItemDraw+0x34>
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoUnselected ,16, 16);
 8001cfa:	2310      	movs	r3, #16
 8001cfc:	fa5f f18e 	uxtb.w	r1, lr
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	b2e0      	uxtb	r0, r4
 8001d04:	f7fe fd6e 	bl	80007e4 <OLED_ShowPicture>
		show_str(x, y,(uint8_t *) item->title,12,12,1);
 8001d08:	2401      	movs	r4, #1
 8001d0a:	9401      	str	r4, [sp, #4]
	}
	else
	{  
		if(item->icoSelected != NULL)
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoSelected ,16, 16);
		show_str(x,y,(uint8_t *) item->title, 12,12,0);
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	4630      	mov	r0, r6
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	68ea      	ldr	r2, [r5, #12]
 8001d14:	4639      	mov	r1, r7
 8001d16:	f000 f8dd 	bl	8001ed4 <show_str>
	}
	return(1);
 8001d1a:	2001      	movs	r0, #1
}
 8001d1c:	b003      	add	sp, #12
 8001d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(item->icoSelected != NULL)
 8001d20:	6852      	ldr	r2, [r2, #4]
 8001d22:	b132      	cbz	r2, 8001d32 <GUI_MenuItemDraw+0x5e>
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoSelected ,16, 16);
 8001d24:	2310      	movs	r3, #16
 8001d26:	fa5f f18e 	uxtb.w	r1, lr
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	b2e0      	uxtb	r0, r4
 8001d2e:	f7fe fd59 	bl	80007e4 <OLED_ShowPicture>
		show_str(x,y,(uint8_t *) item->title, 12,12,0);
 8001d32:	2300      	movs	r3, #0
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	e7e9      	b.n	8001d0c <GUI_MenuItemDraw+0x38>
	if(y<2) return(0);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	e7ef      	b.n	8001d1c <GUI_MenuItemDraw+0x48>
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	e7ed      	b.n	8001d1c <GUI_MenuItemDraw+0x48>

08001d40 <GUI_Point>:
*          效範圍)
* 說明：用戶根據LCM的實際情況編寫此函數。
****************************************************************************/
void  GUI_Point(uint16_t x, uint8_t y, TCOLOR color)
{
	OLED_DrawPoint(x,y,color);
 8001d40:	b2c0      	uxtb	r0, r0
 8001d42:	f7fe bc73 	b.w	800062c <OLED_DrawPoint>

08001d46 <GUI_HLine>:
*      新8個點，而不需要一個點一個點的寫到LCM中。
****************************************************************************/
void  GUI_HLine(uint16_t x0, uint8_t y0, uint16_t x1, TCOLOR color)
{
	uint8_t  temp;
	if(x0>x1)               // 對x0、x1大小進行排列，以便畫圖
 8001d46:	4290      	cmp	r0, r2
{
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	461f      	mov	r7, r3
 8001d4c:	bf88      	it	hi
 8001d4e:	b2d3      	uxtbhi	r3, r2
 8001d50:	4604      	mov	r4, r0
 8001d52:	4615      	mov	r5, r2
 8001d54:	460e      	mov	r6, r1
	if(x0>x1)               // 對x0、x1大小進行排列，以便畫圖
 8001d56:	bf84      	itt	hi
 8001d58:	4605      	movhi	r5, r0
	{
		temp = x1;
		x1 = x0;
		x0 = temp;
 8001d5a:	461c      	movhi	r4, r3
	OLED_DrawPoint(x,y,color);
 8001d5c:	b2e0      	uxtb	r0, r4
	}
	do
	{
		GUI_Point(x0, y0, color);   // 逐點顯示，描出垂直線
		x0++;
 8001d5e:	3401      	adds	r4, #1
	OLED_DrawPoint(x,y,color);
 8001d60:	463a      	mov	r2, r7
 8001d62:	4631      	mov	r1, r6
		x0++;
 8001d64:	b2a4      	uxth	r4, r4
	OLED_DrawPoint(x,y,color);
 8001d66:	f7fe fc61 	bl	800062c <OLED_DrawPoint>
	}
	while(x1>=x0);
 8001d6a:	42a5      	cmp	r5, r4
 8001d6c:	d2f6      	bcs.n	8001d5c <GUI_HLine+0x16>
}
 8001d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d70 <GUI_RLine>:
*      新8個點，而不需要一個點一個點的寫到LCM中。
****************************************************************************/
void  GUI_RLine(uint16_t x0, uint8_t y0, uint8_t y1, TCOLOR color)
{
    uint8_t  temp;
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8001d70:	4291      	cmp	r1, r2
{
 8001d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d74:	461f      	mov	r7, r3
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8001d76:	bf88      	it	hi
 8001d78:	460b      	movhi	r3, r1
{
 8001d7a:	460c      	mov	r4, r1
 8001d7c:	4615      	mov	r5, r2
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8001d7e:	bf84      	itt	hi
 8001d80:	4614      	movhi	r4, r2
 8001d82:	461d      	movhi	r5, r3
	OLED_DrawPoint(x,y,color);
 8001d84:	b2c6      	uxtb	r6, r0
 8001d86:	4621      	mov	r1, r4
        y0 = temp;
    }
    do
    {
        GUI_Point(x0, y0, color);   // 逐點顯示，描出垂直線
        y0++;
 8001d88:	3401      	adds	r4, #1
	OLED_DrawPoint(x,y,color);
 8001d8a:	463a      	mov	r2, r7
 8001d8c:	4630      	mov	r0, r6
        y0++;
 8001d8e:	b2e4      	uxtb	r4, r4
	OLED_DrawPoint(x,y,color);
 8001d90:	f7fe fc4c 	bl	800062c <OLED_DrawPoint>
    }
    while(y1>=y0);
 8001d94:	42a5      	cmp	r5, r4
 8001d96:	d2f6      	bcs.n	8001d86 <GUI_RLine+0x16>
}
 8001d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d9a <GUI_Refresh>:
* 功能：刷新屏幕
*           
****************************************************************************/
void  GUI_Refresh(void)
{
	OLED_RefreshGram();
 8001d9a:	f7fe bc89 	b.w	80006b0 <OLED_RefreshGram>

08001d9e <GUI_Scrollbar_SetPos>:
0x40,0x70,0x7C,0x7E,0x7E,0x7C,0x70,0x40,
};

//設置滾動條的位置
void GUI_Scrollbar_SetPos(Scrollbar_Typedef *scbx)
{	
 8001d9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint16_t x,y,xlen,ylen;
//	uint8_t scbplen;
//	
//	scbplen = SCROLL_BTN_HEIGHT;  //得到按鈕的高度
	
	scblen=scbx->height-2*SCROLL_BTN_HEIGHT-scbx->scbbarlen;//得到滾動條滾動空間的長度
 8001da2:	68c4      	ldr	r4, [r0, #12]
 8001da4:	8b82      	ldrh	r2, [r0, #28]
 8001da6:	3c14      	subs	r4, #20
 8001da8:	1aa4      	subs	r4, r4, r2
 8001daa:	fa1f f984 	uxth.w	r9, r4
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
	xlen=scbx->width-2-1;         //滾動條寬度 -1
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
	
	//清除滾動條
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 8001dae:	2400      	movs	r4, #0
{	
 8001db0:	4605      	mov	r5, r0
	x=scbx->x+1;                  //滾動條起始坐標x
 8001db2:	6807      	ldr	r7, [r0, #0]
	xlen=scbx->width-2-1;         //滾動條寬度 -1
 8001db4:	6886      	ldr	r6, [r0, #8]
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 8001db6:	6841      	ldr	r1, [r0, #4]
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
 8001db8:	1e53      	subs	r3, r2, #1
	x=scbx->x+1;                  //滾動條起始坐標x
 8001dba:	3701      	adds	r7, #1
	xlen=scbx->width-2-1;         //滾動條寬度 -1
 8001dbc:	3e03      	subs	r6, #3
	x=scbx->x+1;                  //滾動條起始坐標x
 8001dbe:	b2bf      	uxth	r7, r7
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 8001dc0:	310a      	adds	r1, #10
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
 8001dc2:	444b      	add	r3, r9
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 8001dc4:	b2b6      	uxth	r6, r6
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 8001dc6:	fa1f f881 	uxth.w	r8, r1
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 8001dca:	443e      	add	r6, r7
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	9400      	str	r4, [sp, #0]
 8001dd0:	4443      	add	r3, r8
 8001dd2:	4632      	mov	r2, r6
 8001dd4:	4641      	mov	r1, r8
 8001dd6:	4638      	mov	r0, r7
 8001dd8:	f7ff fedc 	bl	8001b94 <GUI_RectangleFill>
	if(scbx->totalitems <= scbx->itemsperpage)//總條目不夠一頁顯示的
 8001ddc:	6929      	ldr	r1, [r5, #16]
 8001dde:	696b      	ldr	r3, [r5, #20]
	{
		scbpos=(scbx->topitem*scblen)/(scbx->totalitems-1);//計算當前滾動條偏移的位置
	}
	
	//畫出滾動條
	GUI_RectangleFill(x ,y+scbpos,x+xlen,y+scbpos+scbx->scbbarlen, 1);
 8001de0:	2201      	movs	r2, #1
	if(scbx->totalitems <= scbx->itemsperpage)//總條目不夠一頁顯示的
 8001de2:	4299      	cmp	r1, r3
		scbpos=(scbx->topitem*scblen)/(scbx->totalitems-1);//計算當前滾動條偏移的位置
 8001de4:	bf81      	itttt	hi
 8001de6:	69ab      	ldrhi	r3, [r5, #24]
 8001de8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8001dec:	fb03 f409 	mulhi.w	r4, r3, r9
 8001df0:	fbb4 f4f1 	udivhi	r4, r4, r1
	GUI_RectangleFill(x ,y+scbpos,x+xlen,y+scbpos+scbx->scbbarlen, 1);
 8001df4:	69eb      	ldr	r3, [r5, #28]
 8001df6:	b2a4      	uxth	r4, r4
 8001df8:	eb04 0108 	add.w	r1, r4, r8
 8001dfc:	9200      	str	r2, [sp, #0]
 8001dfe:	440b      	add	r3, r1
 8001e00:	4632      	mov	r2, r6
 8001e02:	4638      	mov	r0, r7
 8001e04:	f7ff fec6 	bl	8001b94 <GUI_RectangleFill>
	//GUI_Refresh();	//刷新屏幕
}
 8001e08:	b003      	add	sp, #12
 8001e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001e10 <GUI_ScrollbarDraw>:



//創建一個滾動條
void GUI_ScrollbarDraw(Scrollbar_Typedef *scbx)
{
 8001e10:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t scbactlen=0;//滾動條可以滾動的空間長度
	if(scbx==NULL) return;
 8001e12:	4604      	mov	r4, r0
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d057      	beq.n	8001ec8 <GUI_ScrollbarDraw+0xb8>
	if(scbx->width<SCROLL_BTN_WIDTH) return;
 8001e18:	6882      	ldr	r2, [r0, #8]
 8001e1a:	2a09      	cmp	r2, #9
 8001e1c:	d954      	bls.n	8001ec8 <GUI_ScrollbarDraw+0xb8>
	if(scbx->height<2*SCROLL_BTN_HEIGHT) return;
 8001e1e:	68c3      	ldr	r3, [r0, #12]
 8001e20:	2b13      	cmp	r3, #19
 8001e22:	d951      	bls.n	8001ec8 <GUI_ScrollbarDraw+0xb8>
	
	//畫外邊框
	GUI_Rectangle(scbx->x, scbx->y, scbx->x+scbx->width-1, scbx->y+scbx->height-1, 1);
 8001e24:	c803      	ldmia	r0, {r0, r1}
 8001e26:	2501      	movs	r5, #1
	//畫上下兩個按鈕
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+1, (uint8_t *)scroll_btn_up, 8, 8);
 8001e28:	2608      	movs	r6, #8
	GUI_Rectangle(scbx->x, scbx->y, scbx->x+scbx->width-1, scbx->y+scbx->height-1, 1);
 8001e2a:	440b      	add	r3, r1
 8001e2c:	4402      	add	r2, r0
 8001e2e:	9500      	str	r5, [sp, #0]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	3a01      	subs	r2, #1
 8001e34:	f7ff fe8a 	bl	8001b4c <GUI_Rectangle>
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+1, (uint8_t *)scroll_btn_up, 8, 8);
 8001e38:	68a0      	ldr	r0, [r4, #8]
 8001e3a:	6861      	ldr	r1, [r4, #4]
 8001e3c:	f1a0 0308 	sub.w	r3, r0, #8
 8001e40:	6820      	ldr	r0, [r4, #0]
 8001e42:	4429      	add	r1, r5
 8001e44:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001e48:	9600      	str	r6, [sp, #0]
 8001e4a:	4633      	mov	r3, r6
 8001e4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ecc <GUI_ScrollbarDraw+0xbc>)
 8001e4e:	b2c9      	uxtb	r1, r1
 8001e50:	b2c0      	uxtb	r0, r0
 8001e52:	f7fe fcc7 	bl	80007e4 <OLED_ShowPicture>
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+scbx->height-9, (uint8_t *)scroll_btn_down, 8, 8);
 8001e56:	68e3      	ldr	r3, [r4, #12]
 8001e58:	68a0      	ldr	r0, [r4, #8]
 8001e5a:	6861      	ldr	r1, [r4, #4]
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <GUI_ScrollbarDraw+0xc0>)
 8001e5e:	4419      	add	r1, r3
 8001e60:	f1a0 0308 	sub.w	r3, r0, #8
 8001e64:	6820      	ldr	r0, [r4, #0]
 8001e66:	3909      	subs	r1, #9
 8001e68:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001e6c:	9600      	str	r6, [sp, #0]
 8001e6e:	4633      	mov	r3, r6
 8001e70:	b2c9      	uxtb	r1, r1
 8001e72:	b2c0      	uxtb	r0, r0
 8001e74:	f7fe fcb6 	bl	80007e4 <OLED_ShowPicture>
	//畫按鈕邊框
	GUI_Line(scbx->x, scbx->y+9, scbx->x+scbx->width-1, scbx->y+9,1);
 8001e78:	e894 0009 	ldmia.w	r4, {r0, r3}
 8001e7c:	68a2      	ldr	r2, [r4, #8]
 8001e7e:	3309      	adds	r3, #9
 8001e80:	4402      	add	r2, r0
 8001e82:	4619      	mov	r1, r3
 8001e84:	9500      	str	r5, [sp, #0]
 8001e86:	3a01      	subs	r2, #1
 8001e88:	f7ff febe 	bl	8001c08 <GUI_Line>
	GUI_Line(scbx->x, scbx->y+scbx->height-10, scbx->x+scbx->width-1, scbx->y+scbx->height-10,1);
 8001e8c:	e894 0009 	ldmia.w	r4, {r0, r3}
 8001e90:	68e2      	ldr	r2, [r4, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	68a2      	ldr	r2, [r4, #8]
 8001e96:	3b0a      	subs	r3, #10
 8001e98:	4402      	add	r2, r0
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	9500      	str	r5, [sp, #0]
 8001e9e:	3a01      	subs	r2, #1
 8001ea0:	f7ff feb2 	bl	8001c08 <GUI_Line>
	
	
	//可供滾動條滾動的空間範圍
	scbactlen=scbx->height -2*SCROLL_BTN_HEIGHT;
 8001ea4:	68e3      	ldr	r3, [r4, #12]
	
	//每頁滾動條目大於總條目數 滾動條目等於最大可滾動的控件
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8001ea6:	6921      	ldr	r1, [r4, #16]
	scbactlen=scbx->height -2*SCROLL_BTN_HEIGHT;
 8001ea8:	f1a3 0214 	sub.w	r2, r3, #20
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8001eac:	6963      	ldr	r3, [r4, #20]
	//每頁滾動條目小於總條目數
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
	//設置滾動條的位置
	GUI_Scrollbar_SetPos(scbx);
 8001eae:	4620      	mov	r0, r4
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8001eb0:	428b      	cmp	r3, r1
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
 8001eb2:	bf3b      	ittet	cc
 8001eb4:	4353      	mulcc	r3, r2
 8001eb6:	fbb3 f3f1 	udivcc	r3, r3, r1
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8001eba:	61e2      	strcs	r2, [r4, #28]
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
 8001ebc:	61e3      	strcc	r3, [r4, #28]
}
 8001ebe:	b002      	add	sp, #8
 8001ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GUI_Scrollbar_SetPos(scbx);
 8001ec4:	f7ff bf6b 	b.w	8001d9e <GUI_Scrollbar_SetPos>
}
 8001ec8:	b002      	add	sp, #8
 8001eca:	bd70      	pop	{r4, r5, r6, pc}
 8001ecc:	08002928 	.word	0x08002928
 8001ed0:	08002920 	.word	0x08002920

08001ed4 <show_str>:
//str  :字符串
//f_w:字寬
//f_h:字高
//mode:0,非疊加方式;1,疊加方式
void show_str(uint16_t x,uint16_t y,const uint8_t*str,uint8_t f_w,uint8_t f_h,uint8_t mode)
{					
 8001ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed8:	4680      	mov	r8, r0
	uint16_t x0 = x;
	uint16_t y0 = y;
	while (*str != 0)
 8001eda:	460c      	mov	r4, r1
 8001edc:	4645      	mov	r5, r8
{					
 8001ede:	b085      	sub	sp, #20
 8001ee0:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8001ee4:	4616      	mov	r6, r2
 8001ee6:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
			y += f_h;
			x = x0;
			str++;
		}
		else
			OLED_ShowChar(x, y, *str, f_w / 2, f_h, mode);     //有效部分寫入
 8001eea:	ea4f 0a53 	mov.w	sl, r3, lsr #1
{					
 8001eee:	9203      	str	r2, [sp, #12]
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 8001ef0:	087a      	lsrs	r2, r7, #1
 8001ef2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
		str++;
		x += f_h / 2; //字符,為全字的一半
 8001ef6:	b293      	uxth	r3, r2
		if (y > (y0 + LCD_HIGH - f_h))
 8001ef8:	f101 0940 	add.w	r9, r1, #64	; 0x40
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 8001efc:	eb00 0b08 	add.w	fp, r0, r8
		x += f_h / 2; //字符,為全字的一半
 8001f00:	9302      	str	r3, [sp, #8]
		if (y > (y0 + LCD_HIGH - f_h))
 8001f02:	eba9 0907 	sub.w	r9, r9, r7
	while (*str != 0)
 8001f06:	7832      	ldrb	r2, [r6, #0]
 8001f08:	b912      	cbnz	r2, 8001f10 <show_str+0x3c>

	}
}  			 		 
 8001f0a:	b005      	add	sp, #20
 8001f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 8001f10:	455d      	cmp	r5, fp
			y += f_h;
 8001f12:	bfc2      	ittt	gt
 8001f14:	19e4      	addgt	r4, r4, r7
 8001f16:	b2a4      	uxthgt	r4, r4
			x = x0;
 8001f18:	4645      	movgt	r5, r8
		if (y > (y0 + LCD_HIGH - f_h))
 8001f1a:	454c      	cmp	r4, r9
 8001f1c:	dcf5      	bgt.n	8001f0a <show_str+0x36>
		if (*str == 13) //換行符號
 8001f1e:	2a0d      	cmp	r2, #13
 8001f20:	d108      	bne.n	8001f34 <show_str+0x60>
			x = x0;
 8001f22:	4645      	mov	r5, r8
			y += f_h;
 8001f24:	443c      	add	r4, r7
 8001f26:	b2a4      	uxth	r4, r4
			str++;
 8001f28:	3601      	adds	r6, #1
		x += f_h / 2; //字符,為全字的一半
 8001f2a:	9b02      	ldr	r3, [sp, #8]
		str++;
 8001f2c:	3601      	adds	r6, #1
		x += f_h / 2; //字符,為全字的一半
 8001f2e:	441d      	add	r5, r3
 8001f30:	b2ad      	uxth	r5, r5
 8001f32:	e7e8      	b.n	8001f06 <show_str+0x32>
			OLED_ShowChar(x, y, *str, f_w / 2, f_h, mode);     //有效部分寫入
 8001f34:	9b03      	ldr	r3, [sp, #12]
 8001f36:	9700      	str	r7, [sp, #0]
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	b2e1      	uxtb	r1, r4
 8001f3c:	4653      	mov	r3, sl
 8001f3e:	b2e8      	uxtb	r0, r5
 8001f40:	f7fe fbf4 	bl	800072c <OLED_ShowChar>
 8001f44:	e7f1      	b.n	8001f2a <show_str+0x56>

08001f46 <show_str_mid>:
//在指定寬度的中間顯示字符串(置中顯示)
//如果字符長度超過了len,則用Show_Str顯示
//len:指定要顯示的寬度
void show_str_mid(uint16_t x,uint16_t y,const uint8_t*str,uint8_t f_w,uint8_t f_h,uint8_t mode,uint16_t len)
{
 8001f46:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f4a:	4606      	mov	r6, r0
	uint16_t strlenth=0;
   	strlenth=strlen((char*)str);
 8001f4c:	4610      	mov	r0, r2
{
 8001f4e:	4689      	mov	r9, r1
 8001f50:	4617      	mov	r7, r2
 8001f52:	469a      	mov	sl, r3
   	strlenth=strlen((char*)str);
 8001f54:	f7fe f966 	bl	8000224 <strlen>
{
 8001f58:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8001f5c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	strlenth*=f_h/2;
 8001f60:	ea4f 0558 	mov.w	r5, r8, lsr #1
 8001f64:	4368      	muls	r0, r5
 8001f66:	b280      	uxth	r0, r0
	if(strlenth>len)show_str(x,y,str,f_w,f_h,mode);
 8001f68:	42a0      	cmp	r0, r4
{
 8001f6a:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
	if(strlenth>len)show_str(x,y,str,f_w,f_h,mode);
 8001f6e:	d90c      	bls.n	8001f8a <show_str_mid+0x44>
 8001f70:	4653      	mov	r3, sl
 8001f72:	463a      	mov	r2, r7
 8001f74:	4649      	mov	r1, r9
 8001f76:	4630      	mov	r0, r6
 8001f78:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8001f7c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	else
	{
		strlenth=(len-strlenth)/2;
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
	}
}   
 8001f80:	b001      	add	sp, #4
 8001f82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
 8001f86:	f7ff bfa5 	b.w	8001ed4 <show_str>
		strlenth=(len-strlenth)/2;
 8001f8a:	1a24      	subs	r4, r4, r0
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	fb94 f0f0 	sdiv	r0, r4, r0
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
 8001f92:	4430      	add	r0, r6
 8001f94:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8001f98:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8001f9c:	4653      	mov	r3, sl
 8001f9e:	463a      	mov	r2, r7
 8001fa0:	4649      	mov	r1, r9
 8001fa2:	b280      	uxth	r0, r0
 8001fa4:	e7ec      	b.n	8001f80 <show_str_mid+0x3a>

08001fa6 <getWindowStringlen>:

#if  GUI_WINDOW_EN==1

//得到字符串的長度
uint16_t getWindowStringlen(const unsigned char *str)
{
 8001fa6:	b508      	push	{r3, lr}
	uint16_t strlenth=0;
	strlenth=strlen((const char*)str);
 8001fa8:	f7fe f93c 	bl	8000224 <strlen>
 8001fac:	b280      	uxth	r0, r0
	strlenth*=6;
 8001fae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001fb2:	0040      	lsls	r0, r0, #1

	return strlenth;
 8001fb4:	b280      	uxth	r0, r0
}
 8001fb6:	bd08      	pop	{r3, pc}

08001fb8 <GUI_WindowsDraw>:
* 功能：顯示視窗。根據提供的視窗參數進行描繪視窗。
* 入口參數：win		窗口句柄
* 出口參數：返回0表示操作失敗，返回1表示操作成功
****************************************************************************/
uint8_t  GUI_WindowsDraw(WINDOWS *win)
{  
 8001fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* 參數過濾，若窗口起出範圍，則返回0 */
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8001fba:	6882      	ldr	r2, [r0, #8]
{  
 8001fbc:	b085      	sub	sp, #20
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8001fbe:	2a13      	cmp	r2, #19
{  
 8001fc0:	4604      	mov	r4, r0
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8001fc2:	d802      	bhi.n	8001fca <GUI_WindowsDraw+0x12>
 8001fc4:	2000      	movs	r0, #0
	{  
		return 0;//顯示的標題超過了窗體的寬度
	}	
	show_str_mid(win->x, win->y+1, win->title,12,12,0,win->width);//顯示標題
	return(1);
}
 8001fc6:	b005      	add	sp, #20
 8001fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8001fca:	68c3      	ldr	r3, [r0, #12]
 8001fcc:	2b13      	cmp	r3, #19
 8001fce:	d9f9      	bls.n	8001fc4 <GUI_WindowsDraw+0xc>
	if( (win->x + win->width ) > GUI_LCM_XMAX ) return(0);			// 窗口寬度是否溢出
 8001fd0:	6800      	ldr	r0, [r0, #0]
 8001fd2:	4402      	add	r2, r0
 8001fd4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001fd8:	d8f4      	bhi.n	8001fc4 <GUI_WindowsDraw+0xc>
	if( (win->y + win->height ) > GUI_LCM_YMAX ) return(0);			// 窗口高度是否溢出
 8001fda:	6861      	ldr	r1, [r4, #4]
 8001fdc:	440b      	add	r3, r1
 8001fde:	2b40      	cmp	r3, #64	; 0x40
 8001fe0:	d8f0      	bhi.n	8001fc4 <GUI_WindowsDraw+0xc>
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 0);// 清除視窗(全螢幕清除)
 8001fe2:	2600      	movs	r6, #0
	GUI_Rectangle(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 1);	// 畫窗口邊框
 8001fe4:	2501      	movs	r5, #1
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 0);// 清除視窗(全螢幕清除)
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	9600      	str	r6, [sp, #0]
 8001fec:	f7ff fdd2 	bl	8001b94 <GUI_RectangleFill>
	GUI_Rectangle(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 1);	// 畫窗口邊框
 8001ff0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ff4:	68e3      	ldr	r3, [r4, #12]
 8001ff6:	68a2      	ldr	r2, [r4, #8]
 8001ff8:	440b      	add	r3, r1
 8001ffa:	4402      	add	r2, r0
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	3a01      	subs	r2, #1
 8002000:	9500      	str	r5, [sp, #0]
 8002002:	f7ff fda3 	bl	8001b4c <GUI_Rectangle>
	GUI_HLine(win->x, win->y + 14, win->x + win->width - 1, disp_color);					// 畫標題目欄下邊框
 8002006:	8820      	ldrh	r0, [r4, #0]
 8002008:	68a2      	ldr	r2, [r4, #8]
 800200a:	6861      	ldr	r1, [r4, #4]
 800200c:	4402      	add	r2, r0
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <GUI_WindowsDraw+0xa4>)
 8002010:	3a01      	subs	r2, #1
 8002012:	310e      	adds	r1, #14
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	b292      	uxth	r2, r2
 8002018:	b2c9      	uxtb	r1, r1
 800201a:	f7ff fe94 	bl	8001d46 <GUI_HLine>
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + 14-1, 1);
 800201e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002022:	4402      	add	r2, r0
 8002024:	f101 030d 	add.w	r3, r1, #13
 8002028:	3a01      	subs	r2, #1
 800202a:	9500      	str	r5, [sp, #0]
 800202c:	f7ff fdb2 	bl	8001b94 <GUI_RectangleFill>
	if(getWindowStringlen(win->title)>(win->width-2))
 8002030:	69a7      	ldr	r7, [r4, #24]
 8002032:	4638      	mov	r0, r7
 8002034:	f7ff ffb7 	bl	8001fa6 <getWindowStringlen>
 8002038:	68a3      	ldr	r3, [r4, #8]
 800203a:	1e9a      	subs	r2, r3, #2
 800203c:	4290      	cmp	r0, r2
 800203e:	d8c1      	bhi.n	8001fc4 <GUI_WindowsDraw+0xc>
	show_str_mid(win->x, win->y+1, win->title,12,12,0,win->width);//顯示標題
 8002040:	b29b      	uxth	r3, r3
 8002042:	9302      	str	r3, [sp, #8]
 8002044:	230c      	movs	r3, #12
 8002046:	6861      	ldr	r1, [r4, #4]
 8002048:	8820      	ldrh	r0, [r4, #0]
 800204a:	4429      	add	r1, r5
 800204c:	9601      	str	r6, [sp, #4]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	463a      	mov	r2, r7
 8002052:	b289      	uxth	r1, r1
 8002054:	f7ff ff77 	bl	8001f46 <show_str_mid>
	return(1);
 8002058:	4628      	mov	r0, r5
 800205a:	e7b4      	b.n	8001fc6 <GUI_WindowsDraw+0xe>
 800205c:	200000cd 	.word	0x200000cd

08002060 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002060:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002062:	e003      	b.n	800206c <LoopCopyDataInit>

08002064 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002066:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002068:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800206a:	3104      	adds	r1, #4

0800206c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800206c:	480a      	ldr	r0, [pc, #40]	; (8002098 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002070:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002072:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002074:	d3f6      	bcc.n	8002064 <CopyDataInit>
  ldr r2, =_sbss
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002078:	e002      	b.n	8002080 <LoopFillZerobss>

0800207a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800207c:	f842 3b04 	str.w	r3, [r2], #4

08002080 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002082:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002084:	d3f9      	bcc.n	800207a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002086:	f7fe fa83 	bl	8000590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208a:	f000 f80f 	bl	80020ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800208e:	f7fe f909 	bl	80002a4 <main>
  bx lr
 8002092:	4770      	bx	lr
  ldr r3, =_sidata
 8002094:	08002938 	.word	0x08002938
  ldr r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800209c:	200000d0 	.word	0x200000d0
  ldr r2, =_sbss
 80020a0:	200000d0 	.word	0x200000d0
  ldr r3, = _ebss
 80020a4:	200022b8 	.word	0x200022b8

080020a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC1_2_IRQHandler>
	...

080020ac <__libc_init_array>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	2500      	movs	r5, #0
 80020b0:	4e0c      	ldr	r6, [pc, #48]	; (80020e4 <__libc_init_array+0x38>)
 80020b2:	4c0d      	ldr	r4, [pc, #52]	; (80020e8 <__libc_init_array+0x3c>)
 80020b4:	1ba4      	subs	r4, r4, r6
 80020b6:	10a4      	asrs	r4, r4, #2
 80020b8:	42a5      	cmp	r5, r4
 80020ba:	d109      	bne.n	80020d0 <__libc_init_array+0x24>
 80020bc:	f000 f81a 	bl	80020f4 <_init>
 80020c0:	2500      	movs	r5, #0
 80020c2:	4e0a      	ldr	r6, [pc, #40]	; (80020ec <__libc_init_array+0x40>)
 80020c4:	4c0a      	ldr	r4, [pc, #40]	; (80020f0 <__libc_init_array+0x44>)
 80020c6:	1ba4      	subs	r4, r4, r6
 80020c8:	10a4      	asrs	r4, r4, #2
 80020ca:	42a5      	cmp	r5, r4
 80020cc:	d105      	bne.n	80020da <__libc_init_array+0x2e>
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020d4:	4798      	blx	r3
 80020d6:	3501      	adds	r5, #1
 80020d8:	e7ee      	b.n	80020b8 <__libc_init_array+0xc>
 80020da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020de:	4798      	blx	r3
 80020e0:	3501      	adds	r5, #1
 80020e2:	e7f2      	b.n	80020ca <__libc_init_array+0x1e>
 80020e4:	08002930 	.word	0x08002930
 80020e8:	08002930 	.word	0x08002930
 80020ec:	08002930 	.word	0x08002930
 80020f0:	08002934 	.word	0x08002934

080020f4 <_init>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	bf00      	nop
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr

08002100 <_fini>:
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	bf00      	nop
 8002104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002106:	bc08      	pop	{r3}
 8002108:	469e      	mov	lr, r3
 800210a:	4770      	bx	lr
