
OLED_MENU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016dc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001448  080018c0  080018c0  000118c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000000  08002d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000207c  2000002c  08002d3c  0002002c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200020a8  08002d3c  000220a8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011e1d  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002917  00000000  00000000  00031e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000698  00000000  00000000  00034790  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  00034e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004758  00000000  00000000  00035630  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002590  00000000  00000000  00039d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c318  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000011d8  00000000  00000000  0003c394  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00005aff  00000000  00000000  0003d56c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	00000000 	.word	0x00000000
 8000204:	080018a8 	.word	0x080018a8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000030 	.word	0x20000030
 8000220:	080018a8 	.word	0x080018a8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8000238:	b510      	push	{r4, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000240:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024e:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f000 fd5d 	bl	8000d14 <HAL_RCC_OscConfig>
 800025a:	b100      	cbz	r0, 800025e <SystemClock_Config+0x2a>
 800025c:	e7fe      	b.n	800025c <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	4621      	mov	r1, r4
 800026c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	f000 ff17 	bl	80010a4 <HAL_RCC_ClockConfig>
 8000276:	4604      	mov	r4, r0
 8000278:	b100      	cbz	r0, 800027c <SystemClock_Config+0x48>
 800027a:	e7fe      	b.n	800027a <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800027c:	f000 ffb6 	bl	80011ec <HAL_RCC_GetHCLKFreq>
 8000280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000284:	fbb0 f0f3 	udiv	r0, r0, r3
 8000288:	f000 fc26 	bl	8000ad8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800028c:	2004      	movs	r0, #4
 800028e:	f000 fc39 	bl	8000b04 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000292:	4622      	mov	r2, r4
 8000294:	4621      	mov	r1, r4
 8000296:	f04f 30ff 	mov.w	r0, #4294967295
 800029a:	f000 fbe9 	bl	8000a70 <HAL_NVIC_SetPriority>
}
 800029e:	b010      	add	sp, #64	; 0x40
 80002a0:	bd10      	pop	{r4, pc}
	...

080002a4 <main>:
{
 80002a4:	b500      	push	{lr}
 80002a6:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80002a8:	f000 fb9a 	bl	80009e0 <HAL_Init>
  SystemClock_Config();
 80002ac:	f7ff ffc2 	bl	8000234 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b0:	4b52      	ldr	r3, [pc, #328]	; (80003fc <main+0x158>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80002b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80002b8:	4851      	ldr	r0, [pc, #324]	; (8000400 <main+0x15c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ba:	f042 0220 	orr.w	r2, r2, #32
 80002be:	619a      	str	r2, [r3, #24]
 80002c0:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c4:	f002 0220 	and.w	r2, r2, #32
 80002c8:	9200      	str	r2, [sp, #0]
 80002ca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002cc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d0:	f042 0208 	orr.w	r2, r2, #8
 80002d4:	619a      	str	r2, [r3, #24]
 80002d6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002d8:	2603      	movs	r6, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002da:	f002 0208 	and.w	r2, r2, #8
 80002de:	9201      	str	r2, [sp, #4]
 80002e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e2:	699a      	ldr	r2, [r3, #24]
 80002e4:	f042 0210 	orr.w	r2, r2, #16
 80002e8:	619a      	str	r2, [r3, #24]
 80002ea:	699a      	ldr	r2, [r3, #24]
 80002ec:	f002 0210 	and.w	r2, r2, #16
 80002f0:	9202      	str	r2, [sp, #8]
 80002f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	699a      	ldr	r2, [r3, #24]
 80002f6:	f042 0204 	orr.w	r2, r2, #4
 80002fa:	619a      	str	r2, [r3, #24]
 80002fc:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	9303      	str	r3, [sp, #12]
 8000306:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000308:	f000 fcfa 	bl	8000d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000312:	483b      	ldr	r0, [pc, #236]	; (8000400 <main+0x15c>)
 8000314:	f000 fcf4 	bl	8000d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2140      	movs	r1, #64	; 0x40
 800031c:	4839      	ldr	r0, [pc, #228]	; (8000404 <main+0x160>)
 800031e:	f000 fcef 	bl	8000d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000328:	4837      	ldr	r0, [pc, #220]	; (8000408 <main+0x164>)
 800032a:	f000 fce9 	bl	8000d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2104      	movs	r1, #4
 8000332:	4836      	ldr	r0, [pc, #216]	; (800040c <main+0x168>)
 8000334:	f000 fce4 	bl	8000d00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800033c:	a904      	add	r1, sp, #16
 800033e:	4830      	ldr	r0, [pc, #192]	; (8000400 <main+0x15c>)
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000340:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000342:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000348:	f000 fbee 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800034c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000350:	a904      	add	r1, sp, #16
 8000352:	482b      	ldr	r0, [pc, #172]	; (8000400 <main+0x15c>)
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000354:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000356:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800035c:	f000 fbe4 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000360:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000362:	a904      	add	r1, sp, #16
 8000364:	4827      	ldr	r0, [pc, #156]	; (8000404 <main+0x160>)

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000368:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800036e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000370:	f000 fbda 	bl	8000b28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED0_Pin;
 8000374:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000378:	a904      	add	r1, sp, #16
 800037a:	4823      	ldr	r0, [pc, #140]	; (8000408 <main+0x164>)
  GPIO_InitStruct.Pin = LED0_Pin;
 800037c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000384:	f000 fbd0 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000388:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800038a:	a904      	add	r1, sp, #16
 800038c:	481f      	ldr	r0, [pc, #124]	; (800040c <main+0x168>)
  GPIO_InitStruct.Pin = LED1_Pin;
 800038e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000390:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000396:	f000 fbc7 	bl	8000b28 <HAL_GPIO_Init>
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800039a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800039e:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Instance = SPI2;
 80003a2:	481b      	ldr	r0, [pc, #108]	; (8000410 <main+0x16c>)
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80003a4:	491b      	ldr	r1, [pc, #108]	; (8000414 <main+0x170>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003a6:	60c4      	str	r4, [r0, #12]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80003a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003b0:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003b2:	2308      	movs	r3, #8
 80003b4:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 10;
 80003b6:	230a      	movs	r3, #10
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80003b8:	6106      	str	r6, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80003ba:	6145      	str	r5, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003bc:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003be:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003c4:	f001 f818 	bl	80013f8 <HAL_SPI_Init>
 80003c8:	b100      	cbz	r0, 80003cc <main+0x128>
 80003ca:	e7fe      	b.n	80003ca <main+0x126>
	OLED_Init();
 80003cc:	f000 f9de 	bl	800078c <OLED_Init>
	test_window();
 80003d0:	f001 f9d6 	bl	8001780 <test_window>
	HAL_Delay(1000);
 80003d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d8:	f000 fb26 	bl	8000a28 <HAL_Delay>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80003dc:	4d0a      	ldr	r5, [pc, #40]	; (8000408 <main+0x164>)
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80003de:	4c0b      	ldr	r4, [pc, #44]	; (800040c <main+0x168>)
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80003e0:	4628      	mov	r0, r5
 80003e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e6:	f000 fc90 	bl	8000d0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80003ea:	4620      	mov	r0, r4
 80003ec:	2104      	movs	r1, #4
 80003ee:	f000 fc8c 	bl	8000d0a <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80003f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003f6:	f000 fb17 	bl	8000a28 <HAL_Delay>
 80003fa:	e7f1      	b.n	80003e0 <main+0x13c>
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010c00 	.word	0x40010c00
 8000404:	40011000 	.word	0x40011000
 8000408:	40010800 	.word	0x40010800
 800040c:	40011400 	.word	0x40011400
 8000410:	2000204c 	.word	0x2000204c
 8000414:	40003800 	.word	0x40003800

08000418 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000418:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <HAL_MspInit+0x98>)
{
 800041a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800041c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800041e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000420:	f042 0201 	orr.w	r2, r2, #1
 8000424:	619a      	str	r2, [r3, #24]
 8000426:	699a      	ldr	r2, [r3, #24]
 8000428:	f002 0201 	and.w	r2, r2, #1
 800042c:	9200      	str	r2, [sp, #0]
 800042e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000430:	69da      	ldr	r2, [r3, #28]
 8000432:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000436:	61da      	str	r2, [r3, #28]
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043e:	9301      	str	r3, [sp, #4]
 8000440:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000442:	f000 fb03 	bl	8000a4c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	f06f 000b 	mvn.w	r0, #11
 800044c:	4611      	mov	r1, r2
 800044e:	f000 fb0f 	bl	8000a70 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	f06f 000a 	mvn.w	r0, #10
 8000458:	4611      	mov	r1, r2
 800045a:	f000 fb09 	bl	8000a70 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	f06f 0009 	mvn.w	r0, #9
 8000464:	4611      	mov	r1, r2
 8000466:	f000 fb03 	bl	8000a70 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	f06f 0004 	mvn.w	r0, #4
 8000470:	4611      	mov	r1, r2
 8000472:	f000 fafd 	bl	8000a70 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	f06f 0003 	mvn.w	r0, #3
 800047c:	4611      	mov	r1, r2
 800047e:	f000 faf7 	bl	8000a70 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	f06f 0001 	mvn.w	r0, #1
 8000488:	4611      	mov	r1, r2
 800048a:	f000 faf1 	bl	8000a70 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	f04f 30ff 	mov.w	r0, #4294967295
 8000494:	4611      	mov	r1, r2
 8000496:	f000 faeb 	bl	8000a70 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049a:	4a06      	ldr	r2, [pc, #24]	; (80004b4 <HAL_MspInit+0x9c>)
 800049c:	6853      	ldr	r3, [r2, #4]
 800049e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a8:	b003      	add	sp, #12
 80004aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 80004ba:	6802      	ldr	r2, [r0, #0]
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <HAL_SPI_MspInit+0x3c>)
 80004be:	429a      	cmp	r2, r3
 80004c0:	d115      	bne.n	80004ee <HAL_SPI_MspInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004c2:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80004c6:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004ce:	61da      	str	r2, [r3, #28]
 80004d0:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d2:	4809      	ldr	r0, [pc, #36]	; (80004f8 <HAL_SPI_MspInit+0x40>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80004dc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e2:	2302      	movs	r3, #2
 80004e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e6:	2303      	movs	r3, #3
 80004e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ea:	f000 fb1d 	bl	8000b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80004ee:	b007      	add	sp, #28
 80004f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80004f4:	40003800 	.word	0x40003800
 80004f8:	40010c00 	.word	0x40010c00

080004fc <NMI_Handler>:
 80004fc:	4770      	bx	lr

080004fe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80004fe:	e7fe      	b.n	80004fe <HardFault_Handler>

08000500 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler>

08000502 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000502:	e7fe      	b.n	8000502 <BusFault_Handler>

08000504 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler>

08000506 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000506:	4770      	bx	lr

08000508 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000508:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050a:	f000 fa7b 	bl	8000a04 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000512:	f000 bb04 	b.w	8000b1e <HAL_SYSTICK_IRQHandler>
	...

08000518 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <SystemInit+0x40>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	f042 0201 	orr.w	r2, r2, #1
 8000520:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000522:	6859      	ldr	r1, [r3, #4]
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <SystemInit+0x44>)
 8000526:	400a      	ands	r2, r1
 8000528:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000530:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000534:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800053c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800053e:	685a      	ldr	r2, [r3, #4]
 8000540:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000544:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000546:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800054a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800054c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <SystemInit+0x48>)
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	f8ff0000 	.word	0xf8ff0000
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <write>:
#define Max_Column	0x3F			// 256/4-1
#define Max_Row		0x3F			// 64-1
#define	Brightness	0x0F

uint16_t gram[64][64] = { 0 }; // row : 64 col: 64 *4 = 256   u16 = [p1,p2,p3,p4]
static void write(uint8_t bytes, uint8_t is_data) {
 8000564:	b513      	push	{r0, r1, r4, lr}
 8000566:	460c      	mov	r4, r1
	uint8_t tmp = bytes;
 8000568:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <write+0x44>)
 8000574:	f000 fbc4 	bl	8000d00 <HAL_GPIO_WritePin>
	if (is_data) {
 8000578:	b1a4      	cbz	r4, 80005a4 <write+0x40>
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, SET);
 800057a:	2201      	movs	r2, #1
	}
	/* We are sending commands */
	else {
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	480b      	ldr	r0, [pc, #44]	; (80005ac <write+0x48>)
 8000580:	f000 fbbe 	bl	8000d00 <HAL_GPIO_WritePin>
	}
	HAL_SPI_Transmit(&hspi2, &tmp, 1, 1000);
 8000584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000588:	f10d 0107 	add.w	r1, sp, #7
 800058c:	2201      	movs	r2, #1
 800058e:	4808      	ldr	r0, [pc, #32]	; (80005b0 <write+0x4c>)
 8000590:	f000 fe89 	bl	80012a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059a:	4803      	ldr	r0, [pc, #12]	; (80005a8 <write+0x44>)
 800059c:	f000 fbb0 	bl	8000d00 <HAL_GPIO_WritePin>
}
 80005a0:	b002      	add	sp, #8
 80005a2:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 80005a4:	4622      	mov	r2, r4
 80005a6:	e7e9      	b.n	800057c <write+0x18>
 80005a8:	40010c00 	.word	0x40010c00
 80005ac:	40011000 	.word	0x40011000
 80005b0:	2000204c 	.word	0x2000204c

080005b4 <OLED_DrawPoint>:
	OLED_FillRam(0x00);
	OLED_RefreshGram();
}
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t mode) {

	if (x > 255 || y > 63)
 80005b4:	293f      	cmp	r1, #63	; 0x3f
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t mode) {
 80005b6:	b510      	push	{r4, lr}
	if (x > 255 || y > 63)
 80005b8:	d811      	bhi.n	80005de <OLED_DrawPoint+0x2a>
		return;
	uint16_t point = 0x000f;
	uint8_t group = x >> 2;
 80005ba:	0884      	lsrs	r4, r0, #2
	uint8_t group_bit = 3 - (x % 4);
 80005bc:	43c0      	mvns	r0, r0
	point = point << (group_bit * 4);
 80005be:	f000 0303 	and.w	r3, r0, #3
 80005c2:	0098      	lsls	r0, r3, #2
 80005c4:	230f      	movs	r3, #15
 80005c6:	0189      	lsls	r1, r1, #6
 80005c8:	4083      	lsls	r3, r0
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <OLED_DrawPoint+0x34>)

	if (!mode) {
		point = ~point;
		gram[y][group] &= point;
 80005ce:	4421      	add	r1, r4
	if (!mode) {
 80005d0:	b932      	cbnz	r2, 80005e0 <OLED_DrawPoint+0x2c>
		gram[y][group] &= point;
 80005d2:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 80005d6:	ea22 0303 	bic.w	r3, r2, r3
	} else {
		gram[y][group] |= point;
 80005da:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	e7f8      	b.n	80005da <OLED_DrawPoint+0x26>
 80005e8:	20000048 	.word	0x20000048

080005ec <OLED_FillBlock>:
void OLED_FillBlock(unsigned char a, unsigned char b,unsigned char c, unsigned char d,unsigned char Data){
 80005ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f0:	4607      	mov	r7, r0
 80005f2:	4688      	mov	r8, r1
 80005f4:	461e      	mov	r6, r3
	for(int y=c;y<d;y++)
 80005f6:	4614      	mov	r4, r2
void OLED_FillBlock(unsigned char a, unsigned char b,unsigned char c, unsigned char d,unsigned char Data){
 80005f8:	f89d 9020 	ldrb.w	r9, [sp, #32]
	for(int y=c;y<d;y++)
 80005fc:	42b4      	cmp	r4, r6
 80005fe:	db01      	blt.n	8000604 <OLED_FillBlock+0x18>
}
 8000600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for(int x=a;x<b;x++)
 8000604:	463d      	mov	r5, r7
			OLED_DrawPoint(x,y,Data);
 8000606:	fa5f fa84 	uxtb.w	sl, r4
		for(int x=a;x<b;x++)
 800060a:	4545      	cmp	r5, r8
 800060c:	db01      	blt.n	8000612 <OLED_FillBlock+0x26>
	for(int y=c;y<d;y++)
 800060e:	3401      	adds	r4, #1
 8000610:	e7f4      	b.n	80005fc <OLED_FillBlock+0x10>
			OLED_DrawPoint(x,y,Data);
 8000612:	b2e8      	uxtb	r0, r5
 8000614:	464a      	mov	r2, r9
 8000616:	4651      	mov	r1, sl
 8000618:	f7ff ffcc 	bl	80005b4 <OLED_DrawPoint>
		for(int x=a;x<b;x++)
 800061c:	3501      	adds	r5, #1
 800061e:	e7f4      	b.n	800060a <OLED_FillBlock+0x1e>

08000620 <OLED_FillRam>:
void OLED_FillRam(unsigned char Data) {
 8000620:	b507      	push	{r0, r1, r2, lr}
	OLED_FillBlock(0x00, Max_Column, 0x00, Max_Row,Data);
 8000622:	233f      	movs	r3, #63	; 0x3f
 8000624:	2200      	movs	r2, #0
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	4610      	mov	r0, r2
 800062c:	f7ff ffde 	bl	80005ec <OLED_FillBlock>
}
 8000630:	b003      	add	sp, #12
 8000632:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000638 <OLED_RefreshGram>:
	point = (gram[y][group] & (point << (group_bit * 4))) >> (group_bit * 4);
	point = point & 0x00ff;
	return point;

}
void OLED_RefreshGram() {
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Write_Command(0x15);			// Set Column Address
 800063a:	2100      	movs	r1, #0
 800063c:	2015      	movs	r0, #21
 800063e:	f7ff ff91 	bl	8000564 <write>
	Write_Data(a);				//   Default => 0x00
 8000642:	2101      	movs	r1, #1
 8000644:	201c      	movs	r0, #28
 8000646:	f7ff ff8d 	bl	8000564 <write>
	Write_Data(b);				//   Default => 0x77
 800064a:	2101      	movs	r1, #1
 800064c:	205b      	movs	r0, #91	; 0x5b
 800064e:	f7ff ff89 	bl	8000564 <write>
	Write_Command(0x75);			// Set Row Address
 8000652:	2100      	movs	r1, #0
 8000654:	2075      	movs	r0, #117	; 0x75
 8000656:	f7ff ff85 	bl	8000564 <write>
	Write_Data(a);				//   Default => 0x00
 800065a:	2101      	movs	r1, #1
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff ff81 	bl	8000564 <write>
	Write_Data(b);				//   Default => 0x7F
 8000662:	2101      	movs	r1, #1
 8000664:	203f      	movs	r0, #63	; 0x3f
 8000666:	f7ff ff7d 	bl	8000564 <write>
	Write_Command(0x5C);			// Enable MCU to Write into RAM
 800066a:	2100      	movs	r1, #0
 800066c:	205c      	movs	r0, #92	; 0x5c
 800066e:	f7ff ff79 	bl	8000564 <write>
 8000672:	2500      	movs	r5, #0
 8000674:	4f0a      	ldr	r7, [pc, #40]	; (80006a0 <OLED_RefreshGram+0x68>)
void OLED_RefreshGram() {
 8000676:	2400      	movs	r4, #0
 8000678:	197e      	adds	r6, r7, r5
	Set_Column_Address(Shift + a, Shift + b);
	Set_Row_Address(c, d);
	Set_Write_RAM();
	for (int y = 0; y < (d - c+1); y++) {
		for (int x = 0; x < (b - a+1); x++) {
			Write_Data((gram[y][x] & 0xff00) >> 8); //draw 3,4 point
 800067a:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 800067e:	2101      	movs	r1, #1
 8000680:	0a00      	lsrs	r0, r0, #8
 8000682:	f7ff ff6f 	bl	8000564 <write>
			Write_Data(gram[y][x] & 0x00ff); 		//draw 1,2 point
 8000686:	f816 0014 	ldrb.w	r0, [r6, r4, lsl #1]
 800068a:	2101      	movs	r1, #1
		for (int x = 0; x < (b - a+1); x++) {
 800068c:	3401      	adds	r4, #1
			Write_Data(gram[y][x] & 0x00ff); 		//draw 1,2 point
 800068e:	f7ff ff69 	bl	8000564 <write>
		for (int x = 0; x < (b - a+1); x++) {
 8000692:	2c40      	cmp	r4, #64	; 0x40
 8000694:	d1f1      	bne.n	800067a <OLED_RefreshGram+0x42>
 8000696:	3580      	adds	r5, #128	; 0x80
	for (int y = 0; y < (d - c+1); y++) {
 8000698:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800069c:	d1eb      	bne.n	8000676 <OLED_RefreshGram+0x3e>
 800069e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006a0:	20000048 	.word	0x20000048

080006a4 <OLED_Clear>:
{
 80006a4:	b508      	push	{r3, lr}
	OLED_FillRam(0x00);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f7ff ffba 	bl	8000620 <OLED_FillRam>
}
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OLED_RefreshGram();
 80006b0:	f7ff bfc2 	b.w	8000638 <OLED_RefreshGram>

080006b4 <OLED_ShowChar>:
		}
	}
}

void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80006b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006b8:	b087      	sub	sp, #28
 80006ba:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80006be:	4689      	mov	r9, r1
	uint8_t temp,t,t1;
	uint8_t y0=y;
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 80006c0:	f015 0107 	ands.w	r1, r5, #7
 80006c4:	bf18      	it	ne
 80006c6:	2101      	movne	r1, #1
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80006c8:	469b      	mov	fp, r3
 80006ca:	4680      	mov	r8, r0
 80006cc:	2024      	movs	r0, #36	; 0x24
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 80006ce:	eb01 01d5 	add.w	r1, r1, r5, lsr #3
 80006d2:	fb01 f10b 	mul.w	r1, r1, fp
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80006d6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	chr=chr-' ';//得到偏移后的值
 80006da:	3a20      	subs	r2, #32
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80006dc:	9301      	str	r3, [sp, #4]
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 80006de:	b2cb      	uxtb	r3, r1
 80006e0:	4927      	ldr	r1, [pc, #156]	; (8000780 <OLED_ShowChar+0xcc>)
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	fb00 1302 	mla	r3, r0, r2, r1
 80006ea:	200c      	movs	r0, #12
 80006ec:	4925      	ldr	r1, [pc, #148]	; (8000784 <OLED_ShowChar+0xd0>)
 80006ee:	9305      	str	r3, [sp, #20]
 80006f0:	fb00 1302 	mla	r3, r0, r2, r1
 80006f4:	2006      	movs	r0, #6
	for(t=0;t<csize;t++)
 80006f6:	464c      	mov	r4, r9
 80006f8:	2700      	movs	r7, #0
 80006fa:	4923      	ldr	r1, [pc, #140]	; (8000788 <OLED_ShowChar+0xd4>)
 80006fc:	9303      	str	r3, [sp, #12]
 80006fe:	fb00 1302 	mla	r3, r0, r2, r1
 8000702:	9304      	str	r3, [sp, #16]
 8000704:	9b02      	ldr	r3, [sp, #8]
 8000706:	b2fa      	uxtb	r2, r7
 8000708:	4293      	cmp	r3, r2
 800070a:	d802      	bhi.n	8000712 <OLED_ShowChar+0x5e>
				x++;
				break;
			}
		}
	}
}
 800070c:	b007      	add	sp, #28
 800070e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(f_w==6&&f_h==8)temp=asc2_0608[chr][t];		//调用0608ascii字体
 8000712:	f1bb 0f06 	cmp.w	fp, #6
 8000716:	d128      	bne.n	800076a <OLED_ShowChar+0xb6>
 8000718:	2d08      	cmp	r5, #8
 800071a:	d122      	bne.n	8000762 <OLED_ShowChar+0xae>
 800071c:	9b04      	ldr	r3, [sp, #16]
 800071e:	f104 0a08 	add.w	sl, r4, #8
		else if(f_w==12&&f_h==24)temp=asc2_1224[chr][t];//调用1224ascii字体
 8000722:	5dde      	ldrb	r6, [r3, r7]
 8000724:	fa5f fa8a 	uxtb.w	sl, sl
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8000728:	0633      	lsls	r3, r6, #24
			else OLED_DrawPoint(x,y,!mode);
 800072a:	bf58      	it	pl
 800072c:	9b01      	ldrpl	r3, [sp, #4]
 800072e:	4621      	mov	r1, r4
 8000730:	bf58      	it	pl
 8000732:	fab3 f283 	clzpl	r2, r3
			y++;
 8000736:	f104 0401 	add.w	r4, r4, #1
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800073a:	bf4c      	ite	mi
 800073c:	9a01      	ldrmi	r2, [sp, #4]
			else OLED_DrawPoint(x,y,!mode);
 800073e:	0952      	lsrpl	r2, r2, #5
 8000740:	4640      	mov	r0, r8
			y++;
 8000742:	b2e4      	uxtb	r4, r4
			else OLED_DrawPoint(x,y,!mode);
 8000744:	f7ff ff36 	bl	80005b4 <OLED_DrawPoint>
			if((y-y0)==f_h)
 8000748:	eba4 0209 	sub.w	r2, r4, r9
			temp<<=1;
 800074c:	0076      	lsls	r6, r6, #1
			if((y-y0)==f_h)
 800074e:	42aa      	cmp	r2, r5
			temp<<=1;
 8000750:	b2f6      	uxtb	r6, r6
			if((y-y0)==f_h)
 8000752:	d111      	bne.n	8000778 <OLED_ShowChar+0xc4>
				y=y0;
 8000754:	464c      	mov	r4, r9
				x++;
 8000756:	f108 0801 	add.w	r8, r8, #1
 800075a:	fa5f f888 	uxtb.w	r8, r8
 800075e:	3701      	adds	r7, #1
 8000760:	e7d0      	b.n	8000704 <OLED_ShowChar+0x50>
		else if(f_w==6&&f_h==12)temp=asc2_0612[chr][t];	//调用0612ascii字体
 8000762:	2d0c      	cmp	r5, #12
 8000764:	d1d2      	bne.n	800070c <OLED_ShowChar+0x58>
 8000766:	9b03      	ldr	r3, [sp, #12]
 8000768:	e7d9      	b.n	800071e <OLED_ShowChar+0x6a>
		else if(f_w==12&&f_h==24)temp=asc2_1224[chr][t];//调用1224ascii字体
 800076a:	f1bb 0f0c 	cmp.w	fp, #12
 800076e:	d1cd      	bne.n	800070c <OLED_ShowChar+0x58>
 8000770:	2d18      	cmp	r5, #24
 8000772:	d1cb      	bne.n	800070c <OLED_ShowChar+0x58>
 8000774:	9b05      	ldr	r3, [sp, #20]
 8000776:	e7d2      	b.n	800071e <OLED_ShowChar+0x6a>
		for(t1=0;t1<8;t1++)
 8000778:	45a2      	cmp	sl, r4
 800077a:	d1d5      	bne.n	8000728 <OLED_ShowChar+0x74>
 800077c:	e7ef      	b.n	800075e <OLED_ShowChar+0xaa>
 800077e:	bf00      	nop
 8000780:	08001f8e 	.word	0x08001f8e
 8000784:	08001b1a 	.word	0x08001b1a
 8000788:	080018e0 	.word	0x080018e0

0800078c <OLED_Init>:
	}
}
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Initialization
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void OLED_Init() {
 800078c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t dummy = 0x0;
 800078e:	2400      	movs	r4, #0


	//LCD_RST_SetLow();
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 8000790:	4e7f      	ldr	r6, [pc, #508]	; (8000990 <OLED_Init+0x204>)
 8000792:	4622      	mov	r2, r4
	uint8_t dummy = 0x0;
 8000794:	ad02      	add	r5, sp, #8
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 8000796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079a:	4630      	mov	r0, r6
	uint8_t dummy = 0x0;
 800079c:	f805 4d01 	strb.w	r4, [r5, #-1]!
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 80007a0:	f000 faae 	bl	8000d00 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a8:	f000 f93e 	bl	8000a28 <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,SET);
 80007ac:	4630      	mov	r0, r6
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b4:	f000 faa4 	bl	8000d00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &dummy, 1, 1000);
 80007b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007bc:	2201      	movs	r2, #1
 80007be:	4629      	mov	r1, r5
 80007c0:	4874      	ldr	r0, [pc, #464]	; (8000994 <OLED_Init+0x208>)
 80007c2:	f000 fd70 	bl	80012a6 <HAL_SPI_Transmit>
	Write_Command(0xFD);			// Set Command Lock
 80007c6:	4621      	mov	r1, r4
 80007c8:	20fd      	movs	r0, #253	; 0xfd
 80007ca:	f7ff fecb 	bl	8000564 <write>
	Write_Data(0x12 | d);			//   Default => 0x12
 80007ce:	2101      	movs	r1, #1
 80007d0:	2012      	movs	r0, #18
 80007d2:	f7ff fec7 	bl	8000564 <write>
	Write_Command(0xAE | d);			// Set Display On/Off
 80007d6:	4621      	mov	r1, r4
 80007d8:	20ae      	movs	r0, #174	; 0xae
 80007da:	f7ff fec3 	bl	8000564 <write>
	Write_Command(0xB3);	// Set Display Clock Divider / Oscillator Frequency
 80007de:	4621      	mov	r1, r4
 80007e0:	20b3      	movs	r0, #179	; 0xb3
 80007e2:	f7ff febf 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0xD0
 80007e6:	2101      	movs	r1, #1
 80007e8:	2091      	movs	r0, #145	; 0x91
 80007ea:	f7ff febb 	bl	8000564 <write>
	Write_Command(0xCA);			// Set Multiplex Ratio
 80007ee:	4621      	mov	r1, r4
 80007f0:	20ca      	movs	r0, #202	; 0xca
 80007f2:	f7ff feb7 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0x7F (1/128 Duty)
 80007f6:	2101      	movs	r1, #1
 80007f8:	203f      	movs	r0, #63	; 0x3f
 80007fa:	f7ff feb3 	bl	8000564 <write>
	Write_Command(0xA2);			// Set Vertical Scroll by Row
 80007fe:	4621      	mov	r1, r4
 8000800:	20a2      	movs	r0, #162	; 0xa2
 8000802:	f7ff feaf 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0x00
 8000806:	4620      	mov	r0, r4
 8000808:	2101      	movs	r1, #1
 800080a:	f7ff feab 	bl	8000564 <write>
	Write_Command(0xA1);			// Set Vertical Scroll by RAM
 800080e:	4621      	mov	r1, r4
 8000810:	20a1      	movs	r0, #161	; 0xa1
 8000812:	f7ff fea7 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0x00
 8000816:	4620      	mov	r0, r4
 8000818:	2101      	movs	r1, #1
 800081a:	f7ff fea3 	bl	8000564 <write>
	Write_Command(0xA0);			// Set Re-Map / Dual COM Line Mode
 800081e:	4621      	mov	r1, r4
 8000820:	20a0      	movs	r0, #160	; 0xa0
 8000822:	f7ff fe9f 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0x40
 8000826:	2101      	movs	r1, #1
 8000828:	2014      	movs	r0, #20
 800082a:	f7ff fe9b 	bl	8000564 <write>
	Write_Data(0x11);			//   Default => 0x01 (Disable Dual COM Mode)
 800082e:	2101      	movs	r1, #1
 8000830:	2011      	movs	r0, #17
 8000832:	f7ff fe97 	bl	8000564 <write>
	Write_Command(0xB5);			// General Purpose IO
 8000836:	4621      	mov	r1, r4
 8000838:	20b5      	movs	r0, #181	; 0xb5
 800083a:	f7ff fe93 	bl	8000564 <write>
	Write_Data(d);			//   Default => 0x0A (GPIO Pins output Low Level.)
 800083e:	4620      	mov	r0, r4
 8000840:	2101      	movs	r1, #1
 8000842:	f7ff fe8f 	bl	8000564 <write>
	Write_Command(0xAB);			// Function Selection
 8000846:	4621      	mov	r1, r4
 8000848:	20ab      	movs	r0, #171	; 0xab
 800084a:	f7ff fe8b 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0x01
 800084e:	2101      	movs	r1, #1
 8000850:	4608      	mov	r0, r1
 8000852:	f7ff fe87 	bl	8000564 <write>
	Write_Command(0xB4);			// Display Enhancement
 8000856:	4621      	mov	r1, r4
 8000858:	20b4      	movs	r0, #180	; 0xb4
 800085a:	f7ff fe83 	bl	8000564 <write>
	Write_Data(0xA0 | a);			//   Default => 0xA2
 800085e:	2101      	movs	r1, #1
 8000860:	20a0      	movs	r0, #160	; 0xa0
 8000862:	f7ff fe7f 	bl	8000564 <write>
	Write_Data(0x05 | b);			//   Default => 0xB5
 8000866:	2101      	movs	r1, #1
 8000868:	20fd      	movs	r0, #253	; 0xfd
 800086a:	f7ff fe7b 	bl	8000564 <write>
	Write_Command(0xC1);			// Set Contrast Current
 800086e:	4621      	mov	r1, r4
 8000870:	20c1      	movs	r0, #193	; 0xc1
 8000872:	f7ff fe77 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0x7F
 8000876:	2101      	movs	r1, #1
 8000878:	209f      	movs	r0, #159	; 0x9f
 800087a:	f7ff fe73 	bl	8000564 <write>
	Write_Command(0xC7);			// Master Contrast Current Control
 800087e:	4621      	mov	r1, r4
 8000880:	20c7      	movs	r0, #199	; 0xc7
 8000882:	f7ff fe6f 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0x0f (Maximum)
 8000886:	2101      	movs	r1, #1
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fe6b 	bl	8000564 <write>
	Write_Command(0xB8);			// Set Gray Scale Table
 800088e:	4621      	mov	r1, r4
 8000890:	20b8      	movs	r0, #184	; 0xb8
 8000892:	f7ff fe67 	bl	8000564 <write>
	Write_Data(0x0C);			//   Gray Scale Level 1
 8000896:	2101      	movs	r1, #1
 8000898:	200c      	movs	r0, #12
 800089a:	f7ff fe63 	bl	8000564 <write>
	Write_Data(0x18);			//   Gray Scale Level 2
 800089e:	2101      	movs	r1, #1
 80008a0:	2018      	movs	r0, #24
 80008a2:	f7ff fe5f 	bl	8000564 <write>
	Write_Data(0x24);			//   Gray Scale Level 3
 80008a6:	2101      	movs	r1, #1
 80008a8:	2024      	movs	r0, #36	; 0x24
 80008aa:	f7ff fe5b 	bl	8000564 <write>
	Write_Data(0x30);			//   Gray Scale Level 4
 80008ae:	2101      	movs	r1, #1
 80008b0:	2030      	movs	r0, #48	; 0x30
 80008b2:	f7ff fe57 	bl	8000564 <write>
	Write_Data(0x3C);			//   Gray Scale Level 5
 80008b6:	2101      	movs	r1, #1
 80008b8:	203c      	movs	r0, #60	; 0x3c
 80008ba:	f7ff fe53 	bl	8000564 <write>
	Write_Data(0x48);			//   Gray Scale Level 6
 80008be:	2101      	movs	r1, #1
 80008c0:	2048      	movs	r0, #72	; 0x48
 80008c2:	f7ff fe4f 	bl	8000564 <write>
	Write_Data(0x54);			//   Gray Scale Level 7
 80008c6:	2101      	movs	r1, #1
 80008c8:	2054      	movs	r0, #84	; 0x54
 80008ca:	f7ff fe4b 	bl	8000564 <write>
	Write_Data(0x60);			//   Gray Scale Level 8
 80008ce:	2101      	movs	r1, #1
 80008d0:	2060      	movs	r0, #96	; 0x60
 80008d2:	f7ff fe47 	bl	8000564 <write>
	Write_Data(0x6C);			//   Gray Scale Level 9
 80008d6:	2101      	movs	r1, #1
 80008d8:	206c      	movs	r0, #108	; 0x6c
 80008da:	f7ff fe43 	bl	8000564 <write>
	Write_Data(0x78);			//   Gray Scale Level 10
 80008de:	2101      	movs	r1, #1
 80008e0:	2078      	movs	r0, #120	; 0x78
 80008e2:	f7ff fe3f 	bl	8000564 <write>
	Write_Data(0x84);			//   Gray Scale Level 11
 80008e6:	2101      	movs	r1, #1
 80008e8:	2084      	movs	r0, #132	; 0x84
 80008ea:	f7ff fe3b 	bl	8000564 <write>
	Write_Data(0x90);			//   Gray Scale Level 12
 80008ee:	2101      	movs	r1, #1
 80008f0:	2090      	movs	r0, #144	; 0x90
 80008f2:	f7ff fe37 	bl	8000564 <write>
	Write_Data(0x9C);			//   Gray Scale Level 13
 80008f6:	2101      	movs	r1, #1
 80008f8:	209c      	movs	r0, #156	; 0x9c
 80008fa:	f7ff fe33 	bl	8000564 <write>
	Write_Data(0xA8);			//   Gray Scale Level 14
 80008fe:	2101      	movs	r1, #1
 8000900:	20a8      	movs	r0, #168	; 0xa8
 8000902:	f7ff fe2f 	bl	8000564 <write>
	Write_Data(0xB4);			//   Gray Scale Level 15
 8000906:	2101      	movs	r1, #1
 8000908:	20b4      	movs	r0, #180	; 0xb4
 800090a:	f7ff fe2b 	bl	8000564 <write>
	Write_Command(0x00);			// Enable Gray Scale Table
 800090e:	4621      	mov	r1, r4
 8000910:	4620      	mov	r0, r4
 8000912:	f7ff fe27 	bl	8000564 <write>
	Write_Command(0xB1);// Phase 1 (Reset) & Phase 2 (Pre-Charge) Period Adjustment
 8000916:	4621      	mov	r1, r4
 8000918:	20b1      	movs	r0, #177	; 0xb1
 800091a:	f7ff fe23 	bl	8000564 <write>
	Write_Data(d);//   Default => 0x74 (7 Display Clocks [Phase 2] / 9 Display Clocks [Phase 1])
 800091e:	2101      	movs	r1, #1
 8000920:	20e2      	movs	r0, #226	; 0xe2
 8000922:	f7ff fe1f 	bl	8000564 <write>
	Write_Command(0xD1);			// Display Enhancement
 8000926:	4621      	mov	r1, r4
 8000928:	20d1      	movs	r0, #209	; 0xd1
 800092a:	f7ff fe1b 	bl	8000564 <write>
	Write_Data(0x82 | d);			//   Default => 0xA2
 800092e:	2101      	movs	r1, #1
 8000930:	20a2      	movs	r0, #162	; 0xa2
 8000932:	f7ff fe17 	bl	8000564 <write>
	Write_Data(0x20);
 8000936:	2101      	movs	r1, #1
 8000938:	2020      	movs	r0, #32
 800093a:	f7ff fe13 	bl	8000564 <write>
	Write_Command(0xBB);			// Set Pre-Charge Voltage Level
 800093e:	4621      	mov	r1, r4
 8000940:	20bb      	movs	r0, #187	; 0xbb
 8000942:	f7ff fe0f 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0x17 (0.50*VCC)
 8000946:	2101      	movs	r1, #1
 8000948:	201f      	movs	r0, #31
 800094a:	f7ff fe0b 	bl	8000564 <write>
	Write_Command(0xB6);			// Set Second Pre-Charge Period
 800094e:	4621      	mov	r1, r4
 8000950:	20b6      	movs	r0, #182	; 0xb6
 8000952:	f7ff fe07 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0x08 (8 Display Clocks)
 8000956:	2101      	movs	r1, #1
 8000958:	2008      	movs	r0, #8
 800095a:	f7ff fe03 	bl	8000564 <write>
	Write_Command(0xBE);			// Set COM Deselect Voltage Level
 800095e:	4621      	mov	r1, r4
 8000960:	20be      	movs	r0, #190	; 0xbe
 8000962:	f7ff fdff 	bl	8000564 <write>
	Write_Data(d);				//   Default => 0x04 (0.80*VCC)
 8000966:	2101      	movs	r1, #1
 8000968:	2007      	movs	r0, #7
 800096a:	f7ff fdfb 	bl	8000564 <write>
	Write_Command(0xA4 | d);			// Set Display Mode
 800096e:	4621      	mov	r1, r4
 8000970:	20a6      	movs	r0, #166	; 0xa6
 8000972:	f7ff fdf7 	bl	8000564 <write>
	Write_Command(0xA8 | a);
 8000976:	4621      	mov	r1, r4
 8000978:	20a9      	movs	r0, #169	; 0xa9
 800097a:	f7ff fdf3 	bl	8000564 <write>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
	Set_VCOMH(0x07);	// Set Common Pins Deselect Voltage Level as 0.86*VCC
	Set_Display_Mode(0x02);			// Normal Display Mode (0x00/0x01/0x02/0x03)
	Set_Partial_Display(0x01, 0x00, 0x00);	// Disable Partial Display

	OLED_Clear();				// Clear Screen
 800097e:	f7ff fe91 	bl	80006a4 <OLED_Clear>
	Write_Command(0xAE | d);			// Set Display On/Off
 8000982:	4621      	mov	r1, r4
 8000984:	20af      	movs	r0, #175	; 0xaf
 8000986:	f7ff fded 	bl	8000564 <write>

	Set_Display_On_Off(0x01);		// Display On (0x00/0x01)

}
 800098a:	b002      	add	sp, #8
 800098c:	bd70      	pop	{r4, r5, r6, pc}
 800098e:	bf00      	nop
 8000990:	40010c00 	.word	0x40010c00
 8000994:	2000204c 	.word	0x2000204c

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_InitTick+0x3c>)
{
 800099c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099e:	7818      	ldrb	r0, [r3, #0]
 80009a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80009a8:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <HAL_InitTick+0x40>)
 80009aa:	6810      	ldr	r0, [r2, #0]
 80009ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80009b0:	f000 f892 	bl	8000ad8 <HAL_SYSTICK_Config>
 80009b4:	4604      	mov	r4, r0
 80009b6:	b958      	cbnz	r0, 80009d0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b8:	2d0f      	cmp	r5, #15
 80009ba:	d809      	bhi.n	80009d0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	4602      	mov	r2, r0
 80009be:	4629      	mov	r1, r5
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 f854 	bl	8000a70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <HAL_InitTick+0x44>)
 80009ca:	4620      	mov	r0, r4
 80009cc:	601d      	str	r5, [r3, #0]
 80009ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80009d0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009d2:	bd38      	pop	{r3, r4, r5, pc}
 80009d4:	20000004 	.word	0x20000004
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000008 	.word	0x20000008

080009e0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_Init+0x20>)
{
 80009e2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ee:	f000 f82d 	bl	8000a4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff ffd0 	bl	8000998 <HAL_InitTick>
  HAL_MspInit();
 80009f8:	f7ff fd0e 	bl	8000418 <HAL_MspInit>
}
 80009fc:	2000      	movs	r0, #0
 80009fe:	bd08      	pop	{r3, pc}
 8000a00:	40022000 	.word	0x40022000

08000a04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a04:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <HAL_IncTick+0x10>)
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <HAL_IncTick+0x14>)
 8000a08:	6811      	ldr	r1, [r2, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	440b      	add	r3, r1
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	200020a4 	.word	0x200020a4
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a1c:	4b01      	ldr	r3, [pc, #4]	; (8000a24 <HAL_GetTick+0x8>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	200020a4 	.word	0x200020a4

08000a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff fff6 	bl	8000a1c <HAL_GetTick>
 8000a30:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a32:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000a34:	bf1e      	ittt	ne
 8000a36:	4b04      	ldrne	r3, [pc, #16]	; (8000a48 <HAL_Delay+0x20>)
 8000a38:	781b      	ldrbne	r3, [r3, #0]
 8000a3a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a3c:	f7ff ffee 	bl	8000a1c <HAL_GetTick>
 8000a40:	1b40      	subs	r0, r0, r5
 8000a42:	4284      	cmp	r4, r0
 8000a44:	d8fa      	bhi.n	8000a3c <HAL_Delay+0x14>
  {
  }
}
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a4e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a52:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a5a:	041b      	lsls	r3, r3, #16
 8000a5c:	0c1b      	lsrs	r3, r3, #16
 8000a5e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000a66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a68:	60d3      	str	r3, [r2, #12]
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a72:	b530      	push	{r4, r5, lr}
 8000a74:	68dc      	ldr	r4, [r3, #12]
 8000a76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	bf28      	it	cs
 8000a84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8c:	bf98      	it	ls
 8000a8e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	fa05 f303 	lsl.w	r3, r5, r3
 8000a94:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a98:	bf88      	it	hi
 8000a9a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4019      	ands	r1, r3
 8000a9e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	fa05 f404 	lsl.w	r4, r5, r4
 8000aa4:	3c01      	subs	r4, #1
 8000aa6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000aa8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aaa:	ea42 0201 	orr.w	r2, r2, r1
 8000aae:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	bfaf      	iteee	ge
 8000ab4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	4b06      	ldrlt	r3, [pc, #24]	; (8000ad4 <HAL_NVIC_SetPriority+0x64>)
 8000aba:	f000 000f 	andlt.w	r0, r0, #15
 8000abe:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	bfa5      	ittet	ge
 8000ac2:	b2d2      	uxtbge	r2, r2
 8000ac4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ace:	bd30      	pop	{r4, r5, pc}
 8000ad0:	e000ed00 	.word	0xe000ed00
 8000ad4:	e000ed14 	.word	0xe000ed14

08000ad8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	3801      	subs	r0, #1
 8000ada:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ade:	d20a      	bcs.n	8000af6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b06:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	bf0c      	ite	eq
 8000b0c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b10:	f022 0204 	bicne.w	r2, r2, #4
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	4770      	bx	lr
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b1c:	4770      	bx	lr

08000b1e <HAL_SYSTICK_IRQHandler>:
{
 8000b1e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b20:	f7ff fffc 	bl	8000b1c <HAL_SYSTICK_Callback>
 8000b24:	bd08      	pop	{r3, pc}
	...

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000b2c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b2e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b30:	4f6c      	ldr	r7, [pc, #432]	; (8000ce4 <HAL_GPIO_Init+0x1bc>)
 8000b32:	4b6d      	ldr	r3, [pc, #436]	; (8000ce8 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b34:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000cf0 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000b38:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000cf4 <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 8000b3c:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b40:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000b42:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b46:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000b4a:	45a0      	cmp	r8, r4
 8000b4c:	f040 8085 	bne.w	8000c5a <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000b50:	684d      	ldr	r5, [r1, #4]
 8000b52:	2d12      	cmp	r5, #18
 8000b54:	f000 80b7 	beq.w	8000cc6 <HAL_GPIO_Init+0x19e>
 8000b58:	f200 808d 	bhi.w	8000c76 <HAL_GPIO_Init+0x14e>
 8000b5c:	2d02      	cmp	r5, #2
 8000b5e:	f000 80af 	beq.w	8000cc0 <HAL_GPIO_Init+0x198>
 8000b62:	f200 8081 	bhi.w	8000c68 <HAL_GPIO_Init+0x140>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	f000 8091 	beq.w	8000c8e <HAL_GPIO_Init+0x166>
 8000b6c:	2d01      	cmp	r5, #1
 8000b6e:	f000 80a5 	beq.w	8000cbc <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b72:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b76:	2cff      	cmp	r4, #255	; 0xff
 8000b78:	bf93      	iteet	ls
 8000b7a:	4682      	movls	sl, r0
 8000b7c:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000b80:	3d08      	subhi	r5, #8
 8000b82:	f8d0 b000 	ldrls.w	fp, [r0]
 8000b86:	bf92      	itee	ls
 8000b88:	00b5      	lslls	r5, r6, #2
 8000b8a:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000b8e:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b90:	fa09 f805 	lsl.w	r8, r9, r5
 8000b94:	ea2b 0808 	bic.w	r8, fp, r8
 8000b98:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b9c:	bf88      	it	hi
 8000b9e:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba2:	ea48 0505 	orr.w	r5, r8, r5
 8000ba6:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000baa:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000bae:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000bb2:	d052      	beq.n	8000c5a <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb4:	69bd      	ldr	r5, [r7, #24]
 8000bb6:	f026 0803 	bic.w	r8, r6, #3
 8000bba:	f045 0501 	orr.w	r5, r5, #1
 8000bbe:	61bd      	str	r5, [r7, #24]
 8000bc0:	69bd      	ldr	r5, [r7, #24]
 8000bc2:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000bc6:	f005 0501 	and.w	r5, r5, #1
 8000bca:	9501      	str	r5, [sp, #4]
 8000bcc:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bd0:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd4:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bd6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000bda:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bde:	fa09 f90b 	lsl.w	r9, r9, fp
 8000be2:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000be6:	4d41      	ldr	r5, [pc, #260]	; (8000cec <HAL_GPIO_Init+0x1c4>)
 8000be8:	42a8      	cmp	r0, r5
 8000bea:	d071      	beq.n	8000cd0 <HAL_GPIO_Init+0x1a8>
 8000bec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bf0:	42a8      	cmp	r0, r5
 8000bf2:	d06f      	beq.n	8000cd4 <HAL_GPIO_Init+0x1ac>
 8000bf4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bf8:	42a8      	cmp	r0, r5
 8000bfa:	d06d      	beq.n	8000cd8 <HAL_GPIO_Init+0x1b0>
 8000bfc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c00:	42a8      	cmp	r0, r5
 8000c02:	d06b      	beq.n	8000cdc <HAL_GPIO_Init+0x1b4>
 8000c04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c08:	42a8      	cmp	r0, r5
 8000c0a:	d069      	beq.n	8000ce0 <HAL_GPIO_Init+0x1b8>
 8000c0c:	4570      	cmp	r0, lr
 8000c0e:	bf0c      	ite	eq
 8000c10:	2505      	moveq	r5, #5
 8000c12:	2506      	movne	r5, #6
 8000c14:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c18:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000c1c:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c20:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c22:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000c26:	bf14      	ite	ne
 8000c28:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c2a:	43a5      	biceq	r5, r4
 8000c2c:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c2e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c30:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000c34:	bf14      	ite	ne
 8000c36:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c38:	43a5      	biceq	r5, r4
 8000c3a:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c3c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c42:	bf14      	ite	ne
 8000c44:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c46:	43a5      	biceq	r5, r4
 8000c48:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c4a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c4c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c50:	bf14      	ite	ne
 8000c52:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c54:	ea25 0404 	biceq.w	r4, r5, r4
 8000c58:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c5a:	3601      	adds	r6, #1
 8000c5c:	2e10      	cmp	r6, #16
 8000c5e:	f47f af6d 	bne.w	8000b3c <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 8000c62:	b003      	add	sp, #12
 8000c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000c68:	2d03      	cmp	r5, #3
 8000c6a:	d025      	beq.n	8000cb8 <HAL_GPIO_Init+0x190>
 8000c6c:	2d11      	cmp	r5, #17
 8000c6e:	d180      	bne.n	8000b72 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c70:	68ca      	ldr	r2, [r1, #12]
 8000c72:	3204      	adds	r2, #4
          break;
 8000c74:	e77d      	b.n	8000b72 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000c76:	4565      	cmp	r5, ip
 8000c78:	d009      	beq.n	8000c8e <HAL_GPIO_Init+0x166>
 8000c7a:	d812      	bhi.n	8000ca2 <HAL_GPIO_Init+0x17a>
 8000c7c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000cf8 <HAL_GPIO_Init+0x1d0>
 8000c80:	454d      	cmp	r5, r9
 8000c82:	d004      	beq.n	8000c8e <HAL_GPIO_Init+0x166>
 8000c84:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000c88:	454d      	cmp	r5, r9
 8000c8a:	f47f af72 	bne.w	8000b72 <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c8e:	688a      	ldr	r2, [r1, #8]
 8000c90:	b1e2      	cbz	r2, 8000ccc <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c92:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000c94:	bf0c      	ite	eq
 8000c96:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c9a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	e767      	b.n	8000b72 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000ca2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000cfc <HAL_GPIO_Init+0x1d4>
 8000ca6:	454d      	cmp	r5, r9
 8000ca8:	d0f1      	beq.n	8000c8e <HAL_GPIO_Init+0x166>
 8000caa:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000cae:	454d      	cmp	r5, r9
 8000cb0:	d0ed      	beq.n	8000c8e <HAL_GPIO_Init+0x166>
 8000cb2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000cb6:	e7e7      	b.n	8000c88 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e75a      	b.n	8000b72 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cbc:	68ca      	ldr	r2, [r1, #12]
          break;
 8000cbe:	e758      	b.n	8000b72 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cc0:	68ca      	ldr	r2, [r1, #12]
 8000cc2:	3208      	adds	r2, #8
          break;
 8000cc4:	e755      	b.n	8000b72 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc6:	68ca      	ldr	r2, [r1, #12]
 8000cc8:	320c      	adds	r2, #12
          break;
 8000cca:	e752      	b.n	8000b72 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ccc:	2204      	movs	r2, #4
 8000cce:	e750      	b.n	8000b72 <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cd0:	2500      	movs	r5, #0
 8000cd2:	e79f      	b.n	8000c14 <HAL_GPIO_Init+0xec>
 8000cd4:	2501      	movs	r5, #1
 8000cd6:	e79d      	b.n	8000c14 <HAL_GPIO_Init+0xec>
 8000cd8:	2502      	movs	r5, #2
 8000cda:	e79b      	b.n	8000c14 <HAL_GPIO_Init+0xec>
 8000cdc:	2503      	movs	r5, #3
 8000cde:	e799      	b.n	8000c14 <HAL_GPIO_Init+0xec>
 8000ce0:	2504      	movs	r5, #4
 8000ce2:	e797      	b.n	8000c14 <HAL_GPIO_Init+0xec>
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010400 	.word	0x40010400
 8000cec:	40010800 	.word	0x40010800
 8000cf0:	40011c00 	.word	0x40011c00
 8000cf4:	10210000 	.word	0x10210000
 8000cf8:	10110000 	.word	0x10110000
 8000cfc:	10310000 	.word	0x10310000

08000d00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d00:	b10a      	cbz	r2, 8000d06 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d02:	6101      	str	r1, [r0, #16]
 8000d04:	4770      	bx	lr
 8000d06:	0409      	lsls	r1, r1, #16
 8000d08:	e7fb      	b.n	8000d02 <HAL_GPIO_WritePin+0x2>

08000d0a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000d0a:	68c3      	ldr	r3, [r0, #12]
 8000d0c:	4059      	eors	r1, r3
 8000d0e:	60c1      	str	r1, [r0, #12]
 8000d10:	4770      	bx	lr
	...

08000d14 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d14:	6803      	ldr	r3, [r0, #0]
{
 8000d16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1a:	07db      	lsls	r3, r3, #31
{
 8000d1c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1e:	d410      	bmi.n	8000d42 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	079f      	lsls	r7, r3, #30
 8000d24:	d45e      	bmi.n	8000de4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d26:	682b      	ldr	r3, [r5, #0]
 8000d28:	0719      	lsls	r1, r3, #28
 8000d2a:	f100 8095 	bmi.w	8000e58 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d2e:	682b      	ldr	r3, [r5, #0]
 8000d30:	075a      	lsls	r2, r3, #29
 8000d32:	f100 80bf 	bmi.w	8000eb4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d36:	69ea      	ldr	r2, [r5, #28]
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 812d 	bne.w	8000f98 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000d3e:	2000      	movs	r0, #0
 8000d40:	e014      	b.n	8000d6c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d42:	4c90      	ldr	r4, [pc, #576]	; (8000f84 <HAL_RCC_OscConfig+0x270>)
 8000d44:	6863      	ldr	r3, [r4, #4]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	d007      	beq.n	8000d5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d4e:	6863      	ldr	r3, [r4, #4]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d10c      	bne.n	8000d72 <HAL_RCC_OscConfig+0x5e>
 8000d58:	6863      	ldr	r3, [r4, #4]
 8000d5a:	03de      	lsls	r6, r3, #15
 8000d5c:	d509      	bpl.n	8000d72 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	039c      	lsls	r4, r3, #14
 8000d62:	d5dd      	bpl.n	8000d20 <HAL_RCC_OscConfig+0xc>
 8000d64:	686b      	ldr	r3, [r5, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1da      	bne.n	8000d20 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d6a:	2001      	movs	r0, #1
}
 8000d6c:	b002      	add	sp, #8
 8000d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d72:	686b      	ldr	r3, [r5, #4]
 8000d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d78:	d110      	bne.n	8000d9c <HAL_RCC_OscConfig+0x88>
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d82:	f7ff fe4b 	bl	8000a1c <HAL_GetTick>
 8000d86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	0398      	lsls	r0, r3, #14
 8000d8c:	d4c8      	bmi.n	8000d20 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8e:	f7ff fe45 	bl	8000a1c <HAL_GetTick>
 8000d92:	1b80      	subs	r0, r0, r6
 8000d94:	2864      	cmp	r0, #100	; 0x64
 8000d96:	d9f7      	bls.n	8000d88 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d98:	2003      	movs	r0, #3
 8000d9a:	e7e7      	b.n	8000d6c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9c:	b99b      	cbnz	r3, 8000dc6 <HAL_RCC_OscConfig+0xb2>
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da4:	6023      	str	r3, [r4, #0]
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dae:	f7ff fe35 	bl	8000a1c <HAL_GetTick>
 8000db2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	0399      	lsls	r1, r3, #14
 8000db8:	d5b2      	bpl.n	8000d20 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dba:	f7ff fe2f 	bl	8000a1c <HAL_GetTick>
 8000dbe:	1b80      	subs	r0, r0, r6
 8000dc0:	2864      	cmp	r0, #100	; 0x64
 8000dc2:	d9f7      	bls.n	8000db4 <HAL_RCC_OscConfig+0xa0>
 8000dc4:	e7e8      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	d103      	bne.n	8000dd6 <HAL_RCC_OscConfig+0xc2>
 8000dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd2:	6023      	str	r3, [r4, #0]
 8000dd4:	e7d1      	b.n	8000d7a <HAL_RCC_OscConfig+0x66>
 8000dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dda:	6023      	str	r3, [r4, #0]
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de2:	e7cd      	b.n	8000d80 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000de4:	4c67      	ldr	r4, [pc, #412]	; (8000f84 <HAL_RCC_OscConfig+0x270>)
 8000de6:	6863      	ldr	r3, [r4, #4]
 8000de8:	f013 0f0c 	tst.w	r3, #12
 8000dec:	d007      	beq.n	8000dfe <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dee:	6863      	ldr	r3, [r4, #4]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d110      	bne.n	8000e1a <HAL_RCC_OscConfig+0x106>
 8000df8:	6863      	ldr	r3, [r4, #4]
 8000dfa:	03da      	lsls	r2, r3, #15
 8000dfc:	d40d      	bmi.n	8000e1a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	079b      	lsls	r3, r3, #30
 8000e02:	d502      	bpl.n	8000e0a <HAL_RCC_OscConfig+0xf6>
 8000e04:	692b      	ldr	r3, [r5, #16]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d1af      	bne.n	8000d6a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	696a      	ldr	r2, [r5, #20]
 8000e0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e12:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e16:	6023      	str	r3, [r4, #0]
 8000e18:	e785      	b.n	8000d26 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e1a:	692a      	ldr	r2, [r5, #16]
 8000e1c:	4b5a      	ldr	r3, [pc, #360]	; (8000f88 <HAL_RCC_OscConfig+0x274>)
 8000e1e:	b16a      	cbz	r2, 8000e3c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e24:	f7ff fdfa 	bl	8000a1c <HAL_GetTick>
 8000e28:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	079f      	lsls	r7, r3, #30
 8000e2e:	d4ec      	bmi.n	8000e0a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e30:	f7ff fdf4 	bl	8000a1c <HAL_GetTick>
 8000e34:	1b80      	subs	r0, r0, r6
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9f7      	bls.n	8000e2a <HAL_RCC_OscConfig+0x116>
 8000e3a:	e7ad      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000e3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fded 	bl	8000a1c <HAL_GetTick>
 8000e42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	0798      	lsls	r0, r3, #30
 8000e48:	f57f af6d 	bpl.w	8000d26 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e4c:	f7ff fde6 	bl	8000a1c <HAL_GetTick>
 8000e50:	1b80      	subs	r0, r0, r6
 8000e52:	2802      	cmp	r0, #2
 8000e54:	d9f6      	bls.n	8000e44 <HAL_RCC_OscConfig+0x130>
 8000e56:	e79f      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e58:	69aa      	ldr	r2, [r5, #24]
 8000e5a:	4c4a      	ldr	r4, [pc, #296]	; (8000f84 <HAL_RCC_OscConfig+0x270>)
 8000e5c:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <HAL_RCC_OscConfig+0x278>)
 8000e5e:	b1da      	cbz	r2, 8000e98 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e64:	f7ff fdda 	bl	8000a1c <HAL_GetTick>
 8000e68:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e6c:	079b      	lsls	r3, r3, #30
 8000e6e:	d50d      	bpl.n	8000e8c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e70:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e74:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <HAL_RCC_OscConfig+0x27c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e7c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000e7e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000e80:	9b01      	ldr	r3, [sp, #4]
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	9201      	str	r2, [sp, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f9      	bne.n	8000e7e <HAL_RCC_OscConfig+0x16a>
 8000e8a:	e750      	b.n	8000d2e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fdc6 	bl	8000a1c <HAL_GetTick>
 8000e90:	1b80      	subs	r0, r0, r6
 8000e92:	2802      	cmp	r0, #2
 8000e94:	d9e9      	bls.n	8000e6a <HAL_RCC_OscConfig+0x156>
 8000e96:	e77f      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e98:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fdbf 	bl	8000a1c <HAL_GetTick>
 8000e9e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ea2:	079f      	lsls	r7, r3, #30
 8000ea4:	f57f af43 	bpl.w	8000d2e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fdb8 	bl	8000a1c <HAL_GetTick>
 8000eac:	1b80      	subs	r0, r0, r6
 8000eae:	2802      	cmp	r0, #2
 8000eb0:	d9f6      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x18c>
 8000eb2:	e771      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb4:	4c33      	ldr	r4, [pc, #204]	; (8000f84 <HAL_RCC_OscConfig+0x270>)
 8000eb6:	69e3      	ldr	r3, [r4, #28]
 8000eb8:	00d8      	lsls	r0, r3, #3
 8000eba:	d424      	bmi.n	8000f06 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000ebc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	69e3      	ldr	r3, [r4, #28]
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	61e3      	str	r3, [r4, #28]
 8000ec6:	69e3      	ldr	r3, [r4, #28]
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed0:	4e30      	ldr	r6, [pc, #192]	; (8000f94 <HAL_RCC_OscConfig+0x280>)
 8000ed2:	6833      	ldr	r3, [r6, #0]
 8000ed4:	05d9      	lsls	r1, r3, #23
 8000ed6:	d518      	bpl.n	8000f0a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed8:	68eb      	ldr	r3, [r5, #12]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d126      	bne.n	8000f2c <HAL_RCC_OscConfig+0x218>
 8000ede:	6a23      	ldr	r3, [r4, #32]
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fd99 	bl	8000a1c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000eee:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef0:	6a23      	ldr	r3, [r4, #32]
 8000ef2:	079b      	lsls	r3, r3, #30
 8000ef4:	d53f      	bpl.n	8000f76 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000ef6:	2f00      	cmp	r7, #0
 8000ef8:	f43f af1d 	beq.w	8000d36 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000efc:	69e3      	ldr	r3, [r4, #28]
 8000efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f02:	61e3      	str	r3, [r4, #28]
 8000f04:	e717      	b.n	8000d36 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000f06:	2700      	movs	r7, #0
 8000f08:	e7e2      	b.n	8000ed0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0a:	6833      	ldr	r3, [r6, #0]
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f12:	f7ff fd83 	bl	8000a1c <HAL_GetTick>
 8000f16:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f18:	6833      	ldr	r3, [r6, #0]
 8000f1a:	05da      	lsls	r2, r3, #23
 8000f1c:	d4dc      	bmi.n	8000ed8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1e:	f7ff fd7d 	bl	8000a1c <HAL_GetTick>
 8000f22:	eba0 0008 	sub.w	r0, r0, r8
 8000f26:	2864      	cmp	r0, #100	; 0x64
 8000f28:	d9f6      	bls.n	8000f18 <HAL_RCC_OscConfig+0x204>
 8000f2a:	e735      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2c:	b9ab      	cbnz	r3, 8000f5a <HAL_RCC_OscConfig+0x246>
 8000f2e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f30:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	6223      	str	r3, [r4, #32]
 8000f3a:	6a23      	ldr	r3, [r4, #32]
 8000f3c:	f023 0304 	bic.w	r3, r3, #4
 8000f40:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f42:	f7ff fd6b 	bl	8000a1c <HAL_GetTick>
 8000f46:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f48:	6a23      	ldr	r3, [r4, #32]
 8000f4a:	0798      	lsls	r0, r3, #30
 8000f4c:	d5d3      	bpl.n	8000ef6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4e:	f7ff fd65 	bl	8000a1c <HAL_GetTick>
 8000f52:	1b80      	subs	r0, r0, r6
 8000f54:	4540      	cmp	r0, r8
 8000f56:	d9f7      	bls.n	8000f48 <HAL_RCC_OscConfig+0x234>
 8000f58:	e71e      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	6a23      	ldr	r3, [r4, #32]
 8000f5e:	d103      	bne.n	8000f68 <HAL_RCC_OscConfig+0x254>
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6223      	str	r3, [r4, #32]
 8000f66:	e7ba      	b.n	8000ede <HAL_RCC_OscConfig+0x1ca>
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	6223      	str	r3, [r4, #32]
 8000f6e:	6a23      	ldr	r3, [r4, #32]
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	e7b6      	b.n	8000ee4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f76:	f7ff fd51 	bl	8000a1c <HAL_GetTick>
 8000f7a:	eba0 0008 	sub.w	r0, r0, r8
 8000f7e:	42b0      	cmp	r0, r6
 8000f80:	d9b6      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x1dc>
 8000f82:	e709      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
 8000f84:	40021000 	.word	0x40021000
 8000f88:	42420000 	.word	0x42420000
 8000f8c:	42420480 	.word	0x42420480
 8000f90:	20000000 	.word	0x20000000
 8000f94:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f98:	4c22      	ldr	r4, [pc, #136]	; (8001024 <HAL_RCC_OscConfig+0x310>)
 8000f9a:	6863      	ldr	r3, [r4, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	f43f aee2 	beq.w	8000d6a <HAL_RCC_OscConfig+0x56>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	4e1f      	ldr	r6, [pc, #124]	; (8001028 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000faa:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000fac:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fae:	d12b      	bne.n	8001008 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fd34 	bl	8000a1c <HAL_GetTick>
 8000fb4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	0199      	lsls	r1, r3, #6
 8000fba:	d41f      	bmi.n	8000ffc <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fbc:	6a2b      	ldr	r3, [r5, #32]
 8000fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc2:	d105      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc4:	6862      	ldr	r2, [r4, #4]
 8000fc6:	68a9      	ldr	r1, [r5, #8]
 8000fc8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000fd2:	6862      	ldr	r2, [r4, #4]
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fde:	2301      	movs	r3, #1
 8000fe0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fd1b 	bl	8000a1c <HAL_GetTick>
 8000fe6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	019a      	lsls	r2, r3, #6
 8000fec:	f53f aea7 	bmi.w	8000d3e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff0:	f7ff fd14 	bl	8000a1c <HAL_GetTick>
 8000ff4:	1b40      	subs	r0, r0, r5
 8000ff6:	2802      	cmp	r0, #2
 8000ff8:	d9f6      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x2d4>
 8000ffa:	e6cd      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffc:	f7ff fd0e 	bl	8000a1c <HAL_GetTick>
 8001000:	1bc0      	subs	r0, r0, r7
 8001002:	2802      	cmp	r0, #2
 8001004:	d9d7      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x2a2>
 8001006:	e6c7      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001008:	f7ff fd08 	bl	8000a1c <HAL_GetTick>
 800100c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	f57f ae94 	bpl.w	8000d3e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fd01 	bl	8000a1c <HAL_GetTick>
 800101a:	1b40      	subs	r0, r0, r5
 800101c:	2802      	cmp	r0, #2
 800101e:	d9f6      	bls.n	800100e <HAL_RCC_OscConfig+0x2fa>
 8001020:	e6ba      	b.n	8000d98 <HAL_RCC_OscConfig+0x84>
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	42420060 	.word	0x42420060

0800102c <HAL_RCC_GetSysClockFreq>:
{
 800102c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001030:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001032:	ac02      	add	r4, sp, #8
 8001034:	f103 0510 	add.w	r5, r3, #16
 8001038:	4622      	mov	r2, r4
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	6859      	ldr	r1, [r3, #4]
 800103e:	3308      	adds	r3, #8
 8001040:	c203      	stmia	r2!, {r0, r1}
 8001042:	42ab      	cmp	r3, r5
 8001044:	4614      	mov	r4, r2
 8001046:	d1f7      	bne.n	8001038 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001048:	2301      	movs	r3, #1
 800104a:	f88d 3004 	strb.w	r3, [sp, #4]
 800104e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001050:	4911      	ldr	r1, [pc, #68]	; (8001098 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001052:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001056:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001058:	f003 020c 	and.w	r2, r3, #12
 800105c:	2a08      	cmp	r2, #8
 800105e:	d117      	bne.n	8001090 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001060:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001064:	a806      	add	r0, sp, #24
 8001066:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001068:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800106a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800106e:	d50c      	bpl.n	800108a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001070:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001074:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001078:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800107a:	aa06      	add	r2, sp, #24
 800107c:	4413      	add	r3, r2
 800107e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001082:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001086:	b007      	add	sp, #28
 8001088:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_RCC_GetSysClockFreq+0x74>)
 800108c:	4350      	muls	r0, r2
 800108e:	e7fa      	b.n	8001086 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001092:	e7f8      	b.n	8001086 <HAL_RCC_GetSysClockFreq+0x5a>
 8001094:	080018c0 	.word	0x080018c0
 8001098:	40021000 	.word	0x40021000
 800109c:	007a1200 	.word	0x007a1200
 80010a0:	003d0900 	.word	0x003d0900

080010a4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010a4:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <HAL_RCC_ClockConfig+0x138>)
{
 80010a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010aa:	6813      	ldr	r3, [r2, #0]
{
 80010ac:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	428b      	cmp	r3, r1
{
 80010b4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010b6:	d328      	bcc.n	800110a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b8:	682a      	ldr	r2, [r5, #0]
 80010ba:	0791      	lsls	r1, r2, #30
 80010bc:	d432      	bmi.n	8001124 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010be:	07d2      	lsls	r2, r2, #31
 80010c0:	d438      	bmi.n	8001134 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010c2:	4a46      	ldr	r2, [pc, #280]	; (80011dc <HAL_RCC_ClockConfig+0x138>)
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	429e      	cmp	r6, r3
 80010cc:	d373      	bcc.n	80011b6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ce:	682a      	ldr	r2, [r5, #0]
 80010d0:	4c43      	ldr	r4, [pc, #268]	; (80011e0 <HAL_RCC_ClockConfig+0x13c>)
 80010d2:	f012 0f04 	tst.w	r2, #4
 80010d6:	d179      	bne.n	80011cc <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d8:	0713      	lsls	r3, r2, #28
 80010da:	d506      	bpl.n	80010ea <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010dc:	6863      	ldr	r3, [r4, #4]
 80010de:	692a      	ldr	r2, [r5, #16]
 80010e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010e8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ea:	f7ff ff9f 	bl	800102c <HAL_RCC_GetSysClockFreq>
 80010ee:	6863      	ldr	r3, [r4, #4]
 80010f0:	4a3c      	ldr	r2, [pc, #240]	; (80011e4 <HAL_RCC_ClockConfig+0x140>)
 80010f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010f6:	5cd3      	ldrb	r3, [r2, r3]
 80010f8:	40d8      	lsrs	r0, r3
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <HAL_RCC_ClockConfig+0x144>)
 80010fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fc4a 	bl	8000998 <HAL_InitTick>
  return HAL_OK;
 8001104:	2000      	movs	r0, #0
}
 8001106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110a:	6813      	ldr	r3, [r2, #0]
 800110c:	f023 0307 	bic.w	r3, r3, #7
 8001110:	430b      	orrs	r3, r1
 8001112:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001114:	6813      	ldr	r3, [r2, #0]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	4299      	cmp	r1, r3
 800111c:	d0cc      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800111e:	2001      	movs	r0, #1
 8001120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001124:	492e      	ldr	r1, [pc, #184]	; (80011e0 <HAL_RCC_ClockConfig+0x13c>)
 8001126:	68a8      	ldr	r0, [r5, #8]
 8001128:	684b      	ldr	r3, [r1, #4]
 800112a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800112e:	4303      	orrs	r3, r0
 8001130:	604b      	str	r3, [r1, #4]
 8001132:	e7c4      	b.n	80010be <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001134:	686a      	ldr	r2, [r5, #4]
 8001136:	4c2a      	ldr	r4, [pc, #168]	; (80011e0 <HAL_RCC_ClockConfig+0x13c>)
 8001138:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113c:	d11c      	bne.n	8001178 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001142:	d0ec      	beq.n	800111e <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001144:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001146:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800114a:	f023 0303 	bic.w	r3, r3, #3
 800114e:	4313      	orrs	r3, r2
 8001150:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001152:	f7ff fc63 	bl	8000a1c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001156:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001158:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	2b01      	cmp	r3, #1
 800115c:	d114      	bne.n	8001188 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800115e:	6863      	ldr	r3, [r4, #4]
 8001160:	f003 030c 	and.w	r3, r3, #12
 8001164:	2b04      	cmp	r3, #4
 8001166:	d0ac      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001168:	f7ff fc58 	bl	8000a1c <HAL_GetTick>
 800116c:	1bc0      	subs	r0, r0, r7
 800116e:	4540      	cmp	r0, r8
 8001170:	d9f5      	bls.n	800115e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001172:	2003      	movs	r0, #3
 8001174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001178:	2a02      	cmp	r2, #2
 800117a:	d102      	bne.n	8001182 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001180:	e7df      	b.n	8001142 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001182:	f013 0f02 	tst.w	r3, #2
 8001186:	e7dc      	b.n	8001142 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001188:	2b02      	cmp	r3, #2
 800118a:	d10f      	bne.n	80011ac <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b08      	cmp	r3, #8
 8001194:	d095      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001196:	f7ff fc41 	bl	8000a1c <HAL_GetTick>
 800119a:	1bc0      	subs	r0, r0, r7
 800119c:	4540      	cmp	r0, r8
 800119e:	d9f5      	bls.n	800118c <HAL_RCC_ClockConfig+0xe8>
 80011a0:	e7e7      	b.n	8001172 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a2:	f7ff fc3b 	bl	8000a1c <HAL_GetTick>
 80011a6:	1bc0      	subs	r0, r0, r7
 80011a8:	4540      	cmp	r0, r8
 80011aa:	d8e2      	bhi.n	8001172 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ac:	6863      	ldr	r3, [r4, #4]
 80011ae:	f013 0f0c 	tst.w	r3, #12
 80011b2:	d1f6      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xfe>
 80011b4:	e785      	b.n	80010c2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	6813      	ldr	r3, [r2, #0]
 80011b8:	f023 0307 	bic.w	r3, r3, #7
 80011bc:	4333      	orrs	r3, r6
 80011be:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011c0:	6813      	ldr	r3, [r2, #0]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	429e      	cmp	r6, r3
 80011c8:	d1a9      	bne.n	800111e <HAL_RCC_ClockConfig+0x7a>
 80011ca:	e780      	b.n	80010ce <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011cc:	6863      	ldr	r3, [r4, #4]
 80011ce:	68e9      	ldr	r1, [r5, #12]
 80011d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011d4:	430b      	orrs	r3, r1
 80011d6:	6063      	str	r3, [r4, #4]
 80011d8:	e77e      	b.n	80010d8 <HAL_RCC_ClockConfig+0x34>
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	080018d0 	.word	0x080018d0
 80011e8:	20000000 	.word	0x20000000

080011ec <HAL_RCC_GetHCLKFreq>:
}
 80011ec:	4b01      	ldr	r3, [pc, #4]	; (80011f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000000 	.word	0x20000000

080011f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80011f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011fc:	4604      	mov	r4, r0
 80011fe:	4688      	mov	r8, r1
 8001200:	4617      	mov	r7, r2
 8001202:	461d      	mov	r5, r3
 8001204:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001206:	6822      	ldr	r2, [r4, #0]
 8001208:	6893      	ldr	r3, [r2, #8]
 800120a:	ea38 0303 	bics.w	r3, r8, r3
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	429f      	cmp	r7, r3
 8001216:	d102      	bne.n	800121e <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001218:	2000      	movs	r0, #0
}
 800121a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800121e:	1c6b      	adds	r3, r5, #1
 8001220:	d0f2      	beq.n	8001208 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001222:	bb55      	cbnz	r5, 800127a <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800122c:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800122e:	6862      	ldr	r2, [r4, #4]
 8001230:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001234:	d10a      	bne.n	800124c <SPI_WaitFlagStateUntilTimeout+0x54>
 8001236:	68a2      	ldr	r2, [r4, #8]
 8001238:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800123c:	d002      	beq.n	8001244 <SPI_WaitFlagStateUntilTimeout+0x4c>
 800123e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001242:	d103      	bne.n	800124c <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800124a:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800124c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800124e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001252:	d109      	bne.n	8001268 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800125a:	0412      	lsls	r2, r2, #16
 800125c:	0c12      	lsrs	r2, r2, #16
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001266:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001268:	2301      	movs	r3, #1
 800126a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800126e:	2300      	movs	r3, #0
 8001270:	2003      	movs	r0, #3
 8001272:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800127a:	f7ff fbcf 	bl	8000a1c <HAL_GetTick>
 800127e:	1b80      	subs	r0, r0, r6
 8001280:	4285      	cmp	r5, r0
 8001282:	d8c0      	bhi.n	8001206 <SPI_WaitFlagStateUntilTimeout+0xe>
 8001284:	e7ce      	b.n	8001224 <SPI_WaitFlagStateUntilTimeout+0x2c>

08001286 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001286:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001288:	460b      	mov	r3, r1
 800128a:	9200      	str	r2, [sp, #0]
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	2200      	movs	r2, #0
{
 8001290:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001292:	f7ff ffb1 	bl	80011f8 <SPI_WaitFlagStateUntilTimeout>
 8001296:	b120      	cbz	r0, 80012a2 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001298:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800129a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800129c:	f043 0320 	orr.w	r3, r3, #32
 80012a0:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 80012a2:	b002      	add	sp, #8
 80012a4:	bd10      	pop	{r4, pc}

080012a6 <HAL_SPI_Transmit>:
{
 80012a6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80012aa:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80012ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80012b0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80012b2:	2b01      	cmp	r3, #1
{
 80012b4:	460d      	mov	r5, r1
 80012b6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80012b8:	f000 809c 	beq.w	80013f4 <HAL_SPI_Transmit+0x14e>
 80012bc:	2301      	movs	r3, #1
 80012be:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80012c2:	f7ff fbab 	bl	8000a1c <HAL_GetTick>
 80012c6:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80012c8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80012cc:	b2c0      	uxtb	r0, r0
 80012ce:	2801      	cmp	r0, #1
 80012d0:	f040 808e 	bne.w	80013f0 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 80012d4:	2d00      	cmp	r5, #0
 80012d6:	d04e      	beq.n	8001376 <HAL_SPI_Transmit+0xd0>
 80012d8:	f1b8 0f00 	cmp.w	r8, #0
 80012dc:	d04b      	beq.n	8001376 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80012de:	2303      	movs	r3, #3
 80012e0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80012e8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80012ea:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80012ee:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80012f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80012f2:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80012f4:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012f6:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80012f8:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012fe:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8001300:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001304:	bf02      	ittt	eq
 8001306:	681a      	ldreq	r2, [r3, #0]
 8001308:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 800130c:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001312:	bf5e      	ittt	pl
 8001314:	681a      	ldrpl	r2, [r3, #0]
 8001316:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800131a:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800131c:	68e2      	ldr	r2, [r4, #12]
 800131e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001322:	6862      	ldr	r2, [r4, #4]
 8001324:	d138      	bne.n	8001398 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001326:	b11a      	cbz	r2, 8001330 <HAL_SPI_Transmit+0x8a>
 8001328:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800132a:	b292      	uxth	r2, r2
 800132c:	2a01      	cmp	r2, #1
 800132e:	d106      	bne.n	800133e <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001330:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001334:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001336:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001338:	3b01      	subs	r3, #1
 800133a:	b29b      	uxth	r3, r3
 800133c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800133e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001340:	b29b      	uxth	r3, r3
 8001342:	b993      	cbnz	r3, 800136a <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001344:	9700      	str	r7, [sp, #0]
 8001346:	4633      	mov	r3, r6
 8001348:	2201      	movs	r2, #1
 800134a:	2102      	movs	r1, #2
 800134c:	4620      	mov	r0, r4
 800134e:	f7ff ff53 	bl	80011f8 <SPI_WaitFlagStateUntilTimeout>
 8001352:	b978      	cbnz	r0, 8001374 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001354:	463a      	mov	r2, r7
 8001356:	4631      	mov	r1, r6
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff ff94 	bl	8001286 <SPI_CheckFlag_BSY>
 800135e:	2800      	cmp	r0, #0
 8001360:	d038      	beq.n	80013d4 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001362:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001364:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001366:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001368:	e005      	b.n	8001376 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	0790      	lsls	r0, r2, #30
 8001370:	d4de      	bmi.n	8001330 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001372:	b94e      	cbnz	r6, 8001388 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8001374:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001376:	2301      	movs	r3, #1
 8001378:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800137c:	2300      	movs	r3, #0
 800137e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001382:	b004      	add	sp, #16
 8001384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001388:	1c71      	adds	r1, r6, #1
 800138a:	d0d8      	beq.n	800133e <HAL_SPI_Transmit+0x98>
 800138c:	f7ff fb46 	bl	8000a1c <HAL_GetTick>
 8001390:	1bc0      	subs	r0, r0, r7
 8001392:	4286      	cmp	r6, r0
 8001394:	d8d3      	bhi.n	800133e <HAL_SPI_Transmit+0x98>
 8001396:	e7ed      	b.n	8001374 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001398:	b11a      	cbz	r2, 80013a2 <HAL_SPI_Transmit+0xfc>
 800139a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800139c:	b292      	uxth	r2, r2
 800139e:	2a01      	cmp	r2, #1
 80013a0:	d106      	bne.n	80013b0 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80013a2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80013a6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80013a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80013aa:	3b01      	subs	r3, #1
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80013b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0c5      	beq.n	8001344 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	0792      	lsls	r2, r2, #30
 80013be:	d4f0      	bmi.n	80013a2 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80013c0:	2e00      	cmp	r6, #0
 80013c2:	d0d7      	beq.n	8001374 <HAL_SPI_Transmit+0xce>
 80013c4:	1c73      	adds	r3, r6, #1
 80013c6:	d0f3      	beq.n	80013b0 <HAL_SPI_Transmit+0x10a>
 80013c8:	f7ff fb28 	bl	8000a1c <HAL_GetTick>
 80013cc:	1bc0      	subs	r0, r0, r7
 80013ce:	4286      	cmp	r6, r0
 80013d0:	d8ee      	bhi.n	80013b0 <HAL_SPI_Transmit+0x10a>
 80013d2:	e7cf      	b.n	8001374 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80013d4:	68a3      	ldr	r3, [r4, #8]
 80013d6:	b933      	cbnz	r3, 80013e6 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80013d8:	9303      	str	r3, [sp, #12]
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	9203      	str	r2, [sp, #12]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	9303      	str	r3, [sp, #12]
 80013e4:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80013e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80013e8:	3000      	adds	r0, #0
 80013ea:	bf18      	it	ne
 80013ec:	2001      	movne	r0, #1
 80013ee:	e7c2      	b.n	8001376 <HAL_SPI_Transmit+0xd0>
 80013f0:	2002      	movs	r0, #2
 80013f2:	e7c0      	b.n	8001376 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 80013f4:	2002      	movs	r0, #2
 80013f6:	e7c4      	b.n	8001382 <HAL_SPI_Transmit+0xdc>

080013f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80013f8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80013fa:	4604      	mov	r4, r0
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d034      	beq.n	800146a <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001404:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001408:	b90b      	cbnz	r3, 800140e <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800140a:	f7ff f855 	bl	80004b8 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800140e:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001410:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001412:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001416:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001418:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800141a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800141e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001420:	6863      	ldr	r3, [r4, #4]
 8001422:	69a2      	ldr	r2, [r4, #24]
 8001424:	4303      	orrs	r3, r0
 8001426:	68e0      	ldr	r0, [r4, #12]
 8001428:	4303      	orrs	r3, r0
 800142a:	6920      	ldr	r0, [r4, #16]
 800142c:	4303      	orrs	r3, r0
 800142e:	6960      	ldr	r0, [r4, #20]
 8001430:	4303      	orrs	r3, r0
 8001432:	69e0      	ldr	r0, [r4, #28]
 8001434:	4303      	orrs	r3, r0
 8001436:	6a20      	ldr	r0, [r4, #32]
 8001438:	4303      	orrs	r3, r0
 800143a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800143c:	4303      	orrs	r3, r0
 800143e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001442:	4303      	orrs	r3, r0
 8001444:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001446:	0c12      	lsrs	r2, r2, #16
 8001448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800144a:	f002 0204 	and.w	r2, r2, #4
 800144e:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001450:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001452:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001454:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001456:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001458:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800145a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800145e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001460:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001462:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001464:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001468:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
}
 800146c:	bd10      	pop	{r4, pc}

0800146e <GUI_Rectangle>:
*           color	顯示顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_Rectangle(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 800146e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001472:	461c      	mov	r4, r3
 8001474:	f89d 5018 	ldrb.w	r5, [sp, #24]
	GUI_HLine(x0, y0, x1, color);
 8001478:	fa1f f880 	uxth.w	r8, r0
 800147c:	b2cf      	uxtb	r7, r1
 800147e:	b296      	uxth	r6, r2
	GUI_HLine(x0, y1, x1, color);
 8001480:	b2e4      	uxtb	r4, r4
	GUI_HLine(x0, y0, x1, color);
 8001482:	462b      	mov	r3, r5
 8001484:	4632      	mov	r2, r6
 8001486:	4639      	mov	r1, r7
 8001488:	4640      	mov	r0, r8
 800148a:	f000 f84e 	bl	800152a <GUI_HLine>
	GUI_HLine(x0, y1, x1, color);
 800148e:	462b      	mov	r3, r5
 8001490:	4632      	mov	r2, r6
 8001492:	4621      	mov	r1, r4
 8001494:	4640      	mov	r0, r8
 8001496:	f000 f848 	bl	800152a <GUI_HLine>
	GUI_RLine(x0, y0, y1, color);
 800149a:	462b      	mov	r3, r5
 800149c:	4622      	mov	r2, r4
 800149e:	4639      	mov	r1, r7
 80014a0:	4640      	mov	r0, r8
 80014a2:	f000 f857 	bl	8001554 <GUI_RLine>
	GUI_RLine(x1, y0, y1, color);
 80014a6:	462b      	mov	r3, r5
 80014a8:	4622      	mov	r2, r4
 80014aa:	4639      	mov	r1, r7
 80014ac:	4630      	mov	r0, r6
}
 80014ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	GUI_RLine(x1, y0, y1, color);
 80014b2:	f000 b84f 	b.w	8001554 <GUI_RLine>

080014b6 <GUI_RectangleFill>:
*           color	填充顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_RectangleFill(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 80014b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t  i;

	/* 先找出矩形左上角與右下角的兩個點，保存在(x0,y0)，(x1,y1) */
	if(x0>x1) 						// 若x0>x1，則x0與x1交換
 80014ba:	4290      	cmp	r0, r2
{  
 80014bc:	460c      	mov	r4, r1
 80014be:	461f      	mov	r7, r3
 80014c0:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if(x0>x1) 						// 若x0>x1，則x0與x1交換
 80014c4:	d82b      	bhi.n	800151e <GUI_RectangleFill+0x68>
	{  
		i = x0;
		x0 = x1;
		x1 = i;
	}
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 80014c6:	4299      	cmp	r1, r3
 80014c8:	d809      	bhi.n	80014de <GUI_RectangleFill+0x28>
		y0 = y1;
		y1 = i;
	}

	/* 判斷是否只是直線 */
	if(y0==y1) 
 80014ca:	42bc      	cmp	r4, r7
 80014cc:	d109      	bne.n	80014e2 <GUI_RectangleFill+0x2c>
	{  
		GUI_HLine(x0, y0, x1, color);
 80014ce:	4643      	mov	r3, r8
 80014d0:	b2e1      	uxtb	r1, r4
 80014d2:	b292      	uxth	r2, r2
 80014d4:	b280      	uxth	r0, r0
	while(y0<=y1)						
	{  
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
		y0++;							// 下一行
	}
}
 80014d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GUI_HLine(x0, y0, x1, color);
 80014da:	f000 b826 	b.w	800152a <GUI_HLine>
 80014de:	463c      	mov	r4, r7
 80014e0:	460f      	mov	r7, r1
	if(x0==x1) 
 80014e2:	4290      	cmp	r0, r2
 80014e4:	d10d      	bne.n	8001502 <GUI_RectangleFill+0x4c>
		GUI_RLine(x0, y0, y1, color);
 80014e6:	4643      	mov	r3, r8
 80014e8:	b2fa      	uxtb	r2, r7
 80014ea:	b2e1      	uxtb	r1, r4
 80014ec:	b280      	uxth	r0, r0
}
 80014ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GUI_RLine(x0, y0, y1, color);
 80014f2:	f000 b82f 	b.w	8001554 <GUI_RLine>
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 80014f6:	463b      	mov	r3, r7
 80014f8:	4627      	mov	r7, r4
 80014fa:	461c      	mov	r4, r3
 80014fc:	4603      	mov	r3, r0
 80014fe:	4610      	mov	r0, r2
 8001500:	461a      	mov	r2, r3
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
 8001502:	b296      	uxth	r6, r2
 8001504:	b285      	uxth	r5, r0
	while(y0<=y1)						
 8001506:	42bc      	cmp	r4, r7
 8001508:	d901      	bls.n	800150e <GUI_RectangleFill+0x58>
 800150a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
 800150e:	b2e1      	uxtb	r1, r4
 8001510:	4643      	mov	r3, r8
 8001512:	4632      	mov	r2, r6
 8001514:	4628      	mov	r0, r5
 8001516:	f000 f808 	bl	800152a <GUI_HLine>
		y0++;							// 下一行
 800151a:	3401      	adds	r4, #1
 800151c:	e7f3      	b.n	8001506 <GUI_RectangleFill+0x50>
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 800151e:	4299      	cmp	r1, r3
 8001520:	d8e9      	bhi.n	80014f6 <GUI_RectangleFill+0x40>
 8001522:	4603      	mov	r3, r0
 8001524:	4610      	mov	r0, r2
 8001526:	461a      	mov	r2, r3
 8001528:	e7cf      	b.n	80014ca <GUI_RectangleFill+0x14>

0800152a <GUI_HLine>:
*      新8個點，而不需要一個點一個點的寫到LCM中。
****************************************************************************/
void  GUI_HLine(uint16_t x0, uint8_t y0, uint16_t x1, TCOLOR color)
{
	uint8_t  temp;
	if(x0>x1)               // 對x0、x1大小進行排列，以便畫圖
 800152a:	4290      	cmp	r0, r2
{
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	461f      	mov	r7, r3
 8001530:	bf88      	it	hi
 8001532:	b2d3      	uxtbhi	r3, r2
 8001534:	4604      	mov	r4, r0
 8001536:	4615      	mov	r5, r2
 8001538:	460e      	mov	r6, r1
	if(x0>x1)               // 對x0、x1大小進行排列，以便畫圖
 800153a:	bf84      	itt	hi
 800153c:	4605      	movhi	r5, r0
	{
		temp = x1;
		x1 = x0;
		x0 = temp;
 800153e:	461c      	movhi	r4, r3
	OLED_DrawPoint(x,y,color);
 8001540:	b2e0      	uxtb	r0, r4
	}
	do
	{
		GUI_Point(x0, y0, color);   // 逐點顯示，描出垂直線
		x0++;
 8001542:	3401      	adds	r4, #1
	OLED_DrawPoint(x,y,color);
 8001544:	463a      	mov	r2, r7
 8001546:	4631      	mov	r1, r6
		x0++;
 8001548:	b2a4      	uxth	r4, r4
	OLED_DrawPoint(x,y,color);
 800154a:	f7ff f833 	bl	80005b4 <OLED_DrawPoint>
	}
	while(x1>=x0);
 800154e:	42a5      	cmp	r5, r4
 8001550:	d2f6      	bcs.n	8001540 <GUI_HLine+0x16>
}
 8001552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001554 <GUI_RLine>:
*      新8個點，而不需要一個點一個點的寫到LCM中。
****************************************************************************/
void  GUI_RLine(uint16_t x0, uint8_t y0, uint8_t y1, TCOLOR color)
{
    uint8_t  temp;
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8001554:	4291      	cmp	r1, r2
{
 8001556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001558:	461f      	mov	r7, r3
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 800155a:	bf88      	it	hi
 800155c:	460b      	movhi	r3, r1
{
 800155e:	460c      	mov	r4, r1
 8001560:	4615      	mov	r5, r2
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8001562:	bf84      	itt	hi
 8001564:	4614      	movhi	r4, r2
 8001566:	461d      	movhi	r5, r3
	OLED_DrawPoint(x,y,color);
 8001568:	b2c6      	uxtb	r6, r0
 800156a:	4621      	mov	r1, r4
        y0 = temp;
    }
    do
    {
        GUI_Point(x0, y0, color);   // 逐點顯示，描出垂直線
        y0++;
 800156c:	3401      	adds	r4, #1
	OLED_DrawPoint(x,y,color);
 800156e:	463a      	mov	r2, r7
 8001570:	4630      	mov	r0, r6
        y0++;
 8001572:	b2e4      	uxtb	r4, r4
	OLED_DrawPoint(x,y,color);
 8001574:	f7ff f81e 	bl	80005b4 <OLED_DrawPoint>
    }
    while(y1>=y0);
 8001578:	42a5      	cmp	r5, r4
 800157a:	d2f6      	bcs.n	800156a <GUI_RLine+0x16>
}
 800157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800157e <GUI_Refresh>:
* 功能：刷新屏幕
*           
****************************************************************************/
void  GUI_Refresh(void)
{
	OLED_RefreshGram();
 800157e:	f7ff b85b 	b.w	8000638 <OLED_RefreshGram>

08001582 <show_str>:
//str  :字符串
//f_w:字寬
//f_h:字高
//mode:0,非疊加方式;1,疊加方式
void show_str(uint16_t x,uint16_t y,const uint8_t*str,uint8_t f_w,uint8_t f_h,uint8_t mode)
{					
 8001582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001586:	4680      	mov	r8, r0
	uint16_t x0 = x;
	uint16_t y0 = y;
	while (*str != 0)
 8001588:	460c      	mov	r4, r1
 800158a:	4645      	mov	r5, r8
{					
 800158c:	b085      	sub	sp, #20
 800158e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8001592:	4616      	mov	r6, r2
 8001594:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
			y += f_h;
			x = x0;
			str++;
		}
		else
			OLED_ShowChar(x, y, *str, f_w / 2, f_h, mode);     //有效部分寫入
 8001598:	ea4f 0a53 	mov.w	sl, r3, lsr #1
{					
 800159c:	9203      	str	r2, [sp, #12]
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 800159e:	087a      	lsrs	r2, r7, #1
 80015a0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
		str++;
		x += f_h / 2; //字符,為全字的一半
 80015a4:	b293      	uxth	r3, r2
		if (y > (y0 + LCD_HIGH - f_h))
 80015a6:	f101 0940 	add.w	r9, r1, #64	; 0x40
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 80015aa:	eb00 0b08 	add.w	fp, r0, r8
		x += f_h / 2; //字符,為全字的一半
 80015ae:	9302      	str	r3, [sp, #8]
		if (y > (y0 + LCD_HIGH - f_h))
 80015b0:	eba9 0907 	sub.w	r9, r9, r7
	while (*str != 0)
 80015b4:	7832      	ldrb	r2, [r6, #0]
 80015b6:	b912      	cbnz	r2, 80015be <show_str+0x3c>

	}
}  			 		 
 80015b8:	b005      	add	sp, #20
 80015ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 80015be:	455d      	cmp	r5, fp
			y += f_h;
 80015c0:	bfc2      	ittt	gt
 80015c2:	19e4      	addgt	r4, r4, r7
 80015c4:	b2a4      	uxthgt	r4, r4
			x = x0;
 80015c6:	4645      	movgt	r5, r8
		if (y > (y0 + LCD_HIGH - f_h))
 80015c8:	454c      	cmp	r4, r9
 80015ca:	dcf5      	bgt.n	80015b8 <show_str+0x36>
		if (*str == 13) //換行符號
 80015cc:	2a0d      	cmp	r2, #13
 80015ce:	d108      	bne.n	80015e2 <show_str+0x60>
			x = x0;
 80015d0:	4645      	mov	r5, r8
			y += f_h;
 80015d2:	443c      	add	r4, r7
 80015d4:	b2a4      	uxth	r4, r4
			str++;
 80015d6:	3601      	adds	r6, #1
		x += f_h / 2; //字符,為全字的一半
 80015d8:	9b02      	ldr	r3, [sp, #8]
		str++;
 80015da:	3601      	adds	r6, #1
		x += f_h / 2; //字符,為全字的一半
 80015dc:	441d      	add	r5, r3
 80015de:	b2ad      	uxth	r5, r5
 80015e0:	e7e8      	b.n	80015b4 <show_str+0x32>
			OLED_ShowChar(x, y, *str, f_w / 2, f_h, mode);     //有效部分寫入
 80015e2:	9b03      	ldr	r3, [sp, #12]
 80015e4:	9700      	str	r7, [sp, #0]
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	4621      	mov	r1, r4
 80015ea:	4653      	mov	r3, sl
 80015ec:	4628      	mov	r0, r5
 80015ee:	f7ff f861 	bl	80006b4 <OLED_ShowChar>
 80015f2:	e7f1      	b.n	80015d8 <show_str+0x56>

080015f4 <show_str_mid>:
//在指定寬度的中間顯示字符串(置中顯示)
//如果字符長度超過了len,則用Show_Str顯示
//len:指定要顯示的寬度
void show_str_mid(uint16_t x,uint16_t y,const uint8_t*str,uint8_t f_w,uint8_t f_h,uint8_t mode,uint16_t len)
{
 80015f4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f8:	4606      	mov	r6, r0
	uint16_t strlenth=0;
   	strlenth=strlen((char*)str);
 80015fa:	4610      	mov	r0, r2
{
 80015fc:	4689      	mov	r9, r1
 80015fe:	4617      	mov	r7, r2
 8001600:	469a      	mov	sl, r3
   	strlenth=strlen((char*)str);
 8001602:	f7fe fe0f 	bl	8000224 <strlen>
{
 8001606:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800160a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	strlenth*=f_h/2;
 800160e:	ea4f 0558 	mov.w	r5, r8, lsr #1
 8001612:	4368      	muls	r0, r5
 8001614:	b280      	uxth	r0, r0
	if(strlenth>len)show_str(x,y,str,f_w,f_h,mode);
 8001616:	42a0      	cmp	r0, r4
{
 8001618:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
	if(strlenth>len)show_str(x,y,str,f_w,f_h,mode);
 800161c:	d90c      	bls.n	8001638 <show_str_mid+0x44>
 800161e:	4653      	mov	r3, sl
 8001620:	463a      	mov	r2, r7
 8001622:	4649      	mov	r1, r9
 8001624:	4630      	mov	r0, r6
 8001626:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800162a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	else
	{
		strlenth=(len-strlenth)/2;
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
	}
}   
 800162e:	b001      	add	sp, #4
 8001630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
 8001634:	f7ff bfa5 	b.w	8001582 <show_str>
		strlenth=(len-strlenth)/2;
 8001638:	1a24      	subs	r4, r4, r0
 800163a:	2002      	movs	r0, #2
 800163c:	fb94 f0f0 	sdiv	r0, r4, r0
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
 8001640:	4430      	add	r0, r6
 8001642:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8001646:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800164a:	4653      	mov	r3, sl
 800164c:	463a      	mov	r2, r7
 800164e:	4649      	mov	r1, r9
 8001650:	b280      	uxth	r0, r0
 8001652:	e7ec      	b.n	800162e <show_str_mid+0x3a>

08001654 <getWindowStringlen>:

#if  GUI_WINDOW_EN==1

//得到字符串的長度
uint16_t getWindowStringlen(const unsigned char *str)
{
 8001654:	b508      	push	{r3, lr}
	uint16_t strlenth=0;
	strlenth=strlen((const char*)str);
 8001656:	f7fe fde5 	bl	8000224 <strlen>
 800165a:	b280      	uxth	r0, r0
	strlenth*=6;
 800165c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001660:	0040      	lsls	r0, r0, #1

	return strlenth;
 8001662:	b280      	uxth	r0, r0
}
 8001664:	bd08      	pop	{r3, pc}
	...

08001668 <GUI_WindowsDraw>:
* 功能：顯示視窗。根據提供的視窗參數進行描繪視窗。
* 入口參數：win		窗口句柄
* 出口參數：返回0表示操作失敗，返回1表示操作成功
****************************************************************************/
uint8_t  GUI_WindowsDraw(WINDOWS *win)
{  
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* 參數過濾，若窗口起出範圍，則返回0 */
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 800166a:	6882      	ldr	r2, [r0, #8]
{  
 800166c:	b085      	sub	sp, #20
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 800166e:	2a13      	cmp	r2, #19
{  
 8001670:	4604      	mov	r4, r0
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8001672:	d802      	bhi.n	800167a <GUI_WindowsDraw+0x12>
 8001674:	2000      	movs	r0, #0
	{  
		return 0;//顯示的標題超過了窗體的寬度
	}	
	show_str_mid(win->x, win->y+1, win->title,12,12,0,win->width);//顯示標題
	return(1);
}
 8001676:	b005      	add	sp, #20
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 800167a:	68c3      	ldr	r3, [r0, #12]
 800167c:	2b13      	cmp	r3, #19
 800167e:	d9f9      	bls.n	8001674 <GUI_WindowsDraw+0xc>
	if( (win->x + win->width ) > GUI_LCM_XMAX ) return(0);			// 窗口寬度是否溢出
 8001680:	6800      	ldr	r0, [r0, #0]
 8001682:	4402      	add	r2, r0
 8001684:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001688:	d8f4      	bhi.n	8001674 <GUI_WindowsDraw+0xc>
	if( (win->y + win->height ) > GUI_LCM_YMAX ) return(0);			// 窗口高度是否溢出
 800168a:	6861      	ldr	r1, [r4, #4]
 800168c:	440b      	add	r3, r1
 800168e:	2b40      	cmp	r3, #64	; 0x40
 8001690:	d8f0      	bhi.n	8001674 <GUI_WindowsDraw+0xc>
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 0);// 清除視窗(全螢幕清除)
 8001692:	2600      	movs	r6, #0
	GUI_Rectangle(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 1);	// 畫窗口邊框
 8001694:	2501      	movs	r5, #1
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 0);// 清除視窗(全螢幕清除)
 8001696:	3b01      	subs	r3, #1
 8001698:	3a01      	subs	r2, #1
 800169a:	9600      	str	r6, [sp, #0]
 800169c:	f7ff ff0b 	bl	80014b6 <GUI_RectangleFill>
	GUI_Rectangle(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 1);	// 畫窗口邊框
 80016a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a4:	68e3      	ldr	r3, [r4, #12]
 80016a6:	68a2      	ldr	r2, [r4, #8]
 80016a8:	440b      	add	r3, r1
 80016aa:	4402      	add	r2, r0
 80016ac:	3b01      	subs	r3, #1
 80016ae:	3a01      	subs	r2, #1
 80016b0:	9500      	str	r5, [sp, #0]
 80016b2:	f7ff fedc 	bl	800146e <GUI_Rectangle>
	GUI_HLine(win->x, win->y + 14, win->x + win->width - 1, disp_color);					// 畫標題目欄下邊框
 80016b6:	8820      	ldrh	r0, [r4, #0]
 80016b8:	68a2      	ldr	r2, [r4, #8]
 80016ba:	6861      	ldr	r1, [r4, #4]
 80016bc:	4402      	add	r2, r0
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <GUI_WindowsDraw+0xa4>)
 80016c0:	3a01      	subs	r2, #1
 80016c2:	310e      	adds	r1, #14
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b292      	uxth	r2, r2
 80016c8:	b2c9      	uxtb	r1, r1
 80016ca:	f7ff ff2e 	bl	800152a <GUI_HLine>
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + 14-1, 1);
 80016ce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016d2:	4402      	add	r2, r0
 80016d4:	f101 030d 	add.w	r3, r1, #13
 80016d8:	3a01      	subs	r2, #1
 80016da:	9500      	str	r5, [sp, #0]
 80016dc:	f7ff feeb 	bl	80014b6 <GUI_RectangleFill>
	if(getWindowStringlen(win->title)>(win->width-2))
 80016e0:	69a7      	ldr	r7, [r4, #24]
 80016e2:	4638      	mov	r0, r7
 80016e4:	f7ff ffb6 	bl	8001654 <getWindowStringlen>
 80016e8:	68a3      	ldr	r3, [r4, #8]
 80016ea:	1e9a      	subs	r2, r3, #2
 80016ec:	4290      	cmp	r0, r2
 80016ee:	d8c1      	bhi.n	8001674 <GUI_WindowsDraw+0xc>
	show_str_mid(win->x, win->y+1, win->title,12,12,0,win->width);//顯示標題
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	9302      	str	r3, [sp, #8]
 80016f4:	230c      	movs	r3, #12
 80016f6:	6861      	ldr	r1, [r4, #4]
 80016f8:	8820      	ldrh	r0, [r4, #0]
 80016fa:	4429      	add	r1, r5
 80016fc:	9601      	str	r6, [sp, #4]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	463a      	mov	r2, r7
 8001702:	b289      	uxth	r1, r1
 8001704:	f7ff ff76 	bl	80015f4 <show_str_mid>
	return(1);
 8001708:	4628      	mov	r0, r5
 800170a:	e7b4      	b.n	8001676 <GUI_WindowsDraw+0xe>
 800170c:	2000000c 	.word	0x2000000c

08001710 <GUI_WindowsDelete>:
* 出口參數：返回0表示操作失敗，返回1表示操作成功
****************************************************************************/
uint8_t GUI_WindowsDelete(WINDOWS *win)
{  
	/* 參數過濾，若窗口起出範圍，則返回0 */
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8001710:	6882      	ldr	r2, [r0, #8]
{  
 8001712:	b513      	push	{r0, r1, r4, lr}
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8001714:	2a13      	cmp	r2, #19
{  
 8001716:	4601      	mov	r1, r0
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8001718:	d915      	bls.n	8001746 <GUI_WindowsDelete+0x36>
 800171a:	68c3      	ldr	r3, [r0, #12]
 800171c:	2b13      	cmp	r3, #19
 800171e:	d912      	bls.n	8001746 <GUI_WindowsDelete+0x36>
	if( (win->x + win->width ) > GUI_LCM_XMAX ) return(0);			// 窗口寬度是否溢出
 8001720:	6800      	ldr	r0, [r0, #0]
 8001722:	4402      	add	r2, r0
 8001724:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001728:	d80d      	bhi.n	8001746 <GUI_WindowsDelete+0x36>
	if( (win->y + win->height ) > GUI_LCM_YMAX ) return(0);			// 窗口高度是否溢出
 800172a:	6849      	ldr	r1, [r1, #4]
 800172c:	440b      	add	r3, r1
 800172e:	2b40      	cmp	r3, #64	; 0x40
 8001730:	d809      	bhi.n	8001746 <GUI_WindowsDelete+0x36>

	/* 消隱窗口 */
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, back_color);
 8001732:	4c06      	ldr	r4, [pc, #24]	; (800174c <GUI_WindowsDelete+0x3c>)
 8001734:	3b01      	subs	r3, #1
 8001736:	7824      	ldrb	r4, [r4, #0]
 8001738:	3a01      	subs	r2, #1
 800173a:	9400      	str	r4, [sp, #0]
 800173c:	f7ff febb 	bl	80014b6 <GUI_RectangleFill>
	return(1);
 8001740:	2001      	movs	r0, #1
}
 8001742:	b002      	add	sp, #8
 8001744:	bd10      	pop	{r4, pc}
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8001746:	2000      	movs	r0, #0
 8001748:	e7fb      	b.n	8001742 <GUI_WindowsDelete+0x32>
 800174a:	bf00      	nop
 800174c:	20002048 	.word	0x20002048

08001750 <GUI_WindowsClr>:
* 入口參數：win		窗口句柄
* 出口參數：無
* 說明：使用此函數前要先使用GUI_WindowsDraw()將窗口畫出。
****************************************************************************/
void GUI_WindowsClr(WINDOWS *win)
{ 
 8001750:	b513      	push	{r0, r1, r4, lr}
	uint8_t  x0, y0;
	uint8_t  x1, y1;

	/* 設置要清屏的區域 */
	x0 = win->x + 1;
	x1 = win->x + win->width - 2;
 8001752:	6882      	ldr	r2, [r0, #8]
	x0 = win->x + 1;
 8001754:	7804      	ldrb	r4, [r0, #0]
	y0 = win->y + 14;
 8001756:	7901      	ldrb	r1, [r0, #4]
	y1 = win->y + win->height - 2;
 8001758:	68c3      	ldr	r3, [r0, #12]
	x1 = win->x + win->width - 2;
 800175a:	4422      	add	r2, r4
	x0 = win->x + 1;
 800175c:	1c60      	adds	r0, r4, #1

	/* 使用填充矩形實現清屏 */
	GUI_RectangleFill(x0, y0, x1, y1, back_color);
 800175e:	4c07      	ldr	r4, [pc, #28]	; (800177c <GUI_WindowsClr+0x2c>)
	y1 = win->y + win->height - 2;
 8001760:	440b      	add	r3, r1
	GUI_RectangleFill(x0, y0, x1, y1, back_color);
 8001762:	7824      	ldrb	r4, [r4, #0]
	y1 = win->y + win->height - 2;
 8001764:	3b02      	subs	r3, #2
	x1 = win->x + win->width - 2;
 8001766:	3a02      	subs	r2, #2
	y0 = win->y + 14;
 8001768:	310e      	adds	r1, #14
	GUI_RectangleFill(x0, y0, x1, y1, back_color);
 800176a:	9400      	str	r4, [sp, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	b2c9      	uxtb	r1, r1
 8001772:	b2c0      	uxtb	r0, r0
 8001774:	f7ff fe9f 	bl	80014b6 <GUI_RectangleFill>
}
 8001778:	b002      	add	sp, #8
 800177a:	bd10      	pop	{r4, pc}
 800177c:	20002048 	.word	0x20002048

08001780 <test_window>:
.title = "XBOS",
};

//測試窗體
void test_window(void)
{
 8001780:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GUI_WindowsDraw(&winxp);
	show_str_mid(winxp.x, winxp.y+15, "TEST123",12,12,1,winxp.width);
 8001782:	250c      	movs	r5, #12
 8001784:	2601      	movs	r6, #1
	GUI_WindowsDraw(&winxp);
 8001786:	4c1f      	ldr	r4, [pc, #124]	; (8001804 <test_window+0x84>)
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff ff6d 	bl	8001668 <GUI_WindowsDraw>
	show_str_mid(winxp.x, winxp.y+15, "TEST123",12,12,1,winxp.width);
 800178e:	6861      	ldr	r1, [r4, #4]
 8001790:	8923      	ldrh	r3, [r4, #8]
 8001792:	310f      	adds	r1, #15
 8001794:	8820      	ldrh	r0, [r4, #0]
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	e88d 0060 	stmia.w	sp, {r5, r6}
 800179c:	462b      	mov	r3, r5
 800179e:	4a1a      	ldr	r2, [pc, #104]	; (8001808 <test_window+0x88>)
 80017a0:	b289      	uxth	r1, r1
 80017a2:	f7ff ff27 	bl	80015f4 <show_str_mid>
	show_str_mid(winxp.x, winxp.y+25, "TEST456",12,12,1,winxp.width);
 80017a6:	6861      	ldr	r1, [r4, #4]
 80017a8:	8923      	ldrh	r3, [r4, #8]
 80017aa:	3119      	adds	r1, #25
 80017ac:	8820      	ldrh	r0, [r4, #0]
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	e88d 0060 	stmia.w	sp, {r5, r6}
 80017b4:	462b      	mov	r3, r5
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <test_window+0x8c>)
 80017b8:	b289      	uxth	r1, r1
 80017ba:	f7ff ff1b 	bl	80015f4 <show_str_mid>
	show_str_mid(winxp.x, winxp.y+37, "TEST789",12,12,1,winxp.width);
 80017be:	6861      	ldr	r1, [r4, #4]
 80017c0:	8923      	ldrh	r3, [r4, #8]
 80017c2:	3125      	adds	r1, #37	; 0x25
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <test_window+0x90>)
 80017c6:	b289      	uxth	r1, r1
 80017c8:	8820      	ldrh	r0, [r4, #0]
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	e88d 0060 	stmia.w	sp, {r5, r6}
 80017d0:	462b      	mov	r3, r5
 80017d2:	f7ff ff0f 	bl	80015f4 <show_str_mid>
	GUI_Refresh();
 80017d6:	f7ff fed2 	bl	800157e <GUI_Refresh>
	HAL_Delay(1000);
 80017da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017de:	f7ff f923 	bl	8000a28 <HAL_Delay>
	GUI_WindowsClr(&winxp);
 80017e2:	4620      	mov	r0, r4
 80017e4:	f7ff ffb4 	bl	8001750 <GUI_WindowsClr>
	GUI_Refresh();
 80017e8:	f7ff fec9 	bl	800157e <GUI_Refresh>
	HAL_Delay(1000);
 80017ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f0:	f7ff f91a 	bl	8000a28 <HAL_Delay>
	GUI_WindowsDelete(&winxp);
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff ff8b 	bl	8001710 <GUI_WindowsDelete>
	GUI_Refresh();
}
 80017fa:	b004      	add	sp, #16
 80017fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GUI_Refresh();
 8001800:	f7ff bebd 	b.w	800157e <GUI_Refresh>
 8001804:	20000010 	.word	0x20000010
 8001808:	08002cef 	.word	0x08002cef
 800180c:	08002cf7 	.word	0x08002cf7
 8001810:	08002cff 	.word	0x08002cff

08001814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001814:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001816:	e003      	b.n	8001820 <LoopCopyDataInit>

08001818 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800181a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800181c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800181e:	3104      	adds	r1, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001820:	480a      	ldr	r0, [pc, #40]	; (800184c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001824:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001826:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001828:	d3f6      	bcc.n	8001818 <CopyDataInit>
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800182c:	e002      	b.n	8001834 <LoopFillZerobss>

0800182e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001830:	f842 3b04 	str.w	r3, [r2], #4

08001834 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001836:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001838:	d3f9      	bcc.n	800182e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800183a:	f7fe fe6d 	bl	8000518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183e:	f000 f80f 	bl	8001860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001842:	f7fe fd2f 	bl	80002a4 <main>
  bx lr
 8001846:	4770      	bx	lr
  ldr r3, =_sidata
 8001848:	08002d10 	.word	0x08002d10
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001850:	2000002c 	.word	0x2000002c
  ldr r2, =_sbss
 8001854:	2000002c 	.word	0x2000002c
  ldr r3, = _ebss
 8001858:	200020a8 	.word	0x200020a8

0800185c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC1_2_IRQHandler>
	...

08001860 <__libc_init_array>:
 8001860:	b570      	push	{r4, r5, r6, lr}
 8001862:	2500      	movs	r5, #0
 8001864:	4e0c      	ldr	r6, [pc, #48]	; (8001898 <__libc_init_array+0x38>)
 8001866:	4c0d      	ldr	r4, [pc, #52]	; (800189c <__libc_init_array+0x3c>)
 8001868:	1ba4      	subs	r4, r4, r6
 800186a:	10a4      	asrs	r4, r4, #2
 800186c:	42a5      	cmp	r5, r4
 800186e:	d109      	bne.n	8001884 <__libc_init_array+0x24>
 8001870:	f000 f81a 	bl	80018a8 <_init>
 8001874:	2500      	movs	r5, #0
 8001876:	4e0a      	ldr	r6, [pc, #40]	; (80018a0 <__libc_init_array+0x40>)
 8001878:	4c0a      	ldr	r4, [pc, #40]	; (80018a4 <__libc_init_array+0x44>)
 800187a:	1ba4      	subs	r4, r4, r6
 800187c:	10a4      	asrs	r4, r4, #2
 800187e:	42a5      	cmp	r5, r4
 8001880:	d105      	bne.n	800188e <__libc_init_array+0x2e>
 8001882:	bd70      	pop	{r4, r5, r6, pc}
 8001884:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001888:	4798      	blx	r3
 800188a:	3501      	adds	r5, #1
 800188c:	e7ee      	b.n	800186c <__libc_init_array+0xc>
 800188e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001892:	4798      	blx	r3
 8001894:	3501      	adds	r5, #1
 8001896:	e7f2      	b.n	800187e <__libc_init_array+0x1e>
 8001898:	08002d08 	.word	0x08002d08
 800189c:	08002d08 	.word	0x08002d08
 80018a0:	08002d08 	.word	0x08002d08
 80018a4:	08002d0c 	.word	0x08002d0c

080018a8 <_init>:
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018aa:	bf00      	nop
 80018ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ae:	bc08      	pop	{r3}
 80018b0:	469e      	mov	lr, r3
 80018b2:	4770      	bx	lr

080018b4 <_fini>:
 80018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b6:	bf00      	nop
 80018b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ba:	bc08      	pop	{r3}
 80018bc:	469e      	mov	lr, r3
 80018be:	4770      	bx	lr
