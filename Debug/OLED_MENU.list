
OLED_MENU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025ec  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  080027d0  080027d0  000127d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000174  20000000  08003d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000021a0  20000174  08003f00  00020174  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002314  08003f00  00022314  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016210  00000000  00000000  0002019d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003607  00000000  00000000  000363ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007e0  00000000  00000000  000399b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e0  00000000  00000000  0003a198  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005a41  00000000  00000000  0003ab78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000029ef  00000000  00000000  000405b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00042fa8  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000014d0  00000000  00000000  00043024  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000061c6  00000000  00000000  000444f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000174 	.word	0x20000174
 8000200:	00000000 	.word	0x00000000
 8000204:	080027b8 	.word	0x080027b8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000178 	.word	0x20000178
 8000220:	080027b8 	.word	0x080027b8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <SystemClock_Config>:
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
void SystemClock_Config(void) {
 8000238:	b510      	push	{r4, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023c:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023e:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000240:	2100      	movs	r1, #0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800024a:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024c:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024e:	9108      	str	r1, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000256:	f000 fdbb 	bl	8000dd0 <HAL_RCC_OscConfig>
 800025a:	b100      	cbz	r0, 800025e <SystemClock_Config+0x2a>
 800025c:	e7fe      	b.n	800025c <SystemClock_Config+0x28>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	9301      	str	r3, [sp, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	9005      	str	r0, [sp, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800026a:	4621      	mov	r1, r4
 800026c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000272:	f000 ff75 	bl	8001160 <HAL_RCC_ClockConfig>
 8000276:	4604      	mov	r4, r0
 8000278:	b100      	cbz	r0, 800027c <SystemClock_Config+0x48>
 800027a:	e7fe      	b.n	800027a <SystemClock_Config+0x46>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800027c:	f001 f814 	bl	80012a8 <HAL_RCC_GetHCLKFreq>
 8000280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000284:	fbb0 f0f3 	udiv	r0, r0, r3
 8000288:	f000 fc84 	bl	8000b94 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800028c:	2004      	movs	r0, #4
 800028e:	f000 fc97 	bl	8000bc0 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000292:	4622      	mov	r2, r4
 8000294:	4621      	mov	r1, r4
 8000296:	f04f 30ff 	mov.w	r0, #4294967295
 800029a:	f000 fc47 	bl	8000b2c <HAL_NVIC_SetPriority>
}
 800029e:	b010      	add	sp, #64	; 0x40
 80002a0:	bd10      	pop	{r4, pc}
	...

080002a4 <main>:
int main(void) {
 80002a4:	b500      	push	{lr}
 80002a6:	b089      	sub	sp, #36	; 0x24
	HAL_Init();
 80002a8:	f000 fbf8 	bl	8000a9c <HAL_Init>
	SystemClock_Config();
 80002ac:	f7ff ffc2 	bl	8000234 <SystemClock_Config>
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80002b0:	4b54      	ldr	r3, [pc, #336]	; (8000404 <main+0x160>)
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80002b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80002b6:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80002b8:	4853      	ldr	r0, [pc, #332]	; (8000408 <main+0x164>)
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80002ba:	f042 0220 	orr.w	r2, r2, #32
 80002be:	619a      	str	r2, [r3, #24]
 80002c0:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c2:	2400      	movs	r4, #0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80002c4:	f002 0220 	and.w	r2, r2, #32
 80002c8:	9200      	str	r2, [sp, #0]
 80002ca:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80002cc:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ce:	2501      	movs	r5, #1
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80002d0:	f042 0208 	orr.w	r2, r2, #8
 80002d4:	619a      	str	r2, [r3, #24]
 80002d6:	699a      	ldr	r2, [r3, #24]

	/*Configure GPIO pin : LED0_Pin */
	GPIO_InitStruct.Pin = LED0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d8:	2602      	movs	r6, #2
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80002da:	f002 0208 	and.w	r2, r2, #8
 80002de:	9201      	str	r2, [sp, #4]
 80002e0:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80002e2:	699a      	ldr	r2, [r3, #24]
 80002e4:	f042 0210 	orr.w	r2, r2, #16
 80002e8:	619a      	str	r2, [r3, #24]
 80002ea:	699a      	ldr	r2, [r3, #24]
 80002ec:	f002 0210 	and.w	r2, r2, #16
 80002f0:	9202      	str	r2, [sp, #8]
 80002f2:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80002f4:	699a      	ldr	r2, [r3, #24]
 80002f6:	f042 0204 	orr.w	r2, r2, #4
 80002fa:	619a      	str	r2, [r3, #24]
 80002fc:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	9303      	str	r3, [sp, #12]
 8000306:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000308:	f000 fd58 	bl	8000dbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	2140      	movs	r1, #64	; 0x40
 8000310:	483e      	ldr	r0, [pc, #248]	; (800040c <main+0x168>)
 8000312:	f000 fd53 	bl	8000dbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800031c:	483c      	ldr	r0, [pc, #240]	; (8000410 <main+0x16c>)
 800031e:	f000 fd4d 	bl	8000dbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2104      	movs	r1, #4
 8000326:	483b      	ldr	r0, [pc, #236]	; (8000414 <main+0x170>)
 8000328:	f000 fd48 	bl	8000dbc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 800032c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000330:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000332:	2303      	movs	r3, #3
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000334:	a904      	add	r1, sp, #16
 8000336:	4834      	ldr	r0, [pc, #208]	; (8000408 <main+0x164>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000338:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800033e:	f000 fc51 	bl	8000be4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000342:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000344:	a904      	add	r1, sp, #16
 8000346:	4831      	ldr	r0, [pc, #196]	; (800040c <main+0x168>)
	GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000348:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034a:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800034e:	9507      	str	r5, [sp, #28]
	HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000350:	f000 fc48 	bl	8000be4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED0_Pin;
 8000354:	f44f 7380 	mov.w	r3, #256	; 0x100
	HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000358:	a904      	add	r1, sp, #16
 800035a:	482d      	ldr	r0, [pc, #180]	; (8000410 <main+0x16c>)
	GPIO_InitStruct.Pin = LED0_Pin;
 800035c:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	9607      	str	r6, [sp, #28]
	HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000364:	f000 fc3e 	bl	8000be4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000368:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800036a:	a904      	add	r1, sp, #16
 800036c:	4829      	ldr	r0, [pc, #164]	; (8000414 <main+0x170>)
	GPIO_InitStruct.Pin = LED1_Pin;
 800036e:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	9607      	str	r6, [sp, #28]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000376:	f000 fc35 	bl	8000be4 <HAL_GPIO_Init>
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800037a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800037e:	f44f 7282 	mov.w	r2, #260	; 0x104
	hspi2.Instance = SPI2;
 8000382:	4825      	ldr	r0, [pc, #148]	; (8000418 <main+0x174>)
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000384:	4925      	ldr	r1, [pc, #148]	; (800041c <main+0x178>)
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000386:	60c4      	str	r4, [r0, #12]
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000388:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800038c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000390:	6183      	str	r3, [r0, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000392:	2308      	movs	r3, #8
 8000394:	61c3      	str	r3, [r0, #28]
	hspi2.Init.CRCPolynomial = 10;
 8000396:	230a      	movs	r3, #10
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000398:	6106      	str	r6, [r0, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800039a:	6145      	str	r5, [r0, #20]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800039c:	6204      	str	r4, [r0, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800039e:	6244      	str	r4, [r0, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a0:	6284      	str	r4, [r0, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80003a2:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80003a4:	f001 f886 	bl	80014b4 <HAL_SPI_Init>
 80003a8:	b100      	cbz	r0, 80003ac <main+0x108>
 80003aa:	e7fe      	b.n	80003aa <main+0x106>
	OLED_Init();
 80003ac:	f000 fa60 	bl	8000870 <OLED_Init>
	mainMenuInit();
 80003b0:	f001 f8c2 	bl	8001538 <mainMenuInit>
	test_window();
 80003b4:	f002 f9ac 	bl	8002710 <test_window>
	HAL_Delay(1000);
 80003b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003bc:	f000 fb92 	bl	8000ae4 <HAL_Delay>
	test_scrollbar();
 80003c0:	f002 f8c2 	bl	8002548 <test_scrollbar>
	HAL_Delay(1000);
 80003c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c8:	f000 fb8c 	bl	8000ae4 <HAL_Delay>
	test_MessageBox();
 80003cc:	f001 fffc 	bl	80023c8 <test_MessageBox>
	test_Button();
 80003d0:	f001 fb04 	bl	80019dc <test_Button>
	HAL_Delay(1000);
 80003d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d8:	f000 fb84 	bl	8000ae4 <HAL_Delay>
	GUI_ClearSCR();
 80003dc:	f001 fee7 	bl	80021ae <GUI_ClearSCR>
	Menu_Run();
 80003e0:	f001 f986 	bl	80016f0 <Menu_Run>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80003e4:	4d0a      	ldr	r5, [pc, #40]	; (8000410 <main+0x16c>)
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80003e6:	4c0b      	ldr	r4, [pc, #44]	; (8000414 <main+0x170>)
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80003e8:	4628      	mov	r0, r5
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	f000 fcea 	bl	8000dc6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80003f2:	4620      	mov	r0, r4
 80003f4:	2104      	movs	r1, #4
 80003f6:	f000 fce6 	bl	8000dc6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80003fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003fe:	f000 fb71 	bl	8000ae4 <HAL_Delay>
 8000402:	e7f1      	b.n	80003e8 <main+0x144>
 8000404:	40021000 	.word	0x40021000
 8000408:	40010c00 	.word	0x40010c00
 800040c:	40011000 	.word	0x40011000
 8000410:	40010800 	.word	0x40010800
 8000414:	40011400 	.word	0x40011400
 8000418:	2000219c 	.word	0x2000219c
 800041c:	40003800 	.word	0x40003800

08000420 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <HAL_MspInit+0x98>)
{
 8000422:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000424:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000426:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000428:	f042 0201 	orr.w	r2, r2, #1
 800042c:	619a      	str	r2, [r3, #24]
 800042e:	699a      	ldr	r2, [r3, #24]
 8000430:	f002 0201 	and.w	r2, r2, #1
 8000434:	9200      	str	r2, [sp, #0]
 8000436:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000438:	69da      	ldr	r2, [r3, #28]
 800043a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800043e:	61da      	str	r2, [r3, #28]
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000446:	9301      	str	r3, [sp, #4]
 8000448:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800044a:	f000 fb5d 	bl	8000b08 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	f06f 000b 	mvn.w	r0, #11
 8000454:	4611      	mov	r1, r2
 8000456:	f000 fb69 	bl	8000b2c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	f06f 000a 	mvn.w	r0, #10
 8000460:	4611      	mov	r1, r2
 8000462:	f000 fb63 	bl	8000b2c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	f06f 0009 	mvn.w	r0, #9
 800046c:	4611      	mov	r1, r2
 800046e:	f000 fb5d 	bl	8000b2c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	f06f 0004 	mvn.w	r0, #4
 8000478:	4611      	mov	r1, r2
 800047a:	f000 fb57 	bl	8000b2c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	f06f 0003 	mvn.w	r0, #3
 8000484:	4611      	mov	r1, r2
 8000486:	f000 fb51 	bl	8000b2c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	f06f 0001 	mvn.w	r0, #1
 8000490:	4611      	mov	r1, r2
 8000492:	f000 fb4b 	bl	8000b2c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	f04f 30ff 	mov.w	r0, #4294967295
 800049c:	4611      	mov	r1, r2
 800049e:	f000 fb45 	bl	8000b2c <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a2:	4a06      	ldr	r2, [pc, #24]	; (80004bc <HAL_MspInit+0x9c>)
 80004a4:	6853      	ldr	r3, [r2, #4]
 80004a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ae:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b0:	b003      	add	sp, #12
 80004b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000

080004c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 80004c2:	6802      	ldr	r2, [r0, #0]
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <HAL_SPI_MspInit+0x3c>)
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d115      	bne.n	80004f6 <HAL_SPI_MspInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004ca:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80004ce:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d0:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004d6:	61da      	str	r2, [r3, #28]
 80004d8:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004da:	4809      	ldr	r0, [pc, #36]	; (8000500 <HAL_SPI_MspInit+0x40>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80004e4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ea:	2302      	movs	r3, #2
 80004ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ee:	2303      	movs	r3, #3
 80004f0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f2:	f000 fb77 	bl	8000be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80004f6:	b007      	add	sp, #28
 80004f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80004fc:	40003800 	.word	0x40003800
 8000500:	40010c00 	.word	0x40010c00

08000504 <NMI_Handler>:
 8000504:	4770      	bx	lr

08000506 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000506:	e7fe      	b.n	8000506 <HardFault_Handler>

08000508 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler>

0800050a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800050a:	e7fe      	b.n	800050a <BusFault_Handler>

0800050c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler>

0800050e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800050e:	4770      	bx	lr

08000510 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000510:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000512:	f000 fad5 	bl	8000ac0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800051a:	f000 bb5e 	b.w	8000bda <HAL_SYSTICK_IRQHandler>
	...

08000520 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <SystemInit+0x40>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	f042 0201 	orr.w	r2, r2, #1
 8000528:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800052a:	6859      	ldr	r1, [r3, #4]
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <SystemInit+0x44>)
 800052e:	400a      	ands	r2, r1
 8000530:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000538:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800053c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000544:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000546:	685a      	ldr	r2, [r3, #4]
 8000548:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800054c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800054e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000552:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000554:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <SystemInit+0x48>)
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	f8ff0000 	.word	0xf8ff0000
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <write>:
#define Max_Column	0x3F			// 256/4-1
#define Max_Row		0x3F			// 64-1
#define	Brightness	0x0F

uint16_t gram[64][64] = { 0 }; // row : 64 col: 64 *4 = 256   u16 = [p1,p2,p3,p4]
static void write(uint8_t bytes, uint8_t is_data) {
 800056c:	b513      	push	{r0, r1, r4, lr}
 800056e:	460c      	mov	r4, r1
	uint8_t tmp = bytes;
 8000570:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800057a:	480d      	ldr	r0, [pc, #52]	; (80005b0 <write+0x44>)
 800057c:	f000 fc1e 	bl	8000dbc <HAL_GPIO_WritePin>
	if (is_data) {
 8000580:	b1a4      	cbz	r4, 80005ac <write+0x40>
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, SET);
 8000582:	2201      	movs	r2, #1
	}
	/* We are sending commands */
	else {
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 8000584:	2140      	movs	r1, #64	; 0x40
 8000586:	480b      	ldr	r0, [pc, #44]	; (80005b4 <write+0x48>)
 8000588:	f000 fc18 	bl	8000dbc <HAL_GPIO_WritePin>
	}
	HAL_SPI_Transmit(&hspi2, &tmp, 1, 1000);
 800058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000590:	f10d 0107 	add.w	r1, sp, #7
 8000594:	2201      	movs	r2, #1
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <write+0x4c>)
 8000598:	f000 fee3 	bl	8001362 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, SET);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <write+0x44>)
 80005a4:	f000 fc0a 	bl	8000dbc <HAL_GPIO_WritePin>
}
 80005a8:	b002      	add	sp, #8
 80005aa:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 80005ac:	4622      	mov	r2, r4
 80005ae:	e7e9      	b.n	8000584 <write+0x18>
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	40011000 	.word	0x40011000
 80005b8:	2000219c 	.word	0x2000219c

080005bc <OLED_DrawPoint>:
{
	OLED_FillRam(0x00);
}
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t mode) {

	if (x > 255 || y > 63)
 80005bc:	293f      	cmp	r1, #63	; 0x3f
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t mode) {
 80005be:	b510      	push	{r4, lr}
	if (x > 255 || y > 63)
 80005c0:	d811      	bhi.n	80005e6 <OLED_DrawPoint+0x2a>
		return;
	uint16_t point = 0x000f;
	uint8_t group = x >> 2;
 80005c2:	0884      	lsrs	r4, r0, #2
	uint8_t group_bit = 3 - (x % 4);
 80005c4:	43c0      	mvns	r0, r0
	point = point << (group_bit * 4);
 80005c6:	f000 0303 	and.w	r3, r0, #3
 80005ca:	0098      	lsls	r0, r3, #2
 80005cc:	230f      	movs	r3, #15
 80005ce:	0189      	lsls	r1, r1, #6
 80005d0:	4083      	lsls	r3, r0
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <OLED_DrawPoint+0x34>)

	if (!mode) {
		point = ~point;
		gram[y][group] &= point;
 80005d6:	4421      	add	r1, r4
	if (!mode) {
 80005d8:	b932      	cbnz	r2, 80005e8 <OLED_DrawPoint+0x2c>
		gram[y][group] &= point;
 80005da:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 80005de:	ea22 0303 	bic.w	r3, r2, r3
	} else {
		gram[y][group] |= point;
 80005e2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80005e6:	bd10      	pop	{r4, pc}
 80005e8:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	e7f8      	b.n	80005e2 <OLED_DrawPoint+0x26>
 80005f0:	20000190 	.word	0x20000190

080005f4 <OLED_FillBlock>:
void OLED_FillBlock(unsigned char a, unsigned char b,unsigned char c, unsigned char d,unsigned char Data){
 80005f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f8:	4607      	mov	r7, r0
 80005fa:	4688      	mov	r8, r1
 80005fc:	461e      	mov	r6, r3
	for(int y=c;y<d;y++)
 80005fe:	4614      	mov	r4, r2
void OLED_FillBlock(unsigned char a, unsigned char b,unsigned char c, unsigned char d,unsigned char Data){
 8000600:	f89d 9020 	ldrb.w	r9, [sp, #32]
	for(int y=c;y<d;y++)
 8000604:	42b4      	cmp	r4, r6
 8000606:	db01      	blt.n	800060c <OLED_FillBlock+0x18>
}
 8000608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for(int x=a;x<b;x++)
 800060c:	463d      	mov	r5, r7
			OLED_DrawPoint(x,y,Data);
 800060e:	fa5f fa84 	uxtb.w	sl, r4
		for(int x=a;x<b;x++)
 8000612:	4545      	cmp	r5, r8
 8000614:	db01      	blt.n	800061a <OLED_FillBlock+0x26>
	for(int y=c;y<d;y++)
 8000616:	3401      	adds	r4, #1
 8000618:	e7f4      	b.n	8000604 <OLED_FillBlock+0x10>
			OLED_DrawPoint(x,y,Data);
 800061a:	b2e8      	uxtb	r0, r5
 800061c:	464a      	mov	r2, r9
 800061e:	4651      	mov	r1, sl
 8000620:	f7ff ffcc 	bl	80005bc <OLED_DrawPoint>
		for(int x=a;x<b;x++)
 8000624:	3501      	adds	r5, #1
 8000626:	e7f4      	b.n	8000612 <OLED_FillBlock+0x1e>

08000628 <OLED_FillRam>:
void OLED_FillRam(unsigned char Data) {
 8000628:	b507      	push	{r0, r1, r2, lr}
	OLED_FillBlock(0x00, Max_Column, 0x00, Max_Row,Data);
 800062a:	233f      	movs	r3, #63	; 0x3f
 800062c:	2200      	movs	r2, #0
 800062e:	9000      	str	r0, [sp, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	4610      	mov	r0, r2
 8000634:	f7ff ffde 	bl	80005f4 <OLED_FillBlock>
}
 8000638:	b003      	add	sp, #12
 800063a:	f85d fb04 	ldr.w	pc, [sp], #4

0800063e <OLED_Clear>:
	OLED_FillRam(0x00);
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff bff2 	b.w	8000628 <OLED_FillRam>

08000644 <OLED_ReadPoint>:
	}

}
uint8_t OLED_ReadPoint(uint8_t x, uint8_t y) {

	if (x > 255 || y > 63)
 8000644:	293f      	cmp	r1, #63	; 0x3f
 8000646:	d80f      	bhi.n	8000668 <OLED_ReadPoint+0x24>
		return 0;
	uint16_t point = 0x000f;
	uint8_t group = x >> 2;
	uint8_t group_bit = 3 - (x % 4);
 8000648:	43c3      	mvns	r3, r0

	point = (gram[y][group] & (point << (group_bit * 4))) >> (group_bit * 4);
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <OLED_ReadPoint+0x28>)
 800064c:	0189      	lsls	r1, r1, #6
 800064e:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 8000652:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8000656:	220f      	movs	r2, #15
 8000658:	f003 0303 	and.w	r3, r3, #3
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	409a      	lsls	r2, r3
 8000660:	4010      	ands	r0, r2
 8000662:	4118      	asrs	r0, r3
	point = point & 0x00ff;
	return point;

}
 8000664:	b2c0      	uxtb	r0, r0
 8000666:	4770      	bx	lr
 8000668:	2000      	movs	r0, #0
 800066a:	e7fb      	b.n	8000664 <OLED_ReadPoint+0x20>
 800066c:	20000190 	.word	0x20000190

08000670 <OLED_RefreshGram>:
void OLED_RefreshGram() {
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Write_Command(0x15);			// Set Column Address
 8000672:	2100      	movs	r1, #0
 8000674:	2015      	movs	r0, #21
 8000676:	f7ff ff79 	bl	800056c <write>
	Write_Data(a);				//   Default => 0x00
 800067a:	2101      	movs	r1, #1
 800067c:	201c      	movs	r0, #28
 800067e:	f7ff ff75 	bl	800056c <write>
	Write_Data(b);				//   Default => 0x77
 8000682:	2101      	movs	r1, #1
 8000684:	205b      	movs	r0, #91	; 0x5b
 8000686:	f7ff ff71 	bl	800056c <write>
	Write_Command(0x75);			// Set Row Address
 800068a:	2100      	movs	r1, #0
 800068c:	2075      	movs	r0, #117	; 0x75
 800068e:	f7ff ff6d 	bl	800056c <write>
	Write_Data(a);				//   Default => 0x00
 8000692:	2101      	movs	r1, #1
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff ff69 	bl	800056c <write>
	Write_Data(b);				//   Default => 0x7F
 800069a:	2101      	movs	r1, #1
 800069c:	203f      	movs	r0, #63	; 0x3f
 800069e:	f7ff ff65 	bl	800056c <write>
	Write_Command(0x5C);			// Enable MCU to Write into RAM
 80006a2:	2100      	movs	r1, #0
 80006a4:	205c      	movs	r0, #92	; 0x5c
 80006a6:	f7ff ff61 	bl	800056c <write>
 80006aa:	2500      	movs	r5, #0
 80006ac:	4f0a      	ldr	r7, [pc, #40]	; (80006d8 <OLED_RefreshGram+0x68>)
void OLED_RefreshGram() {
 80006ae:	2400      	movs	r4, #0
 80006b0:	197e      	adds	r6, r7, r5
	Set_Column_Address(Shift + a, Shift + b);
	Set_Row_Address(c, d);
	Set_Write_RAM();
	for (int y = 0; y < (d - c+1); y++) {
		for (int x = 0; x < (b - a+1); x++) {
			Write_Data((gram[y][x] & 0xff00) >> 8); //draw 3,4 point
 80006b2:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 80006b6:	2101      	movs	r1, #1
 80006b8:	0a00      	lsrs	r0, r0, #8
 80006ba:	f7ff ff57 	bl	800056c <write>
			Write_Data(gram[y][x] & 0x00ff); 		//draw 1,2 point
 80006be:	f816 0014 	ldrb.w	r0, [r6, r4, lsl #1]
 80006c2:	2101      	movs	r1, #1
		for (int x = 0; x < (b - a+1); x++) {
 80006c4:	3401      	adds	r4, #1
			Write_Data(gram[y][x] & 0x00ff); 		//draw 1,2 point
 80006c6:	f7ff ff51 	bl	800056c <write>
		for (int x = 0; x < (b - a+1); x++) {
 80006ca:	2c40      	cmp	r4, #64	; 0x40
 80006cc:	d1f1      	bne.n	80006b2 <OLED_RefreshGram+0x42>
 80006ce:	3580      	adds	r5, #128	; 0x80
	for (int y = 0; y < (d - c+1); y++) {
 80006d0:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80006d4:	d1eb      	bne.n	80006ae <OLED_RefreshGram+0x3e>
 80006d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006d8:	20000190 	.word	0x20000190

080006dc <OLED_ShowChar>:
		}
	}
}

void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80006dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006e0:	b087      	sub	sp, #28
 80006e2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80006e6:	4689      	mov	r9, r1
	uint8_t temp,t,t1;
	uint8_t y0=y;
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 80006e8:	f015 0107 	ands.w	r1, r5, #7
 80006ec:	bf18      	it	ne
 80006ee:	2101      	movne	r1, #1
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80006f0:	469b      	mov	fp, r3
 80006f2:	4680      	mov	r8, r0
 80006f4:	2024      	movs	r0, #36	; 0x24
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 80006f6:	eb01 01d5 	add.w	r1, r1, r5, lsr #3
 80006fa:	fb01 f10b 	mul.w	r1, r1, fp
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80006fe:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	chr=chr-' ';//得到偏移后的值
 8000702:	3a20      	subs	r2, #32
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 8000704:	9301      	str	r3, [sp, #4]
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 8000706:	b2cb      	uxtb	r3, r1
 8000708:	4927      	ldr	r1, [pc, #156]	; (80007a8 <OLED_ShowChar+0xcc>)
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	9302      	str	r3, [sp, #8]
 800070e:	fb00 1302 	mla	r3, r0, r2, r1
 8000712:	200c      	movs	r0, #12
 8000714:	4925      	ldr	r1, [pc, #148]	; (80007ac <OLED_ShowChar+0xd0>)
 8000716:	9305      	str	r3, [sp, #20]
 8000718:	fb00 1302 	mla	r3, r0, r2, r1
 800071c:	2006      	movs	r0, #6
	for(t=0;t<csize;t++)
 800071e:	464c      	mov	r4, r9
 8000720:	2700      	movs	r7, #0
 8000722:	4923      	ldr	r1, [pc, #140]	; (80007b0 <OLED_ShowChar+0xd4>)
 8000724:	9303      	str	r3, [sp, #12]
 8000726:	fb00 1302 	mla	r3, r0, r2, r1
 800072a:	9304      	str	r3, [sp, #16]
 800072c:	9b02      	ldr	r3, [sp, #8]
 800072e:	b2fa      	uxtb	r2, r7
 8000730:	4293      	cmp	r3, r2
 8000732:	d802      	bhi.n	800073a <OLED_ShowChar+0x5e>
				x++;
				break;
			}
		}
	}
}
 8000734:	b007      	add	sp, #28
 8000736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(f_w==6&&f_h==8)temp=asc2_0608[chr][t];		//调用0608ascii字体
 800073a:	f1bb 0f06 	cmp.w	fp, #6
 800073e:	d128      	bne.n	8000792 <OLED_ShowChar+0xb6>
 8000740:	2d08      	cmp	r5, #8
 8000742:	d122      	bne.n	800078a <OLED_ShowChar+0xae>
 8000744:	9b04      	ldr	r3, [sp, #16]
 8000746:	f104 0a08 	add.w	sl, r4, #8
		else if(f_w==12&&f_h==24)temp=asc2_1224[chr][t];//调用1224ascii字体
 800074a:	5dde      	ldrb	r6, [r3, r7]
 800074c:	fa5f fa8a 	uxtb.w	sl, sl
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8000750:	0633      	lsls	r3, r6, #24
			else OLED_DrawPoint(x,y,!mode);
 8000752:	bf58      	it	pl
 8000754:	9b01      	ldrpl	r3, [sp, #4]
 8000756:	4621      	mov	r1, r4
 8000758:	bf58      	it	pl
 800075a:	fab3 f283 	clzpl	r2, r3
			y++;
 800075e:	f104 0401 	add.w	r4, r4, #1
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8000762:	bf4c      	ite	mi
 8000764:	9a01      	ldrmi	r2, [sp, #4]
			else OLED_DrawPoint(x,y,!mode);
 8000766:	0952      	lsrpl	r2, r2, #5
 8000768:	4640      	mov	r0, r8
			y++;
 800076a:	b2e4      	uxtb	r4, r4
			else OLED_DrawPoint(x,y,!mode);
 800076c:	f7ff ff26 	bl	80005bc <OLED_DrawPoint>
			if((y-y0)==f_h)
 8000770:	eba4 0209 	sub.w	r2, r4, r9
			temp<<=1;
 8000774:	0076      	lsls	r6, r6, #1
			if((y-y0)==f_h)
 8000776:	42aa      	cmp	r2, r5
			temp<<=1;
 8000778:	b2f6      	uxtb	r6, r6
			if((y-y0)==f_h)
 800077a:	d111      	bne.n	80007a0 <OLED_ShowChar+0xc4>
				y=y0;
 800077c:	464c      	mov	r4, r9
				x++;
 800077e:	f108 0801 	add.w	r8, r8, #1
 8000782:	fa5f f888 	uxtb.w	r8, r8
 8000786:	3701      	adds	r7, #1
 8000788:	e7d0      	b.n	800072c <OLED_ShowChar+0x50>
		else if(f_w==6&&f_h==12)temp=asc2_0612[chr][t];	//调用0612ascii字体
 800078a:	2d0c      	cmp	r5, #12
 800078c:	d1d2      	bne.n	8000734 <OLED_ShowChar+0x58>
 800078e:	9b03      	ldr	r3, [sp, #12]
 8000790:	e7d9      	b.n	8000746 <OLED_ShowChar+0x6a>
		else if(f_w==12&&f_h==24)temp=asc2_1224[chr][t];//调用1224ascii字体
 8000792:	f1bb 0f0c 	cmp.w	fp, #12
 8000796:	d1cd      	bne.n	8000734 <OLED_ShowChar+0x58>
 8000798:	2d18      	cmp	r5, #24
 800079a:	d1cb      	bne.n	8000734 <OLED_ShowChar+0x58>
 800079c:	9b05      	ldr	r3, [sp, #20]
 800079e:	e7d2      	b.n	8000746 <OLED_ShowChar+0x6a>
		for(t1=0;t1<8;t1++)
 80007a0:	45a2      	cmp	sl, r4
 80007a2:	d1d5      	bne.n	8000750 <OLED_ShowChar+0x74>
 80007a4:	e7ef      	b.n	8000786 <OLED_ShowChar+0xaa>
 80007a6:	bf00      	nop
 80007a8:	08002fdb 	.word	0x08002fdb
 80007ac:	08002b67 	.word	0x08002b67
 80007b0:	0800292d 	.word	0x0800292d

080007b4 <OLED_ShowPicture>:
//x,y:起点坐标
//p_w:图片宽（单位像素）
//p_h:图片高（单位像素）
//*p:图片起始地址
void OLED_ShowPicture(uint8_t x,uint8_t y,const uint8_t *p,uint8_t p_w,uint8_t p_h)
{
 80007b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007b8:	468a      	mov	sl, r1
 80007ba:	4698      	mov	r8, r3
 80007bc:	b087      	sub	sp, #28
 80007be:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	uint8_t temp,i,col,row;
	uint8_t y0=y;
	uint8_t width=p_w;
	if(x+p_w>128)width=128-p_w;//实际显示宽度
 80007c2:	18c3      	adds	r3, r0, r3
 80007c4:	2b80      	cmp	r3, #128	; 0x80
 80007c6:	bfc8      	it	gt
 80007c8:	f1c8 0880 	rsbgt	r8, r8, #128	; 0x80
	uint8_t high=p_h;
	if(y+p_h>64)high=64-p_h;//实际显示高度
 80007cc:	eb01 030a 	add.w	r3, r1, sl
	if(x+p_w>128)width=128-p_w;//实际显示宽度
 80007d0:	bfc8      	it	gt
 80007d2:	fa5f f888 	uxtbgt.w	r8, r8
	if(y+p_h>64)high=64-p_h;//实际显示高度
 80007d6:	2b40      	cmp	r3, #64	; 0x40
	uint8_t high=p_h;
 80007d8:	bfd2      	itee	le
 80007da:	460d      	movle	r5, r1
	if(y+p_h>64)high=64-p_h;//实际显示高度
 80007dc:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 80007e0:	b2ed      	uxtbgt	r5, r5
	uint8_t exp_col_bytes=(p_h/8+((p_h%8)?1:0));//显示一列的字节数
	uint8_t act_col_bytes=(high/8+((high%8)?1:0));//实际显示一列的字节数
 80007e2:	f015 0307 	ands.w	r3, r5, #7
 80007e6:	bf18      	it	ne
 80007e8:	2301      	movne	r3, #1
 80007ea:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 80007ee:	9301      	str	r3, [sp, #4]
	uint8_t exp_col_bytes=(p_h/8+((p_h%8)?1:0));//显示一列的字节数
 80007f0:	f011 0307 	ands.w	r3, r1, #7
 80007f4:	bf18      	it	ne
 80007f6:	2301      	movne	r3, #1
 80007f8:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
 80007fc:	9303      	str	r3, [sp, #12]
{
 80007fe:	4606      	mov	r6, r0
 8000800:	4617      	mov	r7, r2

	for(row=0;row<width;row++)//列++
 8000802:	4654      	mov	r4, sl
 8000804:	2300      	movs	r3, #0
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4590      	cmp	r8, r2
 800080a:	d92e      	bls.n	800086a <OLED_ShowPicture+0xb6>
 800080c:	9a01      	ldr	r2, [sp, #4]
 800080e:	46bb      	mov	fp, r7
 8000810:	443a      	add	r2, r7
 8000812:	9204      	str	r2, [sp, #16]
 8000814:	e01e      	b.n	8000854 <OLED_ShowPicture+0xa0>
 8000816:	f104 0208 	add.w	r2, r4, #8
 800081a:	b2d2      	uxtb	r2, r2
	{
		for(col=0;col<act_col_bytes;col++)//显示一列
		{
			temp = p[col+row*exp_col_bytes];
 800081c:	f81b 9b01 	ldrb.w	r9, [fp], #1
 8000820:	9202      	str	r2, [sp, #8]
			for(i=0;i<8;i++)
			{
				if(temp&0x80)OLED_DrawPoint(x,y,1);
 8000822:	f019 0f80 	tst.w	r9, #128	; 0x80
				else OLED_DrawPoint(x,y,0);
 8000826:	4621      	mov	r1, r4
				temp<<=1;
				y++;
 8000828:	f104 0401 	add.w	r4, r4, #1
				if(temp&0x80)OLED_DrawPoint(x,y,1);
 800082c:	bf14      	ite	ne
 800082e:	2201      	movne	r2, #1
				else OLED_DrawPoint(x,y,0);
 8000830:	2200      	moveq	r2, #0
 8000832:	4630      	mov	r0, r6
				y++;
 8000834:	b2e4      	uxtb	r4, r4
 8000836:	9305      	str	r3, [sp, #20]
				else OLED_DrawPoint(x,y,0);
 8000838:	f7ff fec0 	bl	80005bc <OLED_DrawPoint>
				if((y-y0)==high)
 800083c:	eba4 020a 	sub.w	r2, r4, sl
				temp<<=1;
 8000840:	ea4f 0949 	mov.w	r9, r9, lsl #1
				if((y-y0)==high)
 8000844:	42aa      	cmp	r2, r5
				else OLED_DrawPoint(x,y,0);
 8000846:	9b05      	ldr	r3, [sp, #20]
				temp<<=1;
 8000848:	fa5f f989 	uxtb.w	r9, r9
				if((y-y0)==high)
 800084c:	d109      	bne.n	8000862 <OLED_ShowPicture+0xae>
				{
					y=y0;
 800084e:	4654      	mov	r4, sl
					x++;
 8000850:	3601      	adds	r6, #1
 8000852:	b2f6      	uxtb	r6, r6
		for(col=0;col<act_col_bytes;col++)//显示一列
 8000854:	9a04      	ldr	r2, [sp, #16]
 8000856:	4593      	cmp	fp, r2
 8000858:	d1dd      	bne.n	8000816 <OLED_ShowPicture+0x62>
 800085a:	9a03      	ldr	r2, [sp, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	4417      	add	r7, r2
 8000860:	e7d1      	b.n	8000806 <OLED_ShowPicture+0x52>
			for(i=0;i<8;i++)
 8000862:	9a02      	ldr	r2, [sp, #8]
 8000864:	4294      	cmp	r4, r2
 8000866:	d1dc      	bne.n	8000822 <OLED_ShowPicture+0x6e>
 8000868:	e7f4      	b.n	8000854 <OLED_ShowPicture+0xa0>
					break;
				}
			}
		}
	}
}
 800086a:	b007      	add	sp, #28
 800086c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000870 <OLED_Init>:
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Initialization
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void OLED_Init() {
 8000870:	b513      	push	{r0, r1, r4, lr}
	uint8_t dummy = 0x0;
 8000872:	2400      	movs	r4, #0
 8000874:	a902      	add	r1, sp, #8
//	{
//		HAL_Delay(1);
//	}

	//LCD_RST_SetHigh();
	HAL_SPI_Transmit(&hspi2, &dummy, 1, 1000);
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	2201      	movs	r2, #1
	uint8_t dummy = 0x0;
 800087c:	f801 4d01 	strb.w	r4, [r1, #-1]!
	HAL_SPI_Transmit(&hspi2, &dummy, 1, 1000);
 8000880:	4873      	ldr	r0, [pc, #460]	; (8000a50 <OLED_Init+0x1e0>)
 8000882:	f000 fd6e 	bl	8001362 <HAL_SPI_Transmit>
	Write_Command(0xFD);			// Set Command Lock
 8000886:	4621      	mov	r1, r4
 8000888:	20fd      	movs	r0, #253	; 0xfd
 800088a:	f7ff fe6f 	bl	800056c <write>
	Write_Data(0x12 | d);			//   Default => 0x12
 800088e:	2101      	movs	r1, #1
 8000890:	2012      	movs	r0, #18
 8000892:	f7ff fe6b 	bl	800056c <write>
	Write_Command(0xAE | d);			// Set Display On/Off
 8000896:	4621      	mov	r1, r4
 8000898:	20ae      	movs	r0, #174	; 0xae
 800089a:	f7ff fe67 	bl	800056c <write>
	Write_Command(0xB3);	// Set Display Clock Divider / Oscillator Frequency
 800089e:	4621      	mov	r1, r4
 80008a0:	20b3      	movs	r0, #179	; 0xb3
 80008a2:	f7ff fe63 	bl	800056c <write>
	Write_Data(d);				//   Default => 0xD0
 80008a6:	2101      	movs	r1, #1
 80008a8:	2091      	movs	r0, #145	; 0x91
 80008aa:	f7ff fe5f 	bl	800056c <write>
	Write_Command(0xCA);			// Set Multiplex Ratio
 80008ae:	4621      	mov	r1, r4
 80008b0:	20ca      	movs	r0, #202	; 0xca
 80008b2:	f7ff fe5b 	bl	800056c <write>
	Write_Data(d);				//   Default => 0x7F (1/128 Duty)
 80008b6:	2101      	movs	r1, #1
 80008b8:	203f      	movs	r0, #63	; 0x3f
 80008ba:	f7ff fe57 	bl	800056c <write>
	Write_Command(0xA2);			// Set Vertical Scroll by Row
 80008be:	4621      	mov	r1, r4
 80008c0:	20a2      	movs	r0, #162	; 0xa2
 80008c2:	f7ff fe53 	bl	800056c <write>
	Write_Data(d);				//   Default => 0x00
 80008c6:	4620      	mov	r0, r4
 80008c8:	2101      	movs	r1, #1
 80008ca:	f7ff fe4f 	bl	800056c <write>
	Write_Command(0xA1);			// Set Vertical Scroll by RAM
 80008ce:	4621      	mov	r1, r4
 80008d0:	20a1      	movs	r0, #161	; 0xa1
 80008d2:	f7ff fe4b 	bl	800056c <write>
	Write_Data(d);				//   Default => 0x00
 80008d6:	4620      	mov	r0, r4
 80008d8:	2101      	movs	r1, #1
 80008da:	f7ff fe47 	bl	800056c <write>
	Write_Command(0xA0);			// Set Re-Map / Dual COM Line Mode
 80008de:	4621      	mov	r1, r4
 80008e0:	20a0      	movs	r0, #160	; 0xa0
 80008e2:	f7ff fe43 	bl	800056c <write>
	Write_Data(d);				//   Default => 0x40
 80008e6:	2101      	movs	r1, #1
 80008e8:	2014      	movs	r0, #20
 80008ea:	f7ff fe3f 	bl	800056c <write>
	Write_Data(0x11);			//   Default => 0x01 (Disable Dual COM Mode)
 80008ee:	2101      	movs	r1, #1
 80008f0:	2011      	movs	r0, #17
 80008f2:	f7ff fe3b 	bl	800056c <write>
	Write_Command(0xB5);			// General Purpose IO
 80008f6:	4621      	mov	r1, r4
 80008f8:	20b5      	movs	r0, #181	; 0xb5
 80008fa:	f7ff fe37 	bl	800056c <write>
	Write_Data(d);			//   Default => 0x0A (GPIO Pins output Low Level.)
 80008fe:	4620      	mov	r0, r4
 8000900:	2101      	movs	r1, #1
 8000902:	f7ff fe33 	bl	800056c <write>
	Write_Command(0xAB);			// Function Selection
 8000906:	4621      	mov	r1, r4
 8000908:	20ab      	movs	r0, #171	; 0xab
 800090a:	f7ff fe2f 	bl	800056c <write>
	Write_Data(d);				//   Default => 0x01
 800090e:	2101      	movs	r1, #1
 8000910:	4608      	mov	r0, r1
 8000912:	f7ff fe2b 	bl	800056c <write>
	Write_Command(0xB4);			// Display Enhancement
 8000916:	4621      	mov	r1, r4
 8000918:	20b4      	movs	r0, #180	; 0xb4
 800091a:	f7ff fe27 	bl	800056c <write>
	Write_Data(0xA0 | a);			//   Default => 0xA2
 800091e:	2101      	movs	r1, #1
 8000920:	20a0      	movs	r0, #160	; 0xa0
 8000922:	f7ff fe23 	bl	800056c <write>
	Write_Data(0x05 | b);			//   Default => 0xB5
 8000926:	2101      	movs	r1, #1
 8000928:	20fd      	movs	r0, #253	; 0xfd
 800092a:	f7ff fe1f 	bl	800056c <write>
	Write_Command(0xC1);			// Set Contrast Current
 800092e:	4621      	mov	r1, r4
 8000930:	20c1      	movs	r0, #193	; 0xc1
 8000932:	f7ff fe1b 	bl	800056c <write>
	Write_Data(d);				//   Default => 0x7F
 8000936:	2101      	movs	r1, #1
 8000938:	209f      	movs	r0, #159	; 0x9f
 800093a:	f7ff fe17 	bl	800056c <write>
	Write_Command(0xC7);			// Master Contrast Current Control
 800093e:	4621      	mov	r1, r4
 8000940:	20c7      	movs	r0, #199	; 0xc7
 8000942:	f7ff fe13 	bl	800056c <write>
	Write_Data(d);				//   Default => 0x0f (Maximum)
 8000946:	2101      	movs	r1, #1
 8000948:	200f      	movs	r0, #15
 800094a:	f7ff fe0f 	bl	800056c <write>
	Write_Command(0xB8);			// Set Gray Scale Table
 800094e:	4621      	mov	r1, r4
 8000950:	20b8      	movs	r0, #184	; 0xb8
 8000952:	f7ff fe0b 	bl	800056c <write>
	Write_Data(0x0C);			//   Gray Scale Level 1
 8000956:	2101      	movs	r1, #1
 8000958:	200c      	movs	r0, #12
 800095a:	f7ff fe07 	bl	800056c <write>
	Write_Data(0x18);			//   Gray Scale Level 2
 800095e:	2101      	movs	r1, #1
 8000960:	2018      	movs	r0, #24
 8000962:	f7ff fe03 	bl	800056c <write>
	Write_Data(0x24);			//   Gray Scale Level 3
 8000966:	2101      	movs	r1, #1
 8000968:	2024      	movs	r0, #36	; 0x24
 800096a:	f7ff fdff 	bl	800056c <write>
	Write_Data(0x30);			//   Gray Scale Level 4
 800096e:	2101      	movs	r1, #1
 8000970:	2030      	movs	r0, #48	; 0x30
 8000972:	f7ff fdfb 	bl	800056c <write>
	Write_Data(0x3C);			//   Gray Scale Level 5
 8000976:	2101      	movs	r1, #1
 8000978:	203c      	movs	r0, #60	; 0x3c
 800097a:	f7ff fdf7 	bl	800056c <write>
	Write_Data(0x48);			//   Gray Scale Level 6
 800097e:	2101      	movs	r1, #1
 8000980:	2048      	movs	r0, #72	; 0x48
 8000982:	f7ff fdf3 	bl	800056c <write>
	Write_Data(0x54);			//   Gray Scale Level 7
 8000986:	2101      	movs	r1, #1
 8000988:	2054      	movs	r0, #84	; 0x54
 800098a:	f7ff fdef 	bl	800056c <write>
	Write_Data(0x60);			//   Gray Scale Level 8
 800098e:	2101      	movs	r1, #1
 8000990:	2060      	movs	r0, #96	; 0x60
 8000992:	f7ff fdeb 	bl	800056c <write>
	Write_Data(0x6C);			//   Gray Scale Level 9
 8000996:	2101      	movs	r1, #1
 8000998:	206c      	movs	r0, #108	; 0x6c
 800099a:	f7ff fde7 	bl	800056c <write>
	Write_Data(0x78);			//   Gray Scale Level 10
 800099e:	2101      	movs	r1, #1
 80009a0:	2078      	movs	r0, #120	; 0x78
 80009a2:	f7ff fde3 	bl	800056c <write>
	Write_Data(0x84);			//   Gray Scale Level 11
 80009a6:	2101      	movs	r1, #1
 80009a8:	2084      	movs	r0, #132	; 0x84
 80009aa:	f7ff fddf 	bl	800056c <write>
	Write_Data(0x90);			//   Gray Scale Level 12
 80009ae:	2101      	movs	r1, #1
 80009b0:	2090      	movs	r0, #144	; 0x90
 80009b2:	f7ff fddb 	bl	800056c <write>
	Write_Data(0x9C);			//   Gray Scale Level 13
 80009b6:	2101      	movs	r1, #1
 80009b8:	209c      	movs	r0, #156	; 0x9c
 80009ba:	f7ff fdd7 	bl	800056c <write>
	Write_Data(0xA8);			//   Gray Scale Level 14
 80009be:	2101      	movs	r1, #1
 80009c0:	20a8      	movs	r0, #168	; 0xa8
 80009c2:	f7ff fdd3 	bl	800056c <write>
	Write_Data(0xB4);			//   Gray Scale Level 15
 80009c6:	2101      	movs	r1, #1
 80009c8:	20b4      	movs	r0, #180	; 0xb4
 80009ca:	f7ff fdcf 	bl	800056c <write>
	Write_Command(0x00);			// Enable Gray Scale Table
 80009ce:	4621      	mov	r1, r4
 80009d0:	4620      	mov	r0, r4
 80009d2:	f7ff fdcb 	bl	800056c <write>
	Write_Command(0xB1);// Phase 1 (Reset) & Phase 2 (Pre-Charge) Period Adjustment
 80009d6:	4621      	mov	r1, r4
 80009d8:	20b1      	movs	r0, #177	; 0xb1
 80009da:	f7ff fdc7 	bl	800056c <write>
	Write_Data(d);//   Default => 0x74 (7 Display Clocks [Phase 2] / 9 Display Clocks [Phase 1])
 80009de:	2101      	movs	r1, #1
 80009e0:	20e2      	movs	r0, #226	; 0xe2
 80009e2:	f7ff fdc3 	bl	800056c <write>
	Write_Command(0xD1);			// Display Enhancement
 80009e6:	4621      	mov	r1, r4
 80009e8:	20d1      	movs	r0, #209	; 0xd1
 80009ea:	f7ff fdbf 	bl	800056c <write>
	Write_Data(0x82 | d);			//   Default => 0xA2
 80009ee:	2101      	movs	r1, #1
 80009f0:	20a2      	movs	r0, #162	; 0xa2
 80009f2:	f7ff fdbb 	bl	800056c <write>
	Write_Data(0x20);
 80009f6:	2101      	movs	r1, #1
 80009f8:	2020      	movs	r0, #32
 80009fa:	f7ff fdb7 	bl	800056c <write>
	Write_Command(0xBB);			// Set Pre-Charge Voltage Level
 80009fe:	4621      	mov	r1, r4
 8000a00:	20bb      	movs	r0, #187	; 0xbb
 8000a02:	f7ff fdb3 	bl	800056c <write>
	Write_Data(d);				//   Default => 0x17 (0.50*VCC)
 8000a06:	2101      	movs	r1, #1
 8000a08:	201f      	movs	r0, #31
 8000a0a:	f7ff fdaf 	bl	800056c <write>
	Write_Command(0xB6);			// Set Second Pre-Charge Period
 8000a0e:	4621      	mov	r1, r4
 8000a10:	20b6      	movs	r0, #182	; 0xb6
 8000a12:	f7ff fdab 	bl	800056c <write>
	Write_Data(d);				//   Default => 0x08 (8 Display Clocks)
 8000a16:	2101      	movs	r1, #1
 8000a18:	2008      	movs	r0, #8
 8000a1a:	f7ff fda7 	bl	800056c <write>
	Write_Command(0xBE);			// Set COM Deselect Voltage Level
 8000a1e:	4621      	mov	r1, r4
 8000a20:	20be      	movs	r0, #190	; 0xbe
 8000a22:	f7ff fda3 	bl	800056c <write>
	Write_Data(d);				//   Default => 0x04 (0.80*VCC)
 8000a26:	2101      	movs	r1, #1
 8000a28:	2007      	movs	r0, #7
 8000a2a:	f7ff fd9f 	bl	800056c <write>
	Write_Command(0xA4 | d);			// Set Display Mode
 8000a2e:	4621      	mov	r1, r4
 8000a30:	20a6      	movs	r0, #166	; 0xa6
 8000a32:	f7ff fd9b 	bl	800056c <write>
	Write_Command(0xA8 | a);
 8000a36:	4621      	mov	r1, r4
 8000a38:	20a9      	movs	r0, #169	; 0xa9
 8000a3a:	f7ff fd97 	bl	800056c <write>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
	Set_VCOMH(0x07);	// Set Common Pins Deselect Voltage Level as 0.86*VCC
	Set_Display_Mode(0x02);			// Normal Display Mode (0x00/0x01/0x02/0x03)
	Set_Partial_Display(0x01, 0x00, 0x00);	// Disable Partial Display

	OLED_Clear();				// Clear Screen
 8000a3e:	f7ff fdfe 	bl	800063e <OLED_Clear>
	Write_Command(0xAE | d);			// Set Display On/Off
 8000a42:	4621      	mov	r1, r4
 8000a44:	20af      	movs	r0, #175	; 0xaf
 8000a46:	f7ff fd91 	bl	800056c <write>

	Set_Display_On_Off(0x01);		// Display On (0x00/0x01)

}
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd10      	pop	{r4, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000219c 	.word	0x2000219c

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_InitTick+0x3c>)
{
 8000a58:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5a:	7818      	ldrb	r0, [r3, #0]
 8000a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a60:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a64:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <HAL_InitTick+0x40>)
 8000a66:	6810      	ldr	r0, [r2, #0]
 8000a68:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a6c:	f000 f892 	bl	8000b94 <HAL_SYSTICK_Config>
 8000a70:	4604      	mov	r4, r0
 8000a72:	b958      	cbnz	r0, 8000a8c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a74:	2d0f      	cmp	r5, #15
 8000a76:	d809      	bhi.n	8000a8c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	4602      	mov	r2, r0
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f000 f854 	bl	8000b2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <HAL_InitTick+0x44>)
 8000a86:	4620      	mov	r0, r4
 8000a88:	601d      	str	r5, [r3, #0]
 8000a8a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a8c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a8e:	bd38      	pop	{r3, r4, r5, pc}
 8000a90:	20000004 	.word	0x20000004
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008

08000a9c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x20>)
{
 8000a9e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aaa:	f000 f82d 	bl	8000b08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ffd0 	bl	8000a54 <HAL_InitTick>
  HAL_MspInit();
 8000ab4:	f7ff fcb4 	bl	8000420 <HAL_MspInit>
}
 8000ab8:	2000      	movs	r0, #0
 8000aba:	bd08      	pop	{r3, pc}
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ac0:	4a03      	ldr	r2, [pc, #12]	; (8000ad0 <HAL_IncTick+0x10>)
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <HAL_IncTick+0x14>)
 8000ac4:	6811      	ldr	r1, [r2, #0]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	440b      	add	r3, r1
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200021f4 	.word	0x200021f4
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ad8:	4b01      	ldr	r3, [pc, #4]	; (8000ae0 <HAL_GetTick+0x8>)
 8000ada:	6818      	ldr	r0, [r3, #0]
}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200021f4 	.word	0x200021f4

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b538      	push	{r3, r4, r5, lr}
 8000ae6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ae8:	f7ff fff6 	bl	8000ad8 <HAL_GetTick>
 8000aec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aee:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000af0:	bf1e      	ittt	ne
 8000af2:	4b04      	ldrne	r3, [pc, #16]	; (8000b04 <HAL_Delay+0x20>)
 8000af4:	781b      	ldrbne	r3, [r3, #0]
 8000af6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	1b40      	subs	r0, r0, r5
 8000afe:	4284      	cmp	r4, r0
 8000b00:	d8fa      	bhi.n	8000af8 <HAL_Delay+0x14>
  {
  }
}
 8000b02:	bd38      	pop	{r3, r4, r5, pc}
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b0a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b0e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b16:	041b      	lsls	r3, r3, #16
 8000b18:	0c1b      	lsrs	r3, r3, #16
 8000b1a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b22:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b24:	60d3      	str	r3, [r2, #12]
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2e:	b530      	push	{r4, r5, lr}
 8000b30:	68dc      	ldr	r4, [r3, #12]
 8000b32:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b36:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	bf28      	it	cs
 8000b40:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b48:	bf98      	it	ls
 8000b4a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b50:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b54:	bf88      	it	hi
 8000b56:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4019      	ands	r1, r3
 8000b5a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	fa05 f404 	lsl.w	r4, r5, r4
 8000b60:	3c01      	subs	r4, #1
 8000b62:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b64:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b66:	ea42 0201 	orr.w	r2, r2, r1
 8000b6a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	bfaf      	iteee	ge
 8000b70:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	4b06      	ldrlt	r3, [pc, #24]	; (8000b90 <HAL_NVIC_SetPriority+0x64>)
 8000b76:	f000 000f 	andlt.w	r0, r0, #15
 8000b7a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	bfa5      	ittet	ge
 8000b7e:	b2d2      	uxtbge	r2, r2
 8000b80:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b8a:	bd30      	pop	{r4, r5, pc}
 8000b8c:	e000ed00 	.word	0xe000ed00
 8000b90:	e000ed14 	.word	0xe000ed14

08000b94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	3801      	subs	r0, #1
 8000b96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b9a:	d20a      	bcs.n	8000bb2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e010 	.word	0xe000e010
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bc2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	bf0c      	ite	eq
 8000bc8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bcc:	f022 0204 	bicne.w	r2, r2, #4
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000bd8:	4770      	bx	lr

08000bda <HAL_SYSTICK_IRQHandler>:
{
 8000bda:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000bdc:	f7ff fffc 	bl	8000bd8 <HAL_SYSTICK_Callback>
 8000be0:	bd08      	pop	{r3, pc}
	...

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000be8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000bea:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bec:	4f6c      	ldr	r7, [pc, #432]	; (8000da0 <HAL_GPIO_Init+0x1bc>)
 8000bee:	4b6d      	ldr	r3, [pc, #436]	; (8000da4 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bf0:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000dac <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000bf4:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000db0 <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 8000bf8:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfc:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000bfe:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c02:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	f040 8085 	bne.w	8000d16 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000c0c:	684d      	ldr	r5, [r1, #4]
 8000c0e:	2d12      	cmp	r5, #18
 8000c10:	f000 80b7 	beq.w	8000d82 <HAL_GPIO_Init+0x19e>
 8000c14:	f200 808d 	bhi.w	8000d32 <HAL_GPIO_Init+0x14e>
 8000c18:	2d02      	cmp	r5, #2
 8000c1a:	f000 80af 	beq.w	8000d7c <HAL_GPIO_Init+0x198>
 8000c1e:	f200 8081 	bhi.w	8000d24 <HAL_GPIO_Init+0x140>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	f000 8091 	beq.w	8000d4a <HAL_GPIO_Init+0x166>
 8000c28:	2d01      	cmp	r5, #1
 8000c2a:	f000 80a5 	beq.w	8000d78 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c2e:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c32:	2cff      	cmp	r4, #255	; 0xff
 8000c34:	bf93      	iteet	ls
 8000c36:	4682      	movls	sl, r0
 8000c38:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000c3c:	3d08      	subhi	r5, #8
 8000c3e:	f8d0 b000 	ldrls.w	fp, [r0]
 8000c42:	bf92      	itee	ls
 8000c44:	00b5      	lslls	r5, r6, #2
 8000c46:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000c4a:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c4c:	fa09 f805 	lsl.w	r8, r9, r5
 8000c50:	ea2b 0808 	bic.w	r8, fp, r8
 8000c54:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c58:	bf88      	it	hi
 8000c5a:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c5e:	ea48 0505 	orr.w	r5, r8, r5
 8000c62:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c66:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000c6a:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000c6e:	d052      	beq.n	8000d16 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c70:	69bd      	ldr	r5, [r7, #24]
 8000c72:	f026 0803 	bic.w	r8, r6, #3
 8000c76:	f045 0501 	orr.w	r5, r5, #1
 8000c7a:	61bd      	str	r5, [r7, #24]
 8000c7c:	69bd      	ldr	r5, [r7, #24]
 8000c7e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000c82:	f005 0501 	and.w	r5, r5, #1
 8000c86:	9501      	str	r5, [sp, #4]
 8000c88:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c8c:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c90:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c92:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000c96:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c9a:	fa09 f90b 	lsl.w	r9, r9, fp
 8000c9e:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ca2:	4d41      	ldr	r5, [pc, #260]	; (8000da8 <HAL_GPIO_Init+0x1c4>)
 8000ca4:	42a8      	cmp	r0, r5
 8000ca6:	d071      	beq.n	8000d8c <HAL_GPIO_Init+0x1a8>
 8000ca8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cac:	42a8      	cmp	r0, r5
 8000cae:	d06f      	beq.n	8000d90 <HAL_GPIO_Init+0x1ac>
 8000cb0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cb4:	42a8      	cmp	r0, r5
 8000cb6:	d06d      	beq.n	8000d94 <HAL_GPIO_Init+0x1b0>
 8000cb8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cbc:	42a8      	cmp	r0, r5
 8000cbe:	d06b      	beq.n	8000d98 <HAL_GPIO_Init+0x1b4>
 8000cc0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cc4:	42a8      	cmp	r0, r5
 8000cc6:	d069      	beq.n	8000d9c <HAL_GPIO_Init+0x1b8>
 8000cc8:	4570      	cmp	r0, lr
 8000cca:	bf0c      	ite	eq
 8000ccc:	2505      	moveq	r5, #5
 8000cce:	2506      	movne	r5, #6
 8000cd0:	fa05 f50b 	lsl.w	r5, r5, fp
 8000cd4:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000cd8:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cdc:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cde:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce2:	bf14      	ite	ne
 8000ce4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce6:	43a5      	biceq	r5, r4
 8000ce8:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cea:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cec:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf0:	bf14      	ite	ne
 8000cf2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cf4:	43a5      	biceq	r5, r4
 8000cf6:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf8:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfa:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cfe:	bf14      	ite	ne
 8000d00:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d02:	43a5      	biceq	r5, r4
 8000d04:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d06:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d08:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d0c:	bf14      	ite	ne
 8000d0e:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d10:	ea25 0404 	biceq.w	r4, r5, r4
 8000d14:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d16:	3601      	adds	r6, #1
 8000d18:	2e10      	cmp	r6, #16
 8000d1a:	f47f af6d 	bne.w	8000bf8 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 8000d1e:	b003      	add	sp, #12
 8000d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000d24:	2d03      	cmp	r5, #3
 8000d26:	d025      	beq.n	8000d74 <HAL_GPIO_Init+0x190>
 8000d28:	2d11      	cmp	r5, #17
 8000d2a:	d180      	bne.n	8000c2e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d2c:	68ca      	ldr	r2, [r1, #12]
 8000d2e:	3204      	adds	r2, #4
          break;
 8000d30:	e77d      	b.n	8000c2e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000d32:	4565      	cmp	r5, ip
 8000d34:	d009      	beq.n	8000d4a <HAL_GPIO_Init+0x166>
 8000d36:	d812      	bhi.n	8000d5e <HAL_GPIO_Init+0x17a>
 8000d38:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000db4 <HAL_GPIO_Init+0x1d0>
 8000d3c:	454d      	cmp	r5, r9
 8000d3e:	d004      	beq.n	8000d4a <HAL_GPIO_Init+0x166>
 8000d40:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000d44:	454d      	cmp	r5, r9
 8000d46:	f47f af72 	bne.w	8000c2e <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d4a:	688a      	ldr	r2, [r1, #8]
 8000d4c:	b1e2      	cbz	r2, 8000d88 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d4e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000d50:	bf0c      	ite	eq
 8000d52:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000d56:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	e767      	b.n	8000c2e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000d5e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000db8 <HAL_GPIO_Init+0x1d4>
 8000d62:	454d      	cmp	r5, r9
 8000d64:	d0f1      	beq.n	8000d4a <HAL_GPIO_Init+0x166>
 8000d66:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000d6a:	454d      	cmp	r5, r9
 8000d6c:	d0ed      	beq.n	8000d4a <HAL_GPIO_Init+0x166>
 8000d6e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000d72:	e7e7      	b.n	8000d44 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d74:	2200      	movs	r2, #0
 8000d76:	e75a      	b.n	8000c2e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d78:	68ca      	ldr	r2, [r1, #12]
          break;
 8000d7a:	e758      	b.n	8000c2e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d7c:	68ca      	ldr	r2, [r1, #12]
 8000d7e:	3208      	adds	r2, #8
          break;
 8000d80:	e755      	b.n	8000c2e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d82:	68ca      	ldr	r2, [r1, #12]
 8000d84:	320c      	adds	r2, #12
          break;
 8000d86:	e752      	b.n	8000c2e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d88:	2204      	movs	r2, #4
 8000d8a:	e750      	b.n	8000c2e <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d8c:	2500      	movs	r5, #0
 8000d8e:	e79f      	b.n	8000cd0 <HAL_GPIO_Init+0xec>
 8000d90:	2501      	movs	r5, #1
 8000d92:	e79d      	b.n	8000cd0 <HAL_GPIO_Init+0xec>
 8000d94:	2502      	movs	r5, #2
 8000d96:	e79b      	b.n	8000cd0 <HAL_GPIO_Init+0xec>
 8000d98:	2503      	movs	r5, #3
 8000d9a:	e799      	b.n	8000cd0 <HAL_GPIO_Init+0xec>
 8000d9c:	2504      	movs	r5, #4
 8000d9e:	e797      	b.n	8000cd0 <HAL_GPIO_Init+0xec>
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010400 	.word	0x40010400
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40011c00 	.word	0x40011c00
 8000db0:	10210000 	.word	0x10210000
 8000db4:	10110000 	.word	0x10110000
 8000db8:	10310000 	.word	0x10310000

08000dbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dbc:	b10a      	cbz	r2, 8000dc2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dbe:	6101      	str	r1, [r0, #16]
 8000dc0:	4770      	bx	lr
 8000dc2:	0409      	lsls	r1, r1, #16
 8000dc4:	e7fb      	b.n	8000dbe <HAL_GPIO_WritePin+0x2>

08000dc6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000dc6:	68c3      	ldr	r3, [r0, #12]
 8000dc8:	4059      	eors	r1, r3
 8000dca:	60c1      	str	r1, [r0, #12]
 8000dcc:	4770      	bx	lr
	...

08000dd0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd0:	6803      	ldr	r3, [r0, #0]
{
 8000dd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd6:	07db      	lsls	r3, r3, #31
{
 8000dd8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dda:	d410      	bmi.n	8000dfe <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	079f      	lsls	r7, r3, #30
 8000de0:	d45e      	bmi.n	8000ea0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	0719      	lsls	r1, r3, #28
 8000de6:	f100 8095 	bmi.w	8000f14 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	075a      	lsls	r2, r3, #29
 8000dee:	f100 80bf 	bmi.w	8000f70 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000df2:	69ea      	ldr	r2, [r5, #28]
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 812d 	bne.w	8001054 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	e014      	b.n	8000e28 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dfe:	4c90      	ldr	r4, [pc, #576]	; (8001040 <HAL_RCC_OscConfig+0x270>)
 8000e00:	6863      	ldr	r3, [r4, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d007      	beq.n	8000e1a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e0a:	6863      	ldr	r3, [r4, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d10c      	bne.n	8000e2e <HAL_RCC_OscConfig+0x5e>
 8000e14:	6863      	ldr	r3, [r4, #4]
 8000e16:	03de      	lsls	r6, r3, #15
 8000e18:	d509      	bpl.n	8000e2e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	039c      	lsls	r4, r3, #14
 8000e1e:	d5dd      	bpl.n	8000ddc <HAL_RCC_OscConfig+0xc>
 8000e20:	686b      	ldr	r3, [r5, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1da      	bne.n	8000ddc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e26:	2001      	movs	r0, #1
}
 8000e28:	b002      	add	sp, #8
 8000e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2e:	686b      	ldr	r3, [r5, #4]
 8000e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e34:	d110      	bne.n	8000e58 <HAL_RCC_OscConfig+0x88>
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fe4b 	bl	8000ad8 <HAL_GetTick>
 8000e42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	0398      	lsls	r0, r3, #14
 8000e48:	d4c8      	bmi.n	8000ddc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fe45 	bl	8000ad8 <HAL_GetTick>
 8000e4e:	1b80      	subs	r0, r0, r6
 8000e50:	2864      	cmp	r0, #100	; 0x64
 8000e52:	d9f7      	bls.n	8000e44 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000e54:	2003      	movs	r0, #3
 8000e56:	e7e7      	b.n	8000e28 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e58:	b99b      	cbnz	r3, 8000e82 <HAL_RCC_OscConfig+0xb2>
 8000e5a:	6823      	ldr	r3, [r4, #0]
 8000e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e60:	6023      	str	r3, [r4, #0]
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e68:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fe35 	bl	8000ad8 <HAL_GetTick>
 8000e6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	0399      	lsls	r1, r3, #14
 8000e74:	d5b2      	bpl.n	8000ddc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e76:	f7ff fe2f 	bl	8000ad8 <HAL_GetTick>
 8000e7a:	1b80      	subs	r0, r0, r6
 8000e7c:	2864      	cmp	r0, #100	; 0x64
 8000e7e:	d9f7      	bls.n	8000e70 <HAL_RCC_OscConfig+0xa0>
 8000e80:	e7e8      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	d103      	bne.n	8000e92 <HAL_RCC_OscConfig+0xc2>
 8000e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8e:	6023      	str	r3, [r4, #0]
 8000e90:	e7d1      	b.n	8000e36 <HAL_RCC_OscConfig+0x66>
 8000e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e96:	6023      	str	r3, [r4, #0]
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9e:	e7cd      	b.n	8000e3c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ea0:	4c67      	ldr	r4, [pc, #412]	; (8001040 <HAL_RCC_OscConfig+0x270>)
 8000ea2:	6863      	ldr	r3, [r4, #4]
 8000ea4:	f013 0f0c 	tst.w	r3, #12
 8000ea8:	d007      	beq.n	8000eba <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eaa:	6863      	ldr	r3, [r4, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d110      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x106>
 8000eb4:	6863      	ldr	r3, [r4, #4]
 8000eb6:	03da      	lsls	r2, r3, #15
 8000eb8:	d40d      	bmi.n	8000ed6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	079b      	lsls	r3, r3, #30
 8000ebe:	d502      	bpl.n	8000ec6 <HAL_RCC_OscConfig+0xf6>
 8000ec0:	692b      	ldr	r3, [r5, #16]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d1af      	bne.n	8000e26 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	696a      	ldr	r2, [r5, #20]
 8000eca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ece:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ed2:	6023      	str	r3, [r4, #0]
 8000ed4:	e785      	b.n	8000de2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed6:	692a      	ldr	r2, [r5, #16]
 8000ed8:	4b5a      	ldr	r3, [pc, #360]	; (8001044 <HAL_RCC_OscConfig+0x274>)
 8000eda:	b16a      	cbz	r2, 8000ef8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fdfa 	bl	8000ad8 <HAL_GetTick>
 8000ee4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	079f      	lsls	r7, r3, #30
 8000eea:	d4ec      	bmi.n	8000ec6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eec:	f7ff fdf4 	bl	8000ad8 <HAL_GetTick>
 8000ef0:	1b80      	subs	r0, r0, r6
 8000ef2:	2802      	cmp	r0, #2
 8000ef4:	d9f7      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x116>
 8000ef6:	e7ad      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000ef8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000efa:	f7ff fded 	bl	8000ad8 <HAL_GetTick>
 8000efe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	0798      	lsls	r0, r3, #30
 8000f04:	f57f af6d 	bpl.w	8000de2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f08:	f7ff fde6 	bl	8000ad8 <HAL_GetTick>
 8000f0c:	1b80      	subs	r0, r0, r6
 8000f0e:	2802      	cmp	r0, #2
 8000f10:	d9f6      	bls.n	8000f00 <HAL_RCC_OscConfig+0x130>
 8000f12:	e79f      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f14:	69aa      	ldr	r2, [r5, #24]
 8000f16:	4c4a      	ldr	r4, [pc, #296]	; (8001040 <HAL_RCC_OscConfig+0x270>)
 8000f18:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <HAL_RCC_OscConfig+0x278>)
 8000f1a:	b1da      	cbz	r2, 8000f54 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f20:	f7ff fdda 	bl	8000ad8 <HAL_GetTick>
 8000f24:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f28:	079b      	lsls	r3, r3, #30
 8000f2a:	d50d      	bpl.n	8000f48 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f2c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f30:	4b46      	ldr	r3, [pc, #280]	; (800104c <HAL_RCC_OscConfig+0x27c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f38:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000f3a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000f3c:	9b01      	ldr	r3, [sp, #4]
 8000f3e:	1e5a      	subs	r2, r3, #1
 8000f40:	9201      	str	r2, [sp, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f9      	bne.n	8000f3a <HAL_RCC_OscConfig+0x16a>
 8000f46:	e750      	b.n	8000dea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f48:	f7ff fdc6 	bl	8000ad8 <HAL_GetTick>
 8000f4c:	1b80      	subs	r0, r0, r6
 8000f4e:	2802      	cmp	r0, #2
 8000f50:	d9e9      	bls.n	8000f26 <HAL_RCC_OscConfig+0x156>
 8000f52:	e77f      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000f54:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f56:	f7ff fdbf 	bl	8000ad8 <HAL_GetTick>
 8000f5a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f5e:	079f      	lsls	r7, r3, #30
 8000f60:	f57f af43 	bpl.w	8000dea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f64:	f7ff fdb8 	bl	8000ad8 <HAL_GetTick>
 8000f68:	1b80      	subs	r0, r0, r6
 8000f6a:	2802      	cmp	r0, #2
 8000f6c:	d9f6      	bls.n	8000f5c <HAL_RCC_OscConfig+0x18c>
 8000f6e:	e771      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f70:	4c33      	ldr	r4, [pc, #204]	; (8001040 <HAL_RCC_OscConfig+0x270>)
 8000f72:	69e3      	ldr	r3, [r4, #28]
 8000f74:	00d8      	lsls	r0, r3, #3
 8000f76:	d424      	bmi.n	8000fc2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000f78:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	69e3      	ldr	r3, [r4, #28]
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61e3      	str	r3, [r4, #28]
 8000f82:	69e3      	ldr	r3, [r4, #28]
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8c:	4e30      	ldr	r6, [pc, #192]	; (8001050 <HAL_RCC_OscConfig+0x280>)
 8000f8e:	6833      	ldr	r3, [r6, #0]
 8000f90:	05d9      	lsls	r1, r3, #23
 8000f92:	d518      	bpl.n	8000fc6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f94:	68eb      	ldr	r3, [r5, #12]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d126      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x218>
 8000f9a:	6a23      	ldr	r3, [r4, #32]
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fd99 	bl	8000ad8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fa6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000faa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fac:	6a23      	ldr	r3, [r4, #32]
 8000fae:	079b      	lsls	r3, r3, #30
 8000fb0:	d53f      	bpl.n	8001032 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000fb2:	2f00      	cmp	r7, #0
 8000fb4:	f43f af1d 	beq.w	8000df2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb8:	69e3      	ldr	r3, [r4, #28]
 8000fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	61e3      	str	r3, [r4, #28]
 8000fc0:	e717      	b.n	8000df2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000fc2:	2700      	movs	r7, #0
 8000fc4:	e7e2      	b.n	8000f8c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc6:	6833      	ldr	r3, [r6, #0]
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fcc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000fce:	f7ff fd83 	bl	8000ad8 <HAL_GetTick>
 8000fd2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd4:	6833      	ldr	r3, [r6, #0]
 8000fd6:	05da      	lsls	r2, r3, #23
 8000fd8:	d4dc      	bmi.n	8000f94 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fda:	f7ff fd7d 	bl	8000ad8 <HAL_GetTick>
 8000fde:	eba0 0008 	sub.w	r0, r0, r8
 8000fe2:	2864      	cmp	r0, #100	; 0x64
 8000fe4:	d9f6      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x204>
 8000fe6:	e735      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe8:	b9ab      	cbnz	r3, 8001016 <HAL_RCC_OscConfig+0x246>
 8000fea:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6223      	str	r3, [r4, #32]
 8000ff6:	6a23      	ldr	r3, [r4, #32]
 8000ff8:	f023 0304 	bic.w	r3, r3, #4
 8000ffc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fd6b 	bl	8000ad8 <HAL_GetTick>
 8001002:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001004:	6a23      	ldr	r3, [r4, #32]
 8001006:	0798      	lsls	r0, r3, #30
 8001008:	d5d3      	bpl.n	8000fb2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800100a:	f7ff fd65 	bl	8000ad8 <HAL_GetTick>
 800100e:	1b80      	subs	r0, r0, r6
 8001010:	4540      	cmp	r0, r8
 8001012:	d9f7      	bls.n	8001004 <HAL_RCC_OscConfig+0x234>
 8001014:	e71e      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001016:	2b05      	cmp	r3, #5
 8001018:	6a23      	ldr	r3, [r4, #32]
 800101a:	d103      	bne.n	8001024 <HAL_RCC_OscConfig+0x254>
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6223      	str	r3, [r4, #32]
 8001022:	e7ba      	b.n	8000f9a <HAL_RCC_OscConfig+0x1ca>
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	6223      	str	r3, [r4, #32]
 800102a:	6a23      	ldr	r3, [r4, #32]
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	e7b6      	b.n	8000fa0 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001032:	f7ff fd51 	bl	8000ad8 <HAL_GetTick>
 8001036:	eba0 0008 	sub.w	r0, r0, r8
 800103a:	42b0      	cmp	r0, r6
 800103c:	d9b6      	bls.n	8000fac <HAL_RCC_OscConfig+0x1dc>
 800103e:	e709      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
 8001040:	40021000 	.word	0x40021000
 8001044:	42420000 	.word	0x42420000
 8001048:	42420480 	.word	0x42420480
 800104c:	20000000 	.word	0x20000000
 8001050:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001054:	4c22      	ldr	r4, [pc, #136]	; (80010e0 <HAL_RCC_OscConfig+0x310>)
 8001056:	6863      	ldr	r3, [r4, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	f43f aee2 	beq.w	8000e26 <HAL_RCC_OscConfig+0x56>
 8001062:	2300      	movs	r3, #0
 8001064:	4e1f      	ldr	r6, [pc, #124]	; (80010e4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001066:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001068:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800106a:	d12b      	bne.n	80010c4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800106c:	f7ff fd34 	bl	8000ad8 <HAL_GetTick>
 8001070:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	0199      	lsls	r1, r3, #6
 8001076:	d41f      	bmi.n	80010b8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001078:	6a2b      	ldr	r3, [r5, #32]
 800107a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107e:	d105      	bne.n	800108c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001080:	6862      	ldr	r2, [r4, #4]
 8001082:	68a9      	ldr	r1, [r5, #8]
 8001084:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001088:	430a      	orrs	r2, r1
 800108a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800108c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800108e:	6862      	ldr	r2, [r4, #4]
 8001090:	430b      	orrs	r3, r1
 8001092:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001096:	4313      	orrs	r3, r2
 8001098:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800109a:	2301      	movs	r3, #1
 800109c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800109e:	f7ff fd1b 	bl	8000ad8 <HAL_GetTick>
 80010a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	019a      	lsls	r2, r3, #6
 80010a8:	f53f aea7 	bmi.w	8000dfa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff fd14 	bl	8000ad8 <HAL_GetTick>
 80010b0:	1b40      	subs	r0, r0, r5
 80010b2:	2802      	cmp	r0, #2
 80010b4:	d9f6      	bls.n	80010a4 <HAL_RCC_OscConfig+0x2d4>
 80010b6:	e6cd      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b8:	f7ff fd0e 	bl	8000ad8 <HAL_GetTick>
 80010bc:	1bc0      	subs	r0, r0, r7
 80010be:	2802      	cmp	r0, #2
 80010c0:	d9d7      	bls.n	8001072 <HAL_RCC_OscConfig+0x2a2>
 80010c2:	e6c7      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80010c4:	f7ff fd08 	bl	8000ad8 <HAL_GetTick>
 80010c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	f57f ae94 	bpl.w	8000dfa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d2:	f7ff fd01 	bl	8000ad8 <HAL_GetTick>
 80010d6:	1b40      	subs	r0, r0, r5
 80010d8:	2802      	cmp	r0, #2
 80010da:	d9f6      	bls.n	80010ca <HAL_RCC_OscConfig+0x2fa>
 80010dc:	e6ba      	b.n	8000e54 <HAL_RCC_OscConfig+0x84>
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	42420060 	.word	0x42420060

080010e8 <HAL_RCC_GetSysClockFreq>:
{
 80010e8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80010ec:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010ee:	ac02      	add	r4, sp, #8
 80010f0:	f103 0510 	add.w	r5, r3, #16
 80010f4:	4622      	mov	r2, r4
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	6859      	ldr	r1, [r3, #4]
 80010fa:	3308      	adds	r3, #8
 80010fc:	c203      	stmia	r2!, {r0, r1}
 80010fe:	42ab      	cmp	r3, r5
 8001100:	4614      	mov	r4, r2
 8001102:	d1f7      	bne.n	80010f4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001104:	2301      	movs	r3, #1
 8001106:	f88d 3004 	strb.w	r3, [sp, #4]
 800110a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800110c:	4911      	ldr	r1, [pc, #68]	; (8001154 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800110e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001112:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001114:	f003 020c 	and.w	r2, r3, #12
 8001118:	2a08      	cmp	r2, #8
 800111a:	d117      	bne.n	800114c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800111c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001120:	a806      	add	r0, sp, #24
 8001122:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001124:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001126:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800112a:	d50c      	bpl.n	8001146 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800112c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800112e:	480a      	ldr	r0, [pc, #40]	; (8001158 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001130:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001134:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001136:	aa06      	add	r2, sp, #24
 8001138:	4413      	add	r3, r2
 800113a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800113e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001142:	b007      	add	sp, #28
 8001144:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_RCC_GetSysClockFreq+0x74>)
 8001148:	4350      	muls	r0, r2
 800114a:	e7fa      	b.n	8001142 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800114e:	e7f8      	b.n	8001142 <HAL_RCC_GetSysClockFreq+0x5a>
 8001150:	080027d0 	.word	0x080027d0
 8001154:	40021000 	.word	0x40021000
 8001158:	007a1200 	.word	0x007a1200
 800115c:	003d0900 	.word	0x003d0900

08001160 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001160:	4a4d      	ldr	r2, [pc, #308]	; (8001298 <HAL_RCC_ClockConfig+0x138>)
{
 8001162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001166:	6813      	ldr	r3, [r2, #0]
{
 8001168:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	428b      	cmp	r3, r1
{
 8001170:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001172:	d328      	bcc.n	80011c6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001174:	682a      	ldr	r2, [r5, #0]
 8001176:	0791      	lsls	r1, r2, #30
 8001178:	d432      	bmi.n	80011e0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800117a:	07d2      	lsls	r2, r2, #31
 800117c:	d438      	bmi.n	80011f0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800117e:	4a46      	ldr	r2, [pc, #280]	; (8001298 <HAL_RCC_ClockConfig+0x138>)
 8001180:	6813      	ldr	r3, [r2, #0]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	429e      	cmp	r6, r3
 8001188:	d373      	bcc.n	8001272 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118a:	682a      	ldr	r2, [r5, #0]
 800118c:	4c43      	ldr	r4, [pc, #268]	; (800129c <HAL_RCC_ClockConfig+0x13c>)
 800118e:	f012 0f04 	tst.w	r2, #4
 8001192:	d179      	bne.n	8001288 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001194:	0713      	lsls	r3, r2, #28
 8001196:	d506      	bpl.n	80011a6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001198:	6863      	ldr	r3, [r4, #4]
 800119a:	692a      	ldr	r2, [r5, #16]
 800119c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011a4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a6:	f7ff ff9f 	bl	80010e8 <HAL_RCC_GetSysClockFreq>
 80011aa:	6863      	ldr	r3, [r4, #4]
 80011ac:	4a3c      	ldr	r2, [pc, #240]	; (80012a0 <HAL_RCC_ClockConfig+0x140>)
 80011ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	40d8      	lsrs	r0, r3
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_RCC_ClockConfig+0x144>)
 80011b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fc4a 	bl	8000a54 <HAL_InitTick>
  return HAL_OK;
 80011c0:	2000      	movs	r0, #0
}
 80011c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	6813      	ldr	r3, [r2, #0]
 80011c8:	f023 0307 	bic.w	r3, r3, #7
 80011cc:	430b      	orrs	r3, r1
 80011ce:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011d0:	6813      	ldr	r3, [r2, #0]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	4299      	cmp	r1, r3
 80011d8:	d0cc      	beq.n	8001174 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80011da:	2001      	movs	r0, #1
 80011dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e0:	492e      	ldr	r1, [pc, #184]	; (800129c <HAL_RCC_ClockConfig+0x13c>)
 80011e2:	68a8      	ldr	r0, [r5, #8]
 80011e4:	684b      	ldr	r3, [r1, #4]
 80011e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011ea:	4303      	orrs	r3, r0
 80011ec:	604b      	str	r3, [r1, #4]
 80011ee:	e7c4      	b.n	800117a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f0:	686a      	ldr	r2, [r5, #4]
 80011f2:	4c2a      	ldr	r4, [pc, #168]	; (800129c <HAL_RCC_ClockConfig+0x13c>)
 80011f4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f8:	d11c      	bne.n	8001234 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	d0ec      	beq.n	80011da <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001200:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001202:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001206:	f023 0303 	bic.w	r3, r3, #3
 800120a:	4313      	orrs	r3, r2
 800120c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800120e:	f7ff fc63 	bl	8000ad8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001212:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001214:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001216:	2b01      	cmp	r3, #1
 8001218:	d114      	bne.n	8001244 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800121a:	6863      	ldr	r3, [r4, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b04      	cmp	r3, #4
 8001222:	d0ac      	beq.n	800117e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001224:	f7ff fc58 	bl	8000ad8 <HAL_GetTick>
 8001228:	1bc0      	subs	r0, r0, r7
 800122a:	4540      	cmp	r0, r8
 800122c:	d9f5      	bls.n	800121a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800122e:	2003      	movs	r0, #3
 8001230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001234:	2a02      	cmp	r2, #2
 8001236:	d102      	bne.n	800123e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001238:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800123c:	e7df      	b.n	80011fe <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123e:	f013 0f02 	tst.w	r3, #2
 8001242:	e7dc      	b.n	80011fe <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001244:	2b02      	cmp	r3, #2
 8001246:	d10f      	bne.n	8001268 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001248:	6863      	ldr	r3, [r4, #4]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b08      	cmp	r3, #8
 8001250:	d095      	beq.n	800117e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001252:	f7ff fc41 	bl	8000ad8 <HAL_GetTick>
 8001256:	1bc0      	subs	r0, r0, r7
 8001258:	4540      	cmp	r0, r8
 800125a:	d9f5      	bls.n	8001248 <HAL_RCC_ClockConfig+0xe8>
 800125c:	e7e7      	b.n	800122e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125e:	f7ff fc3b 	bl	8000ad8 <HAL_GetTick>
 8001262:	1bc0      	subs	r0, r0, r7
 8001264:	4540      	cmp	r0, r8
 8001266:	d8e2      	bhi.n	800122e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	f013 0f0c 	tst.w	r3, #12
 800126e:	d1f6      	bne.n	800125e <HAL_RCC_ClockConfig+0xfe>
 8001270:	e785      	b.n	800117e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	6813      	ldr	r3, [r2, #0]
 8001274:	f023 0307 	bic.w	r3, r3, #7
 8001278:	4333      	orrs	r3, r6
 800127a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800127c:	6813      	ldr	r3, [r2, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	429e      	cmp	r6, r3
 8001284:	d1a9      	bne.n	80011da <HAL_RCC_ClockConfig+0x7a>
 8001286:	e780      	b.n	800118a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001288:	6863      	ldr	r3, [r4, #4]
 800128a:	68e9      	ldr	r1, [r5, #12]
 800128c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001290:	430b      	orrs	r3, r1
 8001292:	6063      	str	r3, [r4, #4]
 8001294:	e77e      	b.n	8001194 <HAL_RCC_ClockConfig+0x34>
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000
 800129c:	40021000 	.word	0x40021000
 80012a0:	080027e0 	.word	0x080027e0
 80012a4:	20000000 	.word	0x20000000

080012a8 <HAL_RCC_GetHCLKFreq>:
}
 80012a8:	4b01      	ldr	r3, [pc, #4]	; (80012b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000000 	.word	0x20000000

080012b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80012b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b8:	4604      	mov	r4, r0
 80012ba:	4688      	mov	r8, r1
 80012bc:	4617      	mov	r7, r2
 80012be:	461d      	mov	r5, r3
 80012c0:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80012c2:	6822      	ldr	r2, [r4, #0]
 80012c4:	6893      	ldr	r3, [r2, #8]
 80012c6:	ea38 0303 	bics.w	r3, r8, r3
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	429f      	cmp	r7, r3
 80012d2:	d102      	bne.n	80012da <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80012d4:	2000      	movs	r0, #0
}
 80012d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012da:	1c6b      	adds	r3, r5, #1
 80012dc:	d0f2      	beq.n	80012c4 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80012de:	bb55      	cbnz	r5, 8001336 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80012e8:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012ea:	6862      	ldr	r2, [r4, #4]
 80012ec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80012f0:	d10a      	bne.n	8001308 <SPI_WaitFlagStateUntilTimeout+0x54>
 80012f2:	68a2      	ldr	r2, [r4, #8]
 80012f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012f8:	d002      	beq.n	8001300 <SPI_WaitFlagStateUntilTimeout+0x4c>
 80012fa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80012fe:	d103      	bne.n	8001308 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001306:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001308:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800130a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800130e:	d109      	bne.n	8001324 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001316:	0412      	lsls	r2, r2, #16
 8001318:	0c12      	lsrs	r2, r2, #16
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001322:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001324:	2301      	movs	r3, #1
 8001326:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800132a:	2300      	movs	r3, #0
 800132c:	2003      	movs	r0, #3
 800132e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001336:	f7ff fbcf 	bl	8000ad8 <HAL_GetTick>
 800133a:	1b80      	subs	r0, r0, r6
 800133c:	4285      	cmp	r5, r0
 800133e:	d8c0      	bhi.n	80012c2 <SPI_WaitFlagStateUntilTimeout+0xe>
 8001340:	e7ce      	b.n	80012e0 <SPI_WaitFlagStateUntilTimeout+0x2c>

08001342 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001342:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001344:	460b      	mov	r3, r1
 8001346:	9200      	str	r2, [sp, #0]
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	2200      	movs	r2, #0
{
 800134c:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800134e:	f7ff ffb1 	bl	80012b4 <SPI_WaitFlagStateUntilTimeout>
 8001352:	b120      	cbz	r0, 800135e <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001354:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001356:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001358:	f043 0320 	orr.w	r3, r3, #32
 800135c:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 800135e:	b002      	add	sp, #8
 8001360:	bd10      	pop	{r4, pc}

08001362 <HAL_SPI_Transmit>:
{
 8001362:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001366:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001368:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800136c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800136e:	2b01      	cmp	r3, #1
{
 8001370:	460d      	mov	r5, r1
 8001372:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001374:	f000 809c 	beq.w	80014b0 <HAL_SPI_Transmit+0x14e>
 8001378:	2301      	movs	r3, #1
 800137a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800137e:	f7ff fbab 	bl	8000ad8 <HAL_GetTick>
 8001382:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001384:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001388:	b2c0      	uxtb	r0, r0
 800138a:	2801      	cmp	r0, #1
 800138c:	f040 808e 	bne.w	80014ac <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8001390:	2d00      	cmp	r5, #0
 8001392:	d04e      	beq.n	8001432 <HAL_SPI_Transmit+0xd0>
 8001394:	f1b8 0f00 	cmp.w	r8, #0
 8001398:	d04b      	beq.n	8001432 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800139a:	2303      	movs	r3, #3
 800139c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80013a4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80013a6:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80013aa:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80013ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80013ae:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80013b0:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013b2:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80013b4:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ba:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 80013bc:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80013c0:	bf02      	ittt	eq
 80013c2:	681a      	ldreq	r2, [r3, #0]
 80013c4:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80013c8:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80013ce:	bf5e      	ittt	pl
 80013d0:	681a      	ldrpl	r2, [r3, #0]
 80013d2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80013d6:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013d8:	68e2      	ldr	r2, [r4, #12]
 80013da:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80013de:	6862      	ldr	r2, [r4, #4]
 80013e0:	d138      	bne.n	8001454 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80013e2:	b11a      	cbz	r2, 80013ec <HAL_SPI_Transmit+0x8a>
 80013e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80013e6:	b292      	uxth	r2, r2
 80013e8:	2a01      	cmp	r2, #1
 80013ea:	d106      	bne.n	80013fa <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 80013ec:	f835 2b02 	ldrh.w	r2, [r5], #2
 80013f0:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 80013f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80013fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b993      	cbnz	r3, 8001426 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001400:	9700      	str	r7, [sp, #0]
 8001402:	4633      	mov	r3, r6
 8001404:	2201      	movs	r2, #1
 8001406:	2102      	movs	r1, #2
 8001408:	4620      	mov	r0, r4
 800140a:	f7ff ff53 	bl	80012b4 <SPI_WaitFlagStateUntilTimeout>
 800140e:	b978      	cbnz	r0, 8001430 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001410:	463a      	mov	r2, r7
 8001412:	4631      	mov	r1, r6
 8001414:	4620      	mov	r0, r4
 8001416:	f7ff ff94 	bl	8001342 <SPI_CheckFlag_BSY>
 800141a:	2800      	cmp	r0, #0
 800141c:	d038      	beq.n	8001490 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800141e:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001420:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001422:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001424:	e005      	b.n	8001432 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	0790      	lsls	r0, r2, #30
 800142c:	d4de      	bmi.n	80013ec <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800142e:	b94e      	cbnz	r6, 8001444 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8001430:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001432:	2301      	movs	r3, #1
 8001434:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001438:	2300      	movs	r3, #0
 800143a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800143e:	b004      	add	sp, #16
 8001440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001444:	1c71      	adds	r1, r6, #1
 8001446:	d0d8      	beq.n	80013fa <HAL_SPI_Transmit+0x98>
 8001448:	f7ff fb46 	bl	8000ad8 <HAL_GetTick>
 800144c:	1bc0      	subs	r0, r0, r7
 800144e:	4286      	cmp	r6, r0
 8001450:	d8d3      	bhi.n	80013fa <HAL_SPI_Transmit+0x98>
 8001452:	e7ed      	b.n	8001430 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001454:	b11a      	cbz	r2, 800145e <HAL_SPI_Transmit+0xfc>
 8001456:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001458:	b292      	uxth	r2, r2
 800145a:	2a01      	cmp	r2, #1
 800145c:	d106      	bne.n	800146c <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800145e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001462:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001464:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001466:	3b01      	subs	r3, #1
 8001468:	b29b      	uxth	r3, r3
 800146a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800146c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800146e:	b29b      	uxth	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0c5      	beq.n	8001400 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	0792      	lsls	r2, r2, #30
 800147a:	d4f0      	bmi.n	800145e <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800147c:	2e00      	cmp	r6, #0
 800147e:	d0d7      	beq.n	8001430 <HAL_SPI_Transmit+0xce>
 8001480:	1c73      	adds	r3, r6, #1
 8001482:	d0f3      	beq.n	800146c <HAL_SPI_Transmit+0x10a>
 8001484:	f7ff fb28 	bl	8000ad8 <HAL_GetTick>
 8001488:	1bc0      	subs	r0, r0, r7
 800148a:	4286      	cmp	r6, r0
 800148c:	d8ee      	bhi.n	800146c <HAL_SPI_Transmit+0x10a>
 800148e:	e7cf      	b.n	8001430 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001490:	68a3      	ldr	r3, [r4, #8]
 8001492:	b933      	cbnz	r3, 80014a2 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001494:	9303      	str	r3, [sp, #12]
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	9203      	str	r2, [sp, #12]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	9303      	str	r3, [sp, #12]
 80014a0:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80014a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80014a4:	3000      	adds	r0, #0
 80014a6:	bf18      	it	ne
 80014a8:	2001      	movne	r0, #1
 80014aa:	e7c2      	b.n	8001432 <HAL_SPI_Transmit+0xd0>
 80014ac:	2002      	movs	r0, #2
 80014ae:	e7c0      	b.n	8001432 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 80014b0:	2002      	movs	r0, #2
 80014b2:	e7c4      	b.n	800143e <HAL_SPI_Transmit+0xdc>

080014b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80014b4:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80014b6:	4604      	mov	r4, r0
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d034      	beq.n	8001526 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80014c0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80014c4:	b90b      	cbnz	r3, 80014ca <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80014c6:	f7fe fffb 	bl	80004c0 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80014ca:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80014cc:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80014ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80014d2:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80014d4:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80014d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014da:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80014dc:	6863      	ldr	r3, [r4, #4]
 80014de:	69a2      	ldr	r2, [r4, #24]
 80014e0:	4303      	orrs	r3, r0
 80014e2:	68e0      	ldr	r0, [r4, #12]
 80014e4:	4303      	orrs	r3, r0
 80014e6:	6920      	ldr	r0, [r4, #16]
 80014e8:	4303      	orrs	r3, r0
 80014ea:	6960      	ldr	r0, [r4, #20]
 80014ec:	4303      	orrs	r3, r0
 80014ee:	69e0      	ldr	r0, [r4, #28]
 80014f0:	4303      	orrs	r3, r0
 80014f2:	6a20      	ldr	r0, [r4, #32]
 80014f4:	4303      	orrs	r3, r0
 80014f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80014f8:	4303      	orrs	r3, r0
 80014fa:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80014fe:	4303      	orrs	r3, r0
 8001500:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001502:	0c12      	lsrs	r2, r2, #16
 8001504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001506:	f002 0204 	and.w	r2, r2, #4
 800150a:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800150c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800150e:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001510:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001512:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001514:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800151a:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 800151c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800151e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001520:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001524:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001526:	2001      	movs	r0, #1
}
 8001528:	bd10      	pop	{r4, pc}

0800152a <gotoResetUI>:
//	setShow_ui(MATCH_UI);
}

void gotoResetUI(void)
{
	exitMenu();
 800152a:	f000 b855 	b.w	80015d8 <exitMenu>

0800152e <gotoMatchMiniFlyUI>:
 800152e:	f000 b853 	b.w	80015d8 <exitMenu>

08001532 <gotoJoystickCalibUI>:
 8001532:	f000 b851 	b.w	80015d8 <exitMenu>
	...

08001538 <mainMenuInit>:
//	}
//}

/*初始化主菜單*/
void mainMenuInit(void)
{	
 8001538:	2100      	movs	r1, #0
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <mainMenuInit+0x60>)
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	4613      	mov	r3, r2
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
	{
		mainMenu[i].menuItemCount = MAIN_MENU_ITEMNUM;
 8001540:	270a      	movs	r7, #10
		mainMenu[i].isSelect = false;
 8001542:	4608      	mov	r0, r1
		mainMenu[i].icoSelected = finger_img;
 8001544:	4e15      	ldr	r6, [pc, #84]	; (800159c <mainMenuInit+0x64>)
		mainMenu[i].icoUnselected = NULL;
		mainMenu[i].title = mainMenuLanguage[1][i];
 8001546:	4d16      	ldr	r5, [pc, #88]	; (80015a0 <mainMenuInit+0x68>)
 8001548:	186c      	adds	r4, r5, r1
 800154a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 800154c:	3104      	adds	r1, #4
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
 800154e:	2928      	cmp	r1, #40	; 0x28
		mainMenu[i].menuItemCount = MAIN_MENU_ITEMNUM;
 8001550:	7057      	strb	r7, [r2, #1]
		mainMenu[i].isSelect = false;
 8001552:	7090      	strb	r0, [r2, #2]
		mainMenu[i].icoSelected = finger_img;
 8001554:	6056      	str	r6, [r2, #4]
		mainMenu[i].icoUnselected = NULL;
 8001556:	6090      	str	r0, [r2, #8]
		mainMenu[i].title = mainMenuLanguage[1][i];
 8001558:	60d4      	str	r4, [r2, #12]
		mainMenu[i].Function = NULL;
 800155a:	6110      	str	r0, [r2, #16]
		mainMenu[i].parentMenu = NULL;
 800155c:	6150      	str	r0, [r2, #20]
		mainMenu[i].childrenMenu = NULL;
 800155e:	6190      	str	r0, [r2, #24]
 8001560:	f102 021c 	add.w	r2, r2, #28
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
 8001564:	d1f0      	bne.n	8001548 <mainMenuInit+0x10>
	}
	mainMenu[0].isSelect = true;
 8001566:	2201      	movs	r2, #1
 8001568:	709a      	strb	r2, [r3, #2]
	mainMenu[0].Function = gotoNextMenu;
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <mainMenuInit+0x6c>)
	//mainMenu[3].childrenMenu = flipEnableMenu;
	
	mainMenu[4].Function = gotoNextMenu;
	//mainMenu[4].childrenMenu = &expModuleMenu[0];
	
	mainMenu[5].Function = gotoJoystickCalibUI;
 800156c:	490e      	ldr	r1, [pc, #56]	; (80015a8 <mainMenuInit+0x70>)
	mainMenu[0].Function = gotoNextMenu;
 800156e:	611a      	str	r2, [r3, #16]
	mainMenu[1].Function = gotoNextMenu;
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu[2].Function = gotoNextMenu;
 8001572:	649a      	str	r2, [r3, #72]	; 0x48
	mainMenu[3].Function = gotoNextMenu;
 8001574:	665a      	str	r2, [r3, #100]	; 0x64
	mainMenu[4].Function = gotoNextMenu;
 8001576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	//mainMenu[5].childrenMenu = NULL;
	
	mainMenu[6].Function = gotoMatchMiniFlyUI;
	//mainMenu[6].childrenMenu = NULL;
	
	mainMenu[7].Function = gotoNextMenu;
 800157a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	//mainMenu[7].childrenMenu = languageMenu;
	
	mainMenu[8].Function = gotoResetUI;
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <mainMenuInit+0x74>)
	mainMenu[5].Function = gotoJoystickCalibUI;
 8001580:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	mainMenu[8].Function = gotoResetUI;
 8001584:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	mainMenu[6].Function = gotoMatchMiniFlyUI;
 8001588:	4909      	ldr	r1, [pc, #36]	; (80015b0 <mainMenuInit+0x78>)
	//mainMenu[8].childrenMenu = NULL;
	
	mainMenu[9].Function = exitMenu;
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <mainMenuInit+0x7c>)
	mainMenu[6].Function = gotoMatchMiniFlyUI;
 800158c:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	mainMenu[9].Function = exitMenu;
 8001590:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8001594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001596:	bf00      	nop
 8001598:	200021f8 	.word	0x200021f8
 800159c:	080027f0 	.word	0x080027f0
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	08001605 	.word	0x08001605
 80015a8:	08001533 	.word	0x08001533
 80015ac:	0800152b 	.word	0x0800152b
 80015b0:	0800152f 	.word	0x0800152f
 80015b4:	080015d9 	.word	0x080015d9

080015b8 <getMenuSelectitem>:
};

uint8_t getMenuSelectitem(MenuItem_Typedef menu[])
{
	int i;
	for(i=0; i< menu->menuItemCount; i++)
 80015b8:	2300      	movs	r3, #0
	{
		if(menu[i].isSelect == true) 
 80015ba:	211c      	movs	r1, #28
{
 80015bc:	b510      	push	{r4, lr}
	for(i=0; i< menu->menuItemCount; i++)
 80015be:	7842      	ldrb	r2, [r0, #1]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	db01      	blt.n	80015c8 <getMenuSelectitem+0x10>
			break;
	}
	return i;
 80015c4:	b2d8      	uxtb	r0, r3
}
 80015c6:	bd10      	pop	{r4, pc}
		if(menu[i].isSelect == true) 
 80015c8:	fb01 0403 	mla	r4, r1, r3, r0
 80015cc:	78a4      	ldrb	r4, [r4, #2]
 80015ce:	2c00      	cmp	r4, #0
 80015d0:	d1f8      	bne.n	80015c4 <getMenuSelectitem+0xc>
	for(i=0; i< menu->menuItemCount; i++)
 80015d2:	3301      	adds	r3, #1
 80015d4:	e7f4      	b.n	80015c0 <getMenuSelectitem+0x8>
	...

080015d8 <exitMenu>:

void exitMenu(void)
{
	CurMenu = mainMenu;
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <exitMenu+0x18>)
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <exitMenu+0x1c>)
 80015dc:	601a      	str	r2, [r3, #0]
	MenuWindow.title = defaultTitle;
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <exitMenu+0x20>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <exitMenu+0x24>)
 80015e4:	619a      	str	r2, [r3, #24]
	//setShow_ui(MAIN_UI);
	isChangeMenu = true;
 80015e6:	2201      	movs	r2, #1
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <exitMenu+0x28>)
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200021f8 	.word	0x200021f8
 80015f4:	20000084 	.word	0x20000084
 80015f8:	200000c4 	.word	0x200000c4
 80015fc:	200000a8 	.word	0x200000a8
 8001600:	200000c8 	.word	0x200000c8

08001604 <gotoNextMenu>:
}

void gotoNextMenu(void)	
{
	if(CurItem->childrenMenu != NULL)
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <gotoNextMenu+0x28>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	b14a      	cbz	r2, 8001620 <gotoNextMenu+0x1c>
	{
		CurMenu = CurItem->childrenMenu;
 800160c:	4908      	ldr	r1, [pc, #32]	; (8001630 <gotoNextMenu+0x2c>)
		MenuWindow.title = CurItem->title +2;
 800160e:	68db      	ldr	r3, [r3, #12]
		CurMenu = CurItem->childrenMenu;
 8001610:	600a      	str	r2, [r1, #0]
		MenuWindow.title = CurItem->title +2;
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <gotoNextMenu+0x30>)
 8001614:	3302      	adds	r3, #2
 8001616:	6193      	str	r3, [r2, #24]
		isChangeMenu = true;
 8001618:	2201      	movs	r2, #1
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <gotoNextMenu+0x34>)
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	4770      	bx	lr
	}
	else if(CurItem->Function!=NULL && CurItem->parentMenu==NULL)
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	b112      	cbz	r2, 800162a <gotoNextMenu+0x26>
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	b903      	cbnz	r3, 800162a <gotoNextMenu+0x26>
	{
		CurItem->Function();
 8001628:	4710      	bx	r2
 800162a:	4770      	bx	lr
 800162c:	20002310 	.word	0x20002310
 8001630:	20000084 	.word	0x20000084
 8001634:	200000a8 	.word	0x200000a8
 8001638:	200000c8 	.word	0x200000c8

0800163c <DisplayMenuInit>:
	}
}

/*顯示菜單*/
void DisplayMenuInit(MenuItem_Typedef* menu)
{
 800163c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t topitem;
	uint8_t showItems;
	
	if(isChangeMenu == false) return;
 8001640:	4f25      	ldr	r7, [pc, #148]	; (80016d8 <DisplayMenuInit+0x9c>)
{
 8001642:	4606      	mov	r6, r0
	if(isChangeMenu == false) return;
 8001644:	783b      	ldrb	r3, [r7, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d039      	beq.n	80016be <DisplayMenuInit+0x82>
	
	selected = getMenuSelectitem(menu);
 800164a:	f7ff ffb5 	bl	80015b8 <getMenuSelectitem>
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <DisplayMenuInit+0xa0>)
	cur_sequence = selected;
	if(selected < menu->cursorPosition)
 8001650:	f996 2000 	ldrsb.w	r2, [r6]
	selected = getMenuSelectitem(menu);
 8001654:	6018      	str	r0, [r3, #0]
	cur_sequence = selected;
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <DisplayMenuInit+0xa4>)
	if(selected < menu->cursorPosition)
 8001658:	4290      	cmp	r0, r2
	cur_sequence = selected;
 800165a:	6018      	str	r0, [r3, #0]
 800165c:	4698      	mov	r8, r3
		menu->cursorPosition = 0;
 800165e:	bfb8      	it	lt
 8001660:	2300      	movlt	r3, #0
	topitem = selected - menu->cursorPosition;
	if(menu->menuItemCount <= MenuWindow.itemsperpage)
 8001662:	4d20      	ldr	r5, [pc, #128]	; (80016e4 <DisplayMenuInit+0xa8>)
		menu->cursorPosition = 0;
 8001664:	bfb8      	it	lt
 8001666:	7033      	strblt	r3, [r6, #0]
	if(menu->menuItemCount <= MenuWindow.itemsperpage)
 8001668:	7872      	ldrb	r2, [r6, #1]
 800166a:	692b      	ldr	r3, [r5, #16]
	topitem = selected - menu->cursorPosition;
 800166c:	f996 4000 	ldrsb.w	r4, [r6]
	if(menu->menuItemCount <= MenuWindow.itemsperpage)
 8001670:	429a      	cmp	r2, r3
		topitem = 0;
 8001672:	bf92      	itee	ls
 8001674:	2400      	movls	r4, #0
	topitem = selected - menu->cursorPosition;
 8001676:	1b00      	subhi	r0, r0, r4
 8001678:	b2c4      	uxtbhi	r4, r0

	MenuWindow.topitem = topitem;
	GUI_WindowsDraw(&MenuWindow);
 800167a:	481a      	ldr	r0, [pc, #104]	; (80016e4 <DisplayMenuInit+0xa8>)
	MenuWindow.topitem = topitem;
 800167c:	616c      	str	r4, [r5, #20]
	GUI_WindowsDraw(&MenuWindow);
 800167e:	f000 fff3 	bl	8002668 <GUI_WindowsDraw>
	
	MenuScrollbar.topitem = topitem;
 8001682:	4819      	ldr	r0, [pc, #100]	; (80016e8 <DisplayMenuInit+0xac>)
 8001684:	f04f 0a1c 	mov.w	sl, #28
 8001688:	6184      	str	r4, [r0, #24]
	MenuScrollbar.totalitems = menu->menuItemCount;
 800168a:	7873      	ldrb	r3, [r6, #1]
 800168c:	6103      	str	r3, [r0, #16]
	GUI_ScrollbarDraw(&MenuScrollbar);
 800168e:	f000 fef9 	bl	8002484 <GUI_ScrollbarDraw>
	
	showItems = MenuWindow.itemsperpage;
 8001692:	692b      	ldr	r3, [r5, #16]
	if(menu->menuItemCount < MenuWindow.itemsperpage)
		showItems = menu->menuItemCount;
	for(int i=0; i<showItems; i++)
 8001694:	2500      	movs	r5, #0
	if(menu->menuItemCount < MenuWindow.itemsperpage)
 8001696:	f896 9001 	ldrb.w	r9, [r6, #1]
 800169a:	454b      	cmp	r3, r9
	showItems = MenuWindow.itemsperpage;
 800169c:	bf98      	it	ls
 800169e:	fa5f f983 	uxtbls.w	r9, r3
	for(int i=0; i<showItems; i++)
 80016a2:	454d      	cmp	r5, r9
 80016a4:	db0d      	blt.n	80016c2 <DisplayMenuInit+0x86>
	{
		MenuItem_Typedef* Item = &menu[topitem+i];
		GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1+i*15, Item);
	}
	CurItem = menu + cur_sequence;
 80016a6:	f8d8 3000 	ldr.w	r3, [r8]
 80016aa:	fb0a 6603 	mla	r6, sl, r3, r6
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <DisplayMenuInit+0xb0>)
 80016b0:	601e      	str	r6, [r3, #0]
	CurItem->isSelect = true;
 80016b2:	2301      	movs	r3, #1
 80016b4:	70b3      	strb	r3, [r6, #2]
	
	GUI_Refresh();//刷新屏幕
 80016b6:	f000 fdb2 	bl	800221e <GUI_Refresh>
	
	isChangeMenu = false;
 80016ba:	2300      	movs	r3, #0
 80016bc:	703b      	strb	r3, [r7, #0]
 80016be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1+i*15, Item);
 80016c2:	1962      	adds	r2, r4, r5
 80016c4:	ebc5 1105 	rsb	r1, r5, r5, lsl #4
 80016c8:	fb0a 6202 	mla	r2, sl, r2, r6
 80016cc:	3113      	adds	r1, #19
 80016ce:	2014      	movs	r0, #20
 80016d0:	f000 fd37 	bl	8002142 <GUI_MenuItemDraw>
	for(int i=0; i<showItems; i++)
 80016d4:	3501      	adds	r5, #1
 80016d6:	e7e4      	b.n	80016a2 <DisplayMenuInit+0x66>
 80016d8:	200000c8 	.word	0x200000c8
 80016dc:	20002194 	.word	0x20002194
 80016e0:	20002190 	.word	0x20002190
 80016e4:	200000a8 	.word	0x200000a8
 80016e8:	20000088 	.word	0x20000088
 80016ec:	20002310 	.word	0x20002310

080016f0 <Menu_Run>:
//	u8 keyState;
//	enum dir_e joystick2;
//	static int timeout;
//	u8 showItems;
	
	DisplayMenuInit(CurMenu);
 80016f0:	4b01      	ldr	r3, [pc, #4]	; (80016f8 <Menu_Run+0x8>)
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	f7ff bfa2 	b.w	800163c <DisplayMenuInit>
 80016f8:	20000084 	.word	0x20000084

080016fc <GUI_Button_Selected>:
}

//設置按鈕的狀態
void GUI_Button_Selected(Button_Typedef *btn,uint8_t state)
{
	if(btn->height<14) return;
 80016fc:	68c3      	ldr	r3, [r0, #12]
{
 80016fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(btn->height<14) return;
 8001700:	2b0d      	cmp	r3, #13
{
 8001702:	4604      	mov	r4, r0
 8001704:	460d      	mov	r5, r1
	if(btn->height<14) return;
 8001706:	d931      	bls.n	800176c <GUI_Button_Selected+0x70>
	if(btn->width<30)  return;
 8001708:	6886      	ldr	r6, [r0, #8]
 800170a:	2e1d      	cmp	r6, #29
 800170c:	d92e      	bls.n	800176c <GUI_Button_Selected+0x70>
	strlenth=strlen((const char*)str);//字節數
 800170e:	6900      	ldr	r0, [r0, #16]
 8001710:	f7fe fd88 	bl	8000224 <strlen>
 8001714:	b280      	uxth	r0, r0
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 8001716:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800171a:	0040      	lsls	r0, r0, #1
	if(getBtnStringlen(btn->title)>btn->width) return;
 800171c:	b280      	uxth	r0, r0
 800171e:	4286      	cmp	r6, r0
 8001720:	d324      	bcc.n	800176c <GUI_Button_Selected+0x70>
 8001722:	e894 0003 	ldmia.w	r4, {r0, r1}

	btn->state = state;
 8001726:	7525      	strb	r5, [r4, #20]
	if(btn->state)
 8001728:	b315      	cbz	r5, 8001770 <GUI_Button_Selected+0x74>
	{
		//填充按鈕
		GUI_FloodFill(btn->x + BUTTON_RADIUS,btn->y + BUTTON_RADIUS, 1);
 800172a:	2201      	movs	r2, #1
 800172c:	3108      	adds	r1, #8
 800172e:	3008      	adds	r0, #8
 8001730:	f000 fa87 	bl	8001c42 <GUI_FloodFill>
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,0);
 8001734:	6925      	ldr	r5, [r4, #16]
	strlenth=strlen((const char*)str);//字節數
 8001736:	4628      	mov	r0, r5
 8001738:	f7fe fd74 	bl	8000224 <strlen>
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,0);
 800173c:	68e1      	ldr	r1, [r4, #12]
 800173e:	6863      	ldr	r3, [r4, #4]
	strlenth=strlen((const char*)str);//字節數
 8001740:	b280      	uxth	r0, r0
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,0);
 8001742:	390c      	subs	r1, #12
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 8001744:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,0);
 8001748:	eb03 0151 	add.w	r1, r3, r1, lsr #1
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 800174c:	0040      	lsls	r0, r0, #1
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,0);
 800174e:	68a3      	ldr	r3, [r4, #8]
 8001750:	b280      	uxth	r0, r0
 8001752:	1a1b      	subs	r3, r3, r0
 8001754:	6820      	ldr	r0, [r4, #0]
 8001756:	462a      	mov	r2, r5
 8001758:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800175c:	2300      	movs	r3, #0
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	230c      	movs	r3, #12
 8001762:	9300      	str	r3, [sp, #0]

		GUI_Arc4(btn->x+BUTTON_RADIUS, btn->y+ btn->height-1-BUTTON_RADIUS, BUTTON_RADIUS,2, 1);	
		GUI_Line(btn->x+btn->width-1, btn->y+BUTTON_RADIUS, btn->x+btn->width-1,  btn->y+btn->height-1-BUTTON_RADIUS,1);			 

		//顯示字符
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,1);
 8001764:	b289      	uxth	r1, r1
 8001766:	b280      	uxth	r0, r0
 8001768:	f000 ff0c 	bl	8002584 <show_str>
	}
}
 800176c:	b002      	add	sp, #8
 800176e:	bd70      	pop	{r4, r5, r6, pc}
		GUI_FloodFill(btn->x + BUTTON_RADIUS,btn->y + BUTTON_RADIUS, 0);
 8001770:	462a      	mov	r2, r5
 8001772:	3108      	adds	r1, #8
 8001774:	3008      	adds	r0, #8
		GUI_Arc4(btn->x+BUTTON_RADIUS, btn->y+BUTTON_RADIUS, BUTTON_RADIUS,3, 1);
 8001776:	2501      	movs	r5, #1
		GUI_FloodFill(btn->x + BUTTON_RADIUS,btn->y + BUTTON_RADIUS, 0);
 8001778:	f000 fa63 	bl	8001c42 <GUI_FloodFill>
		GUI_Arc4(btn->x+BUTTON_RADIUS, btn->y+BUTTON_RADIUS, BUTTON_RADIUS,3, 1);
 800177c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001780:	2208      	movs	r2, #8
 8001782:	2303      	movs	r3, #3
 8001784:	4411      	add	r1, r2
 8001786:	4410      	add	r0, r2
 8001788:	9500      	str	r5, [sp, #0]
 800178a:	f000 fbcc 	bl	8001f26 <GUI_Arc4>
		GUI_Line(btn->x+BUTTON_RADIUS, btn->y, btn->x+BUTTON_RADIUS+btn->width-1-2*BUTTON_RADIUS, btn->y,1);
 800178e:	6820      	ldr	r0, [r4, #0]
 8001790:	68a2      	ldr	r2, [r4, #8]
 8001792:	6863      	ldr	r3, [r4, #4]
 8001794:	4402      	add	r2, r0
 8001796:	3a09      	subs	r2, #9
 8001798:	4619      	mov	r1, r3
 800179a:	3008      	adds	r0, #8
 800179c:	9500      	str	r5, [sp, #0]
 800179e:	f000 f9a3 	bl	8001ae8 <GUI_Line>
		GUI_Arc4(btn->x+btn->width-1-BUTTON_RADIUS, btn->y+BUTTON_RADIUS, BUTTON_RADIUS,4, 1);	
 80017a2:	e894 000b 	ldmia.w	r4, {r0, r1, r3}
 80017a6:	2208      	movs	r2, #8
 80017a8:	4418      	add	r0, r3
 80017aa:	4411      	add	r1, r2
 80017ac:	2304      	movs	r3, #4
 80017ae:	3809      	subs	r0, #9
 80017b0:	9500      	str	r5, [sp, #0]
 80017b2:	f000 fbb8 	bl	8001f26 <GUI_Arc4>
		GUI_Line(btn->x+BUTTON_RADIUS, btn->y+btn->height-1, btn->x+BUTTON_RADIUS+btn->width-1-2*BUTTON_RADIUS, btn->y+btn->height-1,1);	
 80017b6:	e894 0009 	ldmia.w	r4, {r0, r3}
 80017ba:	68e2      	ldr	r2, [r4, #12]
 80017bc:	9500      	str	r5, [sp, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	68a2      	ldr	r2, [r4, #8]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4402      	add	r2, r0
 80017c6:	4619      	mov	r1, r3
 80017c8:	3a09      	subs	r2, #9
 80017ca:	3008      	adds	r0, #8
 80017cc:	f000 f98c 	bl	8001ae8 <GUI_Line>
		GUI_Arc4(btn->x+btn->width-1-BUTTON_RADIUS, btn->y+ btn->height-1-BUTTON_RADIUS, BUTTON_RADIUS,1, 1);	
 80017d0:	68e3      	ldr	r3, [r4, #12]
 80017d2:	6861      	ldr	r1, [r4, #4]
 80017d4:	6820      	ldr	r0, [r4, #0]
 80017d6:	4419      	add	r1, r3
 80017d8:	68a3      	ldr	r3, [r4, #8]
 80017da:	2208      	movs	r2, #8
 80017dc:	4418      	add	r0, r3
 80017de:	3909      	subs	r1, #9
 80017e0:	462b      	mov	r3, r5
 80017e2:	3809      	subs	r0, #9
 80017e4:	9500      	str	r5, [sp, #0]
 80017e6:	f000 fb9e 	bl	8001f26 <GUI_Arc4>
		GUI_Line(btn->x, btn->y+BUTTON_RADIUS, btn->x, btn->y+btn->height-1-BUTTON_RADIUS,1);	
 80017ea:	6861      	ldr	r1, [r4, #4]
 80017ec:	68e3      	ldr	r3, [r4, #12]
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	440b      	add	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	3b09      	subs	r3, #9
 80017f6:	3108      	adds	r1, #8
 80017f8:	9500      	str	r5, [sp, #0]
 80017fa:	f000 f975 	bl	8001ae8 <GUI_Line>
		GUI_Arc4(btn->x+BUTTON_RADIUS, btn->y+ btn->height-1-BUTTON_RADIUS, BUTTON_RADIUS,2, 1);	
 80017fe:	2208      	movs	r2, #8
 8001800:	68e3      	ldr	r3, [r4, #12]
 8001802:	6861      	ldr	r1, [r4, #4]
 8001804:	6820      	ldr	r0, [r4, #0]
 8001806:	4419      	add	r1, r3
 8001808:	4410      	add	r0, r2
 800180a:	2302      	movs	r3, #2
 800180c:	3909      	subs	r1, #9
 800180e:	9500      	str	r5, [sp, #0]
 8001810:	f000 fb89 	bl	8001f26 <GUI_Arc4>
		GUI_Line(btn->x+btn->width-1, btn->y+BUTTON_RADIUS, btn->x+btn->width-1,  btn->y+btn->height-1-BUTTON_RADIUS,1);			 
 8001814:	68a3      	ldr	r3, [r4, #8]
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	6861      	ldr	r1, [r4, #4]
 800181a:	441a      	add	r2, r3
 800181c:	68e3      	ldr	r3, [r4, #12]
 800181e:	3a01      	subs	r2, #1
 8001820:	440b      	add	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	3b09      	subs	r3, #9
 8001826:	3108      	adds	r1, #8
 8001828:	9500      	str	r5, [sp, #0]
 800182a:	f000 f95d 	bl	8001ae8 <GUI_Line>
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,1);
 800182e:	6926      	ldr	r6, [r4, #16]
	strlenth=strlen((const char*)str);//字節數
 8001830:	4630      	mov	r0, r6
 8001832:	f7fe fcf7 	bl	8000224 <strlen>
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,1);
 8001836:	68e1      	ldr	r1, [r4, #12]
 8001838:	6863      	ldr	r3, [r4, #4]
	strlenth=strlen((const char*)str);//字節數
 800183a:	b280      	uxth	r0, r0
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,1);
 800183c:	390c      	subs	r1, #12
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 800183e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,1);
 8001842:	eb03 0151 	add.w	r1, r3, r1, lsr #1
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 8001846:	40a8      	lsls	r0, r5
		show_str(btn->x+(btn->width-getBtnStringlen(btn->title))/2, btn->y+(btn->height-12)/2, btn->title, 12,12,1);
 8001848:	68a3      	ldr	r3, [r4, #8]
 800184a:	b280      	uxth	r0, r0
 800184c:	1a1b      	subs	r3, r3, r0
 800184e:	6820      	ldr	r0, [r4, #0]
 8001850:	9501      	str	r5, [sp, #4]
 8001852:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001856:	230c      	movs	r3, #12
 8001858:	4632      	mov	r2, r6
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	e782      	b.n	8001764 <GUI_Button_Selected+0x68>

0800185e <GUI_DrawButton>:


//畫一個按鈕
void GUI_DrawButton(Button_Typedef *btn)
{
	if(btn->height<14) return;
 800185e:	68c3      	ldr	r3, [r0, #12]
{
 8001860:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if(btn->height<14) return;
 8001864:	2b0d      	cmp	r3, #13
{
 8001866:	4604      	mov	r4, r0
	if(btn->height<14) return;
 8001868:	f240 8090 	bls.w	800198c <GUI_DrawButton+0x12e>
	if(btn->width<30)  return;
 800186c:	6885      	ldr	r5, [r0, #8]
 800186e:	2d1d      	cmp	r5, #29
 8001870:	f240 808c 	bls.w	800198c <GUI_DrawButton+0x12e>
	strlenth=strlen((const char*)str);//字節數
 8001874:	6900      	ldr	r0, [r0, #16]
 8001876:	f7fe fcd5 	bl	8000224 <strlen>
 800187a:	b280      	uxth	r0, r0
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 800187c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001880:	0040      	lsls	r0, r0, #1
	if(getBtnStringlen(btn->title)>btn->width) return;
 8001882:	b280      	uxth	r0, r0
 8001884:	4285      	cmp	r5, r0
 8001886:	f0c0 8081 	bcc.w	800198c <GUI_DrawButton+0x12e>

	GUI_Arc4(btn->x+BUTTON_RADIUS, btn->y+BUTTON_RADIUS, BUTTON_RADIUS,3, 1);
 800188a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800188e:	2501      	movs	r5, #1
 8001890:	2208      	movs	r2, #8
 8001892:	2303      	movs	r3, #3
 8001894:	4411      	add	r1, r2
 8001896:	4410      	add	r0, r2
 8001898:	9500      	str	r5, [sp, #0]
 800189a:	f000 fb44 	bl	8001f26 <GUI_Arc4>
	GUI_Line(btn->x+BUTTON_RADIUS, btn->y, btn->x+BUTTON_RADIUS+btn->width-1-2*BUTTON_RADIUS, btn->y,1);
 800189e:	6820      	ldr	r0, [r4, #0]
 80018a0:	68a2      	ldr	r2, [r4, #8]
 80018a2:	6863      	ldr	r3, [r4, #4]
 80018a4:	4402      	add	r2, r0
 80018a6:	3a09      	subs	r2, #9
 80018a8:	4619      	mov	r1, r3
 80018aa:	3008      	adds	r0, #8
 80018ac:	9500      	str	r5, [sp, #0]
 80018ae:	f000 f91b 	bl	8001ae8 <GUI_Line>

	GUI_Arc4(btn->x+btn->width-1-BUTTON_RADIUS, btn->y+BUTTON_RADIUS, BUTTON_RADIUS,4, 1);	
 80018b2:	e894 000b 	ldmia.w	r4, {r0, r1, r3}
 80018b6:	2208      	movs	r2, #8
 80018b8:	4418      	add	r0, r3
 80018ba:	4411      	add	r1, r2
 80018bc:	2304      	movs	r3, #4
 80018be:	3809      	subs	r0, #9
 80018c0:	9500      	str	r5, [sp, #0]
 80018c2:	f000 fb30 	bl	8001f26 <GUI_Arc4>
	GUI_Line(btn->x+BUTTON_RADIUS, btn->y+btn->height-1, btn->x+BUTTON_RADIUS+btn->width-1-2*BUTTON_RADIUS, btn->y+btn->height-1,1);	
 80018c6:	e894 0009 	ldmia.w	r4, {r0, r3}
 80018ca:	68e2      	ldr	r2, [r4, #12]
 80018cc:	9500      	str	r5, [sp, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	68a2      	ldr	r2, [r4, #8]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	4402      	add	r2, r0
 80018d6:	4619      	mov	r1, r3
 80018d8:	3a09      	subs	r2, #9
 80018da:	3008      	adds	r0, #8
 80018dc:	f000 f904 	bl	8001ae8 <GUI_Line>

	GUI_Arc4(btn->x+btn->width-1-BUTTON_RADIUS, btn->y+ btn->height-1-BUTTON_RADIUS, BUTTON_RADIUS,1, 1);	
 80018e0:	68e3      	ldr	r3, [r4, #12]
 80018e2:	6861      	ldr	r1, [r4, #4]
 80018e4:	6820      	ldr	r0, [r4, #0]
 80018e6:	4419      	add	r1, r3
 80018e8:	68a3      	ldr	r3, [r4, #8]
 80018ea:	2208      	movs	r2, #8
 80018ec:	4418      	add	r0, r3
 80018ee:	3909      	subs	r1, #9
 80018f0:	462b      	mov	r3, r5
 80018f2:	3809      	subs	r0, #9
 80018f4:	9500      	str	r5, [sp, #0]
 80018f6:	f000 fb16 	bl	8001f26 <GUI_Arc4>
	GUI_Line(btn->x, btn->y+BUTTON_RADIUS, btn->x, btn->y+btn->height-1-BUTTON_RADIUS,1);	
 80018fa:	6861      	ldr	r1, [r4, #4]
 80018fc:	68e3      	ldr	r3, [r4, #12]
 80018fe:	6822      	ldr	r2, [r4, #0]
 8001900:	440b      	add	r3, r1
 8001902:	4610      	mov	r0, r2
 8001904:	3b09      	subs	r3, #9
 8001906:	3108      	adds	r1, #8
 8001908:	9500      	str	r5, [sp, #0]
 800190a:	f000 f8ed 	bl	8001ae8 <GUI_Line>

	GUI_Arc4(btn->x+BUTTON_RADIUS, btn->y+ btn->height-1-BUTTON_RADIUS, BUTTON_RADIUS,2, 1);	
 800190e:	2208      	movs	r2, #8
 8001910:	68e3      	ldr	r3, [r4, #12]
 8001912:	6861      	ldr	r1, [r4, #4]
 8001914:	6820      	ldr	r0, [r4, #0]
 8001916:	4419      	add	r1, r3
 8001918:	4410      	add	r0, r2
 800191a:	2302      	movs	r3, #2
 800191c:	3909      	subs	r1, #9
 800191e:	9500      	str	r5, [sp, #0]
 8001920:	f000 fb01 	bl	8001f26 <GUI_Arc4>
	GUI_Line(btn->x+btn->width-1, btn->y+BUTTON_RADIUS, btn->x+btn->width-1,  btn->y+btn->height-1-BUTTON_RADIUS,1);	
 8001924:	68a3      	ldr	r3, [r4, #8]
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	6861      	ldr	r1, [r4, #4]
 800192a:	441a      	add	r2, r3
 800192c:	68e3      	ldr	r3, [r4, #12]
 800192e:	3a01      	subs	r2, #1
 8001930:	440b      	add	r3, r1
 8001932:	3b09      	subs	r3, #9
 8001934:	9500      	str	r5, [sp, #0]
 8001936:	3108      	adds	r1, #8
 8001938:	4610      	mov	r0, r2
 800193a:	f000 f8d5 	bl	8001ae8 <GUI_Line>
 800193e:	e894 0140 	ldmia.w	r4, {r6, r8}


	if(btn->state)
 8001942:	7d23      	ldrb	r3, [r4, #20]
 8001944:	b32b      	cbz	r3, 8001992 <GUI_DrawButton+0x134>
	{
		//填充按鈕
		GUI_FloodFill(btn->x + BUTTON_RADIUS,btn->y + BUTTON_RADIUS, 1);
 8001946:	462a      	mov	r2, r5
 8001948:	f108 0108 	add.w	r1, r8, #8
 800194c:	f106 0008 	add.w	r0, r6, #8
 8001950:	f000 f977 	bl	8001c42 <GUI_FloodFill>
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,0);
 8001954:	6925      	ldr	r5, [r4, #16]
	strlenth=strlen((const char*)str);//字節數
 8001956:	4628      	mov	r0, r5
 8001958:	f7fe fc64 	bl	8000224 <strlen>
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,0);
 800195c:	68e1      	ldr	r1, [r4, #12]
 800195e:	6863      	ldr	r3, [r4, #4]
	strlenth=strlen((const char*)str);//字節數
 8001960:	b280      	uxth	r0, r0
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,0);
 8001962:	390c      	subs	r1, #12
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 8001964:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,0);
 8001968:	eb03 0151 	add.w	r1, r3, r1, lsr #1
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 800196c:	0040      	lsls	r0, r0, #1
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,0);
 800196e:	68a3      	ldr	r3, [r4, #8]
 8001970:	b280      	uxth	r0, r0
 8001972:	1a1b      	subs	r3, r3, r0
 8001974:	6820      	ldr	r0, [r4, #0]
 8001976:	462a      	mov	r2, r5
 8001978:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800197c:	2300      	movs	r3, #0
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	230c      	movs	r3, #12
 8001982:	9300      	str	r3, [sp, #0]
	}
	else
	{
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,1);
 8001984:	b289      	uxth	r1, r1
 8001986:	b280      	uxth	r0, r0
 8001988:	f000 fdfc 	bl	8002584 <show_str>
	}
};
 800198c:	b002      	add	sp, #8
 800198e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,1);
 8001992:	6927      	ldr	r7, [r4, #16]
	strlenth=strlen((const char*)str);//字節數
 8001994:	4638      	mov	r0, r7
 8001996:	f7fe fc45 	bl	8000224 <strlen>
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,1);
 800199a:	68e3      	ldr	r3, [r4, #12]
	strlenth=strlen((const char*)str);//字節數
 800199c:	b280      	uxth	r0, r0
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,1);
 800199e:	3b0c      	subs	r3, #12
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 80019a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,1);
 80019a4:	eb08 0153 	add.w	r1, r8, r3, lsr #1
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 80019a8:	0040      	lsls	r0, r0, #1
		show_str(btn->x + (btn->width-getBtnStringlen(btn->title))/2, btn->y + (btn->height-12)/2,	btn->title, 12,12,1);
 80019aa:	68a3      	ldr	r3, [r4, #8]
 80019ac:	b280      	uxth	r0, r0
 80019ae:	1a18      	subs	r0, r3, r0
 80019b0:	230c      	movs	r3, #12
 80019b2:	eb06 0050 	add.w	r0, r6, r0, lsr #1
 80019b6:	9501      	str	r5, [sp, #4]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	463a      	mov	r2, r7
 80019bc:	e7e2      	b.n	8001984 <GUI_DrawButton+0x126>

080019be <GUI_ButtonDelete>:

//刪除按鈕
void GUI_ButtonDelete(Button_Typedef *btn)
{
 80019be:	4602      	mov	r2, r0
 80019c0:	b513      	push	{r0, r1, r4, lr}
	GUI_RectangleFill(btn->x, btn->y, btn->x+btn->width-1,  btn->y +btn->height-1, 0);
 80019c2:	c803      	ldmia	r0, {r0, r1}
 80019c4:	2400      	movs	r4, #0
 80019c6:	68d3      	ldr	r3, [r2, #12]
 80019c8:	6892      	ldr	r2, [r2, #8]
 80019ca:	440b      	add	r3, r1
 80019cc:	4402      	add	r2, r0
 80019ce:	9400      	str	r4, [sp, #0]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	3a01      	subs	r2, #1
 80019d4:	f000 f84e 	bl	8001a74 <GUI_RectangleFill>
}
 80019d8:	b002      	add	sp, #8
 80019da:	bd10      	pop	{r4, pc}

080019dc <test_Button>:
1
};

//測試按鈕
void test_Button(void)
{
 80019dc:	b510      	push	{r4, lr}
	GUI_ClearSCR();
	GUI_DrawButton(&button);
 80019de:	4c11      	ldr	r4, [pc, #68]	; (8001a24 <test_Button+0x48>)
	GUI_ClearSCR();
 80019e0:	f000 fbe5 	bl	80021ae <GUI_ClearSCR>
	GUI_DrawButton(&button);
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff ff3a 	bl	800185e <GUI_DrawButton>
	button.title = "set";
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <test_Button+0x4c>)
	button.x = 60;
	GUI_DrawButton(&button);
 80019ec:	4620      	mov	r0, r4
	button.title = "set";
 80019ee:	6123      	str	r3, [r4, #16]
	button.x = 60;
 80019f0:	233c      	movs	r3, #60	; 0x3c
 80019f2:	6023      	str	r3, [r4, #0]
	GUI_DrawButton(&button);
 80019f4:	f7ff ff33 	bl	800185e <GUI_DrawButton>
	GUI_Refresh();								//刷新屏幕
 80019f8:	f000 fc11 	bl	800221e <GUI_Refresh>
	HAL_Delay(2000);
 80019fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a00:	f7ff f870 	bl	8000ae4 <HAL_Delay>

	GUI_Button_Selected(&button,0);
 8001a04:	4620      	mov	r0, r4
 8001a06:	2100      	movs	r1, #0
 8001a08:	f7ff fe78 	bl	80016fc <GUI_Button_Selected>
	GUI_Refresh();								//刷新屏幕
 8001a0c:	f000 fc07 	bl	800221e <GUI_Refresh>
	HAL_Delay(2000);
 8001a10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a14:	f7ff f866 	bl	8000ae4 <HAL_Delay>
	GUI_ButtonDelete(&button);
 8001a18:	4620      	mov	r0, r4
}
 8001a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GUI_ButtonDelete(&button);
 8001a1e:	f7ff bfce 	b.w	80019be <GUI_ButtonDelete>
 8001a22:	bf00      	nop
 8001a24:	200000cc 	.word	0x200000cc
 8001a28:	08002912 	.word	0x08002912

08001a2c <GUI_Rectangle>:
*           color	顯示顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_Rectangle(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8001a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a30:	461c      	mov	r4, r3
 8001a32:	f89d 5018 	ldrb.w	r5, [sp, #24]
	GUI_HLine(x0, y0, x1, color);
 8001a36:	fa1f f880 	uxth.w	r8, r0
 8001a3a:	b2cf      	uxtb	r7, r1
 8001a3c:	b296      	uxth	r6, r2
	GUI_HLine(x0, y1, x1, color);
 8001a3e:	b2e4      	uxtb	r4, r4
	GUI_HLine(x0, y0, x1, color);
 8001a40:	462b      	mov	r3, r5
 8001a42:	4632      	mov	r2, r6
 8001a44:	4639      	mov	r1, r7
 8001a46:	4640      	mov	r0, r8
 8001a48:	f000 fbbf 	bl	80021ca <GUI_HLine>
	GUI_HLine(x0, y1, x1, color);
 8001a4c:	462b      	mov	r3, r5
 8001a4e:	4632      	mov	r2, r6
 8001a50:	4621      	mov	r1, r4
 8001a52:	4640      	mov	r0, r8
 8001a54:	f000 fbb9 	bl	80021ca <GUI_HLine>
	GUI_RLine(x0, y0, y1, color);
 8001a58:	462b      	mov	r3, r5
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	4639      	mov	r1, r7
 8001a5e:	4640      	mov	r0, r8
 8001a60:	f000 fbc8 	bl	80021f4 <GUI_RLine>
	GUI_RLine(x1, y0, y1, color);
 8001a64:	462b      	mov	r3, r5
 8001a66:	4622      	mov	r2, r4
 8001a68:	4639      	mov	r1, r7
 8001a6a:	4630      	mov	r0, r6
}
 8001a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	GUI_RLine(x1, y0, y1, color);
 8001a70:	f000 bbc0 	b.w	80021f4 <GUI_RLine>

08001a74 <GUI_RectangleFill>:
*           color	填充顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_RectangleFill(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8001a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t  i;

	/* 先找出矩形左上角與右下角的兩個點，保存在(x0,y0)，(x1,y1) */
	if(x0>x1) 						// 若x0>x1，則x0與x1交換
 8001a78:	4290      	cmp	r0, r2
{  
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	461f      	mov	r7, r3
 8001a7e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if(x0>x1) 						// 若x0>x1，則x0與x1交換
 8001a82:	d82b      	bhi.n	8001adc <GUI_RectangleFill+0x68>
	{  
		i = x0;
		x0 = x1;
		x1 = i;
	}
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 8001a84:	4299      	cmp	r1, r3
 8001a86:	d809      	bhi.n	8001a9c <GUI_RectangleFill+0x28>
		y0 = y1;
		y1 = i;
	}

	/* 判斷是否只是直線 */
	if(y0==y1) 
 8001a88:	42bc      	cmp	r4, r7
 8001a8a:	d109      	bne.n	8001aa0 <GUI_RectangleFill+0x2c>
	{  
		GUI_HLine(x0, y0, x1, color);
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	b2e1      	uxtb	r1, r4
 8001a90:	b292      	uxth	r2, r2
 8001a92:	b280      	uxth	r0, r0
	while(y0<=y1)						
	{  
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
		y0++;							// 下一行
	}
}
 8001a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GUI_HLine(x0, y0, x1, color);
 8001a98:	f000 bb97 	b.w	80021ca <GUI_HLine>
 8001a9c:	463c      	mov	r4, r7
 8001a9e:	460f      	mov	r7, r1
	if(x0==x1) 
 8001aa0:	4290      	cmp	r0, r2
 8001aa2:	d10d      	bne.n	8001ac0 <GUI_RectangleFill+0x4c>
		GUI_RLine(x0, y0, y1, color);
 8001aa4:	4643      	mov	r3, r8
 8001aa6:	b2fa      	uxtb	r2, r7
 8001aa8:	b2e1      	uxtb	r1, r4
 8001aaa:	b280      	uxth	r0, r0
}
 8001aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GUI_RLine(x0, y0, y1, color);
 8001ab0:	f000 bba0 	b.w	80021f4 <GUI_RLine>
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4627      	mov	r7, r4
 8001ab8:	461c      	mov	r4, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	4610      	mov	r0, r2
 8001abe:	461a      	mov	r2, r3
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
 8001ac0:	b296      	uxth	r6, r2
 8001ac2:	b285      	uxth	r5, r0
	while(y0<=y1)						
 8001ac4:	42bc      	cmp	r4, r7
 8001ac6:	d901      	bls.n	8001acc <GUI_RectangleFill+0x58>
 8001ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
 8001acc:	b2e1      	uxtb	r1, r4
 8001ace:	4643      	mov	r3, r8
 8001ad0:	4632      	mov	r2, r6
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	f000 fb79 	bl	80021ca <GUI_HLine>
		y0++;							// 下一行
 8001ad8:	3401      	adds	r4, #1
 8001ada:	e7f3      	b.n	8001ac4 <GUI_RectangleFill+0x50>
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 8001adc:	4299      	cmp	r1, r3
 8001ade:	d8e9      	bhi.n	8001ab4 <GUI_RectangleFill+0x40>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	e7cf      	b.n	8001a88 <GUI_RectangleFill+0x14>

08001ae8 <GUI_Line>:
*           color	顯示顏色(對於黑白色LCM，為0時滅，為1時顯示)
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_Line(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8001ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aec:	4699      	mov	r9, r3
	int8_t    dy_sym;				// y軸增長方向，為-1時減值方向，為1時增值方向
	int32_t   dx_x2;				// dx*2值變量，用於加快運算速度
	int32_t   dy_x2;				// dy*2值變量，用於加快運算速度
	int32_t   di;					// 決策變量

	dx = x1-x0;						// 求取兩點之間的差值
 8001aee:	1a13      	subs	r3, r2, r0
	dy = y1-y0;
	/* 判斷增長方向，或是否為水平線、垂直線、點 */
	if(dx>0)						// 判斷x軸方向
 8001af0:	2b00      	cmp	r3, #0
{  
 8001af2:	4604      	mov	r4, r0
 8001af4:	460d      	mov	r5, r1
 8001af6:	4692      	mov	sl, r2
 8001af8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	dy = y1-y0;
 8001afc:	eba9 0201 	sub.w	r2, r9, r1
 8001b00:	b280      	uxth	r0, r0
 8001b02:	b2c9      	uxtb	r1, r1
	if(dx>0)						// 判斷x軸方向
 8001b04:	dc08      	bgt.n	8001b18 <GUI_Line+0x30>
	{  
		dx_sym = 1;					// dx>0，設置dx_sym=1
	}
	else
	{  
		if(dx<0)
 8001b06:	d113      	bne.n	8001b30 <GUI_Line+0x48>
			dx_sym = -1;			// dx<0，設置dx_sym=-1
		else
		{  							// dx==0，畫垂直線，或一點
			GUI_RLine(x0, y0, y1, color);
 8001b08:	4633      	mov	r3, r6
 8001b0a:	fa5f f289 	uxtb.w	r2, r9
				x0 += dx_sym;
			}
		}
		GUI_Point(x0, y0, color);		// 顯示最後一點
	} 
}
 8001b0e:	b003      	add	sp, #12
 8001b10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			GUI_RLine(x0, y0, y1, color);
 8001b14:	f000 bb6e 	b.w	80021f4 <GUI_RLine>
		dx_sym = 1;					// dx>0，設置dx_sym=1
 8001b18:	2701      	movs	r7, #1
	if(dy>0)						// 判斷y軸方向
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	dc0b      	bgt.n	8001b36 <GUI_Line+0x4e>
		if(dy<0)
 8001b1e:	d124      	bne.n	8001b6a <GUI_Line+0x82>
			GUI_HLine(x0, y0, x1, color);
 8001b20:	4633      	mov	r3, r6
 8001b22:	fa1f f28a 	uxth.w	r2, sl
}
 8001b26:	b003      	add	sp, #12
 8001b28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			GUI_HLine(x0, y0, x1, color);
 8001b2c:	f000 bb4d 	b.w	80021ca <GUI_HLine>
			dx_sym = -1;			// dx<0，設置dx_sym=-1
 8001b30:	f04f 37ff 	mov.w	r7, #4294967295
 8001b34:	e7f1      	b.n	8001b1a <GUI_Line+0x32>
		dy_sym = 1;					// dy>0，設置dy_sym=1
 8001b36:	f04f 0801 	mov.w	r8, #1
	dx = dx_sym * dx;
 8001b3a:	fb03 f107 	mul.w	r1, r3, r7
	dy = dy_sym * dy;
 8001b3e:	fb02 f208 	mul.w	r2, r2, r8
	if(dx>=dy)						// 對於dx>=dy，則使用x軸為基準
 8001b42:	4291      	cmp	r1, r2
	dx_x2 = dx*2;
 8001b44:	ea4f 0b41 	mov.w	fp, r1, lsl #1
	dy_x2 = dy*2;
 8001b48:	ea4f 0342 	mov.w	r3, r2, lsl #1
	if(dx>=dy)						// 對於dx>=dy，則使用x軸為基準
 8001b4c:	db1d      	blt.n	8001b8a <GUI_Line+0xa2>
		di = dy_x2 - dx;
 8001b4e:	eba3 0901 	sub.w	r9, r3, r1
				di += dy_x2 - dx_x2;
 8001b52:	eba9 0b01 	sub.w	fp, r9, r1
		while(x0!=x1)
 8001b56:	4554      	cmp	r4, sl
 8001b58:	b2e9      	uxtb	r1, r5
 8001b5a:	b2a0      	uxth	r0, r4
 8001b5c:	d108      	bne.n	8001b70 <GUI_Line+0x88>
		GUI_Point(x0, y0, color);		// 顯示最後一點
 8001b5e:	4632      	mov	r2, r6
}
 8001b60:	b003      	add	sp, #12
 8001b62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Point(x0, y0, color);		// 顯示最後一點
 8001b66:	f000 bb25 	b.w	80021b4 <GUI_Point>
			dy_sym = -1;			// dy<0，設置dy_sym=-1
 8001b6a:	f04f 38ff 	mov.w	r8, #4294967295
 8001b6e:	e7e4      	b.n	8001b3a <GUI_Line+0x52>
			GUI_Point(x0, y0, color);
 8001b70:	4632      	mov	r2, r6
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	f000 fb1e 	bl	80021b4 <GUI_Point>
			if(di<0)
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	f1b9 0f00 	cmp.w	r9, #0
 8001b7e:	443c      	add	r4, r7
				di += dy_x2;		// 計算出下一步的決策值
 8001b80:	bfb2      	itee	lt
 8001b82:	4499      	addlt	r9, r3
				di += dy_x2 - dx_x2;
 8001b84:	44d9      	addge	r9, fp
				y0 += dy_sym;
 8001b86:	4445      	addge	r5, r8
 8001b88:	e7e5      	b.n	8001b56 <GUI_Line+0x6e>
		di = dx_x2 - dy;
 8001b8a:	ebab 0a02 	sub.w	sl, fp, r2
				di += dx_x2 - dy_x2;
 8001b8e:	ebaa 0302 	sub.w	r3, sl, r2
		while(y0!=y1)
 8001b92:	454d      	cmp	r5, r9
 8001b94:	b2e9      	uxtb	r1, r5
 8001b96:	b2a0      	uxth	r0, r4
 8001b98:	d0e1      	beq.n	8001b5e <GUI_Line+0x76>
			GUI_Point(x0, y0, color);
 8001b9a:	4632      	mov	r2, r6
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	f000 fb09 	bl	80021b4 <GUI_Point>
			if(di<0)
 8001ba2:	9b01      	ldr	r3, [sp, #4]
 8001ba4:	f1ba 0f00 	cmp.w	sl, #0
 8001ba8:	4445      	add	r5, r8
				di += dx_x2;
 8001baa:	bfb2      	itee	lt
 8001bac:	44da      	addlt	sl, fp
				di += dx_x2 - dy_x2;
 8001bae:	449a      	addge	sl, r3
				x0 += dx_sym;
 8001bb0:	19e4      	addge	r4, r4, r7
 8001bb2:	e7ee      	b.n	8001b92 <GUI_Line+0xaa>

08001bb4 <GUI_ReadLeftPoint>:
*           color	指定顏色值
* 出口參數：返回該點的x軸坐標值。
* 說明：若沒有找出，則返回最左的x坐標0。
****************************************************************************/
uint32_t  GUI_ReadLeftPoint(uint32_t x0, uint32_t y0, TCOLOR color)
{  uint32_t  i;
 8001bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001bb6:	4614      	mov	r4, r2
   TCOLOR  bakc;
   
   for(i=x0-1; i>0; i--)
 8001bb8:	1e45      	subs	r5, r0, #1
 8001bba:	b2ce      	uxtb	r6, r1
   {  GUI_ReadPoint(i, y0, &bakc);
 8001bbc:	f10d 0207 	add.w	r2, sp, #7
 8001bc0:	4631      	mov	r1, r6
   for(i=x0-1; i>0; i--)
 8001bc2:	b945      	cbnz	r5, 8001bd6 <GUI_ReadLeftPoint+0x22>
      if( GUI_CmpColor(bakc,color)==0 ) return(i+1);	// 若找到，則返回
   }
   GUI_ReadPoint(i, y0, &bakc);
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f000 faf8 	bl	80021ba <GUI_ReadPoint>
   if( GUI_CmpColor(bakc,color)==0 ) return(1);		// 若找到，則返回
 8001bca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001bce:	4060      	eors	r0, r4
      if( GUI_CmpColor(bakc,color)==0 ) return(i+1);	// 若找到，則返回
 8001bd0:	f000 0001 	and.w	r0, r0, #1
 8001bd4:	e008      	b.n	8001be8 <GUI_ReadLeftPoint+0x34>
   {  GUI_ReadPoint(i, y0, &bakc);
 8001bd6:	b2a8      	uxth	r0, r5
 8001bd8:	f000 faef 	bl	80021ba <GUI_ReadPoint>
      if( GUI_CmpColor(bakc,color)==0 ) return(i+1);	// 若找到，則返回
 8001bdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001be0:	4063      	eors	r3, r4
 8001be2:	07db      	lsls	r3, r3, #31
 8001be4:	d502      	bpl.n	8001bec <GUI_ReadLeftPoint+0x38>
 8001be6:	1c68      	adds	r0, r5, #1
   
   return(0);
}
 8001be8:	b002      	add	sp, #8
 8001bea:	bd70      	pop	{r4, r5, r6, pc}
   for(i=x0-1; i>0; i--)
 8001bec:	3d01      	subs	r5, #1
 8001bee:	e7e5      	b.n	8001bbc <GUI_ReadLeftPoint+0x8>

08001bf0 <GUI_ReadRightPoint>:
*           color	指定顏色值
* 出口參數：返回該點的x軸坐標值。
* 說明：若沒有找出，則返回最右的x坐標GUI_LCM_XMAX。
****************************************************************************/
uint32_t  GUI_ReadRightPoint(uint32_t x0, uint32_t y0, TCOLOR color)
{  uint32_t  i;
 8001bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001bf2:	4615      	mov	r5, r2
   TCOLOR  bakc;
   
   for(i=x0+1; i<GUI_LCM_XMAX; i++)
 8001bf4:	1c44      	adds	r4, r0, #1
   {  GUI_ReadPoint(i, y0, &bakc);
 8001bf6:	b2ce      	uxtb	r6, r1
   for(i=x0+1; i<GUI_LCM_XMAX; i++)
 8001bf8:	2cff      	cmp	r4, #255	; 0xff
 8001bfa:	d902      	bls.n	8001c02 <GUI_ReadRightPoint+0x12>
      if( GUI_CmpColor(bakc,color)==0 ) return(i-1);	// 若找到，則返回
   }
   return(GUI_LCM_XMAX);
 8001bfc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c00:	e00b      	b.n	8001c1a <GUI_ReadRightPoint+0x2a>
   {  GUI_ReadPoint(i, y0, &bakc);
 8001c02:	f10d 0207 	add.w	r2, sp, #7
 8001c06:	4631      	mov	r1, r6
 8001c08:	b2a0      	uxth	r0, r4
 8001c0a:	f000 fad6 	bl	80021ba <GUI_ReadPoint>
      if( GUI_CmpColor(bakc,color)==0 ) return(i-1);	// 若找到，則返回
 8001c0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c12:	406b      	eors	r3, r5
 8001c14:	07db      	lsls	r3, r3, #31
 8001c16:	d502      	bpl.n	8001c1e <GUI_ReadRightPoint+0x2e>
 8001c18:	1e60      	subs	r0, r4, #1
}
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd70      	pop	{r4, r5, r6, pc}
   for(i=x0+1; i<GUI_LCM_XMAX; i++)
 8001c1e:	3401      	adds	r4, #1
 8001c20:	e7ea      	b.n	8001bf8 <GUI_ReadRightPoint+0x8>

08001c22 <GUI_CmpPointColor>:
*          color	顏色值
* 出口參數：返回1表示相同，返回0表示不相同。
* 說明：
****************************************************************************/
int  GUI_CmpPointColor(uint32_t x, uint32_t y, TCOLOR color)
{  TCOLOR  bakc;
 8001c22:	b513      	push	{r0, r1, r4, lr}
 8001c24:	4614      	mov	r4, r2
   
   GUI_ReadPoint(x, y, &bakc);
 8001c26:	b2c9      	uxtb	r1, r1
 8001c28:	f10d 0207 	add.w	r2, sp, #7
 8001c2c:	b280      	uxth	r0, r0
 8001c2e:	f000 fac4 	bl	80021ba <GUI_ReadPoint>
   return( GUI_CmpColor(bakc,color) );	
 8001c32:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001c36:	4060      	eors	r0, r4
 8001c38:	43c0      	mvns	r0, r0
}
 8001c3a:	f000 0001 	and.w	r0, r0, #1
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd10      	pop	{r4, pc}

08001c42 <GUI_FloodFill>:
*           color	填充顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍、指定點不在封閉圖形內。
****************************************************************************/
void  GUI_FloodFill(uint32_t x0, uint32_t y0, TCOLOR color)
{  PointXY  down_point[DOWNP_N];	// 定義向下填充轉折點緩衝區
 8001c42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   
   uint32_t  x0_bak, y0_bak;
   uint32_t  x1_bak;
   
   /* 參數過濾 */
   if(x0>=GUI_LCM_XMAX) return;
 8001c46:	28ff      	cmp	r0, #255	; 0xff
{  PointXY  down_point[DOWNP_N];	// 定義向下填充轉折點緩衝區
 8001c48:	b0db      	sub	sp, #364	; 0x16c
 8001c4a:	4606      	mov	r6, r0
 8001c4c:	460d      	mov	r5, r1
 8001c4e:	9202      	str	r2, [sp, #8]
   if(x0>=GUI_LCM_XMAX) return;
 8001c50:	f200 80f2 	bhi.w	8001e38 <GUI_FloodFill+0x1f6>
   if(y0>=GUI_LCM_YMAX) return;
 8001c54:	293f      	cmp	r1, #63	; 0x3f
 8001c56:	f200 80ef 	bhi.w	8001e38 <GUI_FloodFill+0x1f6>
   
   /* 判斷指定點是否為填充顏色，若是則直接返回 */
   GUI_ReadPoint(x0, y0, &fcolor);						// 取得填充點的顏色
 8001c5a:	b2cb      	uxtb	r3, r1
 8001c5c:	f10d 0427 	add.w	r4, sp, #39	; 0x27
 8001c60:	4622      	mov	r2, r4
 8001c62:	4619      	mov	r1, r3
 8001c64:	b280      	uxth	r0, r0
 8001c66:	9303      	str	r3, [sp, #12]
 8001c68:	f000 faa7 	bl	80021ba <GUI_ReadPoint>
   if( GUI_CmpColor(fcolor,color)!=0 ) return;
 8001c6c:	7822      	ldrb	r2, [r4, #0]
 8001c6e:	9b02      	ldr	r3, [sp, #8]
 8001c70:	4053      	eors	r3, r2
 8001c72:	07db      	lsls	r3, r3, #31
 8001c74:	f140 80e0 	bpl.w	8001e38 <GUI_FloodFill+0x1f6>
   
   y0_bak = y0;
   x0_bak = xx0 = GUI_ReadLeftPoint(x0, y0, fcolor);		// 找出當前y坐標上的最左邊的點
 8001c78:	4629      	mov	r1, r5
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f7ff ff9a 	bl	8001bb4 <GUI_ReadLeftPoint>
   x1_bak = xx1 = GUI_ReadRightPoint(x0, y0, fcolor);		// 找出當前y坐標上的最右邊的點
 8001c80:	7822      	ldrb	r2, [r4, #0]
   x0_bak = xx0 = GUI_ReadLeftPoint(x0, y0, fcolor);		// 找出當前y坐標上的最左邊的點
 8001c82:	9004      	str	r0, [sp, #16]
   x1_bak = xx1 = GUI_ReadRightPoint(x0, y0, fcolor);		// 找出當前y坐標上的最右邊的點
 8001c84:	4629      	mov	r1, r5
 8001c86:	4630      	mov	r0, r6
 8001c88:	f7ff ffb2 	bl	8001bf0 <GUI_ReadRightPoint>
   down_point[0].x = up_point[0].x = (xx1 + xx0)/2;
 8001c8c:	9b04      	ldr	r3, [sp, #16]
   x1_bak = xx1 = GUI_ReadRightPoint(x0, y0, fcolor);		// 找出當前y坐標上的最右邊的點
 8001c8e:	9005      	str	r0, [sp, #20]
   down_point[0].x = up_point[0].x = (xx1 + xx0)/2;
 8001c90:	4403      	add	r3, r0
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	9332      	str	r3, [sp, #200]	; 0xc8
 8001c96:	930a      	str	r3, [sp, #40]	; 0x28
   down_point[0].y = up_point[0].y = y0;
   down_no = 1;
   up_no = 1;
 8001c98:	2301      	movs	r3, #1
   down_point[0].y = up_point[0].y = y0;
 8001c9a:	9533      	str	r5, [sp, #204]	; 0xcc
 8001c9c:	950b      	str	r5, [sp, #44]	; 0x2c
   up_no = 1;
 8001c9e:	9301      	str	r3, [sp, #4]
   down_no = 1;
 8001ca0:	9300      	str	r3, [sp, #0]
   					
   /* 開始向上填充 */
FILL_UP:  
   if(0==up_no) goto FILL_DOWN;							// 若向下掃瞄已完成，則退出
 8001ca2:	9b01      	ldr	r3, [sp, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80b8 	beq.w	8001e1a <GUI_FloodFill+0x1d8>
   xx = up_point[up_no-1].x;							// 否則取出下一折點
 8001caa:	3b01      	subs	r3, #1
 8001cac:	aa5a      	add	r2, sp, #360	; 0x168
 8001cae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001cb2:	f852 5ca0 	ldr.w	r5, [r2, #-160]
   yy = up_point[up_no-1].y;
 8001cb6:	f852 bc9c 	ldr.w	fp, [r2, #-156]
   up_no--; 
 8001cba:	b2db      	uxtb	r3, r3
   xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001cbc:	7822      	ldrb	r2, [r4, #0]
 8001cbe:	4659      	mov	r1, fp
 8001cc0:	4628      	mov	r0, r5
   up_no--; 
 8001cc2:	9301      	str	r3, [sp, #4]
   xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001cc4:	f7ff ff76 	bl	8001bb4 <GUI_ReadLeftPoint>
   xx1 = GUI_ReadRightPoint(xx, yy, fcolor);
 8001cc8:	7822      	ldrb	r2, [r4, #0]
   xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001cca:	4606      	mov	r6, r0
   xx1 = GUI_ReadRightPoint(xx, yy, fcolor);
 8001ccc:	4659      	mov	r1, fp
 8001cce:	4628      	mov	r0, r5
 8001cd0:	f7ff ff8e 	bl	8001bf0 <GUI_ReadRightPoint>
 8001cd4:	4680      	mov	r8, r0
   while(1) 
   {  yy += 1;											// 中心點向上一點
 8001cd6:	f10b 0701 	add.w	r7, fp, #1
       
      if( GUI_CmpPointColor(xx, yy, fcolor)==0 )					
 8001cda:	7822      	ldrb	r2, [r4, #0]
 8001cdc:	4639      	mov	r1, r7
 8001cde:	4628      	mov	r0, r5
 8001ce0:	f7ff ff9f 	bl	8001c22 <GUI_CmpPointColor>
 8001ce4:	b950      	cbnz	r0, 8001cfc <GUI_FloodFill+0xba>
 8001ce6:	4635      	mov	r5, r6
      {  /* 判斷此點是否為終點，若是則退出此次循環 */
         for(i=xx0; i<=xx1; i++)     					// 查找此行是否有需填充點
 8001ce8:	45a8      	cmp	r8, r5
 8001cea:	d3da      	bcc.n	8001ca2 <GUI_FloodFill+0x60>
         {  if( GUI_CmpPointColor(i, yy, fcolor)!=0 ) break;
 8001cec:	7822      	ldrb	r2, [r4, #0]
 8001cee:	4639      	mov	r1, r7
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	f7ff ff96 	bl	8001c22 <GUI_CmpPointColor>
 8001cf6:	b908      	cbnz	r0, 8001cfc <GUI_FloodFill+0xba>
         for(i=xx0; i<=xx1; i++)     					// 查找此行是否有需填充點
 8001cf8:	3501      	adds	r5, #1
 8001cfa:	e7f5      	b.n	8001ce8 <GUI_FloodFill+0xa6>
         xx = i;										// 更新xx到要填充的有效區域內
         xx1 = GUI_ReadRightPoint(xx, yy, fcolor);
      }
      else
      {  /* 找出新一行中最右邊的點 */
         xx1 = GUI_ReadRightPoint(xx, yy, fcolor);
 8001cfc:	7822      	ldrb	r2, [r4, #0]
 8001cfe:	4639      	mov	r1, r7
 8001d00:	4628      	mov	r0, r5
 8001d02:	f7ff ff75 	bl	8001bf0 <GUI_ReadRightPoint>
      }
      xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001d06:	7822      	ldrb	r2, [r4, #0]
         xx1 = GUI_ReadRightPoint(xx, yy, fcolor);
 8001d08:	4680      	mov	r8, r0
      xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001d0a:	4639      	mov	r1, r7
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7ff ff51 	bl	8001bb4 <GUI_ReadLeftPoint>
      
      /* 向下折點。使用y0作為折點變量，x0作為上一折點變量 */
      if(down_no<DOWNP_N)
 8001d12:	9b00      	ldr	r3, [sp, #0]
      xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001d14:	4606      	mov	r6, r0
      if(down_no<DOWNP_N)
 8001d16:	2b13      	cmp	r3, #19
 8001d18:	d805      	bhi.n	8001d26 <GUI_FloodFill+0xe4>
      {  y0 = xx0;
         x0 = y0-1;
         for(i=y0; i<=xx1; i++)
 8001d1a:	4605      	mov	r5, r0
      {  y0 = xx0;
 8001d1c:	4681      	mov	r9, r0
         x0 = y0-1;
 8001d1e:	f100 3aff 	add.w	sl, r0, #4294967295
         for(i=y0; i<=xx1; i++)
 8001d22:	45a8      	cmp	r8, r5
 8001d24:	d216      	bcs.n	8001d54 <GUI_FloodFill+0x112>
            if(down_no>=DOWNP_N) break;					// 若緩衝區已保存滿，則退出
         } // end  of for(i=y0+1; i<xx1; i++)
      } // end of if(down_no<DOWNP_N)
      
      xx = (xx1 + xx0)/2;								// 更新中心點
      GUI_HLine(xx0, yy, xx1, color);					// 填充一行
 8001d26:	9b02      	ldr	r3, [sp, #8]
 8001d28:	fa1f f288 	uxth.w	r2, r8
 8001d2c:	b2f9      	uxtb	r1, r7
 8001d2e:	b2b0      	uxth	r0, r6
 8001d30:	f000 fa4b 	bl	80021ca <GUI_HLine>
      
      /* 向上折點。使用y0作為折點變量，x0作為上一折點變量 */
      if(up_no<UPP_N)
 8001d34:	9b01      	ldr	r3, [sp, #4]
      xx = (xx1 + xx0)/2;								// 更新中心點
 8001d36:	eb08 0506 	add.w	r5, r8, r6
      if(up_no<UPP_N)
 8001d3a:	2b13      	cmp	r3, #19
      xx = (xx1 + xx0)/2;								// 更新中心點
 8001d3c:	ea4f 0555 	mov.w	r5, r5, lsr #1
      if(up_no<UPP_N)
 8001d40:	d806      	bhi.n	8001d50 <GUI_FloodFill+0x10e>
      {  y0 = xx0;
         x0 = y0-1;
         for(i=y0; i<=xx1; i++)
 8001d42:	46b1      	mov	r9, r6
      {  y0 = xx0;
 8001d44:	46b2      	mov	sl, r6
         x0 = y0-1;
 8001d46:	1e73      	subs	r3, r6, #1
         {  if( GUI_CmpPointColor(i, yy+1, fcolor)==0 )	// 更新折點
 8001d48:	f10b 0b02 	add.w	fp, fp, #2
         for(i=y0; i<=xx1; i++)
 8001d4c:	45c8      	cmp	r8, r9
 8001d4e:	d21f      	bcs.n	8001d90 <GUI_FloodFill+0x14e>
   down_no = 1;
 8001d50:	46bb      	mov	fp, r7
 8001d52:	e7c0      	b.n	8001cd6 <GUI_FloodFill+0x94>
         {  if( GUI_CmpPointColor(i, yy-1, fcolor)==0 )	// 更新折點
 8001d54:	7822      	ldrb	r2, [r4, #0]
 8001d56:	4659      	mov	r1, fp
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f7ff ff62 	bl	8001c22 <GUI_CmpPointColor>
 8001d5e:	b170      	cbz	r0, 8001d7e <GUI_FloodFill+0x13c>
            {  if(x0!=y0)								// 找到新的折點
 8001d60:	45ca      	cmp	sl, r9
 8001d62:	d00a      	beq.n	8001d7a <GUI_FloodFill+0x138>
                  down_point[down_no].x = i;
 8001d64:	9b00      	ldr	r3, [sp, #0]
 8001d66:	aa0a      	add	r2, sp, #40	; 0x28
 8001d68:	f842 5033 	str.w	r5, [r2, r3, lsl #3]
                  down_point[down_no].y = yy;
 8001d6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001d70:	605f      	str	r7, [r3, #4]
                  down_no++;
 8001d72:	9b00      	ldr	r3, [sp, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	e001      	b.n	8001d82 <GUI_FloodFill+0x140>
 8001d7e:	462b      	mov	r3, r5
 8001d80:	46d1      	mov	r9, sl
            if(down_no>=DOWNP_N) break;					// 若緩衝區已保存滿，則退出
 8001d82:	9a00      	ldr	r2, [sp, #0]
 8001d84:	2a13      	cmp	r2, #19
 8001d86:	d8ce      	bhi.n	8001d26 <GUI_FloodFill+0xe4>
         for(i=y0; i<=xx1; i++)
 8001d88:	46ca      	mov	sl, r9
 8001d8a:	3501      	adds	r5, #1
 8001d8c:	4699      	mov	r9, r3
 8001d8e:	e7c8      	b.n	8001d22 <GUI_FloodFill+0xe0>
         {  if( GUI_CmpPointColor(i, yy+1, fcolor)==0 )	// 更新折點
 8001d90:	7822      	ldrb	r2, [r4, #0]
 8001d92:	4659      	mov	r1, fp
 8001d94:	4648      	mov	r0, r9
 8001d96:	9306      	str	r3, [sp, #24]
 8001d98:	f7ff ff43 	bl	8001c22 <GUI_CmpPointColor>
 8001d9c:	9b06      	ldr	r3, [sp, #24]
 8001d9e:	b178      	cbz	r0, 8001dc0 <GUI_FloodFill+0x17e>
            {  y0 = i;										
            }
            else
            {  if(x0!=y0)								// 找到新的折點
 8001da0:	4553      	cmp	r3, sl
 8001da2:	d00b      	beq.n	8001dbc <GUI_FloodFill+0x17a>
               {  x0 = y0;
                  up_point[up_no].x = i;
 8001da4:	9b01      	ldr	r3, [sp, #4]
 8001da6:	aa5a      	add	r2, sp, #360	; 0x168
 8001da8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001dac:	f843 9ca0 	str.w	r9, [r3, #-160]
                  up_point[up_no].y = yy;
 8001db0:	f843 7c9c 	str.w	r7, [r3, #-156]
                  up_no++;
 8001db4:	9b01      	ldr	r3, [sp, #4]
 8001db6:	3301      	adds	r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	4652      	mov	r2, sl
 8001dbe:	e001      	b.n	8001dc4 <GUI_FloodFill+0x182>
 8001dc0:	464a      	mov	r2, r9
 8001dc2:	469a      	mov	sl, r3
               }
            }
            if(up_no>=UPP_N) break;						// 若緩衝區已保存滿，則退出
 8001dc4:	9b01      	ldr	r3, [sp, #4]
 8001dc6:	2b13      	cmp	r3, #19
 8001dc8:	d8c2      	bhi.n	8001d50 <GUI_FloodFill+0x10e>
         for(i=y0; i<=xx1; i++)
 8001dca:	4653      	mov	r3, sl
 8001dcc:	f109 0901 	add.w	r9, r9, #1
 8001dd0:	4692      	mov	sl, r2
 8001dd2:	e7bb      	b.n	8001d4c <GUI_FloodFill+0x10a>
      }
      else
      {  goto FILL_UP;
      }
   }
   xx = down_point[down_no-1].x;						// 否則取出下一折點
 8001dd4:	9b00      	ldr	r3, [sp, #0]
 8001dd6:	af0a      	add	r7, sp, #40	; 0x28
 8001dd8:	3b01      	subs	r3, #1
   yy = down_point[down_no-1].y;
 8001dda:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   xx = down_point[down_no-1].x;						// 否則取出下一折點
 8001dde:	f857 5033 	ldr.w	r5, [r7, r3, lsl #3]
   yy = down_point[down_no-1].y;
 8001de2:	f8d2 b004 	ldr.w	fp, [r2, #4]
   down_no--;
 8001de6:	b2db      	uxtb	r3, r3
   xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001de8:	7822      	ldrb	r2, [r4, #0]
 8001dea:	4659      	mov	r1, fp
 8001dec:	4628      	mov	r0, r5
   down_no--;
 8001dee:	9300      	str	r3, [sp, #0]
   xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001df0:	f7ff fee0 	bl	8001bb4 <GUI_ReadLeftPoint>
   xx1 = GUI_ReadRightPoint(xx, yy, fcolor);
 8001df4:	7822      	ldrb	r2, [r4, #0]
   xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001df6:	4606      	mov	r6, r0
   xx1 = GUI_ReadRightPoint(xx, yy, fcolor);
 8001df8:	4659      	mov	r1, fp
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f7ff fef8 	bl	8001bf0 <GUI_ReadRightPoint>
 8001e00:	4680      	mov	r8, r0
            {  y0 = i;										
            }
            else
            {  if(x0!=y0)								// 找到新的折點
               {  x0 = y0;
                  down_point[down_no].x = i;
 8001e02:	9706      	str	r7, [sp, #24]
   {  yy -= 1;											// 中心點向上一點 
 8001e04:	f10b 37ff 	add.w	r7, fp, #4294967295
      if( GUI_CmpPointColor(xx, yy, fcolor)==0 )					
 8001e08:	7822      	ldrb	r2, [r4, #0]
 8001e0a:	4639      	mov	r1, r7
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f7ff ff08 	bl	8001c22 <GUI_CmpPointColor>
 8001e12:	b9e0      	cbnz	r0, 8001e4e <GUI_FloodFill+0x20c>
 8001e14:	4635      	mov	r5, r6
         for(i=xx0; i<=xx1; i++)     					// 查找下一行是否有需填充點
 8001e16:	45a8      	cmp	r8, r5
 8001e18:	d211      	bcs.n	8001e3e <GUI_FloodFill+0x1fc>
   if(0==down_no) 
 8001e1a:	9b00      	ldr	r3, [sp, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1d9      	bne.n	8001dd4 <GUI_FloodFill+0x192>
   {  if(0==up_no) 
 8001e20:	9b01      	ldr	r3, [sp, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f47f af3d 	bne.w	8001ca2 <GUI_FloodFill+0x60>
      {  GUI_HLine(x0_bak, y0_bak, x1_bak, color);
 8001e28:	9b02      	ldr	r3, [sp, #8]
 8001e2a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001e2e:	9903      	ldr	r1, [sp, #12]
 8001e30:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8001e34:	f000 f9c9 	bl	80021ca <GUI_HLine>
      
   } // end of while(1) 
   
//   GUI_HLine(x0_bak, y0_bak, x1_bak, color);
	 
}
 8001e38:	b05b      	add	sp, #364	; 0x16c
 8001e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         {  if( GUI_CmpPointColor(i, yy, fcolor)!=0 ) break;
 8001e3e:	7822      	ldrb	r2, [r4, #0]
 8001e40:	4639      	mov	r1, r7
 8001e42:	4628      	mov	r0, r5
 8001e44:	f7ff feed 	bl	8001c22 <GUI_CmpPointColor>
 8001e48:	b908      	cbnz	r0, 8001e4e <GUI_FloodFill+0x20c>
         for(i=xx0; i<=xx1; i++)     					// 查找下一行是否有需填充點
 8001e4a:	3501      	adds	r5, #1
 8001e4c:	e7e3      	b.n	8001e16 <GUI_FloodFill+0x1d4>
         xx1 = GUI_ReadRightPoint(xx, yy, fcolor);
 8001e4e:	7822      	ldrb	r2, [r4, #0]
 8001e50:	4639      	mov	r1, r7
 8001e52:	4628      	mov	r0, r5
 8001e54:	f7ff fecc 	bl	8001bf0 <GUI_ReadRightPoint>
      xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001e58:	7822      	ldrb	r2, [r4, #0]
         xx1 = GUI_ReadRightPoint(xx, yy, fcolor);
 8001e5a:	4680      	mov	r8, r0
      xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001e5c:	4639      	mov	r1, r7
 8001e5e:	4628      	mov	r0, r5
 8001e60:	f7ff fea8 	bl	8001bb4 <GUI_ReadLeftPoint>
      if(up_no<UPP_N)
 8001e64:	9b01      	ldr	r3, [sp, #4]
      xx0 = GUI_ReadLeftPoint(xx, yy, fcolor);
 8001e66:	4606      	mov	r6, r0
      if(up_no<UPP_N)
 8001e68:	2b13      	cmp	r3, #19
 8001e6a:	d805      	bhi.n	8001e78 <GUI_FloodFill+0x236>
         for(i=y0; i<=xx1; i++)
 8001e6c:	4605      	mov	r5, r0
      {  y0 = xx0;
 8001e6e:	4681      	mov	r9, r0
         x0 = y0-1;
 8001e70:	f100 3aff 	add.w	sl, r0, #4294967295
         for(i=y0; i<=xx1; i++)
 8001e74:	45a8      	cmp	r8, r5
 8001e76:	d216      	bcs.n	8001ea6 <GUI_FloodFill+0x264>
      GUI_HLine(xx0, yy, xx1, color);					// 填充一行
 8001e78:	9b02      	ldr	r3, [sp, #8]
 8001e7a:	fa1f f288 	uxth.w	r2, r8
 8001e7e:	b2f9      	uxtb	r1, r7
 8001e80:	b2b0      	uxth	r0, r6
 8001e82:	f000 f9a2 	bl	80021ca <GUI_HLine>
      if(down_no<DOWNP_N)
 8001e86:	9b00      	ldr	r3, [sp, #0]
      xx = (xx1 + xx0)/2; 
 8001e88:	eb08 0506 	add.w	r5, r8, r6
      if(down_no<DOWNP_N)
 8001e8c:	2b13      	cmp	r3, #19
      xx = (xx1 + xx0)/2; 
 8001e8e:	ea4f 0555 	mov.w	r5, r5, lsr #1
      if(down_no<DOWNP_N)
 8001e92:	d806      	bhi.n	8001ea2 <GUI_FloodFill+0x260>
         for(i=y0; i<=xx1; i++)
 8001e94:	46b1      	mov	r9, r6
      {  y0 = xx0;
 8001e96:	46b2      	mov	sl, r6
         x0 = y0-1;
 8001e98:	1e73      	subs	r3, r6, #1
         {  if( GUI_CmpPointColor(i, yy-1, fcolor)==0 )	// 更新折點
 8001e9a:	f1ab 0b02 	sub.w	fp, fp, #2
         for(i=y0; i<=xx1; i++)
 8001e9e:	45c8      	cmp	r8, r9
 8001ea0:	d220      	bcs.n	8001ee4 <GUI_FloodFill+0x2a2>
         for(i=y0; i<=xx1; i++)
 8001ea2:	46bb      	mov	fp, r7
 8001ea4:	e7ae      	b.n	8001e04 <GUI_FloodFill+0x1c2>
         {  if( GUI_CmpPointColor(i, yy+1, fcolor)==0 )	// 更新折點
 8001ea6:	7822      	ldrb	r2, [r4, #0]
 8001ea8:	4659      	mov	r1, fp
 8001eaa:	4628      	mov	r0, r5
 8001eac:	f7ff feb9 	bl	8001c22 <GUI_CmpPointColor>
 8001eb0:	b178      	cbz	r0, 8001ed2 <GUI_FloodFill+0x290>
            {  if(x0!=y0)								// 找到新的折點
 8001eb2:	45ca      	cmp	sl, r9
 8001eb4:	d00b      	beq.n	8001ece <GUI_FloodFill+0x28c>
                  up_point[up_no].x = i;
 8001eb6:	9b01      	ldr	r3, [sp, #4]
 8001eb8:	aa5a      	add	r2, sp, #360	; 0x168
 8001eba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001ebe:	f843 5ca0 	str.w	r5, [r3, #-160]
                  up_point[up_no].y = yy;
 8001ec2:	f843 7c9c 	str.w	r7, [r3, #-156]
                  up_no++;
 8001ec6:	9b01      	ldr	r3, [sp, #4]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	464b      	mov	r3, r9
 8001ed0:	e001      	b.n	8001ed6 <GUI_FloodFill+0x294>
 8001ed2:	462b      	mov	r3, r5
 8001ed4:	46d1      	mov	r9, sl
            if(up_no>=UPP_N) break;						// 若緩衝區已保存滿，則退出
 8001ed6:	9a01      	ldr	r2, [sp, #4]
 8001ed8:	2a13      	cmp	r2, #19
 8001eda:	d8cd      	bhi.n	8001e78 <GUI_FloodFill+0x236>
         for(i=y0; i<=xx1; i++)
 8001edc:	46ca      	mov	sl, r9
 8001ede:	3501      	adds	r5, #1
 8001ee0:	4699      	mov	r9, r3
 8001ee2:	e7c7      	b.n	8001e74 <GUI_FloodFill+0x232>
         {  if( GUI_CmpPointColor(i, yy-1, fcolor)==0 )	// 更新折點
 8001ee4:	7822      	ldrb	r2, [r4, #0]
 8001ee6:	4659      	mov	r1, fp
 8001ee8:	4648      	mov	r0, r9
 8001eea:	9307      	str	r3, [sp, #28]
 8001eec:	f7ff fe99 	bl	8001c22 <GUI_CmpPointColor>
 8001ef0:	9b07      	ldr	r3, [sp, #28]
 8001ef2:	b170      	cbz	r0, 8001f12 <GUI_FloodFill+0x2d0>
            {  if(x0!=y0)								// 找到新的折點
 8001ef4:	4553      	cmp	r3, sl
 8001ef6:	d00a      	beq.n	8001f0e <GUI_FloodFill+0x2cc>
                  down_point[down_no].x = i;
 8001ef8:	9a00      	ldr	r2, [sp, #0]
 8001efa:	9b06      	ldr	r3, [sp, #24]
 8001efc:	f843 9032 	str.w	r9, [r3, r2, lsl #3]
                  down_point[down_no].y = yy;
 8001f00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f04:	605f      	str	r7, [r3, #4]
                  down_no++;
 8001f06:	4613      	mov	r3, r2
 8001f08:	3301      	adds	r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	4652      	mov	r2, sl
 8001f10:	e001      	b.n	8001f16 <GUI_FloodFill+0x2d4>
 8001f12:	464a      	mov	r2, r9
 8001f14:	469a      	mov	sl, r3
            if(down_no>=DOWNP_N) break;					// 若緩衝區已保存滿，則退出
 8001f16:	9b00      	ldr	r3, [sp, #0]
 8001f18:	2b13      	cmp	r3, #19
 8001f1a:	d8c2      	bhi.n	8001ea2 <GUI_FloodFill+0x260>
         for(i=y0; i<=xx1; i++)
 8001f1c:	4653      	mov	r3, sl
 8001f1e:	f109 0901 	add.w	r9, r9, #1
 8001f22:	4692      	mov	sl, r2
 8001f24:	e7bb      	b.n	8001e9e <GUI_FloodFill+0x25c>

08001f26 <GUI_Arc4>:
*           color	顯示顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_Arc4(uint32_t x, uint32_t y, uint32_t r, uint8_t angle, TCOLOR color)
{  int32_t  draw_x, draw_y;
 8001f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f2a:	460f      	mov	r7, r1
 8001f2c:	f89d 5020 	ldrb.w	r5, [sp, #32]

   int32_t  op_x, op_y;
   int32_t  op_2rr;
   
   if(r==0) return;
 8001f30:	4614      	mov	r4, r2
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	f000 8103 	beq.w	800213e <GUI_Arc4+0x218>
   
   op_2rr = 2*r*r;										// 計算r平方乖以2
 8001f38:	fb02 f602 	mul.w	r6, r2, r2
   
   switch(angle)
 8001f3c:	3b01      	subs	r3, #1
   op_2rr = 2*r*r;										// 計算r平方乖以2
 8001f3e:	0076      	lsls	r6, r6, #1
   switch(angle)
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	f200 80fc 	bhi.w	800213e <GUI_Arc4+0x218>
 8001f46:	e8df f003 	tbb	[pc, r3]
 8001f4a:	4602      	.short	0x4602
 8001f4c:	be82      	.short	0xbe82
   {  case  1:
            draw_x = x+r;
            draw_y = y;
            
            op_x = r;
            op_y = 0;
 8001f4e:	f04f 0900 	mov.w	r9, #0
            draw_x = x+r;
 8001f52:	eb04 0800 	add.w	r8, r4, r0
 
            while(1)
            {  GUI_Point(draw_x, draw_y, color);		// 開始畫圖
 8001f56:	eb09 0107 	add.w	r1, r9, r7
 8001f5a:	462a      	mov	r2, r5
 8001f5c:	b2c9      	uxtb	r1, r1
 8001f5e:	fa1f f088 	uxth.w	r0, r8
 8001f62:	f000 f927 	bl	80021b4 <GUI_Point>
                 
               /* 計算下一點 */
               op_y++;
               draw_y++;
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr - 2*op_x +1)>0 ) 	// 使用逐點比較法實現畫圓弧
 8001f66:	0063      	lsls	r3, r4, #1
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4363      	muls	r3, r4
               op_y++;
 8001f6c:	f109 0901 	add.w	r9, r9, #1
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr - 2*op_x +1)>0 ) 	// 使用逐點比較法實現畫圓弧
 8001f70:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8001f74:	fb09 3302 	mla	r3, r9, r2, r3
 8001f78:	1b9b      	subs	r3, r3, r6
 8001f7a:	1a5b      	subs	r3, r3, r1
 8001f7c:	2b00      	cmp	r3, #0
               {  op_x--;
 8001f7e:	bfa4      	itt	ge
 8001f80:	f104 34ff 	addge.w	r4, r4, #4294967295
                  draw_x--;
 8001f84:	f108 38ff 	addge.w	r8, r8, #4294967295
               }
               if(op_y>=op_x) break;
 8001f88:	454c      	cmp	r4, r9
 8001f8a:	eb07 0a09 	add.w	sl, r7, r9
 8001f8e:	dce2      	bgt.n	8001f56 <GUI_Arc4+0x30>
            }
            while(1)
            {  GUI_Point(draw_x, draw_y, color);		// 開始畫圖
 8001f90:	fa5f f18a 	uxtb.w	r1, sl
 8001f94:	462a      	mov	r2, r5
 8001f96:	fa1f f088 	uxth.w	r0, r8
 8001f9a:	f000 f90b 	bl	80021b4 <GUI_Point>
                 
               /* 計算下一點 */
               op_x--;
               draw_x--;
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr + 2*op_y +1)<=0 ) 	// 使用逐點比較法實現畫圓弧
 8001f9e:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8001fa2:	fb02 f109 	mul.w	r1, r2, r9
               op_x--;
 8001fa6:	3c01      	subs	r4, #1
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr + 2*op_y +1)<=0 ) 	// 使用逐點比較法實現畫圓弧
 8001fa8:	0063      	lsls	r3, r4, #1
 8001faa:	fb04 1303 	mla	r3, r4, r3, r1
 8001fae:	1b9b      	subs	r3, r3, r6
 8001fb0:	42d3      	cmn	r3, r2
               {  op_y++;
 8001fb2:	bf44      	itt	mi
 8001fb4:	f109 0901 	addmi.w	r9, r9, #1
                  draw_y++;
 8001fb8:	f10a 0a01 	addmi.w	sl, sl, #1
               }
               if(op_x<=0)
 8001fbc:	2c00      	cmp	r4, #0
               draw_x--;
 8001fbe:	f108 38ff 	add.w	r8, r8, #4294967295
               if(op_x<=0)
 8001fc2:	dce5      	bgt.n	8001f90 <GUI_Arc4+0x6a>
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr + 2*op_y +1)<=0 ) 	// 使用逐點比較法實現畫圓弧
               {  op_y++;
                  draw_y--;
               }
               if(op_x<=0)
               {  GUI_Point(draw_x, draw_y, color);		// 開始畫圖
 8001fc4:	462a      	mov	r2, r5
 8001fc6:	fa5f f18a 	uxtb.w	r1, sl
 8001fca:	fa1f f088 	uxth.w	r0, r8
      default:
            break;
      
   }

}
 8001fce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
               {  GUI_Point(draw_x, draw_y, color);		// 開始畫圖
 8001fd2:	f000 b8ef 	b.w	80021b4 <GUI_Point>
            op_y = 0;
 8001fd6:	f04f 0900 	mov.w	r9, #0
            draw_x = x-r;
 8001fda:	eba0 0804 	sub.w	r8, r0, r4
            {  GUI_Point(draw_x, draw_y, color);		// 開始畫圖
 8001fde:	eb09 0107 	add.w	r1, r9, r7
 8001fe2:	462a      	mov	r2, r5
 8001fe4:	b2c9      	uxtb	r1, r1
 8001fe6:	fa1f f088 	uxth.w	r0, r8
 8001fea:	f000 f8e3 	bl	80021b4 <GUI_Point>
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr - 2*op_x +1)>0 ) 	// 使用逐點比較法實現畫圓弧
 8001fee:	0063      	lsls	r3, r4, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4363      	muls	r3, r4
               op_y++;
 8001ff4:	f109 0901 	add.w	r9, r9, #1
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr - 2*op_x +1)>0 ) 	// 使用逐點比較法實現畫圓弧
 8001ff8:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8001ffc:	fb09 3302 	mla	r3, r9, r2, r3
 8002000:	1b9b      	subs	r3, r3, r6
 8002002:	1a5b      	subs	r3, r3, r1
 8002004:	2b00      	cmp	r3, #0
               {  op_x--;
 8002006:	bfa4      	itt	ge
 8002008:	f104 34ff 	addge.w	r4, r4, #4294967295
                  draw_x++;
 800200c:	f108 0801 	addge.w	r8, r8, #1
               if(op_y>=op_x) break;
 8002010:	454c      	cmp	r4, r9
 8002012:	eb07 0a09 	add.w	sl, r7, r9
 8002016:	dce2      	bgt.n	8001fde <GUI_Arc4+0xb8>
            {  GUI_Point(draw_x, draw_y, color);		// 開始畫圖
 8002018:	fa5f f18a 	uxtb.w	r1, sl
 800201c:	462a      	mov	r2, r5
 800201e:	fa1f f088 	uxth.w	r0, r8
 8002022:	f000 f8c7 	bl	80021b4 <GUI_Point>
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr + 2*op_y +1)<=0 ) 	// 使用逐點比較法實現畫圓弧
 8002026:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800202a:	fb02 f109 	mul.w	r1, r2, r9
               op_x--;
 800202e:	3c01      	subs	r4, #1
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr + 2*op_y +1)<=0 ) 	// 使用逐點比較法實現畫圓弧
 8002030:	0063      	lsls	r3, r4, #1
 8002032:	fb04 1303 	mla	r3, r4, r3, r1
 8002036:	1b9b      	subs	r3, r3, r6
 8002038:	42d3      	cmn	r3, r2
               {  op_y++;
 800203a:	bf44      	itt	mi
 800203c:	f109 0901 	addmi.w	r9, r9, #1
                  draw_y++;
 8002040:	f10a 0a01 	addmi.w	sl, sl, #1
               if(op_x<=0)
 8002044:	2c00      	cmp	r4, #0
               draw_x++;
 8002046:	f108 0801 	add.w	r8, r8, #1
               if(op_x<=0)
 800204a:	dce5      	bgt.n	8002018 <GUI_Arc4+0xf2>
 800204c:	e7ba      	b.n	8001fc4 <GUI_Arc4+0x9e>
            op_y = 0;
 800204e:	f04f 0900 	mov.w	r9, #0
            draw_x = x-r;
 8002052:	eba0 0804 	sub.w	r8, r0, r4
            {  GUI_Point(draw_x, draw_y, color);		// 開始畫圖
 8002056:	eba7 0109 	sub.w	r1, r7, r9
 800205a:	462a      	mov	r2, r5
 800205c:	b2c9      	uxtb	r1, r1
 800205e:	fa1f f088 	uxth.w	r0, r8
 8002062:	f000 f8a7 	bl	80021b4 <GUI_Point>
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr - 2*op_x +1)>0 ) 	// 使用逐點比較法實現畫圓弧
 8002066:	0063      	lsls	r3, r4, #1
 8002068:	4619      	mov	r1, r3
 800206a:	4363      	muls	r3, r4
               op_y++;
 800206c:	f109 0901 	add.w	r9, r9, #1
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr - 2*op_x +1)>0 ) 	// 使用逐點比較法實現畫圓弧
 8002070:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8002074:	fb09 3302 	mla	r3, r9, r2, r3
 8002078:	1b9b      	subs	r3, r3, r6
 800207a:	1a5b      	subs	r3, r3, r1
 800207c:	2b00      	cmp	r3, #0
               {  op_x--;
 800207e:	bfa4      	itt	ge
 8002080:	f104 34ff 	addge.w	r4, r4, #4294967295
                  draw_x++;
 8002084:	f108 0801 	addge.w	r8, r8, #1
               if(op_y>=op_x) break;
 8002088:	454c      	cmp	r4, r9
 800208a:	eba7 0a09 	sub.w	sl, r7, r9
 800208e:	dce2      	bgt.n	8002056 <GUI_Arc4+0x130>
            {  GUI_Point(draw_x, draw_y, color);		// 開始畫圖
 8002090:	fa5f f18a 	uxtb.w	r1, sl
 8002094:	462a      	mov	r2, r5
 8002096:	fa1f f088 	uxth.w	r0, r8
 800209a:	f000 f88b 	bl	80021b4 <GUI_Point>
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr + 2*op_y +1)<=0 ) 	// 使用逐點比較法實現畫圓弧
 800209e:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80020a2:	fb02 f109 	mul.w	r1, r2, r9
               op_x--;
 80020a6:	3c01      	subs	r4, #1
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr + 2*op_y +1)<=0 ) 	// 使用逐點比較法實現畫圓弧
 80020a8:	0063      	lsls	r3, r4, #1
 80020aa:	fb04 1303 	mla	r3, r4, r3, r1
 80020ae:	1b9b      	subs	r3, r3, r6
 80020b0:	42d3      	cmn	r3, r2
               {  op_y++;
 80020b2:	bf44      	itt	mi
 80020b4:	f109 0901 	addmi.w	r9, r9, #1
                  draw_y--;
 80020b8:	f10a 3aff 	addmi.w	sl, sl, #4294967295
               if(op_x<=0)
 80020bc:	2c00      	cmp	r4, #0
               draw_x++;
 80020be:	f108 0801 	add.w	r8, r8, #1
               if(op_x<=0)
 80020c2:	dce5      	bgt.n	8002090 <GUI_Arc4+0x16a>
 80020c4:	e77e      	b.n	8001fc4 <GUI_Arc4+0x9e>
            op_y = 0;
 80020c6:	f04f 0900 	mov.w	r9, #0
            draw_x = x+r;
 80020ca:	eb04 0800 	add.w	r8, r4, r0
            {  GUI_Point(draw_x, draw_y, color);		// 開始畫圖
 80020ce:	eba7 0109 	sub.w	r1, r7, r9
 80020d2:	462a      	mov	r2, r5
 80020d4:	b2c9      	uxtb	r1, r1
 80020d6:	fa1f f088 	uxth.w	r0, r8
 80020da:	f000 f86b 	bl	80021b4 <GUI_Point>
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr - 2*op_x +1)>0 ) 	// 使用逐點比較法實現畫圓弧
 80020de:	0063      	lsls	r3, r4, #1
 80020e0:	4619      	mov	r1, r3
 80020e2:	4363      	muls	r3, r4
               op_y++;
 80020e4:	f109 0901 	add.w	r9, r9, #1
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr - 2*op_x +1)>0 ) 	// 使用逐點比較法實現畫圓弧
 80020e8:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80020ec:	fb09 3302 	mla	r3, r9, r2, r3
 80020f0:	1b9b      	subs	r3, r3, r6
 80020f2:	1a5b      	subs	r3, r3, r1
 80020f4:	2b00      	cmp	r3, #0
               {  op_x--;
 80020f6:	bfa4      	itt	ge
 80020f8:	f104 34ff 	addge.w	r4, r4, #4294967295
                  draw_x--;
 80020fc:	f108 38ff 	addge.w	r8, r8, #4294967295
               if(op_y>=op_x) break;
 8002100:	454c      	cmp	r4, r9
 8002102:	eba7 0a09 	sub.w	sl, r7, r9
 8002106:	dce2      	bgt.n	80020ce <GUI_Arc4+0x1a8>
            {  GUI_Point(draw_x, draw_y, color);		// 開始畫圖
 8002108:	fa5f f18a 	uxtb.w	r1, sl
 800210c:	462a      	mov	r2, r5
 800210e:	fa1f f088 	uxth.w	r0, r8
 8002112:	f000 f84f 	bl	80021b4 <GUI_Point>
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr + 2*op_y +1)<=0 ) 	// 使用逐點比較法實現畫圓弧
 8002116:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800211a:	fb02 f109 	mul.w	r1, r2, r9
               op_x--;
 800211e:	3c01      	subs	r4, #1
               if( (2*op_x*op_x + 2*op_y*op_y - op_2rr + 2*op_y +1)<=0 ) 	// 使用逐點比較法實現畫圓弧
 8002120:	0063      	lsls	r3, r4, #1
 8002122:	fb04 1303 	mla	r3, r4, r3, r1
 8002126:	1b9b      	subs	r3, r3, r6
 8002128:	42d3      	cmn	r3, r2
               {  op_y++;
 800212a:	bf44      	itt	mi
 800212c:	f109 0901 	addmi.w	r9, r9, #1
                  draw_y--;
 8002130:	f10a 3aff 	addmi.w	sl, sl, #4294967295
               if(op_x<=0)
 8002134:	2c00      	cmp	r4, #0
               draw_x--;
 8002136:	f108 38ff 	add.w	r8, r8, #4294967295
               if(op_x<=0)
 800213a:	dce5      	bgt.n	8002108 <GUI_Arc4+0x1e2>
 800213c:	e742      	b.n	8001fc4 <GUI_Arc4+0x9e>
 800213e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002142 <GUI_MenuItemDraw>:
* 功能：顯示條目菜單
* 入口參數：ico		圖標菜單句柄
* 出口參數：返回0表示操作失敗，返回1表示操作成功
****************************************************************************/
uint8_t  GUI_MenuItemDraw(uint32_t x, uint32_t y, MenuItem_Typedef *item)
{  
 8002142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( x>GUI_LCM_XMAX || y>GUI_LCM_YMAX) return(0);
	if(y<2) return(0);
 8002144:	f1a1 0e02 	sub.w	lr, r1, #2
 8002148:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
{  
 800214c:	4615      	mov	r5, r2
	if(y<2) return(0);
 800214e:	d82a      	bhi.n	80021a6 <GUI_MenuItemDraw+0x64>
	if(x<18) return(0);
 8002150:	f1a0 0412 	sub.w	r4, r0, #18
 8002154:	2cee      	cmp	r4, #238	; 0xee
 8002156:	d826      	bhi.n	80021a6 <GUI_MenuItemDraw+0x64>
	if( (item->title)==NULL )  return(0);
 8002158:	68d3      	ldr	r3, [r2, #12]
 800215a:	b333      	cbz	r3, 80021aa <GUI_MenuItemDraw+0x68>

	if(item->isSelect == false)
 800215c:	7893      	ldrb	r3, [r2, #2]
 800215e:	b28f      	uxth	r7, r1
 8002160:	b286      	uxth	r6, r0
 8002162:	b9a3      	cbnz	r3, 800218e <GUI_MenuItemDraw+0x4c>
	{  
		if(item->icoUnselected != NULL)
 8002164:	6892      	ldr	r2, [r2, #8]
 8002166:	b132      	cbz	r2, 8002176 <GUI_MenuItemDraw+0x34>
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoUnselected ,16, 16);
 8002168:	2310      	movs	r3, #16
 800216a:	fa5f f18e 	uxtb.w	r1, lr
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	b2e0      	uxtb	r0, r4
 8002172:	f7fe fb1f 	bl	80007b4 <OLED_ShowPicture>
		show_str(x, y,(uint8_t *) item->title,12,12,1);
 8002176:	2401      	movs	r4, #1
 8002178:	9401      	str	r4, [sp, #4]
	}
	else
	{  
		if(item->icoSelected != NULL)
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoSelected ,16, 16);
		show_str(x,y,(uint8_t *) item->title, 12,12,0);
 800217a:	230c      	movs	r3, #12
 800217c:	4630      	mov	r0, r6
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	68ea      	ldr	r2, [r5, #12]
 8002182:	4639      	mov	r1, r7
 8002184:	f000 f9fe 	bl	8002584 <show_str>
	}
	return(1);
 8002188:	2001      	movs	r0, #1
}
 800218a:	b003      	add	sp, #12
 800218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(item->icoSelected != NULL)
 800218e:	6852      	ldr	r2, [r2, #4]
 8002190:	b132      	cbz	r2, 80021a0 <GUI_MenuItemDraw+0x5e>
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoSelected ,16, 16);
 8002192:	2310      	movs	r3, #16
 8002194:	fa5f f18e 	uxtb.w	r1, lr
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	b2e0      	uxtb	r0, r4
 800219c:	f7fe fb0a 	bl	80007b4 <OLED_ShowPicture>
		show_str(x,y,(uint8_t *) item->title, 12,12,0);
 80021a0:	2300      	movs	r3, #0
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	e7e9      	b.n	800217a <GUI_MenuItemDraw+0x38>
	if(y<2) return(0);
 80021a6:	2000      	movs	r0, #0
 80021a8:	e7ef      	b.n	800218a <GUI_MenuItemDraw+0x48>
 80021aa:	4618      	mov	r0, r3
 80021ac:	e7ed      	b.n	800218a <GUI_MenuItemDraw+0x48>

080021ae <GUI_ClearSCR>:
void  GUI_FillSCR(TCOLOR dat)
{
	if (dat == 0x01) {
		dat = 0xff;
	}
	OLED_FillRam(dat);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7fe ba3a 	b.w	8000628 <OLED_FillRam>

080021b4 <GUI_Point>:
*          效範圍)
* 說明：用戶根據LCM的實際情況編寫此函數。
****************************************************************************/
void  GUI_Point(uint16_t x, uint8_t y, TCOLOR color)
{
	OLED_DrawPoint(x,y,color);
 80021b4:	b2c0      	uxtb	r0, r0
 80021b6:	f7fe ba01 	b.w	80005bc <OLED_DrawPoint>

080021ba <GUI_ReadPoint>:
* 出口參數：返回0表示指定地址超出緩衝區範圍
* 說明：對於單色，設置ret的d0位為1或0，4級灰度則為d0、d1有效，8位RGB則d0--d7有效，
*      RGB結構則R、G、B變量有效。
****************************************************************************/
uint8_t  GUI_ReadPoint(uint16_t x, uint8_t y, TCOLOR *ret)
{
 80021ba:	b510      	push	{r4, lr}
	*ret = OLED_ReadPoint(x,y);
 80021bc:	b2c0      	uxtb	r0, r0
{
 80021be:	4614      	mov	r4, r2
	*ret = OLED_ReadPoint(x,y);
 80021c0:	f7fe fa40 	bl	8000644 <OLED_ReadPoint>
 80021c4:	7020      	strb	r0, [r4, #0]
	return 0;
}
 80021c6:	2000      	movs	r0, #0
 80021c8:	bd10      	pop	{r4, pc}

080021ca <GUI_HLine>:
*      新8個點，而不需要一個點一個點的寫到LCM中。
****************************************************************************/
void  GUI_HLine(uint16_t x0, uint8_t y0, uint16_t x1, TCOLOR color)
{
	uint8_t  temp;
	if(x0>x1)               // 對x0、x1大小進行排列，以便畫圖
 80021ca:	4290      	cmp	r0, r2
{
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ce:	461f      	mov	r7, r3
 80021d0:	bf88      	it	hi
 80021d2:	b2d3      	uxtbhi	r3, r2
 80021d4:	4604      	mov	r4, r0
 80021d6:	4615      	mov	r5, r2
 80021d8:	460e      	mov	r6, r1
	if(x0>x1)               // 對x0、x1大小進行排列，以便畫圖
 80021da:	bf84      	itt	hi
 80021dc:	4605      	movhi	r5, r0
	{
		temp = x1;
		x1 = x0;
		x0 = temp;
 80021de:	461c      	movhi	r4, r3
	OLED_DrawPoint(x,y,color);
 80021e0:	b2e0      	uxtb	r0, r4
	}
	do
	{
		GUI_Point(x0, y0, color);   // 逐點顯示，描出垂直線
		x0++;
 80021e2:	3401      	adds	r4, #1
	OLED_DrawPoint(x,y,color);
 80021e4:	463a      	mov	r2, r7
 80021e6:	4631      	mov	r1, r6
		x0++;
 80021e8:	b2a4      	uxth	r4, r4
	OLED_DrawPoint(x,y,color);
 80021ea:	f7fe f9e7 	bl	80005bc <OLED_DrawPoint>
	}
	while(x1>=x0);
 80021ee:	42a5      	cmp	r5, r4
 80021f0:	d2f6      	bcs.n	80021e0 <GUI_HLine+0x16>
}
 80021f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021f4 <GUI_RLine>:
*      新8個點，而不需要一個點一個點的寫到LCM中。
****************************************************************************/
void  GUI_RLine(uint16_t x0, uint8_t y0, uint8_t y1, TCOLOR color)
{
    uint8_t  temp;
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 80021f4:	4291      	cmp	r1, r2
{
 80021f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f8:	461f      	mov	r7, r3
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 80021fa:	bf88      	it	hi
 80021fc:	460b      	movhi	r3, r1
{
 80021fe:	460c      	mov	r4, r1
 8002200:	4615      	mov	r5, r2
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8002202:	bf84      	itt	hi
 8002204:	4614      	movhi	r4, r2
 8002206:	461d      	movhi	r5, r3
	OLED_DrawPoint(x,y,color);
 8002208:	b2c6      	uxtb	r6, r0
 800220a:	4621      	mov	r1, r4
        y0 = temp;
    }
    do
    {
        GUI_Point(x0, y0, color);   // 逐點顯示，描出垂直線
        y0++;
 800220c:	3401      	adds	r4, #1
	OLED_DrawPoint(x,y,color);
 800220e:	463a      	mov	r2, r7
 8002210:	4630      	mov	r0, r6
        y0++;
 8002212:	b2e4      	uxtb	r4, r4
	OLED_DrawPoint(x,y,color);
 8002214:	f7fe f9d2 	bl	80005bc <OLED_DrawPoint>
    }
    while(y1>=y0);
 8002218:	42a5      	cmp	r5, r4
 800221a:	d2f6      	bcs.n	800220a <GUI_RLine+0x16>
}
 800221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800221e <GUI_Refresh>:
* 功能：刷新屏幕
*           
****************************************************************************/
void  GUI_Refresh(void)
{
	OLED_RefreshGram();
 800221e:	f7fe ba27 	b.w	8000670 <OLED_RefreshGram>

08002222 <getMessageBoxStringlen>:
#include "button.h"
#include "text.h"

//得到字符串的長度
uint16_t getMessageBoxStringlen(uint8_t *str)
{
 8002222:	b508      	push	{r3, lr}
	uint16_t strlenth=0;
	strlenth=strlen((const char*)str);//字節數
 8002224:	f7fd fffe 	bl	8000224 <strlen>
 8002228:	b280      	uxth	r0, r0
	strlenth*=6;//一個字節水平6個點(12x12漢字)
 800222a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800222e:	0040      	lsls	r0, r0, #1
	return strlenth;
 8002230:	b280      	uxth	r0, r0
}
 8002232:	bd08      	pop	{r3, pc}

08002234 <GUI_MessageBoxDraw>:
};


//畫消息框
uint8_t GUI_MessageBoxDraw(MessageBox_Typedef* messagebox)
{
 8002234:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	/* 參數過濾，若窗口起出範圍，則返回0 */
	if( ( (messagebox->with)<20 ) || ( (messagebox->hight)<20 ) ) return(0);// 寬度、高度檢查，限制最小窗口
 8002238:	6882      	ldr	r2, [r0, #8]
{
 800223a:	4604      	mov	r4, r0
	if( ( (messagebox->with)<20 ) || ( (messagebox->hight)<20 ) ) return(0);// 寬度、高度檢查，限制最小窗口
 800223c:	2a13      	cmp	r2, #19
 800223e:	d803      	bhi.n	8002248 <GUI_MessageBoxDraw+0x14>
 8002240:	2000      	movs	r0, #0
	GUI_DrawButton(&btn_cancel_messagebox); 

	//顯示消息
	show_str(messagebox->x+6, messagebox->y+1+16,messagebox->msg, 12,12,1);
	return(1);
}
 8002242:	b004      	add	sp, #16
 8002244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if( ( (messagebox->with)<20 ) || ( (messagebox->hight)<20 ) ) return(0);// 寬度、高度檢查，限制最小窗口
 8002248:	68c3      	ldr	r3, [r0, #12]
 800224a:	2b13      	cmp	r3, #19
 800224c:	d9f8      	bls.n	8002240 <GUI_MessageBoxDraw+0xc>
	if( (messagebox->x + messagebox->with ) > GUI_LCM_XMAX ) return(0);		// 窗口寬度是否溢出
 800224e:	6800      	ldr	r0, [r0, #0]
 8002250:	4402      	add	r2, r0
 8002252:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002256:	d8f3      	bhi.n	8002240 <GUI_MessageBoxDraw+0xc>
	if( (messagebox->y + messagebox->hight ) > GUI_LCM_YMAX ) return(0);	// 窗口高度是否溢出
 8002258:	6861      	ldr	r1, [r4, #4]
 800225a:	440b      	add	r3, r1
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d8ef      	bhi.n	8002240 <GUI_MessageBoxDraw+0xc>
	GUI_RectangleFill(messagebox->x, messagebox->y, messagebox->x + messagebox->with - 1, messagebox->y + messagebox->hight - 1, 0);//清屏
 8002260:	2600      	movs	r6, #0
	GUI_Rectangle(messagebox->x, messagebox->y, messagebox->x + messagebox->with - 1, messagebox->y + messagebox->hight - 1, 1);// 畫窗口(邊框)
 8002262:	2501      	movs	r5, #1
	GUI_RectangleFill(messagebox->x, messagebox->y, messagebox->x + messagebox->with - 1, messagebox->y + messagebox->hight - 1, 0);//清屏
 8002264:	3b01      	subs	r3, #1
 8002266:	3a01      	subs	r2, #1
 8002268:	9600      	str	r6, [sp, #0]
 800226a:	f7ff fc03 	bl	8001a74 <GUI_RectangleFill>
	GUI_Rectangle(messagebox->x, messagebox->y, messagebox->x + messagebox->with - 1, messagebox->y + messagebox->hight - 1, 1);// 畫窗口(邊框)
 800226e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002272:	68e3      	ldr	r3, [r4, #12]
 8002274:	68a2      	ldr	r2, [r4, #8]
 8002276:	440b      	add	r3, r1
 8002278:	4402      	add	r2, r0
 800227a:	3b01      	subs	r3, #1
 800227c:	3a01      	subs	r2, #1
 800227e:	9500      	str	r5, [sp, #0]
 8002280:	f7ff fbd4 	bl	8001a2c <GUI_Rectangle>
	GUI_HLine(messagebox->x, messagebox->y + 14, messagebox->x + messagebox->with - 1, disp_color);		// 畫標題下邊框
 8002284:	8820      	ldrh	r0, [r4, #0]
 8002286:	68a2      	ldr	r2, [r4, #8]
 8002288:	6861      	ldr	r1, [r4, #4]
 800228a:	4402      	add	r2, r0
 800228c:	4b2f      	ldr	r3, [pc, #188]	; (800234c <GUI_MessageBoxDraw+0x118>)
 800228e:	3a01      	subs	r2, #1
 8002290:	310e      	adds	r1, #14
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b292      	uxth	r2, r2
 8002296:	b2c9      	uxtb	r1, r1
 8002298:	f7ff ff97 	bl	80021ca <GUI_HLine>
	GUI_RectangleFill(messagebox->x, messagebox->y, messagebox->x + messagebox->with - 1, messagebox->y + 14-1, 1);
 800229c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80022a0:	4402      	add	r2, r0
 80022a2:	f101 030d 	add.w	r3, r1, #13
 80022a6:	3a01      	subs	r2, #1
 80022a8:	9500      	str	r5, [sp, #0]
 80022aa:	f7ff fbe3 	bl	8001a74 <GUI_RectangleFill>
	if(getMessageBoxStringlen(messagebox->title)>(messagebox->with-2))
 80022ae:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80022b2:	4640      	mov	r0, r8
 80022b4:	f7ff ffb5 	bl	8002222 <getMessageBoxStringlen>
 80022b8:	68a3      	ldr	r3, [r4, #8]
 80022ba:	1e9a      	subs	r2, r3, #2
 80022bc:	4290      	cmp	r0, r2
 80022be:	d8bf      	bhi.n	8002240 <GUI_MessageBoxDraw+0xc>
	show_str_mid(messagebox->x, messagebox->y+1,messagebox->title,12,12,0,messagebox->with);
 80022c0:	270c      	movs	r7, #12
 80022c2:	6861      	ldr	r1, [r4, #4]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4429      	add	r1, r5
 80022c8:	b289      	uxth	r1, r1
 80022ca:	8820      	ldrh	r0, [r4, #0]
 80022cc:	9302      	str	r3, [sp, #8]
 80022ce:	9601      	str	r6, [sp, #4]
 80022d0:	463b      	mov	r3, r7
 80022d2:	4642      	mov	r2, r8
 80022d4:	9700      	str	r7, [sp, #0]
 80022d6:	f000 f98e 	bl	80025f6 <show_str_mid>
	btn_ok_messagebox.state = 0;
 80022da:	481d      	ldr	r0, [pc, #116]	; (8002350 <GUI_MessageBoxDraw+0x11c>)
	btn_ok_messagebox.title = messagebox->ok;
 80022dc:	69a3      	ldr	r3, [r4, #24]
	btn_ok_messagebox.state = 0;
 80022de:	7506      	strb	r6, [r0, #20]
	btn_ok_messagebox.y = messagebox->y+messagebox->hight-1 -btn_ok_messagebox.height -3;
 80022e0:	f06f 0603 	mvn.w	r6, #3
	btn_ok_messagebox.title = messagebox->ok;
 80022e4:	6103      	str	r3, [r0, #16]
	btn_ok_messagebox.x = messagebox->x+5;
 80022e6:	6823      	ldr	r3, [r4, #0]
	btn_ok_messagebox.y = messagebox->y+messagebox->hight-1 -btn_ok_messagebox.height -3;
 80022e8:	6862      	ldr	r2, [r4, #4]
	btn_ok_messagebox.x = messagebox->x+5;
 80022ea:	3305      	adds	r3, #5
 80022ec:	6003      	str	r3, [r0, #0]
	btn_ok_messagebox.y = messagebox->y+messagebox->hight-1 -btn_ok_messagebox.height -3;
 80022ee:	68c3      	ldr	r3, [r0, #12]
 80022f0:	1af3      	subs	r3, r6, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	68e2      	ldr	r2, [r4, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	6043      	str	r3, [r0, #4]
	GUI_DrawButton(&btn_ok_messagebox);
 80022fa:	f7ff fab0 	bl	800185e <GUI_DrawButton>
	btn_cancel_messagebox.state = 1;
 80022fe:	4815      	ldr	r0, [pc, #84]	; (8002354 <GUI_MessageBoxDraw+0x120>)
	btn_cancel_messagebox.title = messagebox->cancel;
 8002300:	69e3      	ldr	r3, [r4, #28]
	btn_cancel_messagebox.state = 1;
 8002302:	7505      	strb	r5, [r0, #20]
	btn_cancel_messagebox.title = messagebox->cancel;
 8002304:	6103      	str	r3, [r0, #16]
	btn_cancel_messagebox.x = messagebox->x+ messagebox->with -btn_cancel_messagebox.width-1-5;
 8002306:	6883      	ldr	r3, [r0, #8]
 8002308:	6822      	ldr	r2, [r4, #0]
 800230a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800230e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8002312:	33fa      	adds	r3, #250	; 0xfa
 8002314:	4413      	add	r3, r2
 8002316:	68a2      	ldr	r2, [r4, #8]
 8002318:	4413      	add	r3, r2
 800231a:	6003      	str	r3, [r0, #0]
	btn_cancel_messagebox.y = messagebox->y+messagebox->hight-1 -btn_cancel_messagebox.height-3;	 
 800231c:	68c3      	ldr	r3, [r0, #12]
 800231e:	1af6      	subs	r6, r6, r3
 8002320:	6863      	ldr	r3, [r4, #4]
 8002322:	441e      	add	r6, r3
 8002324:	68e3      	ldr	r3, [r4, #12]
 8002326:	441e      	add	r6, r3
 8002328:	6046      	str	r6, [r0, #4]
	GUI_DrawButton(&btn_cancel_messagebox); 
 800232a:	f7ff fa98 	bl	800185e <GUI_DrawButton>
	show_str(messagebox->x+6, messagebox->y+1+16,messagebox->msg, 12,12,1);
 800232e:	6861      	ldr	r1, [r4, #4]
 8002330:	6820      	ldr	r0, [r4, #0]
 8002332:	3111      	adds	r1, #17
 8002334:	3006      	adds	r0, #6
 8002336:	b280      	uxth	r0, r0
 8002338:	9501      	str	r5, [sp, #4]
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	463b      	mov	r3, r7
 800233e:	6962      	ldr	r2, [r4, #20]
 8002340:	b289      	uxth	r1, r1
 8002342:	f000 f91f 	bl	8002584 <show_str>
	return(1);
 8002346:	4628      	mov	r0, r5
 8002348:	e77b      	b.n	8002242 <GUI_MessageBoxDraw+0xe>
 800234a:	bf00      	nop
 800234c:	200000e4 	.word	0x200000e4
 8002350:	20000120 	.word	0x20000120
 8002354:	20000108 	.word	0x20000108

08002358 <GUI_MessageBoxButtonStatus>:
		ok_status =1;
		cancel_status  =0;			
	}else
	{
		ok_status =0;
		cancel_status  =1;	
 8002358:	2900      	cmp	r1, #0
	if(status)
 800235a:	460b      	mov	r3, r1
		cancel_status  =1;	
 800235c:	bf0c      	ite	eq
 800235e:	460b      	moveq	r3, r1
 8002360:	2301      	movne	r3, #1
{	
 8002362:	b510      	push	{r4, lr}
		cancel_status  =1;	
 8002364:	bf14      	ite	ne
 8002366:	2400      	movne	r4, #0
 8002368:	2401      	moveq	r4, #1
	}
	//確定按鈕
	GUI_Button_Selected(&btn_ok_messagebox,ok_status);
 800236a:	4619      	mov	r1, r3
 800236c:	4804      	ldr	r0, [pc, #16]	; (8002380 <GUI_MessageBoxButtonStatus+0x28>)
 800236e:	f7ff f9c5 	bl	80016fc <GUI_Button_Selected>

	//取消按鈕
	GUI_Button_Selected(&btn_cancel_messagebox,cancel_status);
 8002372:	4621      	mov	r1, r4

}
 8002374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GUI_Button_Selected(&btn_cancel_messagebox,cancel_status);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <GUI_MessageBoxButtonStatus+0x2c>)
 800237a:	f7ff b9bf 	b.w	80016fc <GUI_Button_Selected>
 800237e:	bf00      	nop
 8002380:	20000120 	.word	0x20000120
 8002384:	20000108 	.word	0x20000108

08002388 <GUI_MessageBoxDelete>:
}

//刪除消息框
uint8_t GUI_MessageBoxDelete(MessageBox_Typedef* messagebox)
{	
   if( ( (messagebox->with)<20 ) || ( (messagebox->hight)<20 ) ) return(0);		// 寬度、高度檢查，限制最小窗口
 8002388:	6882      	ldr	r2, [r0, #8]
{	
 800238a:	b513      	push	{r0, r1, r4, lr}
   if( ( (messagebox->with)<20 ) || ( (messagebox->hight)<20 ) ) return(0);		// 寬度、高度檢查，限制最小窗口
 800238c:	2a13      	cmp	r2, #19
{	
 800238e:	4601      	mov	r1, r0
   if( ( (messagebox->with)<20 ) || ( (messagebox->hight)<20 ) ) return(0);		// 寬度、高度檢查，限制最小窗口
 8002390:	d915      	bls.n	80023be <GUI_MessageBoxDelete+0x36>
 8002392:	68c3      	ldr	r3, [r0, #12]
 8002394:	2b13      	cmp	r3, #19
 8002396:	d912      	bls.n	80023be <GUI_MessageBoxDelete+0x36>
   if( (messagebox->x + messagebox->with ) > GUI_LCM_XMAX ) return(0);			// 窗口寬度是否溢出
 8002398:	6800      	ldr	r0, [r0, #0]
 800239a:	4402      	add	r2, r0
 800239c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80023a0:	d80d      	bhi.n	80023be <GUI_MessageBoxDelete+0x36>
   if( (messagebox->y + messagebox->hight ) > GUI_LCM_YMAX ) return(0);			// 窗口高度是否溢出
 80023a2:	6849      	ldr	r1, [r1, #4]
 80023a4:	440b      	add	r3, r1
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d809      	bhi.n	80023be <GUI_MessageBoxDelete+0x36>
    
   /* 消隱窗口 */
   GUI_RectangleFill(messagebox->x, messagebox->y, messagebox->x + messagebox->with - 1, messagebox->y + messagebox->hight - 1, back_color);
 80023aa:	4c06      	ldr	r4, [pc, #24]	; (80023c4 <GUI_MessageBoxDelete+0x3c>)
 80023ac:	3b01      	subs	r3, #1
 80023ae:	7824      	ldrb	r4, [r4, #0]
 80023b0:	3a01      	subs	r2, #1
 80023b2:	9400      	str	r4, [sp, #0]
 80023b4:	f7ff fb5e 	bl	8001a74 <GUI_RectangleFill>
   return(1);
 80023b8:	2001      	movs	r0, #1
}
 80023ba:	b002      	add	sp, #8
 80023bc:	bd10      	pop	{r4, pc}
   if( ( (messagebox->with)<20 ) || ( (messagebox->hight)<20 ) ) return(0);		// 寬度、高度檢查，限制最小窗口
 80023be:	2000      	movs	r0, #0
 80023c0:	e7fb      	b.n	80023ba <GUI_MessageBoxDelete+0x32>
 80023c2:	bf00      	nop
 80023c4:	20002198 	.word	0x20002198

080023c8 <test_MessageBox>:
};


//測試消息框
void test_MessageBox(void)
{
 80023c8:	b510      	push	{r4, lr}
 GUI_MessageBoxDraw(&MessageBox);
 80023ca:	4c11      	ldr	r4, [pc, #68]	; (8002410 <test_MessageBox+0x48>)
 80023cc:	4620      	mov	r0, r4
 80023ce:	f7ff ff31 	bl	8002234 <GUI_MessageBoxDraw>
 GUI_Refresh();
 80023d2:	f7ff ff24 	bl	800221e <GUI_Refresh>
 HAL_Delay(2000);
 80023d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023da:	f7fe fb83 	bl	8000ae4 <HAL_Delay>
 GUI_MessageBoxButtonStatus(&MessageBox, 1);
 80023de:	2101      	movs	r1, #1
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff ffb9 	bl	8002358 <GUI_MessageBoxButtonStatus>
 GUI_Refresh();
 80023e6:	f7ff ff1a 	bl	800221e <GUI_Refresh>
 HAL_Delay(2000);
 80023ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023ee:	f7fe fb79 	bl	8000ae4 <HAL_Delay>
 GUI_MessageBoxButtonStatus(&MessageBox, 0);
 80023f2:	4620      	mov	r0, r4
 80023f4:	2100      	movs	r1, #0
 80023f6:	f7ff ffaf 	bl	8002358 <GUI_MessageBoxButtonStatus>
 GUI_Refresh();
 80023fa:	f7ff ff10 	bl	800221e <GUI_Refresh>
 HAL_Delay(2000);
 80023fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002402:	f7fe fb6f 	bl	8000ae4 <HAL_Delay>
 GUI_MessageBoxDelete(&MessageBox);
 8002406:	4620      	mov	r0, r4


}
 8002408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 GUI_MessageBoxDelete(&MessageBox);
 800240c:	f7ff bfbc 	b.w	8002388 <GUI_MessageBoxDelete>
 8002410:	200000e8 	.word	0x200000e8

08002414 <GUI_Scrollbar_SetPos>:
0x40,0x70,0x7C,0x7E,0x7E,0x7C,0x70,0x40,
};

//設置滾動條的位置
void GUI_Scrollbar_SetPos(Scrollbar_Typedef *scbx)
{	
 8002414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint16_t x,y,xlen,ylen;
//	uint8_t scbplen;
//	
//	scbplen = SCROLL_BTN_HEIGHT;  //得到按鈕的高度
	
	scblen=scbx->height-2*SCROLL_BTN_HEIGHT-scbx->scbbarlen;//得到滾動條滾動空間的長度
 8002418:	68c4      	ldr	r4, [r0, #12]
 800241a:	8b82      	ldrh	r2, [r0, #28]
 800241c:	3c14      	subs	r4, #20
 800241e:	1aa4      	subs	r4, r4, r2
 8002420:	fa1f f984 	uxth.w	r9, r4
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
	xlen=scbx->width-2-1;         //滾動條寬度 -1
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
	
	//清除滾動條
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 8002424:	2400      	movs	r4, #0
{	
 8002426:	4605      	mov	r5, r0
	x=scbx->x+1;                  //滾動條起始坐標x
 8002428:	6807      	ldr	r7, [r0, #0]
	xlen=scbx->width-2-1;         //滾動條寬度 -1
 800242a:	6886      	ldr	r6, [r0, #8]
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 800242c:	6841      	ldr	r1, [r0, #4]
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
 800242e:	1e53      	subs	r3, r2, #1
	x=scbx->x+1;                  //滾動條起始坐標x
 8002430:	3701      	adds	r7, #1
	xlen=scbx->width-2-1;         //滾動條寬度 -1
 8002432:	3e03      	subs	r6, #3
	x=scbx->x+1;                  //滾動條起始坐標x
 8002434:	b2bf      	uxth	r7, r7
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 8002436:	310a      	adds	r1, #10
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
 8002438:	444b      	add	r3, r9
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 800243a:	b2b6      	uxth	r6, r6
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 800243c:	fa1f f881 	uxth.w	r8, r1
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 8002440:	443e      	add	r6, r7
 8002442:	b29b      	uxth	r3, r3
 8002444:	9400      	str	r4, [sp, #0]
 8002446:	4443      	add	r3, r8
 8002448:	4632      	mov	r2, r6
 800244a:	4641      	mov	r1, r8
 800244c:	4638      	mov	r0, r7
 800244e:	f7ff fb11 	bl	8001a74 <GUI_RectangleFill>
	if(scbx->totalitems <= scbx->itemsperpage)//總條目不夠一頁顯示的
 8002452:	6929      	ldr	r1, [r5, #16]
 8002454:	696b      	ldr	r3, [r5, #20]
	{
		scbpos=(scbx->topitem*scblen)/(scbx->totalitems-1);//計算當前滾動條偏移的位置
	}
	
	//畫出滾動條
	GUI_RectangleFill(x ,y+scbpos,x+xlen,y+scbpos+scbx->scbbarlen, 1);
 8002456:	2201      	movs	r2, #1
	if(scbx->totalitems <= scbx->itemsperpage)//總條目不夠一頁顯示的
 8002458:	4299      	cmp	r1, r3
		scbpos=(scbx->topitem*scblen)/(scbx->totalitems-1);//計算當前滾動條偏移的位置
 800245a:	bf81      	itttt	hi
 800245c:	69ab      	ldrhi	r3, [r5, #24]
 800245e:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8002462:	fb03 f409 	mulhi.w	r4, r3, r9
 8002466:	fbb4 f4f1 	udivhi	r4, r4, r1
	GUI_RectangleFill(x ,y+scbpos,x+xlen,y+scbpos+scbx->scbbarlen, 1);
 800246a:	69eb      	ldr	r3, [r5, #28]
 800246c:	b2a4      	uxth	r4, r4
 800246e:	eb04 0108 	add.w	r1, r4, r8
 8002472:	9200      	str	r2, [sp, #0]
 8002474:	440b      	add	r3, r1
 8002476:	4632      	mov	r2, r6
 8002478:	4638      	mov	r0, r7
 800247a:	f7ff fafb 	bl	8001a74 <GUI_RectangleFill>
	//GUI_Refresh();	//刷新屏幕
}
 800247e:	b003      	add	sp, #12
 8002480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002484 <GUI_ScrollbarDraw>:



//創建一個滾動條
void GUI_ScrollbarDraw(Scrollbar_Typedef *scbx)
{
 8002484:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t scbactlen=0;//滾動條可以滾動的空間長度
	if(scbx==NULL) return;
 8002486:	4604      	mov	r4, r0
 8002488:	2800      	cmp	r0, #0
 800248a:	d057      	beq.n	800253c <GUI_ScrollbarDraw+0xb8>
	if(scbx->width<SCROLL_BTN_WIDTH) return;
 800248c:	6882      	ldr	r2, [r0, #8]
 800248e:	2a09      	cmp	r2, #9
 8002490:	d954      	bls.n	800253c <GUI_ScrollbarDraw+0xb8>
	if(scbx->height<2*SCROLL_BTN_HEIGHT) return;
 8002492:	68c3      	ldr	r3, [r0, #12]
 8002494:	2b13      	cmp	r3, #19
 8002496:	d951      	bls.n	800253c <GUI_ScrollbarDraw+0xb8>
	
	//畫外邊框
	GUI_Rectangle(scbx->x, scbx->y, scbx->x+scbx->width-1, scbx->y+scbx->height-1, 1);
 8002498:	c803      	ldmia	r0, {r0, r1}
 800249a:	2501      	movs	r5, #1
	//畫上下兩個按鈕
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+1, (uint8_t *)scroll_btn_up, 8, 8);
 800249c:	2608      	movs	r6, #8
	GUI_Rectangle(scbx->x, scbx->y, scbx->x+scbx->width-1, scbx->y+scbx->height-1, 1);
 800249e:	440b      	add	r3, r1
 80024a0:	4402      	add	r2, r0
 80024a2:	9500      	str	r5, [sp, #0]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	3a01      	subs	r2, #1
 80024a8:	f7ff fac0 	bl	8001a2c <GUI_Rectangle>
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+1, (uint8_t *)scroll_btn_up, 8, 8);
 80024ac:	68a0      	ldr	r0, [r4, #8]
 80024ae:	6861      	ldr	r1, [r4, #4]
 80024b0:	f1a0 0308 	sub.w	r3, r0, #8
 80024b4:	6820      	ldr	r0, [r4, #0]
 80024b6:	4429      	add	r1, r5
 80024b8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80024bc:	9600      	str	r6, [sp, #0]
 80024be:	4633      	mov	r3, r6
 80024c0:	4a1f      	ldr	r2, [pc, #124]	; (8002540 <GUI_ScrollbarDraw+0xbc>)
 80024c2:	b2c9      	uxtb	r1, r1
 80024c4:	b2c0      	uxtb	r0, r0
 80024c6:	f7fe f975 	bl	80007b4 <OLED_ShowPicture>
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+scbx->height-9, (uint8_t *)scroll_btn_down, 8, 8);
 80024ca:	68e3      	ldr	r3, [r4, #12]
 80024cc:	68a0      	ldr	r0, [r4, #8]
 80024ce:	6861      	ldr	r1, [r4, #4]
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <GUI_ScrollbarDraw+0xc0>)
 80024d2:	4419      	add	r1, r3
 80024d4:	f1a0 0308 	sub.w	r3, r0, #8
 80024d8:	6820      	ldr	r0, [r4, #0]
 80024da:	3909      	subs	r1, #9
 80024dc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80024e0:	9600      	str	r6, [sp, #0]
 80024e2:	4633      	mov	r3, r6
 80024e4:	b2c9      	uxtb	r1, r1
 80024e6:	b2c0      	uxtb	r0, r0
 80024e8:	f7fe f964 	bl	80007b4 <OLED_ShowPicture>
	//畫按鈕邊框
	GUI_Line(scbx->x, scbx->y+9, scbx->x+scbx->width-1, scbx->y+9,1);
 80024ec:	e894 0009 	ldmia.w	r4, {r0, r3}
 80024f0:	68a2      	ldr	r2, [r4, #8]
 80024f2:	3309      	adds	r3, #9
 80024f4:	4402      	add	r2, r0
 80024f6:	4619      	mov	r1, r3
 80024f8:	9500      	str	r5, [sp, #0]
 80024fa:	3a01      	subs	r2, #1
 80024fc:	f7ff faf4 	bl	8001ae8 <GUI_Line>
	GUI_Line(scbx->x, scbx->y+scbx->height-10, scbx->x+scbx->width-1, scbx->y+scbx->height-10,1);
 8002500:	e894 0009 	ldmia.w	r4, {r0, r3}
 8002504:	68e2      	ldr	r2, [r4, #12]
 8002506:	4413      	add	r3, r2
 8002508:	68a2      	ldr	r2, [r4, #8]
 800250a:	3b0a      	subs	r3, #10
 800250c:	4402      	add	r2, r0
 800250e:	4619      	mov	r1, r3
 8002510:	9500      	str	r5, [sp, #0]
 8002512:	3a01      	subs	r2, #1
 8002514:	f7ff fae8 	bl	8001ae8 <GUI_Line>
	
	
	//可供滾動條滾動的空間範圍
	scbactlen=scbx->height -2*SCROLL_BTN_HEIGHT;
 8002518:	68e3      	ldr	r3, [r4, #12]
	
	//每頁滾動條目大於總條目數 滾動條目等於最大可滾動的控件
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 800251a:	6921      	ldr	r1, [r4, #16]
	scbactlen=scbx->height -2*SCROLL_BTN_HEIGHT;
 800251c:	f1a3 0214 	sub.w	r2, r3, #20
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8002520:	6963      	ldr	r3, [r4, #20]
	//每頁滾動條目小於總條目數
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
	//設置滾動條的位置
	GUI_Scrollbar_SetPos(scbx);
 8002522:	4620      	mov	r0, r4
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8002524:	428b      	cmp	r3, r1
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
 8002526:	bf3b      	ittet	cc
 8002528:	4353      	mulcc	r3, r2
 800252a:	fbb3 f3f1 	udivcc	r3, r3, r1
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 800252e:	61e2      	strcs	r2, [r4, #28]
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
 8002530:	61e3      	strcc	r3, [r4, #28]
}
 8002532:	b002      	add	sp, #8
 8002534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GUI_Scrollbar_SetPos(scbx);
 8002538:	f7ff bf6c 	b.w	8002414 <GUI_Scrollbar_SetPos>
}
 800253c:	b002      	add	sp, #8
 800253e:	bd70      	pop	{r4, r5, r6, pc}
 8002540:	08003d75 	.word	0x08003d75
 8002544:	08003d6d 	.word	0x08003d6d

08002548 <test_scrollbar>:
9,
0
};

//測試滾動條函數
void test_scrollbar(void){
 8002548:	b510      	push	{r4, lr}

	GUI_ScrollbarDraw(&Scrollbar);
 800254a:	4c0d      	ldr	r4, [pc, #52]	; (8002580 <test_scrollbar+0x38>)
 800254c:	4620      	mov	r0, r4
 800254e:	f7ff ff99 	bl	8002484 <GUI_ScrollbarDraw>
	GUI_Refresh();								//刷新屏幕
 8002552:	f7ff fe64 	bl	800221e <GUI_Refresh>
	HAL_Delay(2000);
 8002556:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800255a:	f7fe fac3 	bl	8000ae4 <HAL_Delay>
	Scrollbar.topitem = 1;
 800255e:	2301      	movs	r3, #1
	GUI_Scrollbar_SetPos(&Scrollbar);
 8002560:	4620      	mov	r0, r4
	Scrollbar.topitem = 1;
 8002562:	61a3      	str	r3, [r4, #24]
	GUI_Scrollbar_SetPos(&Scrollbar);
 8002564:	f7ff ff56 	bl	8002414 <GUI_Scrollbar_SetPos>
	GUI_Refresh();								//刷新屏幕
 8002568:	f7ff fe59 	bl	800221e <GUI_Refresh>
	HAL_Delay(2000);
 800256c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002570:	f7fe fab8 	bl	8000ae4 <HAL_Delay>
	GUI_ScrollbarDraw(&Scrollbar);
 8002574:	4620      	mov	r0, r4
	
}
 8002576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GUI_ScrollbarDraw(&Scrollbar);
 800257a:	f7ff bf83 	b.w	8002484 <GUI_ScrollbarDraw>
 800257e:	bf00      	nop
 8002580:	20000138 	.word	0x20000138

08002584 <show_str>:
//str  :字符串
//f_w:字寬
//f_h:字高
//mode:0,非疊加方式;1,疊加方式
void show_str(uint16_t x,uint16_t y,const uint8_t*str,uint8_t f_w,uint8_t f_h,uint8_t mode)
{					
 8002584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002588:	4680      	mov	r8, r0
	uint16_t x0 = x;
	uint16_t y0 = y;
	while (*str != 0)
 800258a:	460c      	mov	r4, r1
 800258c:	4645      	mov	r5, r8
{					
 800258e:	b085      	sub	sp, #20
 8002590:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8002594:	4616      	mov	r6, r2
 8002596:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
			y += f_h;
			x = x0;
			str++;
		}
		else
			OLED_ShowChar(x, y, *str, f_w / 2, f_h, mode);     //有效部分寫入
 800259a:	ea4f 0a53 	mov.w	sl, r3, lsr #1
{					
 800259e:	9203      	str	r2, [sp, #12]
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 80025a0:	087a      	lsrs	r2, r7, #1
 80025a2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
		str++;
		x += f_h / 2; //字符,為全字的一半
 80025a6:	b293      	uxth	r3, r2
		if (y > (y0 + LCD_HIGH - f_h))
 80025a8:	f101 0940 	add.w	r9, r1, #64	; 0x40
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 80025ac:	eb00 0b08 	add.w	fp, r0, r8
		x += f_h / 2; //字符,為全字的一半
 80025b0:	9302      	str	r3, [sp, #8]
		if (y > (y0 + LCD_HIGH - f_h))
 80025b2:	eba9 0907 	sub.w	r9, r9, r7
	while (*str != 0)
 80025b6:	7832      	ldrb	r2, [r6, #0]
 80025b8:	b912      	cbnz	r2, 80025c0 <show_str+0x3c>

	}
}  			 		 
 80025ba:	b005      	add	sp, #20
 80025bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 80025c0:	455d      	cmp	r5, fp
			y += f_h;
 80025c2:	bfc2      	ittt	gt
 80025c4:	19e4      	addgt	r4, r4, r7
 80025c6:	b2a4      	uxthgt	r4, r4
			x = x0;
 80025c8:	4645      	movgt	r5, r8
		if (y > (y0 + LCD_HIGH - f_h))
 80025ca:	454c      	cmp	r4, r9
 80025cc:	dcf5      	bgt.n	80025ba <show_str+0x36>
		if (*str == 13) //換行符號
 80025ce:	2a0d      	cmp	r2, #13
 80025d0:	d108      	bne.n	80025e4 <show_str+0x60>
			x = x0;
 80025d2:	4645      	mov	r5, r8
			y += f_h;
 80025d4:	443c      	add	r4, r7
 80025d6:	b2a4      	uxth	r4, r4
			str++;
 80025d8:	3601      	adds	r6, #1
		x += f_h / 2; //字符,為全字的一半
 80025da:	9b02      	ldr	r3, [sp, #8]
		str++;
 80025dc:	3601      	adds	r6, #1
		x += f_h / 2; //字符,為全字的一半
 80025de:	441d      	add	r5, r3
 80025e0:	b2ad      	uxth	r5, r5
 80025e2:	e7e8      	b.n	80025b6 <show_str+0x32>
			OLED_ShowChar(x, y, *str, f_w / 2, f_h, mode);     //有效部分寫入
 80025e4:	9b03      	ldr	r3, [sp, #12]
 80025e6:	9700      	str	r7, [sp, #0]
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	4621      	mov	r1, r4
 80025ec:	4653      	mov	r3, sl
 80025ee:	4628      	mov	r0, r5
 80025f0:	f7fe f874 	bl	80006dc <OLED_ShowChar>
 80025f4:	e7f1      	b.n	80025da <show_str+0x56>

080025f6 <show_str_mid>:
//在指定寬度的中間顯示字符串(置中顯示)
//如果字符長度超過了len,則用Show_Str顯示
//len:指定要顯示的寬度
void show_str_mid(uint16_t x,uint16_t y,const uint8_t*str,uint8_t f_w,uint8_t f_h,uint8_t mode,uint16_t len)
{
 80025f6:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fa:	4606      	mov	r6, r0
	uint16_t strlenth=0;
   	strlenth=strlen((char*)str);
 80025fc:	4610      	mov	r0, r2
{
 80025fe:	4689      	mov	r9, r1
 8002600:	4617      	mov	r7, r2
 8002602:	469a      	mov	sl, r3
   	strlenth=strlen((char*)str);
 8002604:	f7fd fe0e 	bl	8000224 <strlen>
{
 8002608:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800260c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	strlenth*=f_h/2;
 8002610:	ea4f 0558 	mov.w	r5, r8, lsr #1
 8002614:	4368      	muls	r0, r5
 8002616:	b280      	uxth	r0, r0
	if(strlenth>len)show_str(x,y,str,f_w,f_h,mode);
 8002618:	42a0      	cmp	r0, r4
{
 800261a:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
	if(strlenth>len)show_str(x,y,str,f_w,f_h,mode);
 800261e:	d90c      	bls.n	800263a <show_str_mid+0x44>
 8002620:	4653      	mov	r3, sl
 8002622:	463a      	mov	r2, r7
 8002624:	4649      	mov	r1, r9
 8002626:	4630      	mov	r0, r6
 8002628:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800262c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	else
	{
		strlenth=(len-strlenth)/2;
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
	}
}   
 8002630:	b001      	add	sp, #4
 8002632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
 8002636:	f7ff bfa5 	b.w	8002584 <show_str>
		strlenth=(len-strlenth)/2;
 800263a:	1a24      	subs	r4, r4, r0
 800263c:	2002      	movs	r0, #2
 800263e:	fb94 f0f0 	sdiv	r0, r4, r0
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
 8002642:	4430      	add	r0, r6
 8002644:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002648:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800264c:	4653      	mov	r3, sl
 800264e:	463a      	mov	r2, r7
 8002650:	4649      	mov	r1, r9
 8002652:	b280      	uxth	r0, r0
 8002654:	e7ec      	b.n	8002630 <show_str_mid+0x3a>

08002656 <getWindowStringlen>:

#if  GUI_WINDOW_EN==1

//得到字符串的長度
uint16_t getWindowStringlen(const unsigned char *str)
{
 8002656:	b508      	push	{r3, lr}
	uint16_t strlenth=0;
	strlenth=strlen((const char*)str);
 8002658:	f7fd fde4 	bl	8000224 <strlen>
 800265c:	b280      	uxth	r0, r0
	strlenth*=6;
 800265e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002662:	0040      	lsls	r0, r0, #1

	return strlenth;
 8002664:	b280      	uxth	r0, r0
}
 8002666:	bd08      	pop	{r3, pc}

08002668 <GUI_WindowsDraw>:
* 功能：顯示窗口。根據提供的窗口參數進行畫窗口。
* 入口參數：win		窗口句柄
* 出口參數：返回0表示操作失敗，返回1表示操作成功
****************************************************************************/
uint8_t  GUI_WindowsDraw(WINDOWS *win)
{  
 8002668:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* 參數過濾，若窗口起出範圍，則返回0 */
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 800266a:	6882      	ldr	r2, [r0, #8]
{  
 800266c:	b085      	sub	sp, #20
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 800266e:	2a13      	cmp	r2, #19
{  
 8002670:	4604      	mov	r4, r0
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8002672:	d802      	bhi.n	800267a <GUI_WindowsDraw+0x12>
 8002674:	2000      	movs	r0, #0
	{  
		return 0;//顯示的標題超過了窗體的寬度
	}	
	show_str_mid(win->x, win->y+1, win->title,12,12,0,win->width);//顯示標題
	return(1);
}
 8002676:	b005      	add	sp, #20
 8002678:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 800267a:	68c3      	ldr	r3, [r0, #12]
 800267c:	2b13      	cmp	r3, #19
 800267e:	d9f9      	bls.n	8002674 <GUI_WindowsDraw+0xc>
	if( (win->x + win->width ) > GUI_LCM_XMAX ) return(0);			// 窗口寬度是否溢出
 8002680:	6800      	ldr	r0, [r0, #0]
 8002682:	4402      	add	r2, r0
 8002684:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002688:	d8f4      	bhi.n	8002674 <GUI_WindowsDraw+0xc>
	if( (win->y + win->height ) > GUI_LCM_YMAX ) return(0);			// 窗口高度是否溢出
 800268a:	6861      	ldr	r1, [r4, #4]
 800268c:	440b      	add	r3, r1
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d8f0      	bhi.n	8002674 <GUI_WindowsDraw+0xc>
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 0);// 這尼瑪不是清屏麼（黑）
 8002692:	2600      	movs	r6, #0
	GUI_Rectangle(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 1);	// 畫窗口邊框
 8002694:	2501      	movs	r5, #1
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 0);// 這尼瑪不是清屏麼（黑）
 8002696:	3b01      	subs	r3, #1
 8002698:	3a01      	subs	r2, #1
 800269a:	9600      	str	r6, [sp, #0]
 800269c:	f7ff f9ea 	bl	8001a74 <GUI_RectangleFill>
	GUI_Rectangle(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 1);	// 畫窗口邊框
 80026a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a4:	68e3      	ldr	r3, [r4, #12]
 80026a6:	68a2      	ldr	r2, [r4, #8]
 80026a8:	440b      	add	r3, r1
 80026aa:	4402      	add	r2, r0
 80026ac:	3b01      	subs	r3, #1
 80026ae:	3a01      	subs	r2, #1
 80026b0:	9500      	str	r5, [sp, #0]
 80026b2:	f7ff f9bb 	bl	8001a2c <GUI_Rectangle>
	GUI_HLine(win->x, win->y + 14, win->x + win->width - 1, disp_color);					// 畫標題目欄下邊框
 80026b6:	8820      	ldrh	r0, [r4, #0]
 80026b8:	68a2      	ldr	r2, [r4, #8]
 80026ba:	6861      	ldr	r1, [r4, #4]
 80026bc:	4402      	add	r2, r0
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <GUI_WindowsDraw+0xa4>)
 80026c0:	3a01      	subs	r2, #1
 80026c2:	310e      	adds	r1, #14
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b292      	uxth	r2, r2
 80026c8:	b2c9      	uxtb	r1, r1
 80026ca:	f7ff fd7e 	bl	80021ca <GUI_HLine>
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + 14-1, 1);
 80026ce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80026d2:	4402      	add	r2, r0
 80026d4:	f101 030d 	add.w	r3, r1, #13
 80026d8:	3a01      	subs	r2, #1
 80026da:	9500      	str	r5, [sp, #0]
 80026dc:	f7ff f9ca 	bl	8001a74 <GUI_RectangleFill>
	if(getWindowStringlen(win->title)>(win->width-2))
 80026e0:	69a7      	ldr	r7, [r4, #24]
 80026e2:	4638      	mov	r0, r7
 80026e4:	f7ff ffb7 	bl	8002656 <getWindowStringlen>
 80026e8:	68a3      	ldr	r3, [r4, #8]
 80026ea:	1e9a      	subs	r2, r3, #2
 80026ec:	4290      	cmp	r0, r2
 80026ee:	d8c1      	bhi.n	8002674 <GUI_WindowsDraw+0xc>
	show_str_mid(win->x, win->y+1, win->title,12,12,0,win->width);//顯示標題
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	9302      	str	r3, [sp, #8]
 80026f4:	230c      	movs	r3, #12
 80026f6:	6861      	ldr	r1, [r4, #4]
 80026f8:	8820      	ldrh	r0, [r4, #0]
 80026fa:	4429      	add	r1, r5
 80026fc:	9601      	str	r6, [sp, #4]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	463a      	mov	r2, r7
 8002702:	b289      	uxth	r1, r1
 8002704:	f7ff ff77 	bl	80025f6 <show_str_mid>
	return(1);
 8002708:	4628      	mov	r0, r5
 800270a:	e7b4      	b.n	8002676 <GUI_WindowsDraw+0xe>
 800270c:	200000e4 	.word	0x200000e4

08002710 <test_window>:
.title = "XBOS",
};

//測試窗體
void test_window(void)
{
 8002710:	b508      	push	{r3, lr}
	GUI_WindowsDraw(&winxp);	
 8002712:	4803      	ldr	r0, [pc, #12]	; (8002720 <test_window+0x10>)
 8002714:	f7ff ffa8 	bl	8002668 <GUI_WindowsDraw>
	GUI_Refresh();
}
 8002718:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	GUI_Refresh();
 800271c:	f7ff bd7f 	b.w	800221e <GUI_Refresh>
 8002720:	20000158 	.word	0x20000158

08002724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002724:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002726:	e003      	b.n	8002730 <LoopCopyDataInit>

08002728 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800272a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800272c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800272e:	3104      	adds	r1, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002730:	480a      	ldr	r0, [pc, #40]	; (800275c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002734:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002736:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002738:	d3f6      	bcc.n	8002728 <CopyDataInit>
  ldr r2, =_sbss
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800273c:	e002      	b.n	8002744 <LoopFillZerobss>

0800273e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002740:	f842 3b04 	str.w	r3, [r2], #4

08002744 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002746:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002748:	d3f9      	bcc.n	800273e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800274a:	f7fd fee9 	bl	8000520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274e:	f000 f80f 	bl	8002770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002752:	f7fd fda7 	bl	80002a4 <main>
  bx lr
 8002756:	4770      	bx	lr
  ldr r3, =_sidata
 8002758:	08003d8c 	.word	0x08003d8c
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002760:	20000174 	.word	0x20000174
  ldr r2, =_sbss
 8002764:	20000174 	.word	0x20000174
  ldr r3, = _ebss
 8002768:	20002314 	.word	0x20002314

0800276c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800276c:	e7fe      	b.n	800276c <ADC1_2_IRQHandler>
	...

08002770 <__libc_init_array>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	2500      	movs	r5, #0
 8002774:	4e0c      	ldr	r6, [pc, #48]	; (80027a8 <__libc_init_array+0x38>)
 8002776:	4c0d      	ldr	r4, [pc, #52]	; (80027ac <__libc_init_array+0x3c>)
 8002778:	1ba4      	subs	r4, r4, r6
 800277a:	10a4      	asrs	r4, r4, #2
 800277c:	42a5      	cmp	r5, r4
 800277e:	d109      	bne.n	8002794 <__libc_init_array+0x24>
 8002780:	f000 f81a 	bl	80027b8 <_init>
 8002784:	2500      	movs	r5, #0
 8002786:	4e0a      	ldr	r6, [pc, #40]	; (80027b0 <__libc_init_array+0x40>)
 8002788:	4c0a      	ldr	r4, [pc, #40]	; (80027b4 <__libc_init_array+0x44>)
 800278a:	1ba4      	subs	r4, r4, r6
 800278c:	10a4      	asrs	r4, r4, #2
 800278e:	42a5      	cmp	r5, r4
 8002790:	d105      	bne.n	800279e <__libc_init_array+0x2e>
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002798:	4798      	blx	r3
 800279a:	3501      	adds	r5, #1
 800279c:	e7ee      	b.n	800277c <__libc_init_array+0xc>
 800279e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027a2:	4798      	blx	r3
 80027a4:	3501      	adds	r5, #1
 80027a6:	e7f2      	b.n	800278e <__libc_init_array+0x1e>
 80027a8:	08003d84 	.word	0x08003d84
 80027ac:	08003d84 	.word	0x08003d84
 80027b0:	08003d84 	.word	0x08003d84
 80027b4:	08003d88 	.word	0x08003d88

080027b8 <_init>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	bf00      	nop
 80027bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027be:	bc08      	pop	{r3}
 80027c0:	469e      	mov	lr, r3
 80027c2:	4770      	bx	lr

080027c4 <_fini>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	bf00      	nop
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr
