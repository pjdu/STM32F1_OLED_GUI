
OLED_MENU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  08003f3c  08003f3c  00013f3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d4  20000000  080047ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003f6c  200000d4  08004880  000200d4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004040  08004880  00024040  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00028c62  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000057cf  00000000  00000000  00048d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e232  00000000  00000000  0004e52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010b8  00000000  00000000  0005c760  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001678  00000000  00000000  0005d818  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000aa0e  00000000  00000000  0005ee90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005fef  00000000  00000000  0006989e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006f88d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003094  00000000  00000000  0006f90c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000d4 	.word	0x200000d4
 800020c:	00000000 	.word	0x00000000
 8000210:	08003f24 	.word	0x08003f24

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000d8 	.word	0x200000d8
 800022c:	08003f24 	.word	0x08003f24

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <START_task>:

}

/* USER CODE BEGIN 4 */

void START_task(void *pvParameters){
 8000240:	b507      	push	{r0, r1, r2, lr}
	taskENTER_CRITICAL();
 8000242:	f001 ff0f 	bl	8002064 <vPortEnterCritical>

	xTaskCreate((TaskFunction_t  )(Menu_Task),         	  	//Task Function
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <START_task+0x40>)
 8000248:	2280      	movs	r2, #128	; 0x80
 800024a:	9301      	str	r3, [sp, #4]
 800024c:	2302      	movs	r3, #2
 800024e:	490d      	ldr	r1, [pc, #52]	; (8000284 <START_task+0x44>)
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	480d      	ldr	r0, [pc, #52]	; (8000288 <START_task+0x48>)
 8000254:	2300      	movs	r3, #0
 8000256:	f002 fc53 	bl	8002b00 <xTaskCreate>
				(uint16_t        ) MENU_TASK_STACK_SIZE, 	//Task Stack Size
				(void *          ) NULL,				    //Task Fuction Parameter
				(UBaseType_t     ) MENU_TASK_PRIORITY, 		//Task Priority
				(TaskHandle_t    ) &MenuTaskHandler);	    //Task Handler

	xTaskCreate((TaskFunction_t  )(GPIO_task),         	  	//Task Function
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <START_task+0x4c>)
 800025c:	2246      	movs	r2, #70	; 0x46
 800025e:	9301      	str	r3, [sp, #4]
 8000260:	2304      	movs	r3, #4
 8000262:	490b      	ldr	r1, [pc, #44]	; (8000290 <START_task+0x50>)
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	480b      	ldr	r0, [pc, #44]	; (8000294 <START_task+0x54>)
 8000268:	2300      	movs	r3, #0
 800026a:	f002 fc49 	bl	8002b00 <xTaskCreate>
//				(uint16_t        ) TEST_TASK_STACK_SIZE, 	//Task Stack Size
//				(void *          ) NULL,				    //Task Fuction Parameter
//				(UBaseType_t     ) TEST_TASK_PRIORITY, 		//Task Priority
//				(TaskHandle_t    ) &TestTaskHandler);	    //Task Handler

	vTaskDelete(StartTaskHandler);
 800026e:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <START_task+0x58>)
 8000270:	6818      	ldr	r0, [r3, #0]
 8000272:	f002 fd25 	bl	8002cc0 <vTaskDelete>
	taskEXIT_CRITICAL();
}
 8000276:	b003      	add	sp, #12
 8000278:	f85d eb04 	ldr.w	lr, [sp], #4
	taskEXIT_CRITICAL();
 800027c:	f001 bf14 	b.w	80020a8 <vPortExitCritical>
 8000280:	20003e6c 	.word	0x20003e6c
 8000284:	08003f5c 	.word	0x08003f5c
 8000288:	08003895 	.word	0x08003895
 800028c:	20003ec8 	.word	0x20003ec8
 8000290:	08003f66 	.word	0x08003f66
 8000294:	0800029d 	.word	0x0800029d
 8000298:	20003f20 	.word	0x20003f20

0800029c <GPIO_task>:
void GPIO_task(void *pvParameters){
 800029c:	b508      	push	{r3, lr}

	while(1){
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800029e:	4d0a      	ldr	r5, [pc, #40]	; (80002c8 <GPIO_task+0x2c>)
		vTaskDelay(1000/portTICK_PERIOD_MS);
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80002a0:	4c0a      	ldr	r4, [pc, #40]	; (80002cc <GPIO_task+0x30>)
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80002a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a6:	4628      	mov	r0, r5
 80002a8:	f000 fedf 	bl	800106a <HAL_GPIO_TogglePin>
		vTaskDelay(1000/portTICK_PERIOD_MS);
 80002ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b0:	f002 feca 	bl	8003048 <vTaskDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80002b4:	4620      	mov	r0, r4
 80002b6:	2104      	movs	r1, #4
 80002b8:	f000 fed7 	bl	800106a <HAL_GPIO_TogglePin>
		vTaskDelay(2000/portTICK_PERIOD_MS);
 80002bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002c0:	f002 fec2 	bl	8003048 <vTaskDelay>
 80002c4:	e7ed      	b.n	80002a2 <GPIO_task+0x6>
 80002c6:	bf00      	nop
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40011400 	.word	0x40011400

080002d0 <SystemClock_Config>:
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002d0:	2305      	movs	r3, #5
{
 80002d2:	b530      	push	{r4, r5, lr}
 80002d4:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002d6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002dc:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002de:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e0:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e2:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e4:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ec:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002ee:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f000 fec3 	bl	8001080 <HAL_RCC_OscConfig>
 80002fa:	b100      	cbz	r0, 80002fe <SystemClock_Config+0x2e>
 80002fc:	e7fe      	b.n	80002fc <SystemClock_Config+0x2c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000302:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000308:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030a:	4629      	mov	r1, r5
 800030c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030e:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000310:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000312:	f001 f87d 	bl	8001410 <HAL_RCC_ClockConfig>
 8000316:	b100      	cbz	r0, 800031a <SystemClock_Config+0x4a>
 8000318:	e7fe      	b.n	8000318 <SystemClock_Config+0x48>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800031a:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031e:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000320:	9406      	str	r4, [sp, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000322:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	f001 f92e 	bl	8001584 <HAL_RCCEx_PeriphCLKConfig>
 8000328:	4604      	mov	r4, r0
 800032a:	b100      	cbz	r0, 800032e <SystemClock_Config+0x5e>
 800032c:	e7fe      	b.n	800032c <SystemClock_Config+0x5c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800032e:	f001 f913 	bl	8001558 <HAL_RCC_GetHCLKFreq>
 8000332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000336:	fbb0 f0f3 	udiv	r0, r0, r3
 800033a:	f000 fd7d 	bl	8000e38 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800033e:	2004      	movs	r0, #4
 8000340:	f000 fd90 	bl	8000e64 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000344:	4622      	mov	r2, r4
 8000346:	4621      	mov	r1, r4
 8000348:	f04f 30ff 	mov.w	r0, #4294967295
 800034c:	f000 fd40 	bl	8000dd0 <HAL_NVIC_SetPriority>
}
 8000350:	b017      	add	sp, #92	; 0x5c
 8000352:	bd30      	pop	{r4, r5, pc}

08000354 <main>:
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8000358:	f000 fcf2 	bl	8000d40 <HAL_Init>
  SystemClock_Config();
 800035c:	f7ff ffb8 	bl	80002d0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	4b7e      	ldr	r3, [pc, #504]	; (800055c <main+0x208>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000364:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000366:	2401      	movs	r4, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000368:	f042 0210 	orr.w	r2, r2, #16
 800036c:	619a      	str	r2, [r3, #24]
 800036e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = ROTARY_SW_Pin;
 8000370:	2708      	movs	r7, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000372:	f002 0210 	and.w	r2, r2, #16
 8000376:	9203      	str	r2, [sp, #12]
 8000378:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 800037c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000380:	f042 0220 	orr.w	r2, r2, #32
 8000384:	619a      	str	r2, [r3, #24]
 8000386:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 8000388:	4875      	ldr	r0, [pc, #468]	; (8000560 <main+0x20c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038a:	f002 0220 	and.w	r2, r2, #32
 800038e:	9204      	str	r2, [sp, #16]
 8000390:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000394:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	f042 0204 	orr.w	r2, r2, #4
 800039a:	619a      	str	r2, [r3, #24]
 800039c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	f002 0204 	and.w	r2, r2, #4
 80003a6:	9205      	str	r2, [sp, #20]
 80003a8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003aa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LED0_Pin;
 80003ac:	f44f 7880 	mov.w	r8, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b0:	f042 0208 	orr.w	r2, r2, #8
 80003b4:	619a      	str	r2, [r3, #24]
 80003b6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	f003 0308 	and.w	r3, r3, #8
 80003be:	9306      	str	r3, [sp, #24]
 80003c0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 80003c2:	f000 fe4d 	bl	8001060 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2140      	movs	r1, #64	; 0x40
 80003ca:	4866      	ldr	r0, [pc, #408]	; (8000564 <main+0x210>)
 80003cc:	f000 fe48 	bl	8001060 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d6:	4864      	ldr	r0, [pc, #400]	; (8000568 <main+0x214>)
 80003d8:	f000 fe42 	bl	8001060 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2104      	movs	r1, #4
 80003e0:	4862      	ldr	r0, [pc, #392]	; (800056c <main+0x218>)
 80003e2:	f000 fe3d 	bl	8001060 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(ROTARY_SW_GPIO_Port, &GPIO_InitStruct);
 80003e6:	a909      	add	r1, sp, #36	; 0x24
 80003e8:	485e      	ldr	r0, [pc, #376]	; (8000564 <main+0x210>)
  GPIO_InitStruct.Pin = ROTARY_SW_Pin;
 80003ea:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ec:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ee:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ROTARY_SW_GPIO_Port, &GPIO_InitStruct);
 80003f0:	f000 fd4a 	bl	8000e88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80003f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80003f8:	a909      	add	r1, sp, #36	; 0x24
 80003fa:	4859      	ldr	r0, [pc, #356]	; (8000560 <main+0x20c>)
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80003fc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000402:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000404:	f000 fd40 	bl	8000e88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000408:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800040c:	a909      	add	r1, sp, #36	; 0x24
 800040e:	4854      	ldr	r0, [pc, #336]	; (8000560 <main+0x20c>)
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000410:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000414:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000416:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000418:	f000 fd36 	bl	8000e88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800041c:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800041e:	a909      	add	r1, sp, #36	; 0x24
 8000420:	4850      	ldr	r0, [pc, #320]	; (8000564 <main+0x210>)
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000422:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000428:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800042a:	f000 fd2d 	bl	8000e88 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800042e:	a909      	add	r1, sp, #36	; 0x24
 8000430:	484d      	ldr	r0, [pc, #308]	; (8000568 <main+0x214>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = LED0_Pin;
 8000436:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800043e:	f000 fd23 	bl	8000e88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin;
 8000442:	2304      	movs	r3, #4
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000444:	a909      	add	r1, sp, #36	; 0x24
 8000446:	4849      	ldr	r0, [pc, #292]	; (800056c <main+0x218>)
  GPIO_InitStruct.Pin = LED1_Pin;
 8000448:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000452:	f000 fd19 	bl	8000e88 <HAL_GPIO_Init>
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000456:	f44f 7382 	mov.w	r3, #260	; 0x104
 800045a:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
  hspi2.Instance = SPI2;
 800045e:	4844      	ldr	r0, [pc, #272]	; (8000570 <main+0x21c>)
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000460:	4944      	ldr	r1, [pc, #272]	; (8000574 <main+0x220>)
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000462:	f8c0 9010 	str.w	r9, [r0, #16]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000466:	e880 400a 	stmia.w	r0, {r1, r3, lr}
  hspi2.Init.CRCPolynomial = 10;
 800046a:	f04f 090a 	mov.w	r9, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800046e:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000472:	60c5      	str	r5, [r0, #12]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000474:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000476:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000478:	61c7      	str	r7, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800047a:	6205      	str	r5, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800047c:	6245      	str	r5, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800047e:	6285      	str	r5, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000480:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000484:	f001 fc3c 	bl	8001d00 <HAL_SPI_Init>
 8000488:	b100      	cbz	r0, 800048c <main+0x138>
 800048a:	e7fe      	b.n	800048a <main+0x136>
  htim2.Instance = TIM2;
 800048c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000490:	4d39      	ldr	r5, [pc, #228]	; (8000578 <main+0x224>)
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000492:	900a      	str	r0, [sp, #40]	; 0x28
  htim2.Init.Prescaler = 3;
 8000494:	e885 0048 	stmia.w	r5, {r3, r6}
  htim2.Init.Period = 65535;
 8000498:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049c:	60a8      	str	r0, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049e:	6128      	str	r0, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a0:	61a8      	str	r0, [r5, #24]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004a2:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004a4:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004a6:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004a8:	a909      	add	r1, sp, #36	; 0x24
 80004aa:	4628      	mov	r0, r5
  htim2.Init.Period = 65535;
 80004ac:	60eb      	str	r3, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004ae:	9609      	str	r6, [sp, #36]	; 0x24
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004b0:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfig.IC1Filter = 10;
 80004b2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004b6:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.IC2Filter = 10;
 80004b8:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004bc:	f001 fcca 	bl	8001e54 <HAL_TIM_Encoder_Init>
 80004c0:	b100      	cbz	r0, 80004c4 <main+0x170>
 80004c2:	e7fe      	b.n	80004c2 <main+0x16e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c4:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c6:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004c8:	a907      	add	r1, sp, #28
 80004ca:	4628      	mov	r0, r5
 80004cc:	f001 fd0b 	bl	8001ee6 <HAL_TIMEx_MasterConfigSynchronization>
 80004d0:	b100      	cbz	r0, 80004d4 <main+0x180>
 80004d2:	e7fe      	b.n	80004d2 <main+0x17e>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 80004d8:	4d28      	ldr	r5, [pc, #160]	; (800057c <main+0x228>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80004da:	4a29      	ldr	r2, [pc, #164]	; (8000580 <main+0x22c>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004dc:	4628      	mov	r0, r5
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80004de:	e885 000c 	stmia.w	r5, {r2, r3}
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80004e2:	f8c5 8008 	str.w	r8, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004e6:	f001 fabb 	bl	8001a60 <HAL_RTC_Init>
 80004ea:	b100      	cbz	r0, 80004ee <main+0x19a>
 80004ec:	e7fe      	b.n	80004ec <main+0x198>
  sTime.Minutes = 0x30;
 80004ee:	2330      	movs	r3, #48	; 0x30
  sTime.Hours = 0x18;
 80004f0:	f04f 0818 	mov.w	r8, #24
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80004f4:	4622      	mov	r2, r4
 80004f6:	a907      	add	r1, sp, #28
 80004f8:	4628      	mov	r0, r5
  sTime.Hours = 0x18;
 80004fa:	f88d 801c 	strb.w	r8, [sp, #28]
  sTime.Minutes = 0x30;
 80004fe:	f88d 301d 	strb.w	r3, [sp, #29]
  sTime.Seconds = 0x30;
 8000502:	f88d 301e 	strb.w	r3, [sp, #30]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000506:	f001 f9e6 	bl	80018d6 <HAL_RTC_SetTime>
 800050a:	b100      	cbz	r0, 800050e <main+0x1ba>
 800050c:	e7fe      	b.n	800050c <main+0x1b8>
  DateToUpdate.Date = 0x22;
 800050e:	2322      	movs	r3, #34	; 0x22
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000510:	4628      	mov	r0, r5
 8000512:	4622      	mov	r2, r4
 8000514:	a909      	add	r1, sp, #36	; 0x24
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000516:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  DateToUpdate.Month = RTC_MONTH_AUGUST;
 800051a:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  DateToUpdate.Date = 0x22;
 800051e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  DateToUpdate.Year = 0x18;
 8000522:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000526:	f001 fa27 	bl	8001978 <HAL_RTC_SetDate>
 800052a:	4605      	mov	r5, r0
 800052c:	b100      	cbz	r0, 8000530 <main+0x1dc>
 800052e:	e7fe      	b.n	800052e <main+0x1da>
	RotaryEcncorder_Init();
 8000530:	f000 fb82 	bl	8000c38 <RotaryEcncorder_Init>
	RotaryEcncorder_SetRange(0,10);
 8000534:	4649      	mov	r1, r9
 8000536:	4628      	mov	r0, r5
 8000538:	f000 fb96 	bl	8000c68 <RotaryEcncorder_SetRange>
	OLED_Init();
 800053c:	f000 fa76 	bl	8000a2c <OLED_Init>
	mainMenuInit();
 8000540:	f003 f8ca 	bl	80036d8 <mainMenuInit>
	xTaskCreate((TaskFunction_t  )(START_task),         	//Task Function
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <main+0x230>)
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	490f      	ldr	r1, [pc, #60]	; (8000588 <main+0x234>)
 800054c:	462b      	mov	r3, r5
 800054e:	9400      	str	r4, [sp, #0]
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <main+0x238>)
 8000552:	f002 fad5 	bl	8002b00 <xTaskCreate>
	vTaskStartScheduler();
 8000556:	f002 fc1f 	bl	8002d98 <vTaskStartScheduler>
 800055a:	e7fe      	b.n	800055a <main+0x206>
 800055c:	40021000 	.word	0x40021000
 8000560:	40010c00 	.word	0x40010c00
 8000564:	40011000 	.word	0x40011000
 8000568:	40010800 	.word	0x40010800
 800056c:	40011400 	.word	0x40011400
 8000570:	20003e70 	.word	0x20003e70
 8000574:	40003800 	.word	0x40003800
 8000578:	20003ee0 	.word	0x20003ee0
 800057c:	20003ecc 	.word	0x20003ecc
 8000580:	40002800 	.word	0x40002800
 8000584:	20003f20 	.word	0x20003f20
 8000588:	08003f70 	.word	0x08003f70
 800058c:	08000241 	.word	0x08000241

08000590 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <HAL_MspInit+0x98>)
{
 8000592:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000594:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000596:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000598:	f042 0201 	orr.w	r2, r2, #1
 800059c:	619a      	str	r2, [r3, #24]
 800059e:	699a      	ldr	r2, [r3, #24]
 80005a0:	f002 0201 	and.w	r2, r2, #1
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	69da      	ldr	r2, [r3, #28]
 80005aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005ae:	61da      	str	r2, [r3, #28]
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ba:	f000 fbf7 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	f06f 000b 	mvn.w	r0, #11
 80005c4:	4611      	mov	r1, r2
 80005c6:	f000 fc03 	bl	8000dd0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f06f 000a 	mvn.w	r0, #10
 80005d0:	4611      	mov	r1, r2
 80005d2:	f000 fbfd 	bl	8000dd0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f06f 0009 	mvn.w	r0, #9
 80005dc:	4611      	mov	r1, r2
 80005de:	f000 fbf7 	bl	8000dd0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f06f 0004 	mvn.w	r0, #4
 80005e8:	4611      	mov	r1, r2
 80005ea:	f000 fbf1 	bl	8000dd0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f06f 0003 	mvn.w	r0, #3
 80005f4:	4611      	mov	r1, r2
 80005f6:	f000 fbeb 	bl	8000dd0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f06f 0001 	mvn.w	r0, #1
 8000600:	4611      	mov	r1, r2
 8000602:	f000 fbe5 	bl	8000dd0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	4611      	mov	r1, r2
 800060e:	f000 fbdf 	bl	8000dd0 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000612:	4a06      	ldr	r2, [pc, #24]	; (800062c <HAL_MspInit+0x9c>)
 8000614:	6853      	ldr	r3, [r2, #4]
 8000616:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800061a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000620:	b003      	add	sp, #12
 8000622:	f85d fb04 	ldr.w	pc, [sp], #4
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	40010000 	.word	0x40010000

08000630 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000630:	b507      	push	{r0, r1, r2, lr}

  if(hrtc->Instance==RTC)
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_RTC_MspInit+0x30>)
 8000634:	6802      	ldr	r2, [r0, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	d10e      	bne.n	8000658 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800063a:	f000 fd1b 	bl	8001074 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_RTC_MspInit+0x34>)
 8000640:	69da      	ldr	r2, [r3, #28]
 8000642:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000646:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000648:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_RTC_MspInit+0x38>)
 8000656:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000658:	b003      	add	sp, #12
 800065a:	f85d fb04 	ldr.w	pc, [sp], #4
 800065e:	bf00      	nop
 8000660:	40002800 	.word	0x40002800
 8000664:	40021000 	.word	0x40021000
 8000668:	4242043c 	.word	0x4242043c

0800066c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800066c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 800066e:	6802      	ldr	r2, [r0, #0]
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_SPI_MspInit+0x3c>)
 8000672:	429a      	cmp	r2, r3
 8000674:	d115      	bne.n	80006a2 <HAL_SPI_MspInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000676:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 800067a:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 800067e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000682:	61da      	str	r2, [r3, #28]
 8000684:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	4809      	ldr	r0, [pc, #36]	; (80006ac <HAL_SPI_MspInit+0x40>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000690:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000694:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f000 fbf3 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006a2:	b007      	add	sp, #28
 80006a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80006a8:	40003800 	.word	0x40003800
 80006ac:	40010c00 	.word	0x40010c00

080006b0 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80006b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM2)
 80006b2:	6803      	ldr	r3, [r0, #0]
 80006b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b8:	d114      	bne.n	80006e4 <HAL_TIM_Encoder_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80006be:	69da      	ldr	r2, [r3, #28]
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ROTARY_A_Pin|ROTARY_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006c2:	f042 0201 	orr.w	r2, r2, #1
 80006c6:	61da      	str	r2, [r3, #28]
 80006c8:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <HAL_TIM_Encoder_MspInit+0x3c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ROTARY_A_Pin|ROTARY_B_Pin;
 80006d4:	2303      	movs	r3, #3
 80006d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006dc:	2301      	movs	r3, #1
 80006de:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f000 fbd2 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006e4:	b007      	add	sp, #28
 80006e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80006ea:	bf00      	nop
 80006ec:	40010800 	.word	0x40010800

080006f0 <NMI_Handler>:
 80006f0:	4770      	bx	lr

080006f2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler>

080006f4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler>

080006f6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler>

080006f8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler>

080006fa <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80006fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80006fe:	f002 fdcb 	bl	8003298 <xTaskGetSchedulerState>
 8000702:	2801      	cmp	r0, #1
 8000704:	d001      	beq.n	800070a <SysTick_Handler+0xe>
		xPortSysTickHandler();
 8000706:	f001 fd05 	bl	8002114 <xPortSysTickHandler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070a:	f000 fb2b 	bl	8000d64 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000712:	f000 bbb4 	b.w	8000e7e <HAL_SYSTICK_IRQHandler>
	...

08000718 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <SystemInit+0x40>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	f042 0201 	orr.w	r2, r2, #1
 8000720:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000722:	6859      	ldr	r1, [r3, #4]
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <SystemInit+0x44>)
 8000726:	400a      	ands	r2, r1
 8000728:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000730:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000734:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800073c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000744:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000746:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800074a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800074c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <SystemInit+0x48>)
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000
 800075c:	f8ff0000 	.word	0xf8ff0000
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <write>:
#define Max_Column	0x3F			// 256/4-1
#define Max_Row		0x3F			// 64-1
#define	Brightness	0x0F

uint16_t gram[64][64] = { 0 }; // row : 64 col: 64 *4 = 256   u16 = [p1,p2,p3,p4]
static void write(uint8_t bytes, uint8_t is_data) {
 8000764:	b513      	push	{r0, r1, r4, lr}
 8000766:	460c      	mov	r4, r1
	uint8_t tmp = bytes;
 8000768:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <write+0x44>)
 8000774:	f000 fc74 	bl	8001060 <HAL_GPIO_WritePin>
	if (is_data) {
 8000778:	b1a4      	cbz	r4, 80007a4 <write+0x40>
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, SET);
 800077a:	2201      	movs	r2, #1
	}
	/* We are sending commands */
	else {
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <write+0x48>)
 8000780:	f000 fc6e 	bl	8001060 <HAL_GPIO_WritePin>
	}
	HAL_SPI_Transmit(&hspi2, &tmp, 1, 1000);
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	f10d 0107 	add.w	r1, sp, #7
 800078c:	2201      	movs	r2, #1
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <write+0x4c>)
 8000790:	f001 fa0d 	bl	8001bae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079a:	4803      	ldr	r0, [pc, #12]	; (80007a8 <write+0x44>)
 800079c:	f000 fc60 	bl	8001060 <HAL_GPIO_WritePin>
}
 80007a0:	b002      	add	sp, #8
 80007a2:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 80007a4:	4622      	mov	r2, r4
 80007a6:	e7e9      	b.n	800077c <write+0x18>
 80007a8:	40010c00 	.word	0x40010c00
 80007ac:	40011000 	.word	0x40011000
 80007b0:	20003e70 	.word	0x20003e70

080007b4 <OLED_DrawPoint>:
//   y: OLED螢幕y座標
//	 mode: 0x00(滅) 0x01(亮)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t mode) {

	if (x > 255 || y > 63)
 80007b4:	293f      	cmp	r1, #63	; 0x3f
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t mode) {
 80007b6:	b510      	push	{r4, lr}
	if (x > 255 || y > 63)
 80007b8:	d811      	bhi.n	80007de <OLED_DrawPoint+0x2a>
		return;
	uint16_t point = 0x000f;
	uint8_t group = x >> 2;
 80007ba:	0884      	lsrs	r4, r0, #2
	uint8_t group_bit = 3 - (x % 4);
 80007bc:	43c0      	mvns	r0, r0
	point = point << (group_bit * 4);
 80007be:	f000 0303 	and.w	r3, r0, #3
 80007c2:	0098      	lsls	r0, r3, #2
 80007c4:	230f      	movs	r3, #15
 80007c6:	0189      	lsls	r1, r1, #6
 80007c8:	4083      	lsls	r3, r0
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4806      	ldr	r0, [pc, #24]	; (80007e8 <OLED_DrawPoint+0x34>)

	if (!mode) {
		point = ~point;
		gram[y][group] &= point;
 80007ce:	4421      	add	r1, r4
	if (!mode) {
 80007d0:	b932      	cbnz	r2, 80007e0 <OLED_DrawPoint+0x2c>
		gram[y][group] &= point;
 80007d2:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 80007d6:	ea22 0303 	bic.w	r3, r2, r3
	} else {
		gram[y][group] |= point;
 80007da:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80007de:	bd10      	pop	{r4, pc}
 80007e0:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	e7f8      	b.n	80007da <OLED_DrawPoint+0x26>
 80007e8:	200000f0 	.word	0x200000f0

080007ec <OLED_FillBlock>:
void OLED_FillBlock(unsigned char a, unsigned char b,unsigned char c, unsigned char d,unsigned char Data){
 80007ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007f0:	4607      	mov	r7, r0
 80007f2:	4688      	mov	r8, r1
 80007f4:	461e      	mov	r6, r3
	for(int y=c;y<d;y++)
 80007f6:	4614      	mov	r4, r2
void OLED_FillBlock(unsigned char a, unsigned char b,unsigned char c, unsigned char d,unsigned char Data){
 80007f8:	f89d 9020 	ldrb.w	r9, [sp, #32]
	for(int y=c;y<d;y++)
 80007fc:	42b4      	cmp	r4, r6
 80007fe:	db01      	blt.n	8000804 <OLED_FillBlock+0x18>
}
 8000800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for(int x=a;x<b;x++)
 8000804:	463d      	mov	r5, r7
			OLED_DrawPoint(x,y,Data);
 8000806:	fa5f fa84 	uxtb.w	sl, r4
		for(int x=a;x<b;x++)
 800080a:	4545      	cmp	r5, r8
 800080c:	db01      	blt.n	8000812 <OLED_FillBlock+0x26>
	for(int y=c;y<d;y++)
 800080e:	3401      	adds	r4, #1
 8000810:	e7f4      	b.n	80007fc <OLED_FillBlock+0x10>
			OLED_DrawPoint(x,y,Data);
 8000812:	b2e8      	uxtb	r0, r5
 8000814:	464a      	mov	r2, r9
 8000816:	4651      	mov	r1, sl
 8000818:	f7ff ffcc 	bl	80007b4 <OLED_DrawPoint>
		for(int x=a;x<b;x++)
 800081c:	3501      	adds	r5, #1
 800081e:	e7f4      	b.n	800080a <OLED_FillBlock+0x1e>

08000820 <OLED_FillRam>:
void OLED_FillRam(unsigned char Data) {
 8000820:	b507      	push	{r0, r1, r2, lr}
	OLED_FillBlock(0x00, Max_Column, 0x00, Max_Row,Data);
 8000822:	233f      	movs	r3, #63	; 0x3f
 8000824:	2200      	movs	r2, #0
 8000826:	9000      	str	r0, [sp, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	4610      	mov	r0, r2
 800082c:	f7ff ffde 	bl	80007ec <OLED_FillBlock>
}
 8000830:	b003      	add	sp, #12
 8000832:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000838 <OLED_RefreshGram>:
	point = (gram[y][group] & (point << (group_bit * 4))) >> (group_bit * 4);
	point = point & 0x00ff;
	return point;

}
void OLED_RefreshGram() {
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Write_Command(0x15);			// Set Column Address
 800083a:	2100      	movs	r1, #0
 800083c:	2015      	movs	r0, #21
 800083e:	f7ff ff91 	bl	8000764 <write>
	Write_Data(a);				//   Default => 0x00
 8000842:	2101      	movs	r1, #1
 8000844:	201c      	movs	r0, #28
 8000846:	f7ff ff8d 	bl	8000764 <write>
	Write_Data(b);				//   Default => 0x77
 800084a:	2101      	movs	r1, #1
 800084c:	205b      	movs	r0, #91	; 0x5b
 800084e:	f7ff ff89 	bl	8000764 <write>
	Write_Command(0x75);			// Set Row Address
 8000852:	2100      	movs	r1, #0
 8000854:	2075      	movs	r0, #117	; 0x75
 8000856:	f7ff ff85 	bl	8000764 <write>
	Write_Data(a);				//   Default => 0x00
 800085a:	2101      	movs	r1, #1
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ff81 	bl	8000764 <write>
	Write_Data(b);				//   Default => 0x7F
 8000862:	2101      	movs	r1, #1
 8000864:	203f      	movs	r0, #63	; 0x3f
 8000866:	f7ff ff7d 	bl	8000764 <write>
	Write_Command(0x5C);			// Enable MCU to Write into RAM
 800086a:	2100      	movs	r1, #0
 800086c:	205c      	movs	r0, #92	; 0x5c
 800086e:	f7ff ff79 	bl	8000764 <write>
 8000872:	2500      	movs	r5, #0
 8000874:	4f0a      	ldr	r7, [pc, #40]	; (80008a0 <OLED_RefreshGram+0x68>)
void OLED_RefreshGram() {
 8000876:	2400      	movs	r4, #0
 8000878:	197e      	adds	r6, r7, r5
	Set_Column_Address(Shift + a, Shift + b);
	Set_Row_Address(c, d);
	Set_Write_RAM();
	for (int y = 0; y < (d - c+1); y++) {
		for (int x = 0; x < (b - a+1); x++) {
			Write_Data((gram[y][x] & 0xff00) >> 8); //draw 3,4 point
 800087a:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 800087e:	2101      	movs	r1, #1
 8000880:	0a00      	lsrs	r0, r0, #8
 8000882:	f7ff ff6f 	bl	8000764 <write>
			Write_Data(gram[y][x] & 0x00ff); 		//draw 1,2 point
 8000886:	f816 0014 	ldrb.w	r0, [r6, r4, lsl #1]
 800088a:	2101      	movs	r1, #1
		for (int x = 0; x < (b - a+1); x++) {
 800088c:	3401      	adds	r4, #1
			Write_Data(gram[y][x] & 0x00ff); 		//draw 1,2 point
 800088e:	f7ff ff69 	bl	8000764 <write>
		for (int x = 0; x < (b - a+1); x++) {
 8000892:	2c40      	cmp	r4, #64	; 0x40
 8000894:	d1f1      	bne.n	800087a <OLED_RefreshGram+0x42>
 8000896:	3580      	adds	r5, #128	; 0x80
	for (int y = 0; y < (d - c+1); y++) {
 8000898:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800089c:	d1eb      	bne.n	8000876 <OLED_RefreshGram+0x3e>
 800089e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a0:	200000f0 	.word	0x200000f0

080008a4 <OLED_Clear>:
{
 80008a4:	b508      	push	{r3, lr}
	OLED_FillRam(0x00);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ffba 	bl	8000820 <OLED_FillRam>
}
 80008ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OLED_RefreshGram();
 80008b0:	f7ff bfc2 	b.w	8000838 <OLED_RefreshGram>

080008b4 <OLED_ShowChar>:
//   chr: 字元
//   f_w:字元寬度像素
//   f_h:字元高度像素
//	 mode: 0x00(滅) 0x01(亮)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80008b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008b8:	b085      	sub	sp, #20
 80008ba:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80008be:	9300      	str	r3, [sp, #0]
	uint8_t temp,t,t1;
	uint8_t y0=y;
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 80008c0:	f016 0307 	ands.w	r3, r6, #7
 80008c4:	bf18      	it	ne
 80008c6:	2301      	movne	r3, #1
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80008c8:	4688      	mov	r8, r1
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 80008ca:	9900      	ldr	r1, [sp, #0]
 80008cc:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 80008d0:	434b      	muls	r3, r1
 80008d2:	210c      	movs	r1, #12
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	9301      	str	r3, [sp, #4]
	chr=chr-' ';//得到偏移后的值
 80008d8:	3a20      	subs	r2, #32
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <OLED_ShowChar+0xb0>)
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	fb01 3302 	mla	r3, r1, r2, r3
 80008e2:	2106      	movs	r1, #6
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80008e4:	4605      	mov	r5, r0
	for(t=0;t<csize;t++)
 80008e6:	4644      	mov	r4, r8
 80008e8:	f04f 0a00 	mov.w	sl, #0
 80008ec:	9303      	str	r3, [sp, #12]
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <OLED_ShowChar+0xb4>)
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 80008f0:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
 80008f4:	fb01 3302 	mla	r3, r1, r2, r3
 80008f8:	9302      	str	r3, [sp, #8]
	for(t=0;t<csize;t++)
 80008fa:	9b01      	ldr	r3, [sp, #4]
 80008fc:	fa5f f28a 	uxtb.w	r2, sl
 8000900:	4293      	cmp	r3, r2
 8000902:	d802      	bhi.n	800090a <OLED_ShowChar+0x56>
				x++;
				break;
			}
		}
	}
}
 8000904:	b005      	add	sp, #20
 8000906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(f_w==6&&f_h==8)temp=asc2_0608[chr][t];		//调用0608ascii字体
 800090a:	9b00      	ldr	r3, [sp, #0]
 800090c:	2b06      	cmp	r3, #6
 800090e:	d1f9      	bne.n	8000904 <OLED_ShowChar+0x50>
 8000910:	2e08      	cmp	r6, #8
 8000912:	d120      	bne.n	8000956 <OLED_ShowChar+0xa2>
 8000914:	9b02      	ldr	r3, [sp, #8]
 8000916:	f104 0908 	add.w	r9, r4, #8
		else if(f_w==6&&f_h==12)temp=asc2_0612[chr][t];	//调用0612ascii字体
 800091a:	f813 700a 	ldrb.w	r7, [r3, sl]
 800091e:	fa5f f989 	uxtb.w	r9, r9
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8000922:	063b      	lsls	r3, r7, #24
			else OLED_DrawPoint(x,y,!mode);
 8000924:	bf58      	it	pl
 8000926:	fabb f28b 	clzpl	r2, fp
 800092a:	4621      	mov	r1, r4
			y++;
 800092c:	f104 0401 	add.w	r4, r4, #1
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8000930:	bf4c      	ite	mi
 8000932:	465a      	movmi	r2, fp
			else OLED_DrawPoint(x,y,!mode);
 8000934:	0952      	lsrpl	r2, r2, #5
 8000936:	4628      	mov	r0, r5
			y++;
 8000938:	b2e4      	uxtb	r4, r4
			else OLED_DrawPoint(x,y,!mode);
 800093a:	f7ff ff3b 	bl	80007b4 <OLED_DrawPoint>
			if((y-y0)==f_h)
 800093e:	eba4 0208 	sub.w	r2, r4, r8
			temp<<=1;
 8000942:	007f      	lsls	r7, r7, #1
			if((y-y0)==f_h)
 8000944:	42b2      	cmp	r2, r6
			temp<<=1;
 8000946:	b2ff      	uxtb	r7, r7
			if((y-y0)==f_h)
 8000948:	d109      	bne.n	800095e <OLED_ShowChar+0xaa>
				y=y0;
 800094a:	4644      	mov	r4, r8
				x++;
 800094c:	3501      	adds	r5, #1
 800094e:	b2ed      	uxtb	r5, r5
 8000950:	f10a 0a01 	add.w	sl, sl, #1
 8000954:	e7d1      	b.n	80008fa <OLED_ShowChar+0x46>
		else if(f_w==6&&f_h==12)temp=asc2_0612[chr][t];	//调用0612ascii字体
 8000956:	2e0c      	cmp	r6, #12
 8000958:	d1d4      	bne.n	8000904 <OLED_ShowChar+0x50>
 800095a:	9b03      	ldr	r3, [sp, #12]
 800095c:	e7db      	b.n	8000916 <OLED_ShowChar+0x62>
		for(t1=0;t1<8;t1++)
 800095e:	45a1      	cmp	r9, r4
 8000960:	d1df      	bne.n	8000922 <OLED_ShowChar+0x6e>
 8000962:	e7f5      	b.n	8000950 <OLED_ShowChar+0x9c>
 8000964:	08004320 	.word	0x08004320
 8000968:	080040e6 	.word	0x080040e6

0800096c <OLED_ShowPicture>:
//   p_w:圖片寬度像素
//   p_h:圖片高度像素
//	 mode: 0x00(滅) 0x01(亮)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void OLED_ShowPicture(uint8_t x,uint8_t y,const uint8_t *p,uint8_t p_w,uint8_t p_h)
{
 800096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000970:	468a      	mov	sl, r1
 8000972:	4698      	mov	r8, r3
 8000974:	b087      	sub	sp, #28
 8000976:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	uint8_t temp,i,col,row;
	uint8_t y0=y;
	uint8_t width=p_w;
	if(x+p_w>OLED_PIXEL_WIDTH)width=OLED_PIXEL_WIDTH-p_w;//实际显示宽度
 800097a:	18c3      	adds	r3, r0, r3
 800097c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000980:	bfc8      	it	gt
 8000982:	f1c8 0800 	rsbgt	r8, r8, #0
	uint8_t high=p_h;
	if(y+p_h>OLED_PIXEL_HEIGHT)high=OLED_PIXEL_HEIGHT-p_h;//实际显示高度
 8000986:	eb01 030a 	add.w	r3, r1, sl
	if(x+p_w>OLED_PIXEL_WIDTH)width=OLED_PIXEL_WIDTH-p_w;//实际显示宽度
 800098a:	bfc8      	it	gt
 800098c:	fa5f f888 	uxtbgt.w	r8, r8
	if(y+p_h>OLED_PIXEL_HEIGHT)high=OLED_PIXEL_HEIGHT-p_h;//实际显示高度
 8000990:	2b40      	cmp	r3, #64	; 0x40
	uint8_t high=p_h;
 8000992:	bfd2      	itee	le
 8000994:	460d      	movle	r5, r1
	if(y+p_h>OLED_PIXEL_HEIGHT)high=OLED_PIXEL_HEIGHT-p_h;//实际显示高度
 8000996:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 800099a:	b2ed      	uxtbgt	r5, r5
	uint8_t exp_col_bytes=(p_h/8+((p_h%8)?1:0));//显示一列的字节数
	uint8_t act_col_bytes=(high/8+((high%8)?1:0));//实际显示一列的字节数
 800099c:	f015 0307 	ands.w	r3, r5, #7
 80009a0:	bf18      	it	ne
 80009a2:	2301      	movne	r3, #1
 80009a4:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 80009a8:	9301      	str	r3, [sp, #4]
	uint8_t exp_col_bytes=(p_h/8+((p_h%8)?1:0));//显示一列的字节数
 80009aa:	f011 0307 	ands.w	r3, r1, #7
 80009ae:	bf18      	it	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
 80009b6:	9303      	str	r3, [sp, #12]
{
 80009b8:	4606      	mov	r6, r0
 80009ba:	4617      	mov	r7, r2

	for(row=0;row<width;row++)//列++
 80009bc:	4654      	mov	r4, sl
 80009be:	2300      	movs	r3, #0
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4590      	cmp	r8, r2
 80009c4:	d92e      	bls.n	8000a24 <OLED_ShowPicture+0xb8>
 80009c6:	9a01      	ldr	r2, [sp, #4]
 80009c8:	46bb      	mov	fp, r7
 80009ca:	443a      	add	r2, r7
 80009cc:	9204      	str	r2, [sp, #16]
 80009ce:	e01e      	b.n	8000a0e <OLED_ShowPicture+0xa2>
 80009d0:	f104 0208 	add.w	r2, r4, #8
 80009d4:	b2d2      	uxtb	r2, r2
	{
		for(col=0;col<act_col_bytes;col++)//显示一列
		{
			temp = p[col+row*exp_col_bytes];
 80009d6:	f81b 9b01 	ldrb.w	r9, [fp], #1
 80009da:	9202      	str	r2, [sp, #8]
			for(i=0;i<8;i++)
			{
				if(temp&0x80)OLED_DrawPoint(x,y,1);
 80009dc:	f019 0f80 	tst.w	r9, #128	; 0x80
				else OLED_DrawPoint(x,y,0);
 80009e0:	4621      	mov	r1, r4
				temp<<=1;
				y++;
 80009e2:	f104 0401 	add.w	r4, r4, #1
				if(temp&0x80)OLED_DrawPoint(x,y,1);
 80009e6:	bf14      	ite	ne
 80009e8:	2201      	movne	r2, #1
				else OLED_DrawPoint(x,y,0);
 80009ea:	2200      	moveq	r2, #0
 80009ec:	4630      	mov	r0, r6
				y++;
 80009ee:	b2e4      	uxtb	r4, r4
 80009f0:	9305      	str	r3, [sp, #20]
				else OLED_DrawPoint(x,y,0);
 80009f2:	f7ff fedf 	bl	80007b4 <OLED_DrawPoint>
				if((y-y0)==high)
 80009f6:	eba4 020a 	sub.w	r2, r4, sl
				temp<<=1;
 80009fa:	ea4f 0949 	mov.w	r9, r9, lsl #1
				if((y-y0)==high)
 80009fe:	42aa      	cmp	r2, r5
				else OLED_DrawPoint(x,y,0);
 8000a00:	9b05      	ldr	r3, [sp, #20]
				temp<<=1;
 8000a02:	fa5f f989 	uxtb.w	r9, r9
				if((y-y0)==high)
 8000a06:	d109      	bne.n	8000a1c <OLED_ShowPicture+0xb0>
				{
					y=y0;
 8000a08:	4654      	mov	r4, sl
					x++;
 8000a0a:	3601      	adds	r6, #1
 8000a0c:	b2f6      	uxtb	r6, r6
		for(col=0;col<act_col_bytes;col++)//显示一列
 8000a0e:	9a04      	ldr	r2, [sp, #16]
 8000a10:	4593      	cmp	fp, r2
 8000a12:	d1dd      	bne.n	80009d0 <OLED_ShowPicture+0x64>
 8000a14:	9a03      	ldr	r2, [sp, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4417      	add	r7, r2
 8000a1a:	e7d1      	b.n	80009c0 <OLED_ShowPicture+0x54>
			for(i=0;i<8;i++)
 8000a1c:	9a02      	ldr	r2, [sp, #8]
 8000a1e:	4294      	cmp	r4, r2
 8000a20:	d1dc      	bne.n	80009dc <OLED_ShowPicture+0x70>
 8000a22:	e7f4      	b.n	8000a0e <OLED_ShowPicture+0xa2>
					break;
				}
			}
		}
	}
}
 8000a24:	b007      	add	sp, #28
 8000a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000a2c <OLED_Init>:
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  OLED Initialization
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void OLED_Init() {
 8000a2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t dummy = 0x0;
 8000a2e:	2400      	movs	r4, #0


	//LCD_RST_SetLow();
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 8000a30:	4e7f      	ldr	r6, [pc, #508]	; (8000c30 <OLED_Init+0x204>)
 8000a32:	4622      	mov	r2, r4
	uint8_t dummy = 0x0;
 8000a34:	ad02      	add	r5, sp, #8
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 8000a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3a:	4630      	mov	r0, r6
	uint8_t dummy = 0x0;
 8000a3c:	f805 4d01 	strb.w	r4, [r5, #-1]!
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 8000a40:	f000 fb0e 	bl	8001060 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a48:	f000 f99e 	bl	8000d88 <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,SET);
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a54:	f000 fb04 	bl	8001060 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &dummy, 1, 1000);
 8000a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4629      	mov	r1, r5
 8000a60:	4874      	ldr	r0, [pc, #464]	; (8000c34 <OLED_Init+0x208>)
 8000a62:	f001 f8a4 	bl	8001bae <HAL_SPI_Transmit>
	Write_Command(0xFD);			// Set Command Lock
 8000a66:	4621      	mov	r1, r4
 8000a68:	20fd      	movs	r0, #253	; 0xfd
 8000a6a:	f7ff fe7b 	bl	8000764 <write>
	Write_Data(0x12 | d);			//   Default => 0x12
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2012      	movs	r0, #18
 8000a72:	f7ff fe77 	bl	8000764 <write>
	Write_Command(0xAE | d);			// Set Display On/Off
 8000a76:	4621      	mov	r1, r4
 8000a78:	20ae      	movs	r0, #174	; 0xae
 8000a7a:	f7ff fe73 	bl	8000764 <write>
	Write_Command(0xB3);	// Set Display Clock Divider / Oscillator Frequency
 8000a7e:	4621      	mov	r1, r4
 8000a80:	20b3      	movs	r0, #179	; 0xb3
 8000a82:	f7ff fe6f 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0xD0
 8000a86:	2101      	movs	r1, #1
 8000a88:	2091      	movs	r0, #145	; 0x91
 8000a8a:	f7ff fe6b 	bl	8000764 <write>
	Write_Command(0xCA);			// Set Multiplex Ratio
 8000a8e:	4621      	mov	r1, r4
 8000a90:	20ca      	movs	r0, #202	; 0xca
 8000a92:	f7ff fe67 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0x7F (1/128 Duty)
 8000a96:	2101      	movs	r1, #1
 8000a98:	203f      	movs	r0, #63	; 0x3f
 8000a9a:	f7ff fe63 	bl	8000764 <write>
	Write_Command(0xA2);			// Set Vertical Scroll by Row
 8000a9e:	4621      	mov	r1, r4
 8000aa0:	20a2      	movs	r0, #162	; 0xa2
 8000aa2:	f7ff fe5f 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0x00
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	f7ff fe5b 	bl	8000764 <write>
	Write_Command(0xA1);			// Set Vertical Scroll by RAM
 8000aae:	4621      	mov	r1, r4
 8000ab0:	20a1      	movs	r0, #161	; 0xa1
 8000ab2:	f7ff fe57 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0x00
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	2101      	movs	r1, #1
 8000aba:	f7ff fe53 	bl	8000764 <write>
	Write_Command(0xA0);			// Set Re-Map / Dual COM Line Mode
 8000abe:	4621      	mov	r1, r4
 8000ac0:	20a0      	movs	r0, #160	; 0xa0
 8000ac2:	f7ff fe4f 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0x40
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	2014      	movs	r0, #20
 8000aca:	f7ff fe4b 	bl	8000764 <write>
	Write_Data(0x11);			//   Default => 0x01 (Disable Dual COM Mode)
 8000ace:	2101      	movs	r1, #1
 8000ad0:	2011      	movs	r0, #17
 8000ad2:	f7ff fe47 	bl	8000764 <write>
	Write_Command(0xB5);			// General Purpose IO
 8000ad6:	4621      	mov	r1, r4
 8000ad8:	20b5      	movs	r0, #181	; 0xb5
 8000ada:	f7ff fe43 	bl	8000764 <write>
	Write_Data(d);			//   Default => 0x0A (GPIO Pins output Low Level.)
 8000ade:	4620      	mov	r0, r4
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	f7ff fe3f 	bl	8000764 <write>
	Write_Command(0xAB);			// Function Selection
 8000ae6:	4621      	mov	r1, r4
 8000ae8:	20ab      	movs	r0, #171	; 0xab
 8000aea:	f7ff fe3b 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0x01
 8000aee:	2101      	movs	r1, #1
 8000af0:	4608      	mov	r0, r1
 8000af2:	f7ff fe37 	bl	8000764 <write>
	Write_Command(0xB4);			// Display Enhancement
 8000af6:	4621      	mov	r1, r4
 8000af8:	20b4      	movs	r0, #180	; 0xb4
 8000afa:	f7ff fe33 	bl	8000764 <write>
	Write_Data(0xA0 | a);			//   Default => 0xA2
 8000afe:	2101      	movs	r1, #1
 8000b00:	20a0      	movs	r0, #160	; 0xa0
 8000b02:	f7ff fe2f 	bl	8000764 <write>
	Write_Data(0x05 | b);			//   Default => 0xB5
 8000b06:	2101      	movs	r1, #1
 8000b08:	20fd      	movs	r0, #253	; 0xfd
 8000b0a:	f7ff fe2b 	bl	8000764 <write>
	Write_Command(0xC1);			// Set Contrast Current
 8000b0e:	4621      	mov	r1, r4
 8000b10:	20c1      	movs	r0, #193	; 0xc1
 8000b12:	f7ff fe27 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0x7F
 8000b16:	2101      	movs	r1, #1
 8000b18:	209f      	movs	r0, #159	; 0x9f
 8000b1a:	f7ff fe23 	bl	8000764 <write>
	Write_Command(0xC7);			// Master Contrast Current Control
 8000b1e:	4621      	mov	r1, r4
 8000b20:	20c7      	movs	r0, #199	; 0xc7
 8000b22:	f7ff fe1f 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0x0f (Maximum)
 8000b26:	2101      	movs	r1, #1
 8000b28:	200f      	movs	r0, #15
 8000b2a:	f7ff fe1b 	bl	8000764 <write>
	Write_Command(0xB8);			// Set Gray Scale Table
 8000b2e:	4621      	mov	r1, r4
 8000b30:	20b8      	movs	r0, #184	; 0xb8
 8000b32:	f7ff fe17 	bl	8000764 <write>
	Write_Data(0x0C);			//   Gray Scale Level 1
 8000b36:	2101      	movs	r1, #1
 8000b38:	200c      	movs	r0, #12
 8000b3a:	f7ff fe13 	bl	8000764 <write>
	Write_Data(0x18);			//   Gray Scale Level 2
 8000b3e:	2101      	movs	r1, #1
 8000b40:	2018      	movs	r0, #24
 8000b42:	f7ff fe0f 	bl	8000764 <write>
	Write_Data(0x24);			//   Gray Scale Level 3
 8000b46:	2101      	movs	r1, #1
 8000b48:	2024      	movs	r0, #36	; 0x24
 8000b4a:	f7ff fe0b 	bl	8000764 <write>
	Write_Data(0x30);			//   Gray Scale Level 4
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2030      	movs	r0, #48	; 0x30
 8000b52:	f7ff fe07 	bl	8000764 <write>
	Write_Data(0x3C);			//   Gray Scale Level 5
 8000b56:	2101      	movs	r1, #1
 8000b58:	203c      	movs	r0, #60	; 0x3c
 8000b5a:	f7ff fe03 	bl	8000764 <write>
	Write_Data(0x48);			//   Gray Scale Level 6
 8000b5e:	2101      	movs	r1, #1
 8000b60:	2048      	movs	r0, #72	; 0x48
 8000b62:	f7ff fdff 	bl	8000764 <write>
	Write_Data(0x54);			//   Gray Scale Level 7
 8000b66:	2101      	movs	r1, #1
 8000b68:	2054      	movs	r0, #84	; 0x54
 8000b6a:	f7ff fdfb 	bl	8000764 <write>
	Write_Data(0x60);			//   Gray Scale Level 8
 8000b6e:	2101      	movs	r1, #1
 8000b70:	2060      	movs	r0, #96	; 0x60
 8000b72:	f7ff fdf7 	bl	8000764 <write>
	Write_Data(0x6C);			//   Gray Scale Level 9
 8000b76:	2101      	movs	r1, #1
 8000b78:	206c      	movs	r0, #108	; 0x6c
 8000b7a:	f7ff fdf3 	bl	8000764 <write>
	Write_Data(0x78);			//   Gray Scale Level 10
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2078      	movs	r0, #120	; 0x78
 8000b82:	f7ff fdef 	bl	8000764 <write>
	Write_Data(0x84);			//   Gray Scale Level 11
 8000b86:	2101      	movs	r1, #1
 8000b88:	2084      	movs	r0, #132	; 0x84
 8000b8a:	f7ff fdeb 	bl	8000764 <write>
	Write_Data(0x90);			//   Gray Scale Level 12
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2090      	movs	r0, #144	; 0x90
 8000b92:	f7ff fde7 	bl	8000764 <write>
	Write_Data(0x9C);			//   Gray Scale Level 13
 8000b96:	2101      	movs	r1, #1
 8000b98:	209c      	movs	r0, #156	; 0x9c
 8000b9a:	f7ff fde3 	bl	8000764 <write>
	Write_Data(0xA8);			//   Gray Scale Level 14
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	20a8      	movs	r0, #168	; 0xa8
 8000ba2:	f7ff fddf 	bl	8000764 <write>
	Write_Data(0xB4);			//   Gray Scale Level 15
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	20b4      	movs	r0, #180	; 0xb4
 8000baa:	f7ff fddb 	bl	8000764 <write>
	Write_Command(0x00);			// Enable Gray Scale Table
 8000bae:	4621      	mov	r1, r4
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f7ff fdd7 	bl	8000764 <write>
	Write_Command(0xB1);// Phase 1 (Reset) & Phase 2 (Pre-Charge) Period Adjustment
 8000bb6:	4621      	mov	r1, r4
 8000bb8:	20b1      	movs	r0, #177	; 0xb1
 8000bba:	f7ff fdd3 	bl	8000764 <write>
	Write_Data(d);//   Default => 0x74 (7 Display Clocks [Phase 2] / 9 Display Clocks [Phase 1])
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	20e2      	movs	r0, #226	; 0xe2
 8000bc2:	f7ff fdcf 	bl	8000764 <write>
	Write_Command(0xD1);			// Display Enhancement
 8000bc6:	4621      	mov	r1, r4
 8000bc8:	20d1      	movs	r0, #209	; 0xd1
 8000bca:	f7ff fdcb 	bl	8000764 <write>
	Write_Data(0x82 | d);			//   Default => 0xA2
 8000bce:	2101      	movs	r1, #1
 8000bd0:	20a2      	movs	r0, #162	; 0xa2
 8000bd2:	f7ff fdc7 	bl	8000764 <write>
	Write_Data(0x20);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f7ff fdc3 	bl	8000764 <write>
	Write_Command(0xBB);			// Set Pre-Charge Voltage Level
 8000bde:	4621      	mov	r1, r4
 8000be0:	20bb      	movs	r0, #187	; 0xbb
 8000be2:	f7ff fdbf 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0x17 (0.50*VCC)
 8000be6:	2101      	movs	r1, #1
 8000be8:	201f      	movs	r0, #31
 8000bea:	f7ff fdbb 	bl	8000764 <write>
	Write_Command(0xB6);			// Set Second Pre-Charge Period
 8000bee:	4621      	mov	r1, r4
 8000bf0:	20b6      	movs	r0, #182	; 0xb6
 8000bf2:	f7ff fdb7 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0x08 (8 Display Clocks)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2008      	movs	r0, #8
 8000bfa:	f7ff fdb3 	bl	8000764 <write>
	Write_Command(0xBE);			// Set COM Deselect Voltage Level
 8000bfe:	4621      	mov	r1, r4
 8000c00:	20be      	movs	r0, #190	; 0xbe
 8000c02:	f7ff fdaf 	bl	8000764 <write>
	Write_Data(d);				//   Default => 0x04 (0.80*VCC)
 8000c06:	2101      	movs	r1, #1
 8000c08:	2007      	movs	r0, #7
 8000c0a:	f7ff fdab 	bl	8000764 <write>
	Write_Command(0xA4 | d);			// Set Display Mode
 8000c0e:	4621      	mov	r1, r4
 8000c10:	20a6      	movs	r0, #166	; 0xa6
 8000c12:	f7ff fda7 	bl	8000764 <write>
	Write_Command(0xA8 | a);
 8000c16:	4621      	mov	r1, r4
 8000c18:	20a9      	movs	r0, #169	; 0xa9
 8000c1a:	f7ff fda3 	bl	8000764 <write>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
	Set_VCOMH(0x07);	// Set Common Pins Deselect Voltage Level as 0.86*VCC
	Set_Display_Mode(0x02);			// Normal Display Mode (0x00/0x01/0x02/0x03)
	Set_Partial_Display(0x01, 0x00, 0x00);	// Disable Partial Display

	OLED_Clear();				// Clear Screen
 8000c1e:	f7ff fe41 	bl	80008a4 <OLED_Clear>
	Write_Command(0xAE | d);			// Set Display On/Off
 8000c22:	4621      	mov	r1, r4
 8000c24:	20af      	movs	r0, #175	; 0xaf
 8000c26:	f7ff fd9d 	bl	8000764 <write>

	Set_Display_On_Off(0x01);		// Display On (0x00/0x01)

}
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	20003e70 	.word	0x20003e70

08000c38 <RotaryEcncorder_Init>:
	}
	return button_state;

}

void RotaryEcncorder_Init() {
 8000c38:	b510      	push	{r4, lr}
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c3a:	4c05      	ldr	r4, [pc, #20]	; (8000c50 <RotaryEcncorder_Init+0x18>)
 8000c3c:	2118      	movs	r1, #24
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f001 f899 	bl	8001d76 <HAL_TIM_Encoder_Start>
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//   設定旋轉編碼器數值
//   count:設定值範圍-32767~32767
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
int32_t RotaryEcncorder_SetCount(int32_t count) {
	__HAL_TIM_SET_COUNTER(&htim2,32767+count);
 8000c44:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
 8000c4c:	bd10      	pop	{r4, pc}
 8000c4e:	bf00      	nop
 8000c50:	20003ee0 	.word	0x20003ee0

08000c54 <RotaryEcncorder_SetCount>:
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <RotaryEcncorder_SetCount+0x10>)
 8000c56:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	307f      	adds	r0, #127	; 0x7f
 8000c5e:	6258      	str	r0, [r3, #36]	; 0x24
}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20003ee0 	.word	0x20003ee0

08000c68 <RotaryEcncorder_SetRange>:
	}

	if(min < -32767)min = -32767;
	if(max > 32767)max = 32767;

	range_min = min;
 8000c68:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <RotaryEcncorder_SetRange+0x24>)
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <RotaryEcncorder_SetRange+0x28>)
 8000c6c:	4281      	cmp	r1, r0
 8000c6e:	bfb8      	it	lt
 8000c70:	4601      	movlt	r1, r0
 8000c72:	4290      	cmp	r0, r2
 8000c74:	bfac      	ite	ge
 8000c76:	6018      	strge	r0, [r3, #0]
 8000c78:	601a      	strlt	r2, [r3, #0]
	range_max = max;
 8000c7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <RotaryEcncorder_SetRange+0x2c>)
 8000c80:	4291      	cmp	r1, r2
 8000c82:	bfd4      	ite	le
 8000c84:	6019      	strle	r1, [r3, #0]
 8000c86:	601a      	strgt	r2, [r3, #0]
}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	ffff8001 	.word	0xffff8001
 8000c90:	200020f4 	.word	0x200020f4
 8000c94:	20000004 	.word	0x20000004

08000c98 <RotaryEcncorder_GetCount>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//   取得旋轉編碼器計數值
//   返回值範圍0~32767
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
int32_t RotaryEcncorder_GetCount() {
 8000c98:	b508      	push	{r3, lr}
	int32_t count;

	count = __HAL_TIM_GET_COUNTER(&htim2);  //value: cw:0->65535  or  ccw:0<-65535<-0
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <RotaryEcncorder_GetCount+0x2c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6a58      	ldr	r0, [r3, #36]	; 0x24
	count -= 32767; //-32767 ~ 32767
	if(count > range_max)
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <RotaryEcncorder_GetCount+0x30>)
	count -= 32767; //-32767 ~ 32767
 8000ca2:	f5a0 40ff 	sub.w	r0, r0, #32640	; 0x7f80
	if(count > range_max)
 8000ca6:	681a      	ldr	r2, [r3, #0]
	count -= 32767; //-32767 ~ 32767
 8000ca8:	387f      	subs	r0, #127	; 0x7f
	if(count > range_max)
 8000caa:	4290      	cmp	r0, r2
 8000cac:	dd04      	ble.n	8000cb8 <RotaryEcncorder_GetCount+0x20>
		RotaryEcncorder_SetCount(count);
	}
	else if(count < range_min)
	{
		count = range_min;
		RotaryEcncorder_SetCount(count);
 8000cae:	4610      	mov	r0, r2
 8000cb0:	f7ff ffd0 	bl	8000c54 <RotaryEcncorder_SetCount>
 8000cb4:	4610      	mov	r0, r2
	}
	return count;
 8000cb6:	e003      	b.n	8000cc0 <RotaryEcncorder_GetCount+0x28>
	else if(count < range_min)
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <RotaryEcncorder_GetCount+0x34>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4290      	cmp	r0, r2
 8000cbe:	dbf6      	blt.n	8000cae <RotaryEcncorder_GetCount+0x16>
}
 8000cc0:	bd08      	pop	{r3, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20003ee0 	.word	0x20003ee0
 8000cc8:	20000004 	.word	0x20000004
 8000ccc:	200020f4 	.word	0x200020f4

08000cd0 <RotaryEcncorder_GetState>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//   取得旋轉編碼器狀態
//   返回值範圍-32767~32767
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Rotary_state RotaryEcncorder_GetState() {
 8000cd0:	b508      	push	{r3, lr}
	Rotary_state rstate;
	current_count = RotaryEcncorder_GetCount();  //value range: -32767~32767
 8000cd2:	f7ff ffe1 	bl	8000c98 <RotaryEcncorder_GetCount>
	if (current_count - last_count > 0) {
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <RotaryEcncorder_GetState+0x24>)
	current_count = RotaryEcncorder_GetCount();  //value range: -32767~32767
 8000cd8:	4601      	mov	r1, r0
	if (current_count - last_count > 0) {
 8000cda:	6813      	ldr	r3, [r2, #0]
 8000cdc:	1ac3      	subs	r3, r0, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	dc03      	bgt.n	8000cea <RotaryEcncorder_GetState+0x1a>
		rstate = state_clock_wise;
	} else if (current_count - last_count < 0) {
 8000ce2:	d104      	bne.n	8000cee <RotaryEcncorder_GetState+0x1e>
		rstate = state_counter_clock_wise;
	} else {
		rstate = state_no_changed;
 8000ce4:	4618      	mov	r0, r3
	}
	last_count = current_count;
 8000ce6:	6011      	str	r1, [r2, #0]
	return rstate;
}
 8000ce8:	bd08      	pop	{r3, pc}
		rstate = state_clock_wise;
 8000cea:	2001      	movs	r0, #1
 8000cec:	e7fb      	b.n	8000ce6 <RotaryEcncorder_GetState+0x16>
		rstate = state_counter_clock_wise;
 8000cee:	2002      	movs	r0, #2
 8000cf0:	e7f9      	b.n	8000ce6 <RotaryEcncorder_GetState+0x16>
 8000cf2:	bf00      	nop
 8000cf4:	200020f0 	.word	0x200020f0

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_InitTick+0x3c>)
{
 8000cfc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfe:	7818      	ldrb	r0, [r3, #0]
 8000d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d04:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <HAL_InitTick+0x40>)
 8000d0a:	6810      	ldr	r0, [r2, #0]
 8000d0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d10:	f000 f892 	bl	8000e38 <HAL_SYSTICK_Config>
 8000d14:	4604      	mov	r4, r0
 8000d16:	b958      	cbnz	r0, 8000d30 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d18:	2d0f      	cmp	r5, #15
 8000d1a:	d809      	bhi.n	8000d30 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	4629      	mov	r1, r5
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f854 	bl	8000dd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_InitTick+0x44>)
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	601d      	str	r5, [r3, #0]
 8000d2e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d30:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d32:	bd38      	pop	{r3, r4, r5, pc}
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	2000000c 	.word	0x2000000c

08000d40 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_Init+0x20>)
{
 8000d42:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d46:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4e:	f000 f82d 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff ffd0 	bl	8000cf8 <HAL_InitTick>
  HAL_MspInit();
 8000d58:	f7ff fc1a 	bl	8000590 <HAL_MspInit>
}
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	bd08      	pop	{r3, pc}
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <HAL_IncTick+0x10>)
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <HAL_IncTick+0x14>)
 8000d68:	6811      	ldr	r1, [r2, #0]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	440b      	add	r3, r1
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20003f24 	.word	0x20003f24
 8000d78:	20000008 	.word	0x20000008

08000d7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d7c:	4b01      	ldr	r3, [pc, #4]	; (8000d84 <HAL_GetTick+0x8>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20003f24 	.word	0x20003f24

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff fff6 	bl	8000d7c <HAL_GetTick>
 8000d90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d92:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d94:	bf1e      	ittt	ne
 8000d96:	4b04      	ldrne	r3, [pc, #16]	; (8000da8 <HAL_Delay+0x20>)
 8000d98:	781b      	ldrbne	r3, [r3, #0]
 8000d9a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	1b40      	subs	r0, r0, r5
 8000da2:	4284      	cmp	r4, r0
 8000da4:	d8fa      	bhi.n	8000d9c <HAL_Delay+0x14>
  {
  }
}
 8000da6:	bd38      	pop	{r3, r4, r5, pc}
 8000da8:	20000008 	.word	0x20000008

08000dac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000dae:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000db2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dba:	041b      	lsls	r3, r3, #16
 8000dbc:	0c1b      	lsrs	r3, r3, #16
 8000dbe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000dc6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000dc8:	60d3      	str	r3, [r2, #12]
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd2:	b530      	push	{r4, r5, lr}
 8000dd4:	68dc      	ldr	r4, [r3, #12]
 8000dd6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dda:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	bf28      	it	cs
 8000de4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dec:	bf98      	it	ls
 8000dee:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	fa05 f303 	lsl.w	r3, r5, r3
 8000df4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df8:	bf88      	it	hi
 8000dfa:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4019      	ands	r1, r3
 8000dfe:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	fa05 f404 	lsl.w	r4, r5, r4
 8000e04:	3c01      	subs	r4, #1
 8000e06:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e08:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0a:	ea42 0201 	orr.w	r2, r2, r1
 8000e0e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	bfaf      	iteee	ge
 8000e14:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	4b06      	ldrlt	r3, [pc, #24]	; (8000e34 <HAL_NVIC_SetPriority+0x64>)
 8000e1a:	f000 000f 	andlt.w	r0, r0, #15
 8000e1e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	bfa5      	ittet	ge
 8000e22:	b2d2      	uxtbge	r2, r2
 8000e24:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e2e:	bd30      	pop	{r4, r5, pc}
 8000e30:	e000ed00 	.word	0xe000ed00
 8000e34:	e000ed14 	.word	0xe000ed14

08000e38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	3801      	subs	r0, #1
 8000e3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e3e:	d20a      	bcs.n	8000e56 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e66:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	bf0c      	ite	eq
 8000e6c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e70:	f022 0204 	bicne.w	r2, r2, #4
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	4770      	bx	lr
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e7c:	4770      	bx	lr

08000e7e <HAL_SYSTICK_IRQHandler>:
{
 8000e7e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000e80:	f7ff fffc 	bl	8000e7c <HAL_SYSTICK_Callback>
 8000e84:	bd08      	pop	{r3, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000e8c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e90:	4f6c      	ldr	r7, [pc, #432]	; (8001044 <HAL_GPIO_Init+0x1bc>)
 8000e92:	4b6d      	ldr	r3, [pc, #436]	; (8001048 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e94:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8001050 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000e98:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8001054 <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 8000e9c:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea0:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000ea2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea6:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000eaa:	45a0      	cmp	r8, r4
 8000eac:	f040 8085 	bne.w	8000fba <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000eb0:	684d      	ldr	r5, [r1, #4]
 8000eb2:	2d12      	cmp	r5, #18
 8000eb4:	f000 80b7 	beq.w	8001026 <HAL_GPIO_Init+0x19e>
 8000eb8:	f200 808d 	bhi.w	8000fd6 <HAL_GPIO_Init+0x14e>
 8000ebc:	2d02      	cmp	r5, #2
 8000ebe:	f000 80af 	beq.w	8001020 <HAL_GPIO_Init+0x198>
 8000ec2:	f200 8081 	bhi.w	8000fc8 <HAL_GPIO_Init+0x140>
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	f000 8091 	beq.w	8000fee <HAL_GPIO_Init+0x166>
 8000ecc:	2d01      	cmp	r5, #1
 8000ece:	f000 80a5 	beq.w	800101c <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed2:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ed6:	2cff      	cmp	r4, #255	; 0xff
 8000ed8:	bf93      	iteet	ls
 8000eda:	4682      	movls	sl, r0
 8000edc:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000ee0:	3d08      	subhi	r5, #8
 8000ee2:	f8d0 b000 	ldrls.w	fp, [r0]
 8000ee6:	bf92      	itee	ls
 8000ee8:	00b5      	lslls	r5, r6, #2
 8000eea:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000eee:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ef0:	fa09 f805 	lsl.w	r8, r9, r5
 8000ef4:	ea2b 0808 	bic.w	r8, fp, r8
 8000ef8:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000efc:	bf88      	it	hi
 8000efe:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f02:	ea48 0505 	orr.w	r5, r8, r5
 8000f06:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f0a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000f0e:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000f12:	d052      	beq.n	8000fba <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f14:	69bd      	ldr	r5, [r7, #24]
 8000f16:	f026 0803 	bic.w	r8, r6, #3
 8000f1a:	f045 0501 	orr.w	r5, r5, #1
 8000f1e:	61bd      	str	r5, [r7, #24]
 8000f20:	69bd      	ldr	r5, [r7, #24]
 8000f22:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000f26:	f005 0501 	and.w	r5, r5, #1
 8000f2a:	9501      	str	r5, [sp, #4]
 8000f2c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f30:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f34:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f36:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000f3a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f3e:	fa09 f90b 	lsl.w	r9, r9, fp
 8000f42:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f46:	4d41      	ldr	r5, [pc, #260]	; (800104c <HAL_GPIO_Init+0x1c4>)
 8000f48:	42a8      	cmp	r0, r5
 8000f4a:	d071      	beq.n	8001030 <HAL_GPIO_Init+0x1a8>
 8000f4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f50:	42a8      	cmp	r0, r5
 8000f52:	d06f      	beq.n	8001034 <HAL_GPIO_Init+0x1ac>
 8000f54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f58:	42a8      	cmp	r0, r5
 8000f5a:	d06d      	beq.n	8001038 <HAL_GPIO_Init+0x1b0>
 8000f5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f60:	42a8      	cmp	r0, r5
 8000f62:	d06b      	beq.n	800103c <HAL_GPIO_Init+0x1b4>
 8000f64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	d069      	beq.n	8001040 <HAL_GPIO_Init+0x1b8>
 8000f6c:	4570      	cmp	r0, lr
 8000f6e:	bf0c      	ite	eq
 8000f70:	2505      	moveq	r5, #5
 8000f72:	2506      	movne	r5, #6
 8000f74:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f78:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000f7c:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f80:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f82:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000f86:	bf14      	ite	ne
 8000f88:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f8a:	43a5      	biceq	r5, r4
 8000f8c:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f8e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f90:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000f94:	bf14      	ite	ne
 8000f96:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f98:	43a5      	biceq	r5, r4
 8000f9a:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f9c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f9e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fa2:	bf14      	ite	ne
 8000fa4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fa6:	43a5      	biceq	r5, r4
 8000fa8:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000faa:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fac:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fb0:	bf14      	ite	ne
 8000fb2:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fb4:	ea25 0404 	biceq.w	r4, r5, r4
 8000fb8:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	3601      	adds	r6, #1
 8000fbc:	2e10      	cmp	r6, #16
 8000fbe:	f47f af6d 	bne.w	8000e9c <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 8000fc2:	b003      	add	sp, #12
 8000fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000fc8:	2d03      	cmp	r5, #3
 8000fca:	d025      	beq.n	8001018 <HAL_GPIO_Init+0x190>
 8000fcc:	2d11      	cmp	r5, #17
 8000fce:	d180      	bne.n	8000ed2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fd0:	68ca      	ldr	r2, [r1, #12]
 8000fd2:	3204      	adds	r2, #4
          break;
 8000fd4:	e77d      	b.n	8000ed2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000fd6:	4565      	cmp	r5, ip
 8000fd8:	d009      	beq.n	8000fee <HAL_GPIO_Init+0x166>
 8000fda:	d812      	bhi.n	8001002 <HAL_GPIO_Init+0x17a>
 8000fdc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001058 <HAL_GPIO_Init+0x1d0>
 8000fe0:	454d      	cmp	r5, r9
 8000fe2:	d004      	beq.n	8000fee <HAL_GPIO_Init+0x166>
 8000fe4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000fe8:	454d      	cmp	r5, r9
 8000fea:	f47f af72 	bne.w	8000ed2 <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fee:	688a      	ldr	r2, [r1, #8]
 8000ff0:	b1e2      	cbz	r2, 800102c <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000ff4:	bf0c      	ite	eq
 8000ff6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000ffa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffe:	2208      	movs	r2, #8
 8001000:	e767      	b.n	8000ed2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001002:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800105c <HAL_GPIO_Init+0x1d4>
 8001006:	454d      	cmp	r5, r9
 8001008:	d0f1      	beq.n	8000fee <HAL_GPIO_Init+0x166>
 800100a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800100e:	454d      	cmp	r5, r9
 8001010:	d0ed      	beq.n	8000fee <HAL_GPIO_Init+0x166>
 8001012:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001016:	e7e7      	b.n	8000fe8 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001018:	2200      	movs	r2, #0
 800101a:	e75a      	b.n	8000ed2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800101c:	68ca      	ldr	r2, [r1, #12]
          break;
 800101e:	e758      	b.n	8000ed2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001020:	68ca      	ldr	r2, [r1, #12]
 8001022:	3208      	adds	r2, #8
          break;
 8001024:	e755      	b.n	8000ed2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001026:	68ca      	ldr	r2, [r1, #12]
 8001028:	320c      	adds	r2, #12
          break;
 800102a:	e752      	b.n	8000ed2 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800102c:	2204      	movs	r2, #4
 800102e:	e750      	b.n	8000ed2 <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001030:	2500      	movs	r5, #0
 8001032:	e79f      	b.n	8000f74 <HAL_GPIO_Init+0xec>
 8001034:	2501      	movs	r5, #1
 8001036:	e79d      	b.n	8000f74 <HAL_GPIO_Init+0xec>
 8001038:	2502      	movs	r5, #2
 800103a:	e79b      	b.n	8000f74 <HAL_GPIO_Init+0xec>
 800103c:	2503      	movs	r5, #3
 800103e:	e799      	b.n	8000f74 <HAL_GPIO_Init+0xec>
 8001040:	2504      	movs	r5, #4
 8001042:	e797      	b.n	8000f74 <HAL_GPIO_Init+0xec>
 8001044:	40021000 	.word	0x40021000
 8001048:	40010400 	.word	0x40010400
 800104c:	40010800 	.word	0x40010800
 8001050:	40011c00 	.word	0x40011c00
 8001054:	10210000 	.word	0x10210000
 8001058:	10110000 	.word	0x10110000
 800105c:	10310000 	.word	0x10310000

08001060 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001060:	b10a      	cbz	r2, 8001066 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001062:	6101      	str	r1, [r0, #16]
 8001064:	4770      	bx	lr
 8001066:	0409      	lsls	r1, r1, #16
 8001068:	e7fb      	b.n	8001062 <HAL_GPIO_WritePin+0x2>

0800106a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800106a:	68c3      	ldr	r3, [r0, #12]
 800106c:	4059      	eors	r1, r3
 800106e:	60c1      	str	r1, [r0, #12]
 8001070:	4770      	bx	lr
	...

08001074 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001074:	2201      	movs	r2, #1
 8001076:	4b01      	ldr	r3, [pc, #4]	; (800107c <HAL_PWR_EnableBkUpAccess+0x8>)
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	4770      	bx	lr
 800107c:	420e0020 	.word	0x420e0020

08001080 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001080:	6803      	ldr	r3, [r0, #0]
{
 8001082:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001086:	07db      	lsls	r3, r3, #31
{
 8001088:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108a:	d410      	bmi.n	80010ae <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108c:	682b      	ldr	r3, [r5, #0]
 800108e:	079f      	lsls	r7, r3, #30
 8001090:	d45e      	bmi.n	8001150 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001092:	682b      	ldr	r3, [r5, #0]
 8001094:	0719      	lsls	r1, r3, #28
 8001096:	f100 8095 	bmi.w	80011c4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800109a:	682b      	ldr	r3, [r5, #0]
 800109c:	075a      	lsls	r2, r3, #29
 800109e:	f100 80bf 	bmi.w	8001220 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010a2:	69ea      	ldr	r2, [r5, #28]
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	f040 812d 	bne.w	8001304 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80010aa:	2000      	movs	r0, #0
 80010ac:	e014      	b.n	80010d8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010ae:	4c90      	ldr	r4, [pc, #576]	; (80012f0 <HAL_RCC_OscConfig+0x270>)
 80010b0:	6863      	ldr	r3, [r4, #4]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d007      	beq.n	80010ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ba:	6863      	ldr	r3, [r4, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d10c      	bne.n	80010de <HAL_RCC_OscConfig+0x5e>
 80010c4:	6863      	ldr	r3, [r4, #4]
 80010c6:	03de      	lsls	r6, r3, #15
 80010c8:	d509      	bpl.n	80010de <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	039c      	lsls	r4, r3, #14
 80010ce:	d5dd      	bpl.n	800108c <HAL_RCC_OscConfig+0xc>
 80010d0:	686b      	ldr	r3, [r5, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1da      	bne.n	800108c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
}
 80010d8:	b002      	add	sp, #8
 80010da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010de:	686b      	ldr	r3, [r5, #4]
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	d110      	bne.n	8001108 <HAL_RCC_OscConfig+0x88>
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010ee:	f7ff fe45 	bl	8000d7c <HAL_GetTick>
 80010f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	0398      	lsls	r0, r3, #14
 80010f8:	d4c8      	bmi.n	800108c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fa:	f7ff fe3f 	bl	8000d7c <HAL_GetTick>
 80010fe:	1b80      	subs	r0, r0, r6
 8001100:	2864      	cmp	r0, #100	; 0x64
 8001102:	d9f7      	bls.n	80010f4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001104:	2003      	movs	r0, #3
 8001106:	e7e7      	b.n	80010d8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001108:	b99b      	cbnz	r3, 8001132 <HAL_RCC_OscConfig+0xb2>
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001110:	6023      	str	r3, [r4, #0]
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001118:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800111a:	f7ff fe2f 	bl	8000d7c <HAL_GetTick>
 800111e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	0399      	lsls	r1, r3, #14
 8001124:	d5b2      	bpl.n	800108c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001126:	f7ff fe29 	bl	8000d7c <HAL_GetTick>
 800112a:	1b80      	subs	r0, r0, r6
 800112c:	2864      	cmp	r0, #100	; 0x64
 800112e:	d9f7      	bls.n	8001120 <HAL_RCC_OscConfig+0xa0>
 8001130:	e7e8      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001132:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	d103      	bne.n	8001142 <HAL_RCC_OscConfig+0xc2>
 800113a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113e:	6023      	str	r3, [r4, #0]
 8001140:	e7d1      	b.n	80010e6 <HAL_RCC_OscConfig+0x66>
 8001142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001146:	6023      	str	r3, [r4, #0]
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	e7cd      	b.n	80010ec <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001150:	4c67      	ldr	r4, [pc, #412]	; (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001152:	6863      	ldr	r3, [r4, #4]
 8001154:	f013 0f0c 	tst.w	r3, #12
 8001158:	d007      	beq.n	800116a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800115a:	6863      	ldr	r3, [r4, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b08      	cmp	r3, #8
 8001162:	d110      	bne.n	8001186 <HAL_RCC_OscConfig+0x106>
 8001164:	6863      	ldr	r3, [r4, #4]
 8001166:	03da      	lsls	r2, r3, #15
 8001168:	d40d      	bmi.n	8001186 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	079b      	lsls	r3, r3, #30
 800116e:	d502      	bpl.n	8001176 <HAL_RCC_OscConfig+0xf6>
 8001170:	692b      	ldr	r3, [r5, #16]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d1af      	bne.n	80010d6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	696a      	ldr	r2, [r5, #20]
 800117a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800117e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001182:	6023      	str	r3, [r4, #0]
 8001184:	e785      	b.n	8001092 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001186:	692a      	ldr	r2, [r5, #16]
 8001188:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 800118a:	b16a      	cbz	r2, 80011a8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001190:	f7ff fdf4 	bl	8000d7c <HAL_GetTick>
 8001194:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	079f      	lsls	r7, r3, #30
 800119a:	d4ec      	bmi.n	8001176 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fdee 	bl	8000d7c <HAL_GetTick>
 80011a0:	1b80      	subs	r0, r0, r6
 80011a2:	2802      	cmp	r0, #2
 80011a4:	d9f7      	bls.n	8001196 <HAL_RCC_OscConfig+0x116>
 80011a6:	e7ad      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80011a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011aa:	f7ff fde7 	bl	8000d7c <HAL_GetTick>
 80011ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	0798      	lsls	r0, r3, #30
 80011b4:	f57f af6d 	bpl.w	8001092 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b8:	f7ff fde0 	bl	8000d7c <HAL_GetTick>
 80011bc:	1b80      	subs	r0, r0, r6
 80011be:	2802      	cmp	r0, #2
 80011c0:	d9f6      	bls.n	80011b0 <HAL_RCC_OscConfig+0x130>
 80011c2:	e79f      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c4:	69aa      	ldr	r2, [r5, #24]
 80011c6:	4c4a      	ldr	r4, [pc, #296]	; (80012f0 <HAL_RCC_OscConfig+0x270>)
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <HAL_RCC_OscConfig+0x278>)
 80011ca:	b1da      	cbz	r2, 8001204 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011d0:	f7ff fdd4 	bl	8000d7c <HAL_GetTick>
 80011d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011d8:	079b      	lsls	r3, r3, #30
 80011da:	d50d      	bpl.n	80011f8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80011e0:	4b46      	ldr	r3, [pc, #280]	; (80012fc <HAL_RCC_OscConfig+0x27c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80011e8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80011ea:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80011ec:	9b01      	ldr	r3, [sp, #4]
 80011ee:	1e5a      	subs	r2, r3, #1
 80011f0:	9201      	str	r2, [sp, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f9      	bne.n	80011ea <HAL_RCC_OscConfig+0x16a>
 80011f6:	e750      	b.n	800109a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fdc0 	bl	8000d7c <HAL_GetTick>
 80011fc:	1b80      	subs	r0, r0, r6
 80011fe:	2802      	cmp	r0, #2
 8001200:	d9e9      	bls.n	80011d6 <HAL_RCC_OscConfig+0x156>
 8001202:	e77f      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001204:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001206:	f7ff fdb9 	bl	8000d7c <HAL_GetTick>
 800120a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800120e:	079f      	lsls	r7, r3, #30
 8001210:	f57f af43 	bpl.w	800109a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001214:	f7ff fdb2 	bl	8000d7c <HAL_GetTick>
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	2802      	cmp	r0, #2
 800121c:	d9f6      	bls.n	800120c <HAL_RCC_OscConfig+0x18c>
 800121e:	e771      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001220:	4c33      	ldr	r4, [pc, #204]	; (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001222:	69e3      	ldr	r3, [r4, #28]
 8001224:	00d8      	lsls	r0, r3, #3
 8001226:	d424      	bmi.n	8001272 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001228:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	69e3      	ldr	r3, [r4, #28]
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	61e3      	str	r3, [r4, #28]
 8001232:	69e3      	ldr	r3, [r4, #28]
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	4e30      	ldr	r6, [pc, #192]	; (8001300 <HAL_RCC_OscConfig+0x280>)
 800123e:	6833      	ldr	r3, [r6, #0]
 8001240:	05d9      	lsls	r1, r3, #23
 8001242:	d518      	bpl.n	8001276 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001244:	68eb      	ldr	r3, [r5, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d126      	bne.n	8001298 <HAL_RCC_OscConfig+0x218>
 800124a:	6a23      	ldr	r3, [r4, #32]
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001252:	f7ff fd93 	bl	8000d7c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800125a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	6a23      	ldr	r3, [r4, #32]
 800125e:	079b      	lsls	r3, r3, #30
 8001260:	d53f      	bpl.n	80012e2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001262:	2f00      	cmp	r7, #0
 8001264:	f43f af1d 	beq.w	80010a2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001268:	69e3      	ldr	r3, [r4, #28]
 800126a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800126e:	61e3      	str	r3, [r4, #28]
 8001270:	e717      	b.n	80010a2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001272:	2700      	movs	r7, #0
 8001274:	e7e2      	b.n	800123c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001276:	6833      	ldr	r3, [r6, #0]
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800127e:	f7ff fd7d 	bl	8000d7c <HAL_GetTick>
 8001282:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001284:	6833      	ldr	r3, [r6, #0]
 8001286:	05da      	lsls	r2, r3, #23
 8001288:	d4dc      	bmi.n	8001244 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128a:	f7ff fd77 	bl	8000d7c <HAL_GetTick>
 800128e:	eba0 0008 	sub.w	r0, r0, r8
 8001292:	2864      	cmp	r0, #100	; 0x64
 8001294:	d9f6      	bls.n	8001284 <HAL_RCC_OscConfig+0x204>
 8001296:	e735      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001298:	b9ab      	cbnz	r3, 80012c6 <HAL_RCC_OscConfig+0x246>
 800129a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	6223      	str	r3, [r4, #32]
 80012a6:	6a23      	ldr	r3, [r4, #32]
 80012a8:	f023 0304 	bic.w	r3, r3, #4
 80012ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012ae:	f7ff fd65 	bl	8000d7c <HAL_GetTick>
 80012b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b4:	6a23      	ldr	r3, [r4, #32]
 80012b6:	0798      	lsls	r0, r3, #30
 80012b8:	d5d3      	bpl.n	8001262 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff fd5f 	bl	8000d7c <HAL_GetTick>
 80012be:	1b80      	subs	r0, r0, r6
 80012c0:	4540      	cmp	r0, r8
 80012c2:	d9f7      	bls.n	80012b4 <HAL_RCC_OscConfig+0x234>
 80012c4:	e71e      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	6a23      	ldr	r3, [r4, #32]
 80012ca:	d103      	bne.n	80012d4 <HAL_RCC_OscConfig+0x254>
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6223      	str	r3, [r4, #32]
 80012d2:	e7ba      	b.n	800124a <HAL_RCC_OscConfig+0x1ca>
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	6223      	str	r3, [r4, #32]
 80012da:	6a23      	ldr	r3, [r4, #32]
 80012dc:	f023 0304 	bic.w	r3, r3, #4
 80012e0:	e7b6      	b.n	8001250 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff fd4b 	bl	8000d7c <HAL_GetTick>
 80012e6:	eba0 0008 	sub.w	r0, r0, r8
 80012ea:	42b0      	cmp	r0, r6
 80012ec:	d9b6      	bls.n	800125c <HAL_RCC_OscConfig+0x1dc>
 80012ee:	e709      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
 80012f0:	40021000 	.word	0x40021000
 80012f4:	42420000 	.word	0x42420000
 80012f8:	42420480 	.word	0x42420480
 80012fc:	20000000 	.word	0x20000000
 8001300:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001304:	4c22      	ldr	r4, [pc, #136]	; (8001390 <HAL_RCC_OscConfig+0x310>)
 8001306:	6863      	ldr	r3, [r4, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	f43f aee2 	beq.w	80010d6 <HAL_RCC_OscConfig+0x56>
 8001312:	2300      	movs	r3, #0
 8001314:	4e1f      	ldr	r6, [pc, #124]	; (8001394 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001316:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001318:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131a:	d12b      	bne.n	8001374 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800131c:	f7ff fd2e 	bl	8000d7c <HAL_GetTick>
 8001320:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	0199      	lsls	r1, r3, #6
 8001326:	d41f      	bmi.n	8001368 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001328:	6a2b      	ldr	r3, [r5, #32]
 800132a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132e:	d105      	bne.n	800133c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001330:	6862      	ldr	r2, [r4, #4]
 8001332:	68a9      	ldr	r1, [r5, #8]
 8001334:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001338:	430a      	orrs	r2, r1
 800133a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800133c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800133e:	6862      	ldr	r2, [r4, #4]
 8001340:	430b      	orrs	r3, r1
 8001342:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001346:	4313      	orrs	r3, r2
 8001348:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800134a:	2301      	movs	r3, #1
 800134c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800134e:	f7ff fd15 	bl	8000d7c <HAL_GetTick>
 8001352:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	019a      	lsls	r2, r3, #6
 8001358:	f53f aea7 	bmi.w	80010aa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800135c:	f7ff fd0e 	bl	8000d7c <HAL_GetTick>
 8001360:	1b40      	subs	r0, r0, r5
 8001362:	2802      	cmp	r0, #2
 8001364:	d9f6      	bls.n	8001354 <HAL_RCC_OscConfig+0x2d4>
 8001366:	e6cd      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001368:	f7ff fd08 	bl	8000d7c <HAL_GetTick>
 800136c:	1bc0      	subs	r0, r0, r7
 800136e:	2802      	cmp	r0, #2
 8001370:	d9d7      	bls.n	8001322 <HAL_RCC_OscConfig+0x2a2>
 8001372:	e6c7      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001374:	f7ff fd02 	bl	8000d7c <HAL_GetTick>
 8001378:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	019b      	lsls	r3, r3, #6
 800137e:	f57f ae94 	bpl.w	80010aa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff fcfb 	bl	8000d7c <HAL_GetTick>
 8001386:	1b40      	subs	r0, r0, r5
 8001388:	2802      	cmp	r0, #2
 800138a:	d9f6      	bls.n	800137a <HAL_RCC_OscConfig+0x2fa>
 800138c:	e6ba      	b.n	8001104 <HAL_RCC_OscConfig+0x84>
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	42420060 	.word	0x42420060

08001398 <HAL_RCC_GetSysClockFreq>:
{
 8001398:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800139c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800139e:	ac02      	add	r4, sp, #8
 80013a0:	f103 0510 	add.w	r5, r3, #16
 80013a4:	4622      	mov	r2, r4
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	3308      	adds	r3, #8
 80013ac:	c203      	stmia	r2!, {r0, r1}
 80013ae:	42ab      	cmp	r3, r5
 80013b0:	4614      	mov	r4, r2
 80013b2:	d1f7      	bne.n	80013a4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013b4:	2301      	movs	r3, #1
 80013b6:	f88d 3004 	strb.w	r3, [sp, #4]
 80013ba:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80013bc:	4911      	ldr	r1, [pc, #68]	; (8001404 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013be:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80013c2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013c4:	f003 020c 	and.w	r2, r3, #12
 80013c8:	2a08      	cmp	r2, #8
 80013ca:	d117      	bne.n	80013fc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013cc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80013d0:	a806      	add	r0, sp, #24
 80013d2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013d4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013d6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013da:	d50c      	bpl.n	80013f6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013dc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013de:	480a      	ldr	r0, [pc, #40]	; (8001408 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013e0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013e4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013e6:	aa06      	add	r2, sp, #24
 80013e8:	4413      	add	r3, r2
 80013ea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ee:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80013f2:	b007      	add	sp, #28
 80013f4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_RCC_GetSysClockFreq+0x74>)
 80013f8:	4350      	muls	r0, r2
 80013fa:	e7fa      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80013fe:	e7f8      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x5a>
 8001400:	08003f3c 	.word	0x08003f3c
 8001404:	40021000 	.word	0x40021000
 8001408:	007a1200 	.word	0x007a1200
 800140c:	003d0900 	.word	0x003d0900

08001410 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001410:	4a4d      	ldr	r2, [pc, #308]	; (8001548 <HAL_RCC_ClockConfig+0x138>)
{
 8001412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001416:	6813      	ldr	r3, [r2, #0]
{
 8001418:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	428b      	cmp	r3, r1
{
 8001420:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001422:	d328      	bcc.n	8001476 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001424:	682a      	ldr	r2, [r5, #0]
 8001426:	0791      	lsls	r1, r2, #30
 8001428:	d432      	bmi.n	8001490 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	07d2      	lsls	r2, r2, #31
 800142c:	d438      	bmi.n	80014a0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800142e:	4a46      	ldr	r2, [pc, #280]	; (8001548 <HAL_RCC_ClockConfig+0x138>)
 8001430:	6813      	ldr	r3, [r2, #0]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	429e      	cmp	r6, r3
 8001438:	d373      	bcc.n	8001522 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143a:	682a      	ldr	r2, [r5, #0]
 800143c:	4c43      	ldr	r4, [pc, #268]	; (800154c <HAL_RCC_ClockConfig+0x13c>)
 800143e:	f012 0f04 	tst.w	r2, #4
 8001442:	d179      	bne.n	8001538 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	0713      	lsls	r3, r2, #28
 8001446:	d506      	bpl.n	8001456 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001448:	6863      	ldr	r3, [r4, #4]
 800144a:	692a      	ldr	r2, [r5, #16]
 800144c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001450:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001454:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001456:	f7ff ff9f 	bl	8001398 <HAL_RCC_GetSysClockFreq>
 800145a:	6863      	ldr	r3, [r4, #4]
 800145c:	4a3c      	ldr	r2, [pc, #240]	; (8001550 <HAL_RCC_ClockConfig+0x140>)
 800145e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001462:	5cd3      	ldrb	r3, [r2, r3]
 8001464:	40d8      	lsrs	r0, r3
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <HAL_RCC_ClockConfig+0x144>)
 8001468:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fc44 	bl	8000cf8 <HAL_InitTick>
  return HAL_OK;
 8001470:	2000      	movs	r0, #0
}
 8001472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	f023 0307 	bic.w	r3, r3, #7
 800147c:	430b      	orrs	r3, r1
 800147e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001480:	6813      	ldr	r3, [r2, #0]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	4299      	cmp	r1, r3
 8001488:	d0cc      	beq.n	8001424 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800148a:	2001      	movs	r0, #1
 800148c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001490:	492e      	ldr	r1, [pc, #184]	; (800154c <HAL_RCC_ClockConfig+0x13c>)
 8001492:	68a8      	ldr	r0, [r5, #8]
 8001494:	684b      	ldr	r3, [r1, #4]
 8001496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800149a:	4303      	orrs	r3, r0
 800149c:	604b      	str	r3, [r1, #4]
 800149e:	e7c4      	b.n	800142a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a0:	686a      	ldr	r2, [r5, #4]
 80014a2:	4c2a      	ldr	r4, [pc, #168]	; (800154c <HAL_RCC_ClockConfig+0x13c>)
 80014a4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a8:	d11c      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	d0ec      	beq.n	800148a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b0:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b6:	f023 0303 	bic.w	r3, r3, #3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80014be:	f7ff fc5d 	bl	8000d7c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80014c4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d114      	bne.n	80014f4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ca:	6863      	ldr	r3, [r4, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d0ac      	beq.n	800142e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f7ff fc52 	bl	8000d7c <HAL_GetTick>
 80014d8:	1bc0      	subs	r0, r0, r7
 80014da:	4540      	cmp	r0, r8
 80014dc:	d9f5      	bls.n	80014ca <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80014de:	2003      	movs	r0, #3
 80014e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e4:	2a02      	cmp	r2, #2
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014ec:	e7df      	b.n	80014ae <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ee:	f013 0f02 	tst.w	r3, #2
 80014f2:	e7dc      	b.n	80014ae <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d10f      	bne.n	8001518 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f8:	6863      	ldr	r3, [r4, #4]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d095      	beq.n	800142e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001502:	f7ff fc3b 	bl	8000d7c <HAL_GetTick>
 8001506:	1bc0      	subs	r0, r0, r7
 8001508:	4540      	cmp	r0, r8
 800150a:	d9f5      	bls.n	80014f8 <HAL_RCC_ClockConfig+0xe8>
 800150c:	e7e7      	b.n	80014de <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150e:	f7ff fc35 	bl	8000d7c <HAL_GetTick>
 8001512:	1bc0      	subs	r0, r0, r7
 8001514:	4540      	cmp	r0, r8
 8001516:	d8e2      	bhi.n	80014de <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001518:	6863      	ldr	r3, [r4, #4]
 800151a:	f013 0f0c 	tst.w	r3, #12
 800151e:	d1f6      	bne.n	800150e <HAL_RCC_ClockConfig+0xfe>
 8001520:	e785      	b.n	800142e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	6813      	ldr	r3, [r2, #0]
 8001524:	f023 0307 	bic.w	r3, r3, #7
 8001528:	4333      	orrs	r3, r6
 800152a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	429e      	cmp	r6, r3
 8001534:	d1a9      	bne.n	800148a <HAL_RCC_ClockConfig+0x7a>
 8001536:	e780      	b.n	800143a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001538:	6863      	ldr	r3, [r4, #4]
 800153a:	68e9      	ldr	r1, [r5, #12]
 800153c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001540:	430b      	orrs	r3, r1
 8001542:	6063      	str	r3, [r4, #4]
 8001544:	e77e      	b.n	8001444 <HAL_RCC_ClockConfig+0x34>
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000
 800154c:	40021000 	.word	0x40021000
 8001550:	08003f7b 	.word	0x08003f7b
 8001554:	20000000 	.word	0x20000000

08001558 <HAL_RCC_GetHCLKFreq>:
}
 8001558:	4b01      	ldr	r3, [pc, #4]	; (8001560 <HAL_RCC_GetHCLKFreq+0x8>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000000 	.word	0x20000000

08001564 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001572:	6810      	ldr	r0, [r2, #0]
} 
 8001574:	40d8      	lsrs	r0, r3
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000
 800157c:	08003f8b 	.word	0x08003f8b
 8001580:	20000000 	.word	0x20000000

08001584 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001584:	6803      	ldr	r3, [r0, #0]
{
 8001586:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800158a:	07d9      	lsls	r1, r3, #31
{
 800158c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800158e:	d520      	bpl.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001590:	4c35      	ldr	r4, [pc, #212]	; (8001668 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001592:	69e3      	ldr	r3, [r4, #28]
 8001594:	00da      	lsls	r2, r3, #3
 8001596:	d432      	bmi.n	80015fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001598:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	69e3      	ldr	r3, [r4, #28]
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	61e3      	str	r3, [r4, #28]
 80015a2:	69e3      	ldr	r3, [r4, #28]
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	4e2f      	ldr	r6, [pc, #188]	; (800166c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80015ae:	6833      	ldr	r3, [r6, #0]
 80015b0:	05db      	lsls	r3, r3, #23
 80015b2:	d526      	bpl.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015b4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80015ba:	d136      	bne.n	800162a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80015bc:	6a23      	ldr	r3, [r4, #32]
 80015be:	686a      	ldr	r2, [r5, #4]
 80015c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015c4:	4313      	orrs	r3, r2
 80015c6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015c8:	b11f      	cbz	r7, 80015d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ca:	69e3      	ldr	r3, [r4, #28]
 80015cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80015d2:	6828      	ldr	r0, [r5, #0]
 80015d4:	0783      	lsls	r3, r0, #30
 80015d6:	d506      	bpl.n	80015e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015d8:	4a23      	ldr	r2, [pc, #140]	; (8001668 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80015da:	68a9      	ldr	r1, [r5, #8]
 80015dc:	6853      	ldr	r3, [r2, #4]
 80015de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015e2:	430b      	orrs	r3, r1
 80015e4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80015e6:	f010 0010 	ands.w	r0, r0, #16
 80015ea:	d01b      	beq.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015ec:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80015ee:	6969      	ldr	r1, [r5, #20]
 80015f0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80015f2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015f8:	430b      	orrs	r3, r1
 80015fa:	6053      	str	r3, [r2, #4]
 80015fc:	e012      	b.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2700      	movs	r7, #0
 8001600:	e7d4      	b.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	6833      	ldr	r3, [r6, #0]
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800160a:	f7ff fbb7 	bl	8000d7c <HAL_GetTick>
 800160e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	6833      	ldr	r3, [r6, #0]
 8001612:	05d8      	lsls	r0, r3, #23
 8001614:	d4ce      	bmi.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff fbb1 	bl	8000d7c <HAL_GetTick>
 800161a:	eba0 0008 	sub.w	r0, r0, r8
 800161e:	2864      	cmp	r0, #100	; 0x64
 8001620:	d9f6      	bls.n	8001610 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001622:	2003      	movs	r0, #3
}
 8001624:	b002      	add	sp, #8
 8001626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800162a:	686a      	ldr	r2, [r5, #4]
 800162c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001630:	4293      	cmp	r3, r2
 8001632:	d0c3      	beq.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001634:	2001      	movs	r0, #1
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001638:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800163a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800163c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800163e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001642:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001644:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001646:	07d9      	lsls	r1, r3, #31
 8001648:	d5b8      	bpl.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800164a:	f7ff fb97 	bl	8000d7c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001652:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001654:	6a23      	ldr	r3, [r4, #32]
 8001656:	079a      	lsls	r2, r3, #30
 8001658:	d4b0      	bmi.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff fb8f 	bl	8000d7c <HAL_GetTick>
 800165e:	1b80      	subs	r0, r0, r6
 8001660:	4540      	cmp	r0, r8
 8001662:	d9f7      	bls.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001664:	e7dd      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	40007000 	.word	0x40007000
 8001670:	42420440 	.word	0x42420440

08001674 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001674:	4602      	mov	r2, r0
 8001676:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
{
 800167a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800167c:	ad02      	add	r5, sp, #8
 800167e:	f103 0610 	add.w	r6, r3, #16
 8001682:	462c      	mov	r4, r5
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	3308      	adds	r3, #8
 800168a:	c403      	stmia	r4!, {r0, r1}
 800168c:	42b3      	cmp	r3, r6
 800168e:	4625      	mov	r5, r4
 8001690:	d1f7      	bne.n	8001682 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001692:	2301      	movs	r3, #1
 8001694:	f88d 3004 	strb.w	r3, [sp, #4]
 8001698:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800169a:	1e50      	subs	r0, r2, #1
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800169c:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 80016a0:	280f      	cmp	r0, #15
 80016a2:	d85e      	bhi.n	8001762 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80016a4:	e8df f000 	tbb	[pc, r0]
 80016a8:	2d5d5132 	.word	0x2d5d5132
 80016ac:	2d5d5d5d 	.word	0x2d5d5d5d
 80016b0:	5d5d5d5d 	.word	0x5d5d5d5d
 80016b4:	085d5d5d 	.word	0x085d5d5d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80016ba:	6859      	ldr	r1, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80016c2:	d037      	beq.n	8001734 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016c4:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80016c8:	a806      	add	r0, sp, #24
 80016ca:	4402      	add	r2, r0
 80016cc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016d0:	03ca      	lsls	r2, r1, #15
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016d2:	bf41      	itttt	mi
 80016d4:	685a      	ldrmi	r2, [r3, #4]
 80016d6:	a906      	addmi	r1, sp, #24
 80016d8:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80016dc:	1852      	addmi	r2, r2, r1
 80016de:	bf44      	itt	mi
 80016e0:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80016e4:	4a22      	ldrmi	r2, [pc, #136]	; (8001770 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80016e6:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80016e8:	bf4c      	ite	mi
 80016ea:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016ee:	4a21      	ldrpl	r2, [pc, #132]	; (8001774 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80016f0:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016f2:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80016f6:	d41d      	bmi.n	8001734 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 80016f8:	2303      	movs	r3, #3
 80016fa:	0040      	lsls	r0, r0, #1
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80016fc:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001700:	e018      	b.n	8001734 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
    {
      break;
    }
  }
  return(frequency);
}
 8001702:	b006      	add	sp, #24
 8001704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      frequency = HAL_RCC_GetSysClockFreq();
 8001708:	f7ff be46 	b.w	8001398 <HAL_RCC_GetSysClockFreq>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800170c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001710:	4a16      	ldr	r2, [pc, #88]	; (800176c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8001712:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001714:	4019      	ands	r1, r3
 8001716:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800171a:	d01f      	beq.n	800175c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800171c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001724:	d108      	bne.n	8001738 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        frequency = LSI_VALUE;
 8001726:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800172a:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800172c:	f013 0f02 	tst.w	r3, #2
        frequency = HSE_VALUE / 128U;
 8001730:	bf08      	it	eq
 8001732:	2000      	moveq	r0, #0
}
 8001734:	b006      	add	sp, #24
 8001736:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800173c:	d111      	bne.n	8001762 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800173e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001740:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001744:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001748:	e7f2      	b.n	8001730 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800174a:	f7ff ff0b 	bl	8001564 <HAL_RCC_GetPCLK2Freq>
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001756:	3301      	adds	r3, #1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	e7cf      	b.n	80016fc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        frequency = LSE_VALUE;
 800175c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001760:	e7e8      	b.n	8001734 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
        frequency = 0U;
 8001762:	2000      	movs	r0, #0
 8001764:	e7e6      	b.n	8001734 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8001766:	bf00      	nop
 8001768:	08003f4c 	.word	0x08003f4c
 800176c:	40021000 	.word	0x40021000
 8001770:	007a1200 	.word	0x007a1200
 8001774:	003d0900 	.word	0x003d0900

08001778 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001778:	6803      	ldr	r3, [r0, #0]
{
 800177a:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800177c:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800177e:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001780:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8001782:	b295      	uxth	r5, r2
 8001784:	b28c      	uxth	r4, r1
 8001786:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001788:	bf1d      	ittte	ne
 800178a:	69d8      	ldrne	r0, [r3, #28]
 800178c:	b280      	uxthne	r0, r0
 800178e:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001792:	b280      	uxtheq	r0, r0
 8001794:	bf08      	it	eq
 8001796:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 800179a:	bd30      	pop	{r4, r5, pc}

0800179c <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800179c:	6803      	ldr	r3, [r0, #0]
 800179e:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80017a2:	b29b      	uxth	r3, r3
}
 80017a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80017a8:	4770      	bx	lr

080017aa <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 80017aa:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80017ac:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80017ae:	f000 000f 	and.w	r0, r0, #15
 80017b2:	fb02 0003 	mla	r0, r2, r3, r0
}
 80017b6:	b2c0      	uxtb	r0, r0
 80017b8:	4770      	bx	lr

080017ba <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 80017ba:	2902      	cmp	r1, #2
{
 80017bc:	b570      	push	{r4, r5, r6, lr}
 80017be:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 80017c2:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 80017c6:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 80017ca:	d81a      	bhi.n	8001802 <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 80017cc:	434b      	muls	r3, r1
 80017ce:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 80017d2:	fbb3 f0f6 	udiv	r0, r3, r6
 80017d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80017da:	fbb4 f3f3 	udiv	r3, r4, r3
 80017de:	3204      	adds	r2, #4
 80017e0:	442a      	add	r2, r5
 80017e2:	4410      	add	r0, r2
 80017e4:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 80017e8:	4418      	add	r0, r3
 80017ea:	2364      	movs	r3, #100	; 0x64
 80017ec:	fbb4 f4f3 	udiv	r4, r4, r3
 80017f0:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 80017f2:	2307      	movs	r3, #7
 80017f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80017fc:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 80017fe:	b2c0      	uxtb	r0, r0
 8001800:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8001802:	fb03 f001 	mul.w	r0, r3, r1
 8001806:	fbb0 f0f6 	udiv	r0, r0, r6
 800180a:	3202      	adds	r2, #2
 800180c:	442a      	add	r2, r5
 800180e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001812:	4410      	add	r0, r2
 8001814:	2264      	movs	r2, #100	; 0x64
 8001816:	fbb5 f3f3 	udiv	r3, r5, r3
 800181a:	fbb5 f2f2 	udiv	r2, r5, r2
 800181e:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8001822:	4418      	add	r0, r3
 8001824:	1a80      	subs	r0, r0, r2
 8001826:	e7e4      	b.n	80017f2 <RTC_WeekDayNum+0x38>

08001828 <RTC_EnterInitMode>:
{
 8001828:	b538      	push	{r3, r4, r5, lr}
 800182a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800182c:	f7ff faa6 	bl	8000d7c <HAL_GetTick>
 8001830:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	0692      	lsls	r2, r2, #26
 8001838:	d505      	bpl.n	8001846 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800183a:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 800183c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800183e:	f042 0210 	orr.w	r2, r2, #16
 8001842:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 8001844:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001846:	f7ff fa99 	bl	8000d7c <HAL_GetTick>
 800184a:	1b40      	subs	r0, r0, r5
 800184c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001850:	d9ef      	bls.n	8001832 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8001852:	2003      	movs	r0, #3
}
 8001854:	bd38      	pop	{r3, r4, r5, pc}

08001856 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001856:	6802      	ldr	r2, [r0, #0]
{
 8001858:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800185a:	6853      	ldr	r3, [r2, #4]
{
 800185c:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800185e:	f023 0310 	bic.w	r3, r3, #16
 8001862:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001864:	f7ff fa8a 	bl	8000d7c <HAL_GetTick>
 8001868:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	069b      	lsls	r3, r3, #26
 8001870:	d501      	bpl.n	8001876 <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 8001872:	2000      	movs	r0, #0
 8001874:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001876:	f7ff fa81 	bl	8000d7c <HAL_GetTick>
 800187a:	1b40      	subs	r0, r0, r5
 800187c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001880:	d9f3      	bls.n	800186a <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8001882:	2003      	movs	r0, #3
}
 8001884:	bd38      	pop	{r3, r4, r5, pc}

08001886 <RTC_WriteTimeCounter>:
{
 8001886:	b538      	push	{r3, r4, r5, lr}
 8001888:	4605      	mov	r5, r0
 800188a:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800188c:	f7ff ffcc 	bl	8001828 <RTC_EnterInitMode>
 8001890:	b958      	cbnz	r0, 80018aa <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001892:	682b      	ldr	r3, [r5, #0]
 8001894:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001896:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001898:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800189a:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800189c:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800189e:	f7ff ffda 	bl	8001856 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80018a2:	3000      	adds	r0, #0
 80018a4:	bf18      	it	ne
 80018a6:	2001      	movne	r0, #1
 80018a8:	bd38      	pop	{r3, r4, r5, pc}
 80018aa:	2001      	movs	r0, #1
}
 80018ac:	bd38      	pop	{r3, r4, r5, pc}

080018ae <RTC_WriteAlarmCounter>:
{
 80018ae:	b538      	push	{r3, r4, r5, lr}
 80018b0:	4605      	mov	r5, r0
 80018b2:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80018b4:	f7ff ffb8 	bl	8001828 <RTC_EnterInitMode>
 80018b8:	b958      	cbnz	r0, 80018d2 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80018ba:	682b      	ldr	r3, [r5, #0]
 80018bc:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80018be:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80018c0:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80018c2:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80018c4:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80018c6:	f7ff ffc6 	bl	8001856 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80018ca:	3000      	adds	r0, #0
 80018cc:	bf18      	it	ne
 80018ce:	2001      	movne	r0, #1
 80018d0:	bd38      	pop	{r3, r4, r5, pc}
 80018d2:	2001      	movs	r0, #1
}
 80018d4:	bd38      	pop	{r3, r4, r5, pc}

080018d6 <HAL_RTC_SetTime>:
{
 80018d6:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 80018d8:	4604      	mov	r4, r0
 80018da:	b1e0      	cbz	r0, 8001916 <HAL_RTC_SetTime+0x40>
 80018dc:	b1d9      	cbz	r1, 8001916 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 80018de:	7c03      	ldrb	r3, [r0, #16]
 80018e0:	2602      	movs	r6, #2
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d046      	beq.n	8001974 <HAL_RTC_SetTime+0x9e>
 80018e6:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80018e8:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 80018ea:	7403      	strb	r3, [r0, #16]
 80018ec:	7808      	ldrb	r0, [r1, #0]
 80018ee:	784e      	ldrb	r6, [r1, #1]
 80018f0:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 80018f2:	b992      	cbnz	r2, 800191a <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 80018f4:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 80018fa:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018fc:	fb03 5000 	mla	r0, r3, r0, r5
 8001900:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001902:	4629      	mov	r1, r5
 8001904:	4620      	mov	r0, r4
 8001906:	f7ff ffbe 	bl	8001886 <RTC_WriteTimeCounter>
 800190a:	4606      	mov	r6, r0
 800190c:	b1b0      	cbz	r0, 800193c <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800190e:	2304      	movs	r3, #4
 8001910:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8001912:	2300      	movs	r3, #0
 8001914:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8001916:	2601      	movs	r6, #1
 8001918:	e02c      	b.n	8001974 <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800191a:	f7ff ff46 	bl	80017aa <RTC_Bcd2ToByte>
 800191e:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001920:	4630      	mov	r0, r6
 8001922:	f7ff ff42 	bl	80017aa <RTC_Bcd2ToByte>
 8001926:	233c      	movs	r3, #60	; 0x3c
 8001928:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800192a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800192e:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8001932:	4608      	mov	r0, r1
 8001934:	f7ff ff39 	bl	80017aa <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001938:	4405      	add	r5, r0
 800193a:	e7e2      	b.n	8001902 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800193c:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800193e:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001940:	6853      	ldr	r3, [r2, #4]
 8001942:	f023 0305 	bic.w	r3, r3, #5
 8001946:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001948:	f7ff ff28 	bl	800179c <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800194c:	1c43      	adds	r3, r0, #1
 800194e:	d00d      	beq.n	800196c <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 8001950:	4285      	cmp	r5, r0
 8001952:	d90b      	bls.n	800196c <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001954:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001958:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff ffa6 	bl	80018ae <RTC_WriteAlarmCounter>
 8001962:	b118      	cbz	r0, 800196c <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001964:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001966:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001968:	7463      	strb	r3, [r4, #17]
 800196a:	e7d4      	b.n	8001916 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 800196c:	2301      	movs	r3, #1
 800196e:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 8001970:	2300      	movs	r3, #0
 8001972:	7423      	strb	r3, [r4, #16]
}
 8001974:	4630      	mov	r0, r6
 8001976:	bd70      	pop	{r4, r5, r6, pc}

08001978 <HAL_RTC_SetDate>:
{
 8001978:	b570      	push	{r4, r5, r6, lr}
 800197a:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 800197c:	4604      	mov	r4, r0
 800197e:	b358      	cbz	r0, 80019d8 <HAL_RTC_SetDate+0x60>
 8001980:	b351      	cbz	r1, 80019d8 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 8001982:	7c03      	ldrb	r3, [r0, #16]
 8001984:	2002      	movs	r0, #2
 8001986:	2b01      	cmp	r3, #1
 8001988:	d027      	beq.n	80019da <HAL_RTC_SetDate+0x62>
 800198a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800198c:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 800198e:	7423      	strb	r3, [r4, #16]
 8001990:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8001992:	bb1a      	cbnz	r2, 80019dc <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001994:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001996:	784b      	ldrb	r3, [r1, #1]
 8001998:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800199a:	788b      	ldrb	r3, [r1, #2]
 800199c:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800199e:	7ba2      	ldrb	r2, [r4, #14]
 80019a0:	7b61      	ldrb	r1, [r4, #13]
 80019a2:	7be0      	ldrb	r0, [r4, #15]
 80019a4:	f7ff ff09 	bl	80017ba <RTC_WeekDayNum>
 80019a8:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80019aa:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff fee3 	bl	8001778 <RTC_ReadTimeCounter>
  if (hours > 24U)
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_RTC_SetDate+0xac>)
 80019b4:	4298      	cmp	r0, r3
 80019b6:	d930      	bls.n	8001a1a <HAL_RTC_SetDate+0xa2>
 80019b8:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 80019bc:	fbb0 f5f3 	udiv	r5, r0, r3
 80019c0:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80019c4:	4620      	mov	r0, r4
 80019c6:	4629      	mov	r1, r5
 80019c8:	f7ff ff5d 	bl	8001886 <RTC_WriteTimeCounter>
 80019cc:	4606      	mov	r6, r0
 80019ce:	b188      	cbz	r0, 80019f4 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80019d0:	2304      	movs	r3, #4
 80019d2:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80019d4:	2300      	movs	r3, #0
 80019d6:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 80019d8:	2001      	movs	r0, #1
}
 80019da:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80019dc:	f7ff fee5 	bl	80017aa <RTC_Bcd2ToByte>
 80019e0:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80019e2:	7848      	ldrb	r0, [r1, #1]
 80019e4:	f7ff fee1 	bl	80017aa <RTC_Bcd2ToByte>
 80019e8:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80019ea:	7888      	ldrb	r0, [r1, #2]
 80019ec:	f7ff fedd 	bl	80017aa <RTC_Bcd2ToByte>
 80019f0:	73a0      	strb	r0, [r4, #14]
 80019f2:	e7d4      	b.n	800199e <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff fed1 	bl	800179c <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80019fa:	1c43      	adds	r3, r0, #1
 80019fc:	d00d      	beq.n	8001a1a <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 80019fe:	4285      	cmp	r5, r0
 8001a00:	d90b      	bls.n	8001a1a <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001a02:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001a06:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff ff4f 	bl	80018ae <RTC_WriteAlarmCounter>
 8001a10:	b118      	cbz	r0, 8001a1a <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001a12:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001a14:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001a16:	7463      	strb	r3, [r4, #17]
 8001a18:	e7de      	b.n	80019d8 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8001a1a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8001a1c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8001a1e:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8001a20:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 8001a22:	bd70      	pop	{r4, r5, r6, pc}
 8001a24:	00015f8f 	.word	0x00015f8f

08001a28 <HAL_RTC_WaitForSynchro>:
{
 8001a28:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	b1a8      	cbz	r0, 8001a5a <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001a2e:	6802      	ldr	r2, [r0, #0]
 8001a30:	6853      	ldr	r3, [r2, #4]
 8001a32:	f023 0308 	bic.w	r3, r3, #8
 8001a36:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001a38:	f7ff f9a0 	bl	8000d7c <HAL_GetTick>
 8001a3c:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	071b      	lsls	r3, r3, #28
 8001a44:	d501      	bpl.n	8001a4a <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8001a46:	2000      	movs	r0, #0
 8001a48:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8001a4a:	f7ff f997 	bl	8000d7c <HAL_GetTick>
 8001a4e:	1b40      	subs	r0, r0, r5
 8001a50:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a54:	d9f3      	bls.n	8001a3e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001a56:	2003      	movs	r0, #3
}
 8001a58:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001a60 <HAL_RTC_Init>:
{
 8001a60:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 8001a62:	4604      	mov	r4, r0
 8001a64:	b170      	cbz	r0, 8001a84 <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001a66:	7c43      	ldrb	r3, [r0, #17]
 8001a68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a6c:	b913      	cbnz	r3, 8001a74 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001a6e:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001a70:	f7fe fdde 	bl	8000630 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001a74:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a76:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001a78:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a7a:	f7ff ffd5 	bl	8001a28 <HAL_RTC_WaitForSynchro>
 8001a7e:	b118      	cbz	r0, 8001a88 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001a80:	2304      	movs	r3, #4
 8001a82:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 8001a84:	2001      	movs	r0, #1
}
 8001a86:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff fecd 	bl	8001828 <RTC_EnterInitMode>
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d1f6      	bne.n	8001a80 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001a92:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001a94:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001a96:	6853      	ldr	r3, [r2, #4]
 8001a98:	f023 0307 	bic.w	r3, r3, #7
 8001a9c:	6053      	str	r3, [r2, #4]
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001aa0:	b118      	cbz	r0, 8001aaa <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001aa2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001aa4:	f021 0101 	bic.w	r1, r1, #1
 8001aa8:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001aaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001aac:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001ab0:	4303      	orrs	r3, r0
 8001ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001ab4:	6860      	ldr	r0, [r4, #4]
 8001ab6:	1c43      	adds	r3, r0, #1
 8001ab8:	d105      	bne.n	8001ac6 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f7ff fdda 	bl	8001674 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	d0dd      	beq.n	8001a80 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8001ac4:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	6893      	ldr	r3, [r2, #8]
 8001aca:	f023 030f 	bic.w	r3, r3, #15
 8001ace:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001ad2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001ad4:	68d3      	ldr	r3, [r2, #12]
 8001ad6:	b280      	uxth	r0, r0
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	041b      	lsls	r3, r3, #16
 8001adc:	4318      	orrs	r0, r3
 8001ade:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff feb8 	bl	8001856 <RTC_ExitInitMode>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	b110      	cbz	r0, 8001af0 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001aea:	2204      	movs	r2, #4
 8001aec:	7462      	strb	r2, [r4, #17]
 8001aee:	e7c9      	b.n	8001a84 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8001af0:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001af2:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001af4:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8001af6:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8001af8:	bd10      	pop	{r4, pc}
 8001afa:	bf00      	nop
 8001afc:	40006c00 	.word	0x40006c00

08001b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b04:	4604      	mov	r4, r0
 8001b06:	4688      	mov	r8, r1
 8001b08:	4617      	mov	r7, r2
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	6893      	ldr	r3, [r2, #8]
 8001b12:	ea38 0303 	bics.w	r3, r8, r3
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	429f      	cmp	r7, r3
 8001b1e:	d102      	bne.n	8001b26 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001b20:	2000      	movs	r0, #0
}
 8001b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001b26:	1c6b      	adds	r3, r5, #1
 8001b28:	d0f2      	beq.n	8001b10 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001b2a:	bb55      	cbnz	r5, 8001b82 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b34:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b36:	6862      	ldr	r2, [r4, #4]
 8001b38:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001b3c:	d10a      	bne.n	8001b54 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001b3e:	68a2      	ldr	r2, [r4, #8]
 8001b40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b44:	d002      	beq.n	8001b4c <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001b46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001b4a:	d103      	bne.n	8001b54 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b52:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b56:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001b5a:	d109      	bne.n	8001b70 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	0c12      	lsrs	r2, r2, #16
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b6e:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001b76:	2300      	movs	r3, #0
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001b82:	f7ff f8fb 	bl	8000d7c <HAL_GetTick>
 8001b86:	1b80      	subs	r0, r0, r6
 8001b88:	4285      	cmp	r5, r0
 8001b8a:	d8c0      	bhi.n	8001b0e <SPI_WaitFlagStateUntilTimeout+0xe>
 8001b8c:	e7ce      	b.n	8001b2c <SPI_WaitFlagStateUntilTimeout+0x2c>

08001b8e <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b8e:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b90:	460b      	mov	r3, r1
 8001b92:	9200      	str	r2, [sp, #0]
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	2200      	movs	r2, #0
{
 8001b98:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b9a:	f7ff ffb1 	bl	8001b00 <SPI_WaitFlagStateUntilTimeout>
 8001b9e:	b120      	cbz	r0, 8001baa <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001ba0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ba2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001baa:	b002      	add	sp, #8
 8001bac:	bd10      	pop	{r4, pc}

08001bae <HAL_SPI_Transmit>:
{
 8001bae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001bb2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001bb4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001bb8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001bba:	2b01      	cmp	r3, #1
{
 8001bbc:	460d      	mov	r5, r1
 8001bbe:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001bc0:	f000 809c 	beq.w	8001cfc <HAL_SPI_Transmit+0x14e>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001bca:	f7ff f8d7 	bl	8000d7c <HAL_GetTick>
 8001bce:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001bd0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001bd4:	b2c0      	uxtb	r0, r0
 8001bd6:	2801      	cmp	r0, #1
 8001bd8:	f040 808e 	bne.w	8001cf8 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8001bdc:	2d00      	cmp	r5, #0
 8001bde:	d04e      	beq.n	8001c7e <HAL_SPI_Transmit+0xd0>
 8001be0:	f1b8 0f00 	cmp.w	r8, #0
 8001be4:	d04b      	beq.n	8001c7e <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001be6:	2303      	movs	r3, #3
 8001be8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bf0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001bf2:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001bf6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001bf8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001bfa:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001bfc:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bfe:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c00:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c06:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8001c08:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001c0c:	bf02      	ittt	eq
 8001c0e:	681a      	ldreq	r2, [r3, #0]
 8001c10:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001c14:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001c1a:	bf5e      	ittt	pl
 8001c1c:	681a      	ldrpl	r2, [r3, #0]
 8001c1e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001c22:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c24:	68e2      	ldr	r2, [r4, #12]
 8001c26:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001c2a:	6862      	ldr	r2, [r4, #4]
 8001c2c:	d138      	bne.n	8001ca0 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001c2e:	b11a      	cbz	r2, 8001c38 <HAL_SPI_Transmit+0x8a>
 8001c30:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001c32:	b292      	uxth	r2, r2
 8001c34:	2a01      	cmp	r2, #1
 8001c36:	d106      	bne.n	8001c46 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001c38:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001c3c:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001c3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001c46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b993      	cbnz	r3, 8001c72 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001c4c:	9700      	str	r7, [sp, #0]
 8001c4e:	4633      	mov	r3, r6
 8001c50:	2201      	movs	r2, #1
 8001c52:	2102      	movs	r1, #2
 8001c54:	4620      	mov	r0, r4
 8001c56:	f7ff ff53 	bl	8001b00 <SPI_WaitFlagStateUntilTimeout>
 8001c5a:	b978      	cbnz	r0, 8001c7c <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001c5c:	463a      	mov	r2, r7
 8001c5e:	4631      	mov	r1, r6
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7ff ff94 	bl	8001b8e <SPI_CheckFlag_BSY>
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d038      	beq.n	8001cdc <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c6a:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001c6c:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c6e:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001c70:	e005      	b.n	8001c7e <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	0790      	lsls	r0, r2, #30
 8001c78:	d4de      	bmi.n	8001c38 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001c7a:	b94e      	cbnz	r6, 8001c90 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8001c7c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c84:	2300      	movs	r3, #0
 8001c86:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001c8a:	b004      	add	sp, #16
 8001c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001c90:	1c71      	adds	r1, r6, #1
 8001c92:	d0d8      	beq.n	8001c46 <HAL_SPI_Transmit+0x98>
 8001c94:	f7ff f872 	bl	8000d7c <HAL_GetTick>
 8001c98:	1bc0      	subs	r0, r0, r7
 8001c9a:	4286      	cmp	r6, r0
 8001c9c:	d8d3      	bhi.n	8001c46 <HAL_SPI_Transmit+0x98>
 8001c9e:	e7ed      	b.n	8001c7c <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001ca0:	b11a      	cbz	r2, 8001caa <HAL_SPI_Transmit+0xfc>
 8001ca2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	2a01      	cmp	r2, #1
 8001ca8:	d106      	bne.n	8001cb8 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001caa:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001cae:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001cb0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001cb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0c5      	beq.n	8001c4c <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	0792      	lsls	r2, r2, #30
 8001cc6:	d4f0      	bmi.n	8001caa <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001cc8:	2e00      	cmp	r6, #0
 8001cca:	d0d7      	beq.n	8001c7c <HAL_SPI_Transmit+0xce>
 8001ccc:	1c73      	adds	r3, r6, #1
 8001cce:	d0f3      	beq.n	8001cb8 <HAL_SPI_Transmit+0x10a>
 8001cd0:	f7ff f854 	bl	8000d7c <HAL_GetTick>
 8001cd4:	1bc0      	subs	r0, r0, r7
 8001cd6:	4286      	cmp	r6, r0
 8001cd8:	d8ee      	bhi.n	8001cb8 <HAL_SPI_Transmit+0x10a>
 8001cda:	e7cf      	b.n	8001c7c <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cdc:	68a3      	ldr	r3, [r4, #8]
 8001cde:	b933      	cbnz	r3, 8001cee <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ce0:	9303      	str	r3, [sp, #12]
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	9203      	str	r2, [sp, #12]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	9303      	str	r3, [sp, #12]
 8001cec:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001cf0:	3000      	adds	r0, #0
 8001cf2:	bf18      	it	ne
 8001cf4:	2001      	movne	r0, #1
 8001cf6:	e7c2      	b.n	8001c7e <HAL_SPI_Transmit+0xd0>
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	e7c0      	b.n	8001c7e <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	e7c4      	b.n	8001c8a <HAL_SPI_Transmit+0xdc>

08001d00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d00:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001d02:	4604      	mov	r4, r0
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d034      	beq.n	8001d72 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001d0c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001d10:	b90b      	cbnz	r3, 8001d16 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d12:	f7fe fcab 	bl	800066c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d16:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d18:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d1a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001d1e:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d20:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d26:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d28:	6863      	ldr	r3, [r4, #4]
 8001d2a:	69a2      	ldr	r2, [r4, #24]
 8001d2c:	4303      	orrs	r3, r0
 8001d2e:	68e0      	ldr	r0, [r4, #12]
 8001d30:	4303      	orrs	r3, r0
 8001d32:	6920      	ldr	r0, [r4, #16]
 8001d34:	4303      	orrs	r3, r0
 8001d36:	6960      	ldr	r0, [r4, #20]
 8001d38:	4303      	orrs	r3, r0
 8001d3a:	69e0      	ldr	r0, [r4, #28]
 8001d3c:	4303      	orrs	r3, r0
 8001d3e:	6a20      	ldr	r0, [r4, #32]
 8001d40:	4303      	orrs	r3, r0
 8001d42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d44:	4303      	orrs	r3, r0
 8001d46:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001d4a:	4303      	orrs	r3, r0
 8001d4c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d4e:	0c12      	lsrs	r2, r2, #16
 8001d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d52:	f002 0204 	and.w	r2, r2, #4
 8001d56:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001d58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d5a:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001d5c:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d5e:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d60:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d66:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001d68:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d6a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001d6c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001d70:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d72:	2001      	movs	r0, #1
}
 8001d74:	bd10      	pop	{r4, pc}

08001d76 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d76:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001d78:	b189      	cbz	r1, 8001d9e <HAL_TIM_Encoder_Start+0x28>
 8001d7a:	2904      	cmp	r1, #4
 8001d7c:	d007      	beq.n	8001d8e <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d7e:	6a1a      	ldr	r2, [r3, #32]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	f042 0201 	orr.w	r2, r2, #1
 8001d8c:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	f022 0210 	bic.w	r2, r2, #16
 8001d94:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001d96:	6a1a      	ldr	r2, [r3, #32]
 8001d98:	f042 0210 	orr.w	r2, r2, #16
 8001d9c:	e006      	b.n	8001dac <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001dae:	681a      	ldr	r2, [r3, #0]
}
 8001db0:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
}
 8001db8:	4770      	bx	lr
	...

08001dbc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dbc:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001dbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc0:	4290      	cmp	r0, r2
 8001dc2:	d012      	beq.n	8001dea <TIM_Base_SetConfig+0x2e>
 8001dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc8:	4290      	cmp	r0, r2
 8001dca:	d00e      	beq.n	8001dea <TIM_Base_SetConfig+0x2e>
 8001dcc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001dd0:	d00b      	beq.n	8001dea <TIM_Base_SetConfig+0x2e>
 8001dd2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001dd6:	4290      	cmp	r0, r2
 8001dd8:	d007      	beq.n	8001dea <TIM_Base_SetConfig+0x2e>
 8001dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dde:	4290      	cmp	r0, r2
 8001de0:	d003      	beq.n	8001dea <TIM_Base_SetConfig+0x2e>
 8001de2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001de6:	4290      	cmp	r0, r2
 8001de8:	d11d      	bne.n	8001e26 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001dea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001df0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001df2:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <TIM_Base_SetConfig+0x94>)
 8001df4:	4290      	cmp	r0, r2
 8001df6:	d012      	beq.n	8001e1e <TIM_Base_SetConfig+0x62>
 8001df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dfc:	4290      	cmp	r0, r2
 8001dfe:	d00e      	beq.n	8001e1e <TIM_Base_SetConfig+0x62>
 8001e00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e04:	d00b      	beq.n	8001e1e <TIM_Base_SetConfig+0x62>
 8001e06:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001e0a:	4290      	cmp	r0, r2
 8001e0c:	d007      	beq.n	8001e1e <TIM_Base_SetConfig+0x62>
 8001e0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e12:	4290      	cmp	r0, r2
 8001e14:	d003      	beq.n	8001e1e <TIM_Base_SetConfig+0x62>
 8001e16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e1a:	4290      	cmp	r0, r2
 8001e1c:	d103      	bne.n	8001e26 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e24:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e26:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e2c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e2e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e30:	688b      	ldr	r3, [r1, #8]
 8001e32:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e34:	680b      	ldr	r3, [r1, #0]
 8001e36:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <TIM_Base_SetConfig+0x94>)
 8001e3a:	4298      	cmp	r0, r3
 8001e3c:	d003      	beq.n	8001e46 <TIM_Base_SetConfig+0x8a>
 8001e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e42:	4298      	cmp	r0, r3
 8001e44:	d101      	bne.n	8001e4a <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001e46:	690b      	ldr	r3, [r1, #16]
 8001e48:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	6143      	str	r3, [r0, #20]
 8001e4e:	4770      	bx	lr
 8001e50:	40012c00 	.word	0x40012c00

08001e54 <HAL_TIM_Encoder_Init>:
{
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	460c      	mov	r4, r1
  if(htim == NULL)
 8001e58:	4605      	mov	r5, r0
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d041      	beq.n	8001ee2 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e66:	b91b      	cbnz	r3, 8001e70 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001e68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001e6c:	f7fe fc20 	bl	80006b0 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e70:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 8001e72:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e74:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001e78:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e7c:	6883      	ldr	r3, [r0, #8]
 8001e7e:	f023 0307 	bic.w	r3, r3, #7
 8001e82:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e84:	f7ff ff9a 	bl	8001dbc <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001e88:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001e8a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001e8c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001e8e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e90:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8001e92:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e94:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001e96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e9a:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e9e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001ea2:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001ea4:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ea8:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001eaa:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001eb2:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 8001eb4:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001eba:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ebe:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001ec2:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ec4:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001ec6:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001eca:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001ecc:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8001ece:	6183      	str	r3, [r0, #24]
  htim->State= HAL_TIM_STATE_READY;
 8001ed0:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ed2:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8001ed6:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8001ed8:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 8001eda:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8001ede:	2000      	movs	r0, #0
 8001ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001ee2:	2001      	movs	r0, #1
}
 8001ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ee6 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001ee6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001eea:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	f04f 0302 	mov.w	r3, #2
 8001ef2:	d018      	beq.n	8001f26 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001ef8:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001efa:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001efc:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001efe:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f04:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f12:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f20:	2300      	movs	r3, #0
 8001f22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f26:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001f28:	bd10      	pop	{r4, pc}

08001f2a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f2a:	f100 0308 	add.w	r3, r0, #8
 8001f2e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f34:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f36:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f38:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f3a:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f3c:	6003      	str	r3, [r0, #0]
 8001f3e:	4770      	bx	lr

08001f40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	6103      	str	r3, [r0, #16]
 8001f44:	4770      	bx	lr

08001f46 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f46:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f48:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001f4a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f4c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f52:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f54:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f56:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f58:	3301      	adds	r3, #1
 8001f5a:	6003      	str	r3, [r0, #0]
 8001f5c:	4770      	bx	lr

08001f5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f5e:	680a      	ldr	r2, [r1, #0]
{
 8001f60:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f62:	1c53      	adds	r3, r2, #1
 8001f64:	d10a      	bne.n	8001f7c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f66:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f6c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f6e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f70:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f72:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f74:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f76:	3301      	adds	r3, #1
 8001f78:	6003      	str	r3, [r0, #0]
 8001f7a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f7c:	f100 0308 	add.w	r3, r0, #8
 8001f80:	685c      	ldr	r4, [r3, #4]
 8001f82:	6825      	ldr	r5, [r4, #0]
 8001f84:	42aa      	cmp	r2, r5
 8001f86:	d3ef      	bcc.n	8001f68 <vListInsert+0xa>
 8001f88:	4623      	mov	r3, r4
 8001f8a:	e7f9      	b.n	8001f80 <vListInsert+0x22>

08001f8c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f8c:	6841      	ldr	r1, [r0, #4]
 8001f8e:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f90:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f92:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f94:	6882      	ldr	r2, [r0, #8]
 8001f96:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f9c:	bf08      	it	eq
 8001f9e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	3a01      	subs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001faa:	6818      	ldr	r0, [r3, #0]
}
 8001fac:	4770      	bx	lr
	...

08001fb0 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
	volatile uint32_t ulDummy = 0UL;
 8001fb0:	2300      	movs	r3, #0
{
 8001fb2:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0UL;
 8001fb4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <prvTaskExitError+0x3c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	d008      	beq.n	8001fd0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc2:	f383 8811 	msr	BASEPRI, r3
 8001fc6:	f3bf 8f6f 	isb	sy
 8001fca:	f3bf 8f4f 	dsb	sy
 8001fce:	e7fe      	b.n	8001fce <prvTaskExitError+0x1e>
 8001fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001fe0:	9b01      	ldr	r3, [sp, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0fc      	beq.n	8001fe0 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001fe6:	b002      	add	sp, #8
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000010 	.word	0x20000010

08001ff0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001ff0:	4806      	ldr	r0, [pc, #24]	; (800200c <prvPortStartFirstTask+0x1c>)
 8001ff2:	6800      	ldr	r0, [r0, #0]
 8001ff4:	6800      	ldr	r0, [r0, #0]
 8001ff6:	f380 8808 	msr	MSP, r0
 8001ffa:	b662      	cpsie	i
 8001ffc:	b661      	cpsie	f
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	f3bf 8f6f 	isb	sy
 8002006:	df00      	svc	0
 8002008:	bf00      	nop
 800200a:	0000      	.short	0x0000
 800200c:	e000ed08 	.word	0xe000ed08

08002010 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002014:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800201a:	f021 0101 	bic.w	r1, r1, #1
 800201e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002022:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002026:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800202a:	3840      	subs	r0, #64	; 0x40
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	08001fb1 	.word	0x08001fb1
	...

08002040 <SVC_Handler>:
	__asm volatile(
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <pxCurrentTCBConst2>)
 8002042:	6819      	ldr	r1, [r3, #0]
 8002044:	6808      	ldr	r0, [r1, #0]
 8002046:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800204a:	f380 8809 	msr	PSP, r0
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f04f 0000 	mov.w	r0, #0
 8002056:	f380 8811 	msr	BASEPRI, r0
 800205a:	f04e 0e0d 	orr.w	lr, lr, #13
 800205e:	4770      	bx	lr

08002060 <pxCurrentTCBConst2>:
 8002060:	20003d18 	.word	0x20003d18

08002064 <vPortEnterCritical>:
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <vPortEnterCritical+0x3c>)
 8002076:	6813      	ldr	r3, [r2, #0]
 8002078:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800207a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800207c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800207e:	d10d      	bne.n	800209c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <vPortEnterCritical+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002088:	d008      	beq.n	800209c <vPortEnterCritical+0x38>
 800208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208e:	f383 8811 	msr	BASEPRI, r3
 8002092:	f3bf 8f6f 	isb	sy
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	e7fe      	b.n	800209a <vPortEnterCritical+0x36>
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000010 	.word	0x20000010
 80020a4:	e000ed04 	.word	0xe000ed04

080020a8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80020a8:	4a08      	ldr	r2, [pc, #32]	; (80020cc <vPortExitCritical+0x24>)
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	b943      	cbnz	r3, 80020c0 <vPortExitCritical+0x18>
 80020ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	e7fe      	b.n	80020be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80020c0:	3b01      	subs	r3, #1
 80020c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80020c4:	b90b      	cbnz	r3, 80020ca <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	4770      	bx	lr
 80020cc:	20000010 	.word	0x20000010

080020d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80020d0:	f3ef 8009 	mrs	r0, PSP
 80020d4:	f3bf 8f6f 	isb	sy
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <pxCurrentTCBConst>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80020e0:	6010      	str	r0, [r2, #0]
 80020e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80020e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80020ea:	f380 8811 	msr	BASEPRI, r0
 80020ee:	f000 ffcf 	bl	8003090 <vTaskSwitchContext>
 80020f2:	f04f 0000 	mov.w	r0, #0
 80020f6:	f380 8811 	msr	BASEPRI, r0
 80020fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	6808      	ldr	r0, [r1, #0]
 8002102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002106:	f380 8809 	msr	PSP, r0
 800210a:	f3bf 8f6f 	isb	sy
 800210e:	4770      	bx	lr

08002110 <pxCurrentTCBConst>:
 8002110:	20003d18 	.word	0x20003d18

08002114 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002114:	b508      	push	{r3, lr}
	__asm volatile
 8002116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211a:	f383 8811 	msr	BASEPRI, r3
 800211e:	f3bf 8f6f 	isb	sy
 8002122:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002126:	f000 fe85 	bl	8002e34 <xTaskIncrementTick>
 800212a:	b118      	cbz	r0, 8002134 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800212c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002130:	4b02      	ldr	r3, [pc, #8]	; (800213c <xPortSysTickHandler+0x28>)
 8002132:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002134:	2300      	movs	r3, #0
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	bd08      	pop	{r3, pc}
 800213c:	e000ed04 	.word	0xe000ed04

08002140 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002140:	2200      	movs	r2, #0
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002144:	4905      	ldr	r1, [pc, #20]	; (800215c <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002146:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002148:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <vPortSetupTimerInterrupt+0x20>)
 800214c:	4905      	ldr	r1, [pc, #20]	; (8002164 <vPortSetupTimerInterrupt+0x24>)
 800214e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010
 800215c:	e000e018 	.word	0xe000e018
 8002160:	e000e014 	.word	0xe000e014
 8002164:	0001193f 	.word	0x0001193f

08002168 <xPortStartScheduler>:
{
 8002168:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800216a:	4b27      	ldr	r3, [pc, #156]	; (8002208 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800216c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002174:	22ff      	movs	r2, #255	; 0xff
 8002176:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002178:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800217a:	4a24      	ldr	r2, [pc, #144]	; (800220c <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002182:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002186:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800218a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800218c:	2207      	movs	r2, #7
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <xPortStartScheduler+0xa8>)
 8002190:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002192:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002196:	1e54      	subs	r4, r2, #1
 8002198:	0600      	lsls	r0, r0, #24
 800219a:	d40d      	bmi.n	80021b8 <xPortStartScheduler+0x50>
 800219c:	b101      	cbz	r1, 80021a0 <xPortStartScheduler+0x38>
 800219e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2a03      	cmp	r2, #3
 80021a4:	d011      	beq.n	80021ca <xPortStartScheduler+0x62>
	__asm volatile
 80021a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021aa:	f383 8811 	msr	BASEPRI, r3
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	f3bf 8f4f 	dsb	sy
 80021b6:	e7fe      	b.n	80021b6 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80021bc:	2101      	movs	r1, #1
 80021be:	0052      	lsls	r2, r2, #1
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f88d 2003 	strb.w	r2, [sp, #3]
 80021c6:	4622      	mov	r2, r4
 80021c8:	e7e3      	b.n	8002192 <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 80021ca:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021cc:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80021ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80021d2:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80021d4:	9b01      	ldr	r3, [sp, #4]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <xPortStartScheduler+0xa0>)
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <xPortStartScheduler+0xac>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80021e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80021ec:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80021ee:	f7ff ffa7 	bl	8002140 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <xPortStartScheduler+0xb0>)
 80021f4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80021f6:	f7ff fefb 	bl	8001ff0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80021fa:	f000 ff49 	bl	8003090 <vTaskSwitchContext>
	prvTaskExitError();
 80021fe:	f7ff fed7 	bl	8001fb0 <prvTaskExitError>
}
 8002202:	4620      	mov	r0, r4
 8002204:	b002      	add	sp, #8
 8002206:	bd10      	pop	{r4, pc}
 8002208:	e000e400 	.word	0xe000e400
 800220c:	200020f8 	.word	0x200020f8
 8002210:	200020fc 	.word	0x200020fc
 8002214:	e000ed20 	.word	0xe000ed20
 8002218:	20000010 	.word	0x20000010

0800221c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800221c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d90e      	bls.n	8002242 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002224:	4a10      	ldr	r2, [pc, #64]	; (8002268 <vPortValidateInterruptPriority+0x4c>)
 8002226:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002228:	4a10      	ldr	r2, [pc, #64]	; (800226c <vPortValidateInterruptPriority+0x50>)
 800222a:	7812      	ldrb	r2, [r2, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d908      	bls.n	8002242 <vPortValidateInterruptPriority+0x26>
 8002230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	e7fe      	b.n	8002240 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <vPortValidateInterruptPriority+0x54>)
 8002244:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <vPortValidateInterruptPriority+0x58>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800224e:	4293      	cmp	r3, r2
 8002250:	d908      	bls.n	8002264 <vPortValidateInterruptPriority+0x48>
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	e7fe      	b.n	8002262 <vPortValidateInterruptPriority+0x46>
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e3f0 	.word	0xe000e3f0
 800226c:	200020f8 	.word	0x200020f8
 8002270:	e000ed0c 	.word	0xe000ed0c
 8002274:	200020fc 	.word	0x200020fc

08002278 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002278:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <prvInsertBlockIntoFreeList+0x40>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4282      	cmp	r2, r0
 8002280:	d318      	bcc.n	80022b4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002282:	685c      	ldr	r4, [r3, #4]
 8002284:	1919      	adds	r1, r3, r4
 8002286:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002288:	bf01      	itttt	eq
 800228a:	6841      	ldreq	r1, [r0, #4]
 800228c:	4618      	moveq	r0, r3
 800228e:	1909      	addeq	r1, r1, r4
 8002290:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002292:	6844      	ldr	r4, [r0, #4]
 8002294:	1901      	adds	r1, r0, r4
 8002296:	428a      	cmp	r2, r1
 8002298:	d107      	bne.n	80022aa <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <prvInsertBlockIntoFreeList+0x44>)
 800229c:	6809      	ldr	r1, [r1, #0]
 800229e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80022a0:	bf1f      	itttt	ne
 80022a2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80022a4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80022a6:	1909      	addne	r1, r1, r4
 80022a8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80022aa:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80022ac:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80022ae:	bf18      	it	ne
 80022b0:	6018      	strne	r0, [r3, #0]
 80022b2:	bd10      	pop	{r4, pc}
 80022b4:	4613      	mov	r3, r2
 80022b6:	e7e1      	b.n	800227c <prvInsertBlockIntoFreeList+0x4>
 80022b8:	20003d10 	.word	0x20003d10
 80022bc:	20002100 	.word	0x20002100

080022c0 <pvPortMalloc>:
{
 80022c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022c4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80022c6:	f000 fda7 	bl	8002e18 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80022ca:	493e      	ldr	r1, [pc, #248]	; (80023c4 <pvPortMalloc+0x104>)
 80022cc:	4d3e      	ldr	r5, [pc, #248]	; (80023c8 <pvPortMalloc+0x108>)
 80022ce:	680b      	ldr	r3, [r1, #0]
 80022d0:	bb0b      	cbnz	r3, 8002316 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80022d2:	4a3e      	ldr	r2, [pc, #248]	; (80023cc <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022d4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022d6:	bf1d      	ittte	ne
 80022d8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022da:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022de:	f502 53e0 	addne.w	r3, r2, #7168	; 0x1c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80022e2:	f44f 53e0 	moveq.w	r3, #7168	; 0x1c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022e6:	bf1c      	itt	ne
 80022e8:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022ea:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80022ec:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022ee:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022f0:	4e37      	ldr	r6, [pc, #220]	; (80023d0 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 80022f2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022f4:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80022f8:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022fa:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80022fc:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80022fe:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8002300:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002302:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002304:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002306:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002308:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800230a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800230c:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <pvPortMalloc+0x118>)
 800230e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002310:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002314:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002316:	682f      	ldr	r7, [r5, #0]
 8002318:	4227      	tst	r7, r4
 800231a:	d116      	bne.n	800234a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800231c:	2c00      	cmp	r4, #0
 800231e:	d040      	beq.n	80023a2 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8002320:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002324:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002326:	bf1c      	itt	ne
 8002328:	f023 0307 	bicne.w	r3, r3, #7
 800232c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800232e:	b163      	cbz	r3, 800234a <pvPortMalloc+0x8a>
 8002330:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <pvPortMalloc+0x118>)
 8002332:	6816      	ldr	r6, [r2, #0]
 8002334:	4690      	mov	r8, r2
 8002336:	42b3      	cmp	r3, r6
 8002338:	d807      	bhi.n	800234a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800233a:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <pvPortMalloc+0x110>)
 800233c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800233e:	6868      	ldr	r0, [r5, #4]
 8002340:	4283      	cmp	r3, r0
 8002342:	d804      	bhi.n	800234e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002344:	6809      	ldr	r1, [r1, #0]
 8002346:	428d      	cmp	r5, r1
 8002348:	d107      	bne.n	800235a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800234a:	2400      	movs	r4, #0
 800234c:	e029      	b.n	80023a2 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800234e:	682c      	ldr	r4, [r5, #0]
 8002350:	2c00      	cmp	r4, #0
 8002352:	d0f7      	beq.n	8002344 <pvPortMalloc+0x84>
 8002354:	462a      	mov	r2, r5
 8002356:	4625      	mov	r5, r4
 8002358:	e7f1      	b.n	800233e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800235a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800235c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800235e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002360:	1ac2      	subs	r2, r0, r3
 8002362:	2a10      	cmp	r2, #16
 8002364:	d90f      	bls.n	8002386 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002366:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002368:	0741      	lsls	r1, r0, #29
 800236a:	d008      	beq.n	800237e <pvPortMalloc+0xbe>
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	e7fe      	b.n	800237c <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800237e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002380:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002382:	f7ff ff79 	bl	8002278 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002386:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002388:	4912      	ldr	r1, [pc, #72]	; (80023d4 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800238a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800238c:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 800238e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002390:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002392:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002396:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002398:	bf38      	it	cc
 800239a:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800239c:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800239e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80023a0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80023a2:	f000 fdd9 	bl	8002f58 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80023a6:	0763      	lsls	r3, r4, #29
 80023a8:	d008      	beq.n	80023bc <pvPortMalloc+0xfc>
 80023aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	e7fe      	b.n	80023ba <pvPortMalloc+0xfa>
}
 80023bc:	4620      	mov	r0, r4
 80023be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023c2:	bf00      	nop
 80023c4:	20002100 	.word	0x20002100
 80023c8:	20003d04 	.word	0x20003d04
 80023cc:	20002104 	.word	0x20002104
 80023d0:	20003d10 	.word	0x20003d10
 80023d4:	20003d0c 	.word	0x20003d0c
 80023d8:	20003d08 	.word	0x20003d08

080023dc <vPortFree>:
{
 80023dc:	b510      	push	{r4, lr}
	if( pv != NULL )
 80023de:	4604      	mov	r4, r0
 80023e0:	b370      	cbz	r0, 8002440 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80023e2:	4a18      	ldr	r2, [pc, #96]	; (8002444 <vPortFree+0x68>)
 80023e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	4213      	tst	r3, r2
 80023ec:	d108      	bne.n	8002400 <vPortFree+0x24>
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	e7fe      	b.n	80023fe <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002400:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002404:	b141      	cbz	r1, 8002418 <vPortFree+0x3c>
 8002406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240a:	f383 8811 	msr	BASEPRI, r3
 800240e:	f3bf 8f6f 	isb	sy
 8002412:	f3bf 8f4f 	dsb	sy
 8002416:	e7fe      	b.n	8002416 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002418:	ea23 0302 	bic.w	r3, r3, r2
 800241c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002420:	f000 fcfa 	bl	8002e18 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002424:	4a08      	ldr	r2, [pc, #32]	; (8002448 <vPortFree+0x6c>)
 8002426:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800242a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800242c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002430:	440b      	add	r3, r1
 8002432:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002434:	f7ff ff20 	bl	8002278 <prvInsertBlockIntoFreeList>
}
 8002438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800243c:	f000 bd8c 	b.w	8002f58 <xTaskResumeAll>
 8002440:	bd10      	pop	{r4, pc}
 8002442:	bf00      	nop
 8002444:	20003d04 	.word	0x20003d04
 8002448:	20003d08 	.word	0x20003d08

0800244c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800244c:	b510      	push	{r4, lr}
 800244e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002450:	f7ff fe08 	bl	8002064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002454:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002456:	f7ff fe27 	bl	80020a8 <vPortExitCritical>

	return xReturn;
}
 800245a:	fab4 f084 	clz	r0, r4
 800245e:	0940      	lsrs	r0, r0, #5
 8002460:	bd10      	pop	{r4, pc}

08002462 <prvCopyDataToQueue>:
{
 8002462:	b570      	push	{r4, r5, r6, lr}
 8002464:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002466:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8002468:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800246a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800246c:	b942      	cbnz	r2, 8002480 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800246e:	6805      	ldr	r5, [r0, #0]
 8002470:	b99d      	cbnz	r5, 800249a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002472:	6840      	ldr	r0, [r0, #4]
 8002474:	f000 ff20 	bl	80032b8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002478:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800247a:	3601      	adds	r6, #1
 800247c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800247e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002480:	b96d      	cbnz	r5, 800249e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002482:	6880      	ldr	r0, [r0, #8]
 8002484:	f001 fd42 	bl	8003f0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002488:	68a3      	ldr	r3, [r4, #8]
 800248a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800248c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800248e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002490:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002492:	4293      	cmp	r3, r2
 8002494:	d301      	bcc.n	800249a <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800249a:	2000      	movs	r0, #0
 800249c:	e7ed      	b.n	800247a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800249e:	68c0      	ldr	r0, [r0, #12]
 80024a0:	f001 fd34 	bl	8003f0c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80024a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024a6:	68e2      	ldr	r2, [r4, #12]
 80024a8:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024aa:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80024ac:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024ae:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80024b0:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80024b2:	bf3e      	ittt	cc
 80024b4:	6862      	ldrcc	r2, [r4, #4]
 80024b6:	189b      	addcc	r3, r3, r2
 80024b8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80024ba:	2d02      	cmp	r5, #2
 80024bc:	d1ed      	bne.n	800249a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024be:	b10e      	cbz	r6, 80024c4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80024c0:	3e01      	subs	r6, #1
 80024c2:	e7ea      	b.n	800249a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80024c4:	4630      	mov	r0, r6
 80024c6:	e7d8      	b.n	800247a <prvCopyDataToQueue+0x18>

080024c8 <prvCopyDataFromQueue>:
{
 80024c8:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80024cc:	b410      	push	{r4}
 80024ce:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024d0:	b162      	cbz	r2, 80024ec <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024d2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024d4:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024d6:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024d8:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024da:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80024dc:	bf28      	it	cs
 80024de:	6819      	ldrcs	r1, [r3, #0]
}
 80024e0:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80024e2:	bf28      	it	cs
 80024e4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80024e6:	68d9      	ldr	r1, [r3, #12]
 80024e8:	f001 bd10 	b.w	8003f0c <memcpy>
}
 80024ec:	bc10      	pop	{r4}
 80024ee:	4770      	bx	lr

080024f0 <prvUnlockQueue>:
{
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80024f4:	f7ff fdb6 	bl	8002064 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80024f8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024fc:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002500:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002502:	2d00      	cmp	r5, #0
 8002504:	dc14      	bgt.n	8002530 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8002506:	23ff      	movs	r3, #255	; 0xff
 8002508:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800250c:	f7ff fdcc 	bl	80020a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002510:	f7ff fda8 	bl	8002064 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002514:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002518:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800251c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800251e:	2d00      	cmp	r5, #0
 8002520:	dc12      	bgt.n	8002548 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002522:	23ff      	movs	r3, #255	; 0xff
 8002524:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8002528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800252c:	f7ff bdbc 	b.w	80020a8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0e7      	beq.n	8002506 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002536:	4630      	mov	r0, r6
 8002538:	f000 fe1e 	bl	8003178 <xTaskRemoveFromEventList>
 800253c:	b108      	cbz	r0, 8002542 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800253e:	f000 fea5 	bl	800328c <vTaskMissedYield>
 8002542:	3d01      	subs	r5, #1
 8002544:	b26d      	sxtb	r5, r5
 8002546:	e7dc      	b.n	8002502 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002548:	6923      	ldr	r3, [r4, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0e9      	beq.n	8002522 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800254e:	4630      	mov	r0, r6
 8002550:	f000 fe12 	bl	8003178 <xTaskRemoveFromEventList>
 8002554:	b108      	cbz	r0, 800255a <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002556:	f000 fe99 	bl	800328c <vTaskMissedYield>
 800255a:	3d01      	subs	r5, #1
 800255c:	b26d      	sxtb	r5, r5
 800255e:	e7de      	b.n	800251e <prvUnlockQueue+0x2e>

08002560 <xQueueGenericReset>:
{
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002564:	4604      	mov	r4, r0
 8002566:	b940      	cbnz	r0, 800257a <xQueueGenericReset+0x1a>
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	e7fe      	b.n	8002578 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800257a:	f7ff fd73 	bl	8002064 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800257e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002580:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002582:	6822      	ldr	r2, [r4, #0]
 8002584:	4343      	muls	r3, r0
 8002586:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002588:	1a1b      	subs	r3, r3, r0
 800258a:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800258c:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800258e:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002590:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8002592:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002594:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002596:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8002598:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800259c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80025a0:	b995      	cbnz	r5, 80025c8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025a2:	6923      	ldr	r3, [r4, #16]
 80025a4:	b163      	cbz	r3, 80025c0 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025a6:	f104 0010 	add.w	r0, r4, #16
 80025aa:	f000 fde5 	bl	8003178 <xTaskRemoveFromEventList>
 80025ae:	b138      	cbz	r0, 80025c0 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80025b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <xQueueGenericReset+0x7c>)
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80025c0:	f7ff fd72 	bl	80020a8 <vPortExitCritical>
}
 80025c4:	2001      	movs	r0, #1
 80025c6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025c8:	f104 0010 	add.w	r0, r4, #16
 80025cc:	f7ff fcad 	bl	8001f2a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025d4:	f7ff fca9 	bl	8001f2a <vListInitialise>
 80025d8:	e7f2      	b.n	80025c0 <xQueueGenericReset+0x60>
 80025da:	bf00      	nop
 80025dc:	e000ed04 	.word	0xe000ed04

080025e0 <xQueueGenericCreate>:
	{
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025e4:	4606      	mov	r6, r0
 80025e6:	b940      	cbnz	r0, 80025fa <xQueueGenericCreate+0x1a>
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	e7fe      	b.n	80025f8 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025fa:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80025fc:	3048      	adds	r0, #72	; 0x48
 80025fe:	f7ff fe5f 	bl	80022c0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002602:	4604      	mov	r4, r0
 8002604:	b138      	cbz	r0, 8002616 <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002606:	b945      	cbnz	r5, 800261a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002608:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800260a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800260c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800260e:	2101      	movs	r1, #1
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff ffa5 	bl	8002560 <xQueueGenericReset>
	}
 8002616:	4620      	mov	r0, r4
 8002618:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800261a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800261e:	6003      	str	r3, [r0, #0]
 8002620:	e7f3      	b.n	800260a <xQueueGenericCreate+0x2a>
	...

08002624 <xQueueGenericSend>:
{
 8002624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002628:	4689      	mov	r9, r1
 800262a:	9201      	str	r2, [sp, #4]
 800262c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800262e:	4604      	mov	r4, r0
 8002630:	b940      	cbnz	r0, 8002644 <xQueueGenericSend+0x20>
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	e7fe      	b.n	8002642 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002644:	2900      	cmp	r1, #0
 8002646:	f040 8088 	bne.w	800275a <xQueueGenericSend+0x136>
 800264a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8084 	beq.w	800275a <xQueueGenericSend+0x136>
 8002652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	e7fe      	b.n	8002662 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002664:	9e01      	ldr	r6, [sp, #4]
 8002666:	2e00      	cmp	r6, #0
 8002668:	f000 8082 	beq.w	8002770 <xQueueGenericSend+0x14c>
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	e7fe      	b.n	800267c <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800267e:	9d01      	ldr	r5, [sp, #4]
 8002680:	b91d      	cbnz	r5, 800268a <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8002682:	f7ff fd11 	bl	80020a8 <vPortExitCritical>
			return errQUEUE_FULL;
 8002686:	2000      	movs	r0, #0
 8002688:	e058      	b.n	800273c <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 800268a:	b916      	cbnz	r6, 8002692 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800268c:	a802      	add	r0, sp, #8
 800268e:	f000 fdb5 	bl	80031fc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002692:	f7ff fd09 	bl	80020a8 <vPortExitCritical>
		vTaskSuspendAll();
 8002696:	f000 fbbf 	bl	8002e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800269a:	f7ff fce3 	bl	8002064 <vPortEnterCritical>
 800269e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80026a2:	2bff      	cmp	r3, #255	; 0xff
 80026a4:	bf08      	it	eq
 80026a6:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80026aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80026ae:	2bff      	cmp	r3, #255	; 0xff
 80026b0:	bf08      	it	eq
 80026b2:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80026b6:	f7ff fcf7 	bl	80020a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026ba:	a901      	add	r1, sp, #4
 80026bc:	a802      	add	r0, sp, #8
 80026be:	f000 fda9 	bl	8003214 <xTaskCheckForTimeOut>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d143      	bne.n	800274e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026c6:	f7ff fccd 	bl	8002064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026ca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80026cc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80026ce:	f7ff fceb 	bl	80020a8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026d2:	42ae      	cmp	r6, r5
 80026d4:	d135      	bne.n	8002742 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026d6:	9901      	ldr	r1, [sp, #4]
 80026d8:	f104 0010 	add.w	r0, r4, #16
 80026dc:	f000 fd12 	bl	8003104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7ff ff05 	bl	80024f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026e6:	f000 fc37 	bl	8002f58 <xTaskResumeAll>
 80026ea:	b938      	cbnz	r0, 80026fc <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 80026ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026f0:	f8ca 3000 	str.w	r3, [sl]
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80026fe:	f7ff fcb1 	bl	8002064 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002702:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002704:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002706:	429a      	cmp	r2, r3
 8002708:	d301      	bcc.n	800270e <xQueueGenericSend+0xea>
 800270a:	2f02      	cmp	r7, #2
 800270c:	d1b7      	bne.n	800267e <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800270e:	463a      	mov	r2, r7
 8002710:	4649      	mov	r1, r9
 8002712:	4620      	mov	r0, r4
 8002714:	f7ff fea5 	bl	8002462 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800271a:	b11b      	cbz	r3, 8002724 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800271c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002720:	f000 fd2a 	bl	8003178 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002724:	b138      	cbz	r0, 8002736 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8002726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <xQueueGenericSend+0x168>)
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002736:	f7ff fcb7 	bl	80020a8 <vPortExitCritical>
				return pdPASS;
 800273a:	2001      	movs	r0, #1
}
 800273c:	b004      	add	sp, #16
 800273e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff fed4 	bl	80024f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002748:	f000 fc06 	bl	8002f58 <xTaskResumeAll>
 800274c:	e7d6      	b.n	80026fc <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 800274e:	4620      	mov	r0, r4
 8002750:	f7ff fece 	bl	80024f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002754:	f000 fc00 	bl	8002f58 <xTaskResumeAll>
 8002758:	e795      	b.n	8002686 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800275a:	2f02      	cmp	r7, #2
 800275c:	d102      	bne.n	8002764 <xQueueGenericSend+0x140>
 800275e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d10a      	bne.n	800277a <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002764:	f000 fd98 	bl	8003298 <xTaskGetSchedulerState>
 8002768:	2800      	cmp	r0, #0
 800276a:	f43f af7b 	beq.w	8002664 <xQueueGenericSend+0x40>
 800276e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002770:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002774:	f8df a014 	ldr.w	sl, [pc, #20]	; 800278c <xQueueGenericSend+0x168>
 8002778:	e7c1      	b.n	80026fe <xQueueGenericSend+0xda>
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	e7fe      	b.n	800278a <xQueueGenericSend+0x166>
 800278c:	e000ed04 	.word	0xe000ed04

08002790 <xQueueGenericSendFromISR>:
{
 8002790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002794:	4688      	mov	r8, r1
 8002796:	4691      	mov	r9, r2
 8002798:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800279a:	4604      	mov	r4, r0
 800279c:	b940      	cbnz	r0, 80027b0 <xQueueGenericSendFromISR+0x20>
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	e7fe      	b.n	80027ae <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027b0:	bb09      	cbnz	r1, 80027f6 <xQueueGenericSendFromISR+0x66>
 80027b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027b4:	b1fb      	cbz	r3, 80027f6 <xQueueGenericSendFromISR+0x66>
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	e7fe      	b.n	80027c6 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027cc:	f000 fcd4 	bl	8003178 <xTaskRemoveFromEventList>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d034      	beq.n	800283e <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 80027d4:	f1b9 0f00 	cmp.w	r9, #0
 80027d8:	d031      	beq.n	800283e <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027da:	2001      	movs	r0, #1
 80027dc:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80027e0:	f386 8811 	msr	BASEPRI, r6
}
 80027e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027e8:	3501      	adds	r5, #1
 80027ea:	b26d      	sxtb	r5, r5
 80027ec:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80027f0:	e025      	b.n	800283e <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 80027f2:	2000      	movs	r0, #0
 80027f4:	e7f4      	b.n	80027e0 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027f6:	2f02      	cmp	r7, #2
 80027f8:	d102      	bne.n	8002800 <xQueueGenericSendFromISR+0x70>
 80027fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d120      	bne.n	8002842 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002800:	f7ff fd0c 	bl	800221c <vPortValidateInterruptPriority>
	__asm volatile
 8002804:	f3ef 8611 	mrs	r6, BASEPRI
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002818:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800281a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800281c:	429a      	cmp	r2, r3
 800281e:	d301      	bcc.n	8002824 <xQueueGenericSendFromISR+0x94>
 8002820:	2f02      	cmp	r7, #2
 8002822:	d1e6      	bne.n	80027f2 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002824:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002828:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800282a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800282c:	4641      	mov	r1, r8
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff fe17 	bl	8002462 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002834:	1c6b      	adds	r3, r5, #1
 8002836:	d1d7      	bne.n	80027e8 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1c4      	bne.n	80027c8 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 800283e:	2001      	movs	r0, #1
 8002840:	e7ce      	b.n	80027e0 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	e7fe      	b.n	8002852 <xQueueGenericSendFromISR+0xc2>

08002854 <xQueueReceive>:
{
 8002854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002858:	b085      	sub	sp, #20
 800285a:	4688      	mov	r8, r1
 800285c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800285e:	4604      	mov	r4, r0
 8002860:	b940      	cbnz	r0, 8002874 <xQueueReceive+0x20>
 8002862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	e7fe      	b.n	8002872 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002874:	2900      	cmp	r1, #0
 8002876:	f040 8086 	bne.w	8002986 <xQueueReceive+0x132>
 800287a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8082 	beq.w	8002986 <xQueueReceive+0x132>
 8002882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	e7fe      	b.n	8002892 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002894:	9e01      	ldr	r6, [sp, #4]
 8002896:	2e00      	cmp	r6, #0
 8002898:	d07a      	beq.n	8002990 <xQueueReceive+0x13c>
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	e7fe      	b.n	80028aa <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 80028ac:	9d01      	ldr	r5, [sp, #4]
 80028ae:	b91d      	cbnz	r5, 80028b8 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 80028b0:	f7ff fbfa 	bl	80020a8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80028b4:	2000      	movs	r0, #0
 80028b6:	e052      	b.n	800295e <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 80028b8:	b916      	cbnz	r6, 80028c0 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028ba:	a802      	add	r0, sp, #8
 80028bc:	f000 fc9e 	bl	80031fc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80028c0:	f7ff fbf2 	bl	80020a8 <vPortExitCritical>
		vTaskSuspendAll();
 80028c4:	f000 faa8 	bl	8002e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028c8:	f7ff fbcc 	bl	8002064 <vPortEnterCritical>
 80028cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80028d0:	2bff      	cmp	r3, #255	; 0xff
 80028d2:	bf08      	it	eq
 80028d4:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80028d8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80028dc:	2bff      	cmp	r3, #255	; 0xff
 80028de:	bf08      	it	eq
 80028e0:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80028e4:	f7ff fbe0 	bl	80020a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028e8:	a901      	add	r1, sp, #4
 80028ea:	a802      	add	r0, sp, #8
 80028ec:	f000 fc92 	bl	8003214 <xTaskCheckForTimeOut>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d13d      	bne.n	8002970 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f4:	4620      	mov	r0, r4
 80028f6:	f7ff fda9 	bl	800244c <prvIsQueueEmpty>
 80028fa:	b398      	cbz	r0, 8002964 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028fc:	9901      	ldr	r1, [sp, #4]
 80028fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002902:	f000 fbff 	bl	8003104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff fdf2 	bl	80024f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800290c:	f000 fb24 	bl	8002f58 <xTaskResumeAll>
 8002910:	b938      	cbnz	r0, 8002922 <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8002912:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002916:	f8c9 3000 	str.w	r3, [r9]
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002924:	f7ff fb9e 	bl	8002064 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002928:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800292a:	2d00      	cmp	r5, #0
 800292c:	d0be      	beq.n	80028ac <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800292e:	4641      	mov	r1, r8
 8002930:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002932:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002934:	f7ff fdc8 	bl	80024c8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002938:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800293a:	6923      	ldr	r3, [r4, #16]
 800293c:	b163      	cbz	r3, 8002958 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800293e:	f104 0010 	add.w	r0, r4, #16
 8002942:	f000 fc19 	bl	8003178 <xTaskRemoveFromEventList>
 8002946:	b138      	cbz	r0, 8002958 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8002948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <xQueueReceive+0x144>)
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002958:	f7ff fba6 	bl	80020a8 <vPortExitCritical>
				return pdPASS;
 800295c:	2001      	movs	r0, #1
}
 800295e:	b005      	add	sp, #20
 8002960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8002964:	4620      	mov	r0, r4
 8002966:	f7ff fdc3 	bl	80024f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800296a:	f000 faf5 	bl	8002f58 <xTaskResumeAll>
 800296e:	e7d8      	b.n	8002922 <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8002970:	4620      	mov	r0, r4
 8002972:	f7ff fdbd 	bl	80024f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002976:	f000 faef 	bl	8002f58 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800297a:	4620      	mov	r0, r4
 800297c:	f7ff fd66 	bl	800244c <prvIsQueueEmpty>
 8002980:	2800      	cmp	r0, #0
 8002982:	d0ce      	beq.n	8002922 <xQueueReceive+0xce>
 8002984:	e796      	b.n	80028b4 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002986:	f000 fc87 	bl	8003298 <xTaskGetSchedulerState>
 800298a:	2800      	cmp	r0, #0
 800298c:	d082      	beq.n	8002894 <xQueueReceive+0x40>
 800298e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002990:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002992:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8002998 <xQueueReceive+0x144>
 8002996:	e7c5      	b.n	8002924 <xQueueReceive+0xd0>
 8002998:	e000ed04 	.word	0xe000ed04

0800299c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	4604      	mov	r4, r0
 80029a0:	460d      	mov	r5, r1
 80029a2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029a4:	f7ff fb5e 	bl	8002064 <vPortEnterCritical>
 80029a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80029ac:	2bff      	cmp	r3, #255	; 0xff
 80029ae:	bf04      	itt	eq
 80029b0:	2300      	moveq	r3, #0
 80029b2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80029b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80029ba:	2bff      	cmp	r3, #255	; 0xff
 80029bc:	bf04      	itt	eq
 80029be:	2300      	moveq	r3, #0
 80029c0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80029c4:	f7ff fb70 	bl	80020a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ca:	b92b      	cbnz	r3, 80029d8 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029cc:	4632      	mov	r2, r6
 80029ce:	4629      	mov	r1, r5
 80029d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029d4:	f000 fbb0 	bl	8003138 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80029d8:	4620      	mov	r0, r4
	}
 80029da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80029de:	f7ff bd87 	b.w	80024f0 <prvUnlockQueue>
	...

080029e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <prvResetNextTaskUnblockTime+0x1c>)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <prvResetNextTaskUnblockTime+0x20>)
 80029ec:	b919      	cbnz	r1, 80029f6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80029ee:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029fa:	68d2      	ldr	r2, [r2, #12]
 80029fc:	6852      	ldr	r2, [r2, #4]
 80029fe:	e7f8      	b.n	80029f2 <prvResetNextTaskUnblockTime+0xe>
 8002a00:	20003d1c 	.word	0x20003d1c
 8002a04:	20003dcc 	.word	0x20003dcc

08002a08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a0c:	4e1b      	ldr	r6, [pc, #108]	; (8002a7c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002a0e:	681d      	ldr	r5, [r3, #0]
{
 8002a10:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a12:	6830      	ldr	r0, [r6, #0]
{
 8002a14:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a16:	3004      	adds	r0, #4
 8002a18:	f7ff fab8 	bl	8001f8c <uxListRemove>
 8002a1c:	4633      	mov	r3, r6
 8002a1e:	b940      	cbnz	r0, 8002a32 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002a20:	2001      	movs	r0, #1
 8002a22:	6831      	ldr	r1, [r6, #0]
 8002a24:	4e16      	ldr	r6, [pc, #88]	; (8002a80 <prvAddCurrentTaskToDelayedList+0x78>)
 8002a26:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002a28:	6832      	ldr	r2, [r6, #0]
 8002a2a:	4088      	lsls	r0, r1
 8002a2c:	ea22 0200 	bic.w	r2, r2, r0
 8002a30:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a32:	1c62      	adds	r2, r4, #1
 8002a34:	d107      	bne.n	8002a46 <prvAddCurrentTaskToDelayedList+0x3e>
 8002a36:	b137      	cbz	r7, 8002a46 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	4812      	ldr	r0, [pc, #72]	; (8002a84 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002a3c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a42:	f7ff ba80 	b.w	8001f46 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a46:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a48:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002a4a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a4c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002a4e:	d907      	bls.n	8002a60 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <prvAddCurrentTaskToDelayedList+0x80>)
 8002a52:	6810      	ldr	r0, [r2, #0]
 8002a54:	6819      	ldr	r1, [r3, #0]
}
 8002a56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a5a:	3104      	adds	r1, #4
 8002a5c:	f7ff ba7f 	b.w	8001f5e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a60:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <prvAddCurrentTaskToDelayedList+0x84>)
 8002a62:	6810      	ldr	r0, [r2, #0]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	3104      	adds	r1, #4
 8002a68:	f7ff fa79 	bl	8001f5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <prvAddCurrentTaskToDelayedList+0x88>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002a72:	bf38      	it	cc
 8002a74:	601c      	strcc	r4, [r3, #0]
 8002a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a78:	20003e14 	.word	0x20003e14
 8002a7c:	20003d18 	.word	0x20003d18
 8002a80:	20003d9c 	.word	0x20003d9c
 8002a84:	20003dec 	.word	0x20003dec
 8002a88:	20003d20 	.word	0x20003d20
 8002a8c:	20003d1c 	.word	0x20003d1c
 8002a90:	20003dcc 	.word	0x20003dcc

08002a94 <prvIdleTask>:
{
 8002a94:	b580      	push	{r7, lr}
				taskYIELD();
 8002a96:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002afc <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002a9a:	4f14      	ldr	r7, [pc, #80]	; (8002aec <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a9c:	4c14      	ldr	r4, [pc, #80]	; (8002af0 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8002a9e:	4e15      	ldr	r6, [pc, #84]	; (8002af4 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	b963      	cbnz	r3, 8002abe <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <prvIdleTask+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d9f8      	bls.n	8002a9e <prvIdleTask+0xa>
				taskYIELD();
 8002aac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ab0:	f8c8 3000 	str.w	r3, [r8]
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	e7ee      	b.n	8002a9c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002abe:	f7ff fad1 	bl	8002064 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ac6:	1d28      	adds	r0, r5, #4
 8002ac8:	f7ff fa60 	bl	8001f8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002acc:	6833      	ldr	r3, [r6, #0]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002ad8:	f7ff fae6 	bl	80020a8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002adc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002ade:	f7ff fc7d 	bl	80023dc <vPortFree>
			vPortFree( pxTCB );
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f7ff fc7a 	bl	80023dc <vPortFree>
 8002ae8:	e7da      	b.n	8002aa0 <prvIdleTask+0xc>
 8002aea:	bf00      	nop
 8002aec:	20003e00 	.word	0x20003e00
 8002af0:	20003d8c 	.word	0x20003d8c
 8002af4:	20003d88 	.word	0x20003d88
 8002af8:	20003d24 	.word	0x20003d24
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <xTaskCreate>:
	{
 8002b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b04:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002b08:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b0a:	4650      	mov	r0, sl
	{
 8002b0c:	460f      	mov	r7, r1
 8002b0e:	4699      	mov	r9, r3
 8002b10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b12:	f7ff fbd5 	bl	80022c0 <pvPortMalloc>
			if( pxStack != NULL )
 8002b16:	4605      	mov	r5, r0
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	f000 809f 	beq.w	8002c5c <xTaskCreate+0x15c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002b1e:	2050      	movs	r0, #80	; 0x50
 8002b20:	f7ff fbce 	bl	80022c0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002b24:	4604      	mov	r4, r0
 8002b26:	2800      	cmp	r0, #0
 8002b28:	f000 8095 	beq.w	8002c56 <xTaskCreate+0x156>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b2c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002b30:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b32:	4455      	add	r5, sl
 8002b34:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b36:	f025 0a07 	bic.w	sl, r5, #7
 8002b3a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002b3e:	3709      	adds	r7, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b40:	7859      	ldrb	r1, [r3, #1]
 8002b42:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002b46:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002b4a:	b109      	cbz	r1, 8002b50 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b4c:	42bb      	cmp	r3, r7
 8002b4e:	d1f7      	bne.n	8002b40 <xTaskCreate+0x40>
 8002b50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b52:	f04f 0b00 	mov.w	fp, #0
 8002b56:	2d04      	cmp	r5, #4
 8002b58:	bf28      	it	cs
 8002b5a:	2504      	movcs	r5, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b5c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002b5e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002b60:	6425      	str	r5, [r4, #64]	; 0x40
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b62:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b64:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
		pxNewTCB->uxMutexesHeld = 0;
 8002b68:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b6c:	f7ff f9e8 	bl	8001f40 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b70:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b74:	f104 0018 	add.w	r0, r4, #24
 8002b78:	f7ff f9e2 	bl	8001f40 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002b7c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b80:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b82:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b84:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b86:	f884 b04c 	strb.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b8a:	464a      	mov	r2, r9
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	4650      	mov	r0, sl
 8002b90:	f7ff fa3e 	bl	8002010 <pxPortInitialiseStack>
 8002b94:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002b96:	b106      	cbz	r6, 8002b9a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b98:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002b9a:	f7ff fa63 	bl	8002064 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 8002ba0:	4e36      	ldr	r6, [pc, #216]	; (8002c7c <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002cb8 <xTaskCreate+0x1b8>
 8002ba8:	3201      	adds	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002bac:	6832      	ldr	r2, [r6, #0]
 8002bae:	2a00      	cmp	r2, #0
 8002bb0:	d157      	bne.n	8002c62 <xTaskCreate+0x162>
			pxCurrentTCB = pxNewTCB;
 8002bb2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d125      	bne.n	8002c06 <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bba:	4831      	ldr	r0, [pc, #196]	; (8002c80 <xTaskCreate+0x180>)
 8002bbc:	f7ff f9b5 	bl	8001f2a <vListInitialise>
 8002bc0:	4830      	ldr	r0, [pc, #192]	; (8002c84 <xTaskCreate+0x184>)
 8002bc2:	f7ff f9b2 	bl	8001f2a <vListInitialise>
 8002bc6:	4830      	ldr	r0, [pc, #192]	; (8002c88 <xTaskCreate+0x188>)
 8002bc8:	f7ff f9af 	bl	8001f2a <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8002bcc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8002cbc <xTaskCreate+0x1bc>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bd0:	482e      	ldr	r0, [pc, #184]	; (8002c8c <xTaskCreate+0x18c>)
 8002bd2:	f7ff f9aa 	bl	8001f2a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002bd6:	4d2e      	ldr	r5, [pc, #184]	; (8002c90 <xTaskCreate+0x190>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bd8:	482e      	ldr	r0, [pc, #184]	; (8002c94 <xTaskCreate+0x194>)
 8002bda:	f7ff f9a6 	bl	8001f2a <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8002bde:	4648      	mov	r0, r9
 8002be0:	f7ff f9a3 	bl	8001f2a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002be4:	4628      	mov	r0, r5
 8002be6:	f7ff f9a0 	bl	8001f2a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bea:	482b      	ldr	r0, [pc, #172]	; (8002c98 <xTaskCreate+0x198>)
 8002bec:	f7ff f99d 	bl	8001f2a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002bf0:	482a      	ldr	r0, [pc, #168]	; (8002c9c <xTaskCreate+0x19c>)
 8002bf2:	f7ff f99a 	bl	8001f2a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002bf6:	482a      	ldr	r0, [pc, #168]	; (8002ca0 <xTaskCreate+0x1a0>)
 8002bf8:	f7ff f997 	bl	8001f2a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bfc:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <xTaskCreate+0x1a4>)
 8002bfe:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c02:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <xTaskCreate+0x1a8>)
 8002c04:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002c06:	2501      	movs	r5, #1
		uxTaskNumber++;
 8002c08:	4a28      	ldr	r2, [pc, #160]	; (8002cac <xTaskCreate+0x1ac>)
		prvAddTaskToReadyList( pxNewTCB );
 8002c0a:	4929      	ldr	r1, [pc, #164]	; (8002cb0 <xTaskCreate+0x1b0>)
		uxTaskNumber++;
 8002c0c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002c0e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002c10:	3301      	adds	r3, #1
 8002c12:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002c14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c16:	fa05 f302 	lsl.w	r3, r5, r2
 8002c1a:	4303      	orrs	r3, r0
 8002c1c:	2014      	movs	r0, #20
 8002c1e:	600b      	str	r3, [r1, #0]
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <xTaskCreate+0x180>)
 8002c22:	4639      	mov	r1, r7
 8002c24:	fb00 3002 	mla	r0, r0, r2, r3
 8002c28:	f7ff f98d 	bl	8001f46 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002c2c:	f7ff fa3c 	bl	80020a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002c30:	f8d8 3000 	ldr.w	r3, [r8]
 8002c34:	b163      	cbz	r3, 8002c50 <xTaskCreate+0x150>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c36:	6833      	ldr	r3, [r6, #0]
 8002c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d207      	bcs.n	8002c50 <xTaskCreate+0x150>
			taskYIELD_IF_USING_PREEMPTION();
 8002c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <xTaskCreate+0x1b4>)
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	f3bf 8f6f 	isb	sy
	}
 8002c50:	4628      	mov	r0, r5
 8002c52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002c56:	4628      	mov	r0, r5
 8002c58:	f7ff fbc0 	bl	80023dc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c5c:	f04f 35ff 	mov.w	r5, #4294967295
 8002c60:	e7f6      	b.n	8002c50 <xTaskCreate+0x150>
			if( xSchedulerRunning == pdFALSE )
 8002c62:	f8d8 3000 	ldr.w	r3, [r8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1cd      	bne.n	8002c06 <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c6a:	6833      	ldr	r3, [r6, #0]
 8002c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c70:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002c72:	bf98      	it	ls
 8002c74:	6034      	strls	r4, [r6, #0]
 8002c76:	e7c6      	b.n	8002c06 <xTaskCreate+0x106>
 8002c78:	20003d88 	.word	0x20003d88
 8002c7c:	20003d18 	.word	0x20003d18
 8002c80:	20003d24 	.word	0x20003d24
 8002c84:	20003d38 	.word	0x20003d38
 8002c88:	20003d4c 	.word	0x20003d4c
 8002c8c:	20003d60 	.word	0x20003d60
 8002c90:	20003db4 	.word	0x20003db4
 8002c94:	20003d74 	.word	0x20003d74
 8002c98:	20003dd4 	.word	0x20003dd4
 8002c9c:	20003e00 	.word	0x20003e00
 8002ca0:	20003dec 	.word	0x20003dec
 8002ca4:	20003d1c 	.word	0x20003d1c
 8002ca8:	20003d20 	.word	0x20003d20
 8002cac:	20003d98 	.word	0x20003d98
 8002cb0:	20003d9c 	.word	0x20003d9c
 8002cb4:	e000ed04 	.word	0xe000ed04
 8002cb8:	20003de8 	.word	0x20003de8
 8002cbc:	20003da0 	.word	0x20003da0

08002cc0 <vTaskDelete>:
	{
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4d2a      	ldr	r5, [pc, #168]	; (8002d70 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 8002cc6:	f7ff f9cd 	bl	8002064 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002cca:	b904      	cbnz	r4, 8002cce <vTaskDelete+0xe>
 8002ccc:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cce:	1d26      	adds	r6, r4, #4
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f7ff f95b 	bl	8001f8c <uxListRemove>
 8002cd6:	b960      	cbnz	r0, 8002cf2 <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002cd8:	2114      	movs	r1, #20
 8002cda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <vTaskDelete+0xb4>)
 8002cde:	4341      	muls	r1, r0
 8002ce0:	585b      	ldr	r3, [r3, r1]
 8002ce2:	b933      	cbnz	r3, 8002cf2 <vTaskDelete+0x32>
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4924      	ldr	r1, [pc, #144]	; (8002d78 <vTaskDelete+0xb8>)
 8002ce8:	4082      	lsls	r2, r0
 8002cea:	680b      	ldr	r3, [r1, #0]
 8002cec:	ea23 0302 	bic.w	r3, r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cf4:	b11b      	cbz	r3, 8002cfe <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cf6:	f104 0018 	add.w	r0, r4, #24
 8002cfa:	f7ff f947 	bl	8001f8c <uxListRemove>
			uxTaskNumber++;
 8002cfe:	4a1f      	ldr	r2, [pc, #124]	; (8002d7c <vTaskDelete+0xbc>)
 8002d00:	6813      	ldr	r3, [r2, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8002d06:	682b      	ldr	r3, [r5, #0]
 8002d08:	429c      	cmp	r4, r3
 8002d0a:	d11b      	bne.n	8002d44 <vTaskDelete+0x84>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d0c:	4631      	mov	r1, r6
 8002d0e:	481c      	ldr	r0, [pc, #112]	; (8002d80 <vTaskDelete+0xc0>)
 8002d10:	f7ff f919 	bl	8001f46 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8002d14:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <vTaskDelete+0xc4>)
 8002d16:	6813      	ldr	r3, [r2, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8002d1c:	f7ff f9c4 	bl	80020a8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <vTaskDelete+0xc8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	b31b      	cbz	r3, 8002d6e <vTaskDelete+0xae>
			if( pxTCB == pxCurrentTCB )
 8002d26:	682b      	ldr	r3, [r5, #0]
 8002d28:	429c      	cmp	r4, r3
 8002d2a:	d120      	bne.n	8002d6e <vTaskDelete+0xae>
				configASSERT( uxSchedulerSuspended == 0 );
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <vTaskDelete+0xcc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b1ab      	cbz	r3, 8002d5e <vTaskDelete+0x9e>
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	e7fe      	b.n	8002d42 <vTaskDelete+0x82>
				--uxCurrentNumberOfTasks;
 8002d44:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <vTaskDelete+0xd0>)
			vPortFree( pxTCB->pxStack );
 8002d46:	6b20      	ldr	r0, [r4, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 8002d48:	6813      	ldr	r3, [r2, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6013      	str	r3, [r2, #0]
			vPortFree( pxTCB->pxStack );
 8002d4e:	f7ff fb45 	bl	80023dc <vPortFree>
			vPortFree( pxTCB );
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7ff fb42 	bl	80023dc <vPortFree>
				prvResetNextTaskUnblockTime();
 8002d58:	f7ff fe44 	bl	80029e4 <prvResetNextTaskUnblockTime>
 8002d5c:	e7de      	b.n	8002d1c <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <vTaskDelete+0xd4>)
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	20003d18 	.word	0x20003d18
 8002d74:	20003d24 	.word	0x20003d24
 8002d78:	20003d9c 	.word	0x20003d9c
 8002d7c:	20003d98 	.word	0x20003d98
 8002d80:	20003e00 	.word	0x20003e00
 8002d84:	20003d8c 	.word	0x20003d8c
 8002d88:	20003de8 	.word	0x20003de8
 8002d8c:	20003d94 	.word	0x20003d94
 8002d90:	20003d88 	.word	0x20003d88
 8002d94:	e000ed04 	.word	0xe000ed04

08002d98 <vTaskStartScheduler>:
{
 8002d98:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002d9a:	2400      	movs	r4, #0
 8002d9c:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <vTaskStartScheduler+0x68>)
 8002d9e:	9400      	str	r4, [sp, #0]
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	2246      	movs	r2, #70	; 0x46
 8002da4:	4623      	mov	r3, r4
 8002da6:	4917      	ldr	r1, [pc, #92]	; (8002e04 <vTaskStartScheduler+0x6c>)
 8002da8:	4817      	ldr	r0, [pc, #92]	; (8002e08 <vTaskStartScheduler+0x70>)
 8002daa:	f7ff fea9 	bl	8002b00 <xTaskCreate>
		if( xReturn == pdPASS )
 8002dae:	2801      	cmp	r0, #1
 8002db0:	d118      	bne.n	8002de4 <vTaskStartScheduler+0x4c>
			xReturn = xTimerCreateTimerTask();
 8002db2:	f000 fb15 	bl	80033e0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002db6:	2801      	cmp	r0, #1
 8002db8:	d114      	bne.n	8002de4 <vTaskStartScheduler+0x4c>
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002dca:	f04f 32ff 	mov.w	r2, #4294967295
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <vTaskStartScheduler+0x74>)
 8002dd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <vTaskStartScheduler+0x78>)
 8002dd4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <vTaskStartScheduler+0x7c>)
 8002dd8:	601c      	str	r4, [r3, #0]
}
 8002dda:	b002      	add	sp, #8
 8002ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002de0:	f7ff b9c2 	b.w	8002168 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002de4:	3001      	adds	r0, #1
 8002de6:	d108      	bne.n	8002dfa <vTaskStartScheduler+0x62>
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	e7fe      	b.n	8002df8 <vTaskStartScheduler+0x60>
}
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	bf00      	nop
 8002e00:	20003dc8 	.word	0x20003dc8
 8002e04:	08003f93 	.word	0x08003f93
 8002e08:	08002a95 	.word	0x08002a95
 8002e0c:	20003dcc 	.word	0x20003dcc
 8002e10:	20003de8 	.word	0x20003de8
 8002e14:	20003e14 	.word	0x20003e14

08002e18 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002e18:	4a02      	ldr	r2, [pc, #8]	; (8002e24 <vTaskSuspendAll+0xc>)
 8002e1a:	6813      	ldr	r3, [r2, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20003d94 	.word	0x20003d94

08002e28 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002e28:	4b01      	ldr	r3, [pc, #4]	; (8002e30 <xTaskGetTickCount+0x8>)
 8002e2a:	6818      	ldr	r0, [r3, #0]
}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20003e14 	.word	0x20003e14

08002e34 <xTaskIncrementTick>:
{
 8002e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e38:	4b3c      	ldr	r3, [pc, #240]	; (8002f2c <xTaskIncrementTick+0xf8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d153      	bne.n	8002ee8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e40:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <xTaskIncrementTick+0xfc>)
 8002e42:	681c      	ldr	r4, [r3, #0]
 8002e44:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002e46:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e48:	b9bc      	cbnz	r4, 8002e7a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002e4a:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <xTaskIncrementTick+0x100>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	b142      	cbz	r2, 8002e64 <xTaskIncrementTick+0x30>
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	e7fe      	b.n	8002e62 <xTaskIncrementTick+0x2e>
 8002e64:	4a34      	ldr	r2, [pc, #208]	; (8002f38 <xTaskIncrementTick+0x104>)
 8002e66:	6819      	ldr	r1, [r3, #0]
 8002e68:	6810      	ldr	r0, [r2, #0]
 8002e6a:	6018      	str	r0, [r3, #0]
 8002e6c:	6011      	str	r1, [r2, #0]
 8002e6e:	4a33      	ldr	r2, [pc, #204]	; (8002f3c <xTaskIncrementTick+0x108>)
 8002e70:	6813      	ldr	r3, [r2, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	f7ff fdb5 	bl	80029e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e7a:	4d31      	ldr	r5, [pc, #196]	; (8002f40 <xTaskIncrementTick+0x10c>)
 8002e7c:	f04f 0b00 	mov.w	fp, #0
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	4f30      	ldr	r7, [pc, #192]	; (8002f44 <xTaskIncrementTick+0x110>)
 8002e84:	429c      	cmp	r4, r3
 8002e86:	d33e      	bcc.n	8002f06 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e88:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002f34 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002e8c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002f54 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e90:	f8d8 2000 	ldr.w	r2, [r8]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	bb72      	cbnz	r2, 8002ef6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	602a      	str	r2, [r5, #0]
					break;
 8002e9e:	e032      	b.n	8002f06 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ea0:	f106 0a04 	add.w	sl, r6, #4
 8002ea4:	4650      	mov	r0, sl
 8002ea6:	f7ff f871 	bl	8001f8c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002eaa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002eac:	b119      	cbz	r1, 8002eb6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002eae:	f106 0018 	add.w	r0, r6, #24
 8002eb2:	f7ff f86b 	bl	8001f8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f04f 0e14 	mov.w	lr, #20
 8002ebc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002ebe:	f8d9 3000 	ldr.w	r3, [r9]
 8002ec2:	fa02 f100 	lsl.w	r1, r2, r0
 8002ec6:	4319      	orrs	r1, r3
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <xTaskIncrementTick+0x114>)
 8002eca:	f8c9 1000 	str.w	r1, [r9]
 8002ece:	fb0e 3000 	mla	r0, lr, r0, r3
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	f7ff f837 	bl	8001f46 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ed8:	6838      	ldr	r0, [r7, #0]
 8002eda:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002edc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002ede:	4291      	cmp	r1, r2
 8002ee0:	bf28      	it	cs
 8002ee2:	f04f 0b01 	movcs.w	fp, #1
 8002ee6:	e7d3      	b.n	8002e90 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002ee8:	4a18      	ldr	r2, [pc, #96]	; (8002f4c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8002eea:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8002eee:	6813      	ldr	r3, [r2, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e011      	b.n	8002f1a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ef6:	f8d8 2000 	ldr.w	r2, [r8]
 8002efa:	68d2      	ldr	r2, [r2, #12]
 8002efc:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002efe:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002f00:	428c      	cmp	r4, r1
 8002f02:	d2cd      	bcs.n	8002ea0 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002f04:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <xTaskIncrementTick+0x114>)
 8002f0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f0c:	2214      	movs	r2, #20
 8002f0e:	434a      	muls	r2, r1
 8002f10:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002f12:	2a02      	cmp	r2, #2
 8002f14:	bf28      	it	cs
 8002f16:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002f1a:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <xTaskIncrementTick+0x11c>)
 8002f1c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002f1e:	2a00      	cmp	r2, #0
 8002f20:	bf18      	it	ne
 8002f22:	f04f 0b01 	movne.w	fp, #1
}
 8002f26:	4658      	mov	r0, fp
 8002f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f2c:	20003d94 	.word	0x20003d94
 8002f30:	20003e14 	.word	0x20003e14
 8002f34:	20003d1c 	.word	0x20003d1c
 8002f38:	20003d20 	.word	0x20003d20
 8002f3c:	20003dd0 	.word	0x20003dd0
 8002f40:	20003dcc 	.word	0x20003dcc
 8002f44:	20003d18 	.word	0x20003d18
 8002f48:	20003d24 	.word	0x20003d24
 8002f4c:	20003d90 	.word	0x20003d90
 8002f50:	20003e18 	.word	0x20003e18
 8002f54:	20003d9c 	.word	0x20003d9c

08002f58 <xTaskResumeAll>:
{
 8002f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002f5c:	4c31      	ldr	r4, [pc, #196]	; (8003024 <xTaskResumeAll+0xcc>)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	b943      	cbnz	r3, 8002f74 <xTaskResumeAll+0x1c>
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	e7fe      	b.n	8002f72 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002f74:	f7ff f876 	bl	8002064 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f7e:	6824      	ldr	r4, [r4, #0]
 8002f80:	b12c      	cbz	r4, 8002f8e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002f82:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002f84:	f7ff f890 	bl	80020a8 <vPortExitCritical>
}
 8002f88:	4620      	mov	r0, r4
 8002f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f8e:	4b26      	ldr	r3, [pc, #152]	; (8003028 <xTaskResumeAll+0xd0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f5      	beq.n	8002f82 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f96:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003040 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002f9a:	4f24      	ldr	r7, [pc, #144]	; (800302c <xTaskResumeAll+0xd4>)
 8002f9c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003044 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fa0:	f8d9 3000 	ldr.w	r3, [r9]
 8002fa4:	b9e3      	cbnz	r3, 8002fe0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002fa6:	b10c      	cbz	r4, 8002fac <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002fa8:	f7ff fd1c 	bl	80029e4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002fac:	4d20      	ldr	r5, [pc, #128]	; (8003030 <xTaskResumeAll+0xd8>)
 8002fae:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002fb0:	b144      	cbz	r4, 8002fc4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002fb2:	2701      	movs	r7, #1
 8002fb4:	4e1f      	ldr	r6, [pc, #124]	; (8003034 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8002fb6:	f7ff ff3d 	bl	8002e34 <xTaskIncrementTick>
 8002fba:	b100      	cbz	r0, 8002fbe <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002fbc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002fbe:	3c01      	subs	r4, #1
 8002fc0:	d1f9      	bne.n	8002fb6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002fc2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <xTaskResumeAll+0xdc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0da      	beq.n	8002f82 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <xTaskResumeAll+0xe0>)
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002fdc:	2401      	movs	r4, #1
 8002fde:	e7d1      	b.n	8002f84 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002fe0:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8002fe4:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002fe6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fe8:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fea:	f104 0018 	add.w	r0, r4, #24
 8002fee:	f7fe ffcd 	bl	8001f8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f7fe ffca 	bl	8001f8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ff8:	2014      	movs	r0, #20
 8002ffa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ffc:	6839      	ldr	r1, [r7, #0]
 8002ffe:	fa05 f302 	lsl.w	r3, r5, r2
 8003002:	430b      	orrs	r3, r1
 8003004:	fb00 8002 	mla	r0, r0, r2, r8
 8003008:	4631      	mov	r1, r6
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	f7fe ff9b 	bl	8001f46 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <xTaskResumeAll+0xe4>)
 8003012:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800301a:	bf24      	itt	cs
 800301c:	4b05      	ldrcs	r3, [pc, #20]	; (8003034 <xTaskResumeAll+0xdc>)
 800301e:	601d      	strcs	r5, [r3, #0]
 8003020:	e7be      	b.n	8002fa0 <xTaskResumeAll+0x48>
 8003022:	bf00      	nop
 8003024:	20003d94 	.word	0x20003d94
 8003028:	20003d88 	.word	0x20003d88
 800302c:	20003d9c 	.word	0x20003d9c
 8003030:	20003d90 	.word	0x20003d90
 8003034:	20003e18 	.word	0x20003e18
 8003038:	e000ed04 	.word	0xe000ed04
 800303c:	20003d18 	.word	0x20003d18
 8003040:	20003dd4 	.word	0x20003dd4
 8003044:	20003d24 	.word	0x20003d24

08003048 <vTaskDelay>:
	{
 8003048:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800304a:	b940      	cbnz	r0, 800305e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800304c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <vTaskDelay+0x40>)
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <vTaskDelay+0x44>)
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	b141      	cbz	r1, 8003076 <vTaskDelay+0x2e>
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	e7fe      	b.n	8003074 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003076:	f7ff fecf 	bl	8002e18 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800307a:	f7ff fcc5 	bl	8002a08 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800307e:	f7ff ff6b 	bl	8002f58 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003082:	2800      	cmp	r0, #0
 8003084:	d0e2      	beq.n	800304c <vTaskDelay+0x4>
 8003086:	bd08      	pop	{r3, pc}
 8003088:	e000ed04 	.word	0xe000ed04
 800308c:	20003d94 	.word	0x20003d94

08003090 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <vTaskSwitchContext+0x60>)
{
 8003092:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <vTaskSwitchContext+0x64>)
 8003098:	b112      	cbz	r2, 80030a0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800309a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80030a0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <vTaskSwitchContext+0x68>)
 80030a4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	2214      	movs	r2, #20
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f1c3 031f 	rsb	r3, r3, #31
 80030b2:	435a      	muls	r2, r3
 80030b4:	4911      	ldr	r1, [pc, #68]	; (80030fc <vTaskSwitchContext+0x6c>)
 80030b6:	588c      	ldr	r4, [r1, r2]
 80030b8:	1888      	adds	r0, r1, r2
 80030ba:	b944      	cbnz	r4, 80030ce <vTaskSwitchContext+0x3e>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	e7fe      	b.n	80030cc <vTaskSwitchContext+0x3c>
 80030ce:	6844      	ldr	r4, [r0, #4]
 80030d0:	3208      	adds	r2, #8
 80030d2:	6864      	ldr	r4, [r4, #4]
 80030d4:	440a      	add	r2, r1
 80030d6:	4294      	cmp	r4, r2
 80030d8:	bf08      	it	eq
 80030da:	6862      	ldreq	r2, [r4, #4]
 80030dc:	6044      	str	r4, [r0, #4]
 80030de:	bf08      	it	eq
 80030e0:	6042      	streq	r2, [r0, #4]
 80030e2:	2214      	movs	r2, #20
 80030e4:	fb02 1303 	mla	r3, r2, r3, r1
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <vTaskSwitchContext+0x70>)
 80030ee:	e7d5      	b.n	800309c <vTaskSwitchContext+0xc>
 80030f0:	20003d94 	.word	0x20003d94
 80030f4:	20003e18 	.word	0x20003e18
 80030f8:	20003d9c 	.word	0x20003d9c
 80030fc:	20003d24 	.word	0x20003d24
 8003100:	20003d18 	.word	0x20003d18

08003104 <vTaskPlaceOnEventList>:
{
 8003104:	b510      	push	{r4, lr}
 8003106:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003108:	b940      	cbnz	r0, 800311c <vTaskPlaceOnEventList+0x18>
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	e7fe      	b.n	800311a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <vTaskPlaceOnEventList+0x30>)
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	3118      	adds	r1, #24
 8003122:	f7fe ff1c 	bl	8001f5e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003126:	4620      	mov	r0, r4
}
 8003128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800312c:	2101      	movs	r1, #1
 800312e:	f7ff bc6b 	b.w	8002a08 <prvAddCurrentTaskToDelayedList>
 8003132:	bf00      	nop
 8003134:	20003d18 	.word	0x20003d18

08003138 <vTaskPlaceOnEventListRestricted>:
	{
 8003138:	b538      	push	{r3, r4, r5, lr}
 800313a:	460d      	mov	r5, r1
 800313c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800313e:	b940      	cbnz	r0, 8003152 <vTaskPlaceOnEventListRestricted+0x1a>
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	e7fe      	b.n	8003150 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <vTaskPlaceOnEventListRestricted+0x3c>)
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	3118      	adds	r1, #24
 8003158:	f7fe fef5 	bl	8001f46 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800315c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800315e:	4621      	mov	r1, r4
 8003160:	bf08      	it	eq
 8003162:	4628      	moveq	r0, r5
	}
 8003164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003168:	bf18      	it	ne
 800316a:	f04f 30ff 	movne.w	r0, #4294967295
 800316e:	f7ff bc4b 	b.w	8002a08 <prvAddCurrentTaskToDelayedList>
 8003172:	bf00      	nop
 8003174:	20003d18 	.word	0x20003d18

08003178 <xTaskRemoveFromEventList>:
{
 8003178:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800317a:	68c3      	ldr	r3, [r0, #12]
 800317c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800317e:	b944      	cbnz	r4, 8003192 <xTaskRemoveFromEventList+0x1a>
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	e7fe      	b.n	8003190 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003192:	f104 0518 	add.w	r5, r4, #24
 8003196:	4628      	mov	r0, r5
 8003198:	f7fe fef8 	bl	8001f8c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <xTaskRemoveFromEventList+0x6c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b9e3      	cbnz	r3, 80031dc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80031a2:	1d25      	adds	r5, r4, #4
 80031a4:	4628      	mov	r0, r5
 80031a6:	f7fe fef1 	bl	8001f8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80031aa:	2301      	movs	r3, #1
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <xTaskRemoveFromEventList+0x70>)
 80031ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031b0:	6808      	ldr	r0, [r1, #0]
 80031b2:	4093      	lsls	r3, r2
 80031b4:	4303      	orrs	r3, r0
 80031b6:	2014      	movs	r0, #20
 80031b8:	600b      	str	r3, [r1, #0]
 80031ba:	4629      	mov	r1, r5
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <xTaskRemoveFromEventList+0x74>)
 80031be:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031c2:	f7fe fec0 	bl	8001f46 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <xTaskRemoveFromEventList+0x78>)
 80031c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80031d0:	bf85      	ittet	hi
 80031d2:	2001      	movhi	r0, #1
 80031d4:	4b07      	ldrhi	r3, [pc, #28]	; (80031f4 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 80031d6:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80031d8:	6018      	strhi	r0, [r3, #0]
}
 80031da:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031dc:	4629      	mov	r1, r5
 80031de:	4806      	ldr	r0, [pc, #24]	; (80031f8 <xTaskRemoveFromEventList+0x80>)
 80031e0:	e7ef      	b.n	80031c2 <xTaskRemoveFromEventList+0x4a>
 80031e2:	bf00      	nop
 80031e4:	20003d94 	.word	0x20003d94
 80031e8:	20003d9c 	.word	0x20003d9c
 80031ec:	20003d24 	.word	0x20003d24
 80031f0:	20003d18 	.word	0x20003d18
 80031f4:	20003e18 	.word	0x20003e18
 80031f8:	20003dd4 	.word	0x20003dd4

080031fc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <vTaskInternalSetTimeOutState+0x10>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003202:	4b03      	ldr	r3, [pc, #12]	; (8003210 <vTaskInternalSetTimeOutState+0x14>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6043      	str	r3, [r0, #4]
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20003dd0 	.word	0x20003dd0
 8003210:	20003e14 	.word	0x20003e14

08003214 <xTaskCheckForTimeOut>:
{
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003218:	4605      	mov	r5, r0
 800321a:	b940      	cbnz	r0, 800322e <xTaskCheckForTimeOut+0x1a>
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	e7fe      	b.n	800322c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800322e:	b941      	cbnz	r1, 8003242 <xTaskCheckForTimeOut+0x2e>
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	e7fe      	b.n	8003240 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003242:	f7fe ff0f 	bl	8002064 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003248:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800324a:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	1c58      	adds	r0, r3, #1
 8003250:	d00e      	beq.n	8003270 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003252:	480d      	ldr	r0, [pc, #52]	; (8003288 <xTaskCheckForTimeOut+0x74>)
 8003254:	682e      	ldr	r6, [r5, #0]
 8003256:	6800      	ldr	r0, [r0, #0]
 8003258:	4286      	cmp	r6, r0
 800325a:	d001      	beq.n	8003260 <xTaskCheckForTimeOut+0x4c>
 800325c:	428a      	cmp	r2, r1
 800325e:	d20e      	bcs.n	800327e <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003260:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003262:	429a      	cmp	r2, r3
 8003264:	d209      	bcs.n	800327a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800326a:	4628      	mov	r0, r5
 800326c:	f7ff ffc6 	bl	80031fc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8003270:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003272:	f7fe ff19 	bl	80020a8 <vPortExitCritical>
}
 8003276:	4620      	mov	r0, r4
 8003278:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800327e:	2401      	movs	r4, #1
 8003280:	e7f7      	b.n	8003272 <xTaskCheckForTimeOut+0x5e>
 8003282:	bf00      	nop
 8003284:	20003e14 	.word	0x20003e14
 8003288:	20003dd0 	.word	0x20003dd0

0800328c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800328c:	2201      	movs	r2, #1
 800328e:	4b01      	ldr	r3, [pc, #4]	; (8003294 <vTaskMissedYield+0x8>)
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	4770      	bx	lr
 8003294:	20003e18 	.word	0x20003e18

08003298 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <xTaskGetSchedulerState+0x18>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b133      	cbz	r3, 80032ac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <xTaskGetSchedulerState+0x1c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80032a4:	bf0c      	ite	eq
 80032a6:	2002      	moveq	r0, #2
 80032a8:	2000      	movne	r0, #0
 80032aa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032ac:	2001      	movs	r0, #1
	}
 80032ae:	4770      	bx	lr
 80032b0:	20003de8 	.word	0x20003de8
 80032b4:	20003d94 	.word	0x20003d94

080032b8 <xTaskPriorityDisinherit>:
	{
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80032ba:	4604      	mov	r4, r0
 80032bc:	b908      	cbnz	r0, 80032c2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80032be:	2000      	movs	r0, #0
 80032c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80032c2:	4b22      	ldr	r3, [pc, #136]	; (800334c <xTaskPriorityDisinherit+0x94>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4298      	cmp	r0, r3
 80032c8:	d008      	beq.n	80032dc <xTaskPriorityDisinherit+0x24>
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	e7fe      	b.n	80032da <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80032dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80032de:	b943      	cbnz	r3, 80032f2 <xTaskPriorityDisinherit+0x3a>
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	e7fe      	b.n	80032f0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80032f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
			( pxTCB->uxMutexesHeld )--;
 80032f6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032f8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80032fa:	6443      	str	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032fc:	d0df      	beq.n	80032be <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1dd      	bne.n	80032be <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003302:	1d05      	adds	r5, r0, #4
 8003304:	4628      	mov	r0, r5
 8003306:	f7fe fe41 	bl	8001f8c <uxListRemove>
 800330a:	4e11      	ldr	r6, [pc, #68]	; (8003350 <xTaskPriorityDisinherit+0x98>)
 800330c:	4a11      	ldr	r2, [pc, #68]	; (8003354 <xTaskPriorityDisinherit+0x9c>)
 800330e:	b950      	cbnz	r0, 8003326 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003310:	2114      	movs	r1, #20
 8003312:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003314:	4379      	muls	r1, r7
 8003316:	5873      	ldr	r3, [r6, r1]
 8003318:	b92b      	cbnz	r3, 8003326 <xTaskPriorityDisinherit+0x6e>
 800331a:	2001      	movs	r0, #1
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	40b8      	lsls	r0, r7
 8003320:	ea23 0300 	bic.w	r3, r3, r0
 8003324:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003326:	6c23      	ldr	r3, [r4, #64]	; 0x40
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003328:	f1c3 0105 	rsb	r1, r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800332c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800332e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003330:	2401      	movs	r4, #1
 8003332:	6811      	ldr	r1, [r2, #0]
 8003334:	fa04 f003 	lsl.w	r0, r4, r3
 8003338:	4308      	orrs	r0, r1
 800333a:	6010      	str	r0, [r2, #0]
 800333c:	2014      	movs	r0, #20
 800333e:	4629      	mov	r1, r5
 8003340:	fb00 6003 	mla	r0, r0, r3, r6
 8003344:	f7fe fdff 	bl	8001f46 <vListInsertEnd>
					xReturn = pdTRUE;
 8003348:	4620      	mov	r0, r4
	}
 800334a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800334c:	20003d18 	.word	0x20003d18
 8003350:	20003d24 	.word	0x20003d24
 8003354:	20003d9c 	.word	0x20003d9c

08003358 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800335a:	4c0d      	ldr	r4, [pc, #52]	; (8003390 <prvCheckForValidListAndQueue+0x38>)
	taskENTER_CRITICAL();
 800335c:	f7fe fe82 	bl	8002064 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8003360:	6825      	ldr	r5, [r4, #0]
 8003362:	b98d      	cbnz	r5, 8003388 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
 8003364:	4f0b      	ldr	r7, [pc, #44]	; (8003394 <prvCheckForValidListAndQueue+0x3c>)
			vListInitialise( &xActiveTimerList2 );
 8003366:	4e0c      	ldr	r6, [pc, #48]	; (8003398 <prvCheckForValidListAndQueue+0x40>)
			vListInitialise( &xActiveTimerList1 );
 8003368:	4638      	mov	r0, r7
 800336a:	f7fe fdde 	bl	8001f2a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800336e:	4630      	mov	r0, r6
 8003370:	f7fe fddb 	bl	8001f2a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <prvCheckForValidListAndQueue+0x44>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003376:	462a      	mov	r2, r5
			pxCurrentTimerList = &xActiveTimerList1;
 8003378:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800337a:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <prvCheckForValidListAndQueue+0x48>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800337c:	210c      	movs	r1, #12
 800337e:	2005      	movs	r0, #5
			pxOverflowTimerList = &xActiveTimerList2;
 8003380:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003382:	f7ff f92d 	bl	80025e0 <xQueueGenericCreate>
 8003386:	6020      	str	r0, [r4, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8003388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800338c:	f7fe be8c 	b.w	80020a8 <vPortExitCritical>
 8003390:	20003e50 	.word	0x20003e50
 8003394:	20003e24 	.word	0x20003e24
 8003398:	20003e38 	.word	0x20003e38
 800339c:	20003e1c 	.word	0x20003e1c
 80033a0:	20003e20 	.word	0x20003e20

080033a4 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80033a4:	4291      	cmp	r1, r2
{
 80033a6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80033a8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033aa:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80033ac:	d80a      	bhi.n	80033c4 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ae:	1ad2      	subs	r2, r2, r3
 80033b0:	6983      	ldr	r3, [r0, #24]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d20d      	bcs.n	80033d2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <prvInsertTimerInActiveList+0x34>)
 80033b8:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	f7fe fdcf 	bl	8001f5e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80033c0:	2000      	movs	r0, #0
 80033c2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d201      	bcs.n	80033cc <prvInsertTimerInActiveList+0x28>
 80033c8:	4299      	cmp	r1, r3
 80033ca:	d202      	bcs.n	80033d2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033cc:	1d01      	adds	r1, r0, #4
 80033ce:	4b03      	ldr	r3, [pc, #12]	; (80033dc <prvInsertTimerInActiveList+0x38>)
 80033d0:	e7f3      	b.n	80033ba <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80033d2:	2001      	movs	r0, #1
}
 80033d4:	bd08      	pop	{r3, pc}
 80033d6:	bf00      	nop
 80033d8:	20003e20 	.word	0x20003e20
 80033dc:	20003e1c 	.word	0x20003e1c

080033e0 <xTimerCreateTimerTask>:
{
 80033e0:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
 80033e2:	f7ff ffb9 	bl	8003358 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <xTimerCreateTimerTask+0x3c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	b943      	cbnz	r3, 80033fe <xTimerCreateTimerTask+0x1e>
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	e7fe      	b.n	80033fc <xTimerCreateTimerTask+0x1c>
			xReturn = xTaskCreate(	prvTimerTask,
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <xTimerCreateTimerTask+0x40>)
 8003400:	2246      	movs	r2, #70	; 0x46
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	2303      	movs	r3, #3
 8003406:	4907      	ldr	r1, [pc, #28]	; (8003424 <xTimerCreateTimerTask+0x44>)
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	4807      	ldr	r0, [pc, #28]	; (8003428 <xTimerCreateTimerTask+0x48>)
 800340c:	2300      	movs	r3, #0
 800340e:	f7ff fb77 	bl	8002b00 <xTaskCreate>
	configASSERT( xReturn );
 8003412:	2800      	cmp	r0, #0
 8003414:	d0ea      	beq.n	80033ec <xTimerCreateTimerTask+0xc>
}
 8003416:	b003      	add	sp, #12
 8003418:	f85d fb04 	ldr.w	pc, [sp], #4
 800341c:	20003e50 	.word	0x20003e50
 8003420:	20003e54 	.word	0x20003e54
 8003424:	08003f98 	.word	0x08003f98
 8003428:	08003501 	.word	0x08003501

0800342c <xTimerGenericCommand>:
{
 800342c:	b530      	push	{r4, r5, lr}
 800342e:	4615      	mov	r5, r2
 8003430:	b085      	sub	sp, #20
 8003432:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8003434:	4603      	mov	r3, r0
 8003436:	b940      	cbnz	r0, 800344a <xTimerGenericCommand+0x1e>
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	e7fe      	b.n	8003448 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 800344a:	4c0d      	ldr	r4, [pc, #52]	; (8003480 <xTimerGenericCommand+0x54>)
 800344c:	6820      	ldr	r0, [r4, #0]
 800344e:	b178      	cbz	r0, 8003470 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003450:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8003452:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003454:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003456:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003458:	dc0c      	bgt.n	8003474 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800345a:	f7ff ff1d 	bl	8003298 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800345e:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003460:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003462:	bf0c      	ite	eq
 8003464:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003466:	461a      	movne	r2, r3
 8003468:	a901      	add	r1, sp, #4
 800346a:	6820      	ldr	r0, [r4, #0]
 800346c:	f7ff f8da 	bl	8002624 <xQueueGenericSend>
}
 8003470:	b005      	add	sp, #20
 8003472:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003474:	2300      	movs	r3, #0
 8003476:	a901      	add	r1, sp, #4
 8003478:	f7ff f98a 	bl	8002790 <xQueueGenericSendFromISR>
 800347c:	e7f8      	b.n	8003470 <xTimerGenericCommand+0x44>
 800347e:	bf00      	nop
 8003480:	20003e50 	.word	0x20003e50

08003484 <prvSwitchTimerLists>:
{
 8003484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003488:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800348c:	4d1a      	ldr	r5, [pc, #104]	; (80034f8 <prvSwitchTimerLists+0x74>)
 800348e:	682b      	ldr	r3, [r5, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	b932      	cbnz	r2, 80034a2 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8003494:	4a19      	ldr	r2, [pc, #100]	; (80034fc <prvSwitchTimerLists+0x78>)
 8003496:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003498:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800349a:	6029      	str	r1, [r5, #0]
}
 800349c:	b002      	add	sp, #8
 800349e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034a2:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034a4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034a6:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034a8:	1d27      	adds	r7, r4, #4
 80034aa:	4638      	mov	r0, r7
 80034ac:	f7fe fd6e 	bl	8001f8c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034b2:	4620      	mov	r0, r4
 80034b4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80034b6:	69e3      	ldr	r3, [r4, #28]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d1e8      	bne.n	800348e <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80034bc:	69a3      	ldr	r3, [r4, #24]
 80034be:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80034c0:	429e      	cmp	r6, r3
 80034c2:	d206      	bcs.n	80034d2 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80034c4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034c6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034c8:	4639      	mov	r1, r7
 80034ca:	6828      	ldr	r0, [r5, #0]
 80034cc:	f7fe fd47 	bl	8001f5e <vListInsert>
 80034d0:	e7dd      	b.n	800348e <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8cd 8000 	str.w	r8, [sp]
 80034d8:	4632      	mov	r2, r6
 80034da:	4619      	mov	r1, r3
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff ffa5 	bl	800342c <xTimerGenericCommand>
				configASSERT( xResult );
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d1d3      	bne.n	800348e <prvSwitchTimerLists+0xa>
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	e7fe      	b.n	80034f6 <prvSwitchTimerLists+0x72>
 80034f8:	20003e1c 	.word	0x20003e1c
 80034fc:	20003e20 	.word	0x20003e20

08003500 <prvTimerTask>:
{
 8003500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003504:	4d6c      	ldr	r5, [pc, #432]	; (80036b8 <prvTimerTask+0x1b8>)
					portYIELD_WITHIN_API();
 8003506:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80036c8 <prvTimerTask+0x1c8>
 800350a:	462f      	mov	r7, r5
{
 800350c:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800350e:	682b      	ldr	r3, [r5, #0]
 8003510:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8003514:	f1bb 0f00 	cmp.w	fp, #0
 8003518:	d042      	beq.n	80035a0 <prvTimerTask+0xa0>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 8003520:	f7ff fc7a 	bl	8002e18 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003524:	f7ff fc80 	bl	8002e28 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003528:	4b64      	ldr	r3, [pc, #400]	; (80036bc <prvTimerTask+0x1bc>)
	xTimeNow = xTaskGetTickCount();
 800352a:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	461e      	mov	r6, r3
 8003530:	4290      	cmp	r0, r2
 8003532:	d237      	bcs.n	80035a4 <prvTimerTask+0xa4>
		*pxTimerListsWereSwitched = pdTRUE;
 8003534:	2401      	movs	r4, #1
 8003536:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 8003538:	f7ff ffa4 	bl	8003484 <prvSwitchTimerLists>
 800353c:	9b03      	ldr	r3, [sp, #12]
	xLastTime = xTimeNow;
 800353e:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 8003542:	2c00      	cmp	r4, #0
 8003544:	d17d      	bne.n	8003642 <prvTimerTask+0x142>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003546:	f1bb 0f00 	cmp.w	fp, #0
 800354a:	d05f      	beq.n	800360c <prvTimerTask+0x10c>
 800354c:	45d1      	cmp	r9, sl
 800354e:	d876      	bhi.n	800363e <prvTimerTask+0x13e>
				( void ) xTaskResumeAll();
 8003550:	f7ff fd02 	bl	8002f58 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800355c:	f10b 0004 	add.w	r0, fp, #4
 8003560:	f7fe fd14 	bl	8001f8c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003564:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d11d      	bne.n	80035a8 <prvTimerTask+0xa8>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800356c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8003570:	464b      	mov	r3, r9
 8003572:	4652      	mov	r2, sl
 8003574:	4449      	add	r1, r9
 8003576:	4658      	mov	r0, fp
 8003578:	f7ff ff14 	bl	80033a4 <prvInsertTimerInActiveList>
 800357c:	b1a0      	cbz	r0, 80035a8 <prvTimerTask+0xa8>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800357e:	9400      	str	r4, [sp, #0]
 8003580:	4623      	mov	r3, r4
 8003582:	464a      	mov	r2, r9
 8003584:	4621      	mov	r1, r4
 8003586:	4658      	mov	r0, fp
 8003588:	f7ff ff50 	bl	800342c <xTimerGenericCommand>
			configASSERT( xResult );
 800358c:	b960      	cbnz	r0, 80035a8 <prvTimerTask+0xa8>
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	e7fe      	b.n	800359e <prvTimerTask+0x9e>
		xNextExpireTime = ( TickType_t ) 0U;
 80035a0:	46d9      	mov	r9, fp
 80035a2:	e7bd      	b.n	8003520 <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 80035a4:	2400      	movs	r4, #0
 80035a6:	e7ca      	b.n	800353e <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035a8:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 80035ac:	4658      	mov	r0, fp
 80035ae:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80035b0:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80036c4 <prvTimerTask+0x1c4>
 80035b4:	2200      	movs	r2, #0
 80035b6:	a905      	add	r1, sp, #20
 80035b8:	f8d9 0000 	ldr.w	r0, [r9]
 80035bc:	f7ff f94a 	bl	8002854 <xQueueReceive>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d0a4      	beq.n	800350e <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80035c4:	9b05      	ldr	r3, [sp, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	dbf4      	blt.n	80035b4 <prvTimerTask+0xb4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80035ca:	9c07      	ldr	r4, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80035cc:	6963      	ldr	r3, [r4, #20]
 80035ce:	b113      	cbz	r3, 80035d6 <prvTimerTask+0xd6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035d0:	1d20      	adds	r0, r4, #4
 80035d2:	f7fe fcdb 	bl	8001f8c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80035d6:	f7ff fc27 	bl	8002e28 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80035da:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 80035dc:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80035de:	4298      	cmp	r0, r3
 80035e0:	d201      	bcs.n	80035e6 <prvTimerTask+0xe6>
		prvSwitchTimerLists();
 80035e2:	f7ff ff4f 	bl	8003484 <prvSwitchTimerLists>
 80035e6:	9a05      	ldr	r2, [sp, #20]
	xLastTime = xTimeNow;
 80035e8:	f8c6 b000 	str.w	fp, [r6]
 80035ec:	2a09      	cmp	r2, #9
 80035ee:	d8e1      	bhi.n	80035b4 <prvTimerTask+0xb4>
 80035f0:	2301      	movs	r3, #1
 80035f2:	4093      	lsls	r3, r2
 80035f4:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 80035f8:	d14a      	bne.n	8003690 <prvTimerTask+0x190>
 80035fa:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80035fe:	d123      	bne.n	8003648 <prvTimerTask+0x148>
 8003600:	069b      	lsls	r3, r3, #26
 8003602:	d5d7      	bpl.n	80035b4 <prvTimerTask+0xb4>
						vPortFree( pxTimer );
 8003604:	4620      	mov	r0, r4
 8003606:	f7fe fee9 	bl	80023dc <vPortFree>
 800360a:	e7d3      	b.n	80035b4 <prvTimerTask+0xb4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800360c:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <prvTimerTask+0x1c0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	fab2 f282 	clz	r2, r2
 8003616:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <prvTimerTask+0x1c4>)
 800361a:	eba9 010a 	sub.w	r1, r9, sl
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	f7ff f9bc 	bl	800299c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003624:	f7ff fc98 	bl	8002f58 <xTaskResumeAll>
 8003628:	2800      	cmp	r0, #0
 800362a:	d1c1      	bne.n	80035b0 <prvTimerTask+0xb0>
					portYIELD_WITHIN_API();
 800362c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003630:	f8c8 3000 	str.w	r3, [r8]
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	e7b8      	b.n	80035b0 <prvTimerTask+0xb0>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800363e:	4622      	mov	r2, r4
 8003640:	e7ea      	b.n	8003618 <prvTimerTask+0x118>
			( void ) xTaskResumeAll();
 8003642:	f7ff fc89 	bl	8002f58 <xTaskResumeAll>
 8003646:	e7b3      	b.n	80035b0 <prvTimerTask+0xb0>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003648:	69a1      	ldr	r1, [r4, #24]
 800364a:	9b06      	ldr	r3, [sp, #24]
 800364c:	465a      	mov	r2, fp
 800364e:	4419      	add	r1, r3
 8003650:	4620      	mov	r0, r4
 8003652:	f7ff fea7 	bl	80033a4 <prvInsertTimerInActiveList>
 8003656:	2800      	cmp	r0, #0
 8003658:	d0ac      	beq.n	80035b4 <prvTimerTask+0xb4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800365a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800365c:	4620      	mov	r0, r4
 800365e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003660:	69e3      	ldr	r3, [r4, #28]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d1a6      	bne.n	80035b4 <prvTimerTask+0xb4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003666:	69a2      	ldr	r2, [r4, #24]
 8003668:	9906      	ldr	r1, [sp, #24]
 800366a:	f8cd a000 	str.w	sl, [sp]
 800366e:	440a      	add	r2, r1
 8003670:	4653      	mov	r3, sl
 8003672:	4651      	mov	r1, sl
 8003674:	4620      	mov	r0, r4
 8003676:	f7ff fed9 	bl	800342c <xTimerGenericCommand>
							configASSERT( xResult );
 800367a:	2800      	cmp	r0, #0
 800367c:	d19a      	bne.n	80035b4 <prvTimerTask+0xb4>
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	e7fe      	b.n	800368e <prvTimerTask+0x18e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003690:	9906      	ldr	r1, [sp, #24]
 8003692:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003694:	b941      	cbnz	r1, 80036a8 <prvTimerTask+0x1a8>
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	e7fe      	b.n	80036a6 <prvTimerTask+0x1a6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80036a8:	465b      	mov	r3, fp
 80036aa:	465a      	mov	r2, fp
 80036ac:	4459      	add	r1, fp
 80036ae:	4620      	mov	r0, r4
 80036b0:	f7ff fe78 	bl	80033a4 <prvInsertTimerInActiveList>
 80036b4:	e77e      	b.n	80035b4 <prvTimerTask+0xb4>
 80036b6:	bf00      	nop
 80036b8:	20003e1c 	.word	0x20003e1c
 80036bc:	20003e4c 	.word	0x20003e4c
 80036c0:	20003e20 	.word	0x20003e20
 80036c4:	20003e50 	.word	0x20003e50
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <gotoResetUI>:
//	setShow_ui(MATCH_UI);
}

void gotoResetUI(void)
{
	exitMenu();
 80036cc:	f000 b854 	b.w	8003778 <exitMenu>

080036d0 <gotoMatchMiniFlyUI>:
 80036d0:	f000 b852 	b.w	8003778 <exitMenu>

080036d4 <gotoJoystickCalibUI>:
 80036d4:	f000 b850 	b.w	8003778 <exitMenu>

080036d8 <mainMenuInit>:
//	}
//}

/*初始化主菜單*/
void mainMenuInit(void)
{	
 80036d8:	2100      	movs	r1, #0
 80036da:	4a17      	ldr	r2, [pc, #92]	; (8003738 <mainMenuInit+0x60>)
 80036dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036de:	4613      	mov	r3, r2
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
	{
		mainMenu[i].menuItemCount = MAIN_MENU_ITEMNUM;
 80036e0:	270a      	movs	r7, #10
		mainMenu[i].isSelect = false;
 80036e2:	4608      	mov	r0, r1
		mainMenu[i].icoSelected = finger_img;
 80036e4:	4e15      	ldr	r6, [pc, #84]	; (800373c <mainMenuInit+0x64>)
		mainMenu[i].icoUnselected = NULL;
		mainMenu[i].title = mainMenuLanguage[1][i];
 80036e6:	4d16      	ldr	r5, [pc, #88]	; (8003740 <mainMenuInit+0x68>)
 80036e8:	186c      	adds	r4, r5, r1
 80036ea:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 80036ec:	3104      	adds	r1, #4
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
 80036ee:	2928      	cmp	r1, #40	; 0x28
		mainMenu[i].menuItemCount = MAIN_MENU_ITEMNUM;
 80036f0:	7057      	strb	r7, [r2, #1]
		mainMenu[i].isSelect = false;
 80036f2:	7090      	strb	r0, [r2, #2]
		mainMenu[i].icoSelected = finger_img;
 80036f4:	6056      	str	r6, [r2, #4]
		mainMenu[i].icoUnselected = NULL;
 80036f6:	6090      	str	r0, [r2, #8]
		mainMenu[i].title = mainMenuLanguage[1][i];
 80036f8:	60d4      	str	r4, [r2, #12]
		mainMenu[i].Function = NULL;
 80036fa:	6110      	str	r0, [r2, #16]
		mainMenu[i].parentMenu = NULL;
 80036fc:	6150      	str	r0, [r2, #20]
		mainMenu[i].childrenMenu = NULL;
 80036fe:	6190      	str	r0, [r2, #24]
 8003700:	f102 021c 	add.w	r2, r2, #28
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
 8003704:	d1f0      	bne.n	80036e8 <mainMenuInit+0x10>
	}
	mainMenu[0].isSelect = true;
 8003706:	2201      	movs	r2, #1
 8003708:	709a      	strb	r2, [r3, #2]
	mainMenu[0].Function = gotoNextMenu;
 800370a:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <mainMenuInit+0x6c>)
	//mainMenu[3].childrenMenu = flipEnableMenu;
	
	mainMenu[4].Function = gotoNextMenu;
	//mainMenu[4].childrenMenu = &expModuleMenu[0];
	
	mainMenu[5].Function = gotoJoystickCalibUI;
 800370c:	490e      	ldr	r1, [pc, #56]	; (8003748 <mainMenuInit+0x70>)
	mainMenu[0].Function = gotoNextMenu;
 800370e:	611a      	str	r2, [r3, #16]
	mainMenu[1].Function = gotoNextMenu;
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu[2].Function = gotoNextMenu;
 8003712:	649a      	str	r2, [r3, #72]	; 0x48
	mainMenu[3].Function = gotoNextMenu;
 8003714:	665a      	str	r2, [r3, #100]	; 0x64
	mainMenu[4].Function = gotoNextMenu;
 8003716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	//mainMenu[5].childrenMenu = NULL;
	
	mainMenu[6].Function = gotoMatchMiniFlyUI;
	//mainMenu[6].childrenMenu = NULL;
	
	mainMenu[7].Function = gotoNextMenu;
 800371a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	//mainMenu[7].childrenMenu = languageMenu;
	
	mainMenu[8].Function = gotoResetUI;
 800371e:	4a0b      	ldr	r2, [pc, #44]	; (800374c <mainMenuInit+0x74>)
	mainMenu[5].Function = gotoJoystickCalibUI;
 8003720:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	mainMenu[8].Function = gotoResetUI;
 8003724:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	mainMenu[6].Function = gotoMatchMiniFlyUI;
 8003728:	4909      	ldr	r1, [pc, #36]	; (8003750 <mainMenuInit+0x78>)
	//mainMenu[8].childrenMenu = NULL;
	
	mainMenu[9].Function = exitMenu;
 800372a:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <mainMenuInit+0x7c>)
	mainMenu[6].Function = gotoMatchMiniFlyUI;
 800372c:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	mainMenu[9].Function = exitMenu;
 8003730:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8003734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003736:	bf00      	nop
 8003738:	20003f28 	.word	0x20003f28
 800373c:	08003fa0 	.word	0x08003fa0
 8003740:	20000014 	.word	0x20000014
 8003744:	080037a5 	.word	0x080037a5
 8003748:	080036d5 	.word	0x080036d5
 800374c:	080036cd 	.word	0x080036cd
 8003750:	080036d1 	.word	0x080036d1
 8003754:	08003779 	.word	0x08003779

08003758 <getMenuSelectitem>:
//  從menu清單中取得被選中的Menu項目
//  返回值 : 被選中的menu項目位於清單中的索引
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
uint8_t getMenuSelectitem(MenuItem_Typedef menu[]) {
	int i;
	for (i = 0; i < menu->menuItemCount; i++) {
 8003758:	2300      	movs	r3, #0
		if (menu[i].isSelect == true)
 800375a:	211c      	movs	r1, #28
uint8_t getMenuSelectitem(MenuItem_Typedef menu[]) {
 800375c:	b510      	push	{r4, lr}
	for (i = 0; i < menu->menuItemCount; i++) {
 800375e:	7842      	ldrb	r2, [r0, #1]
 8003760:	4293      	cmp	r3, r2
 8003762:	db01      	blt.n	8003768 <getMenuSelectitem+0x10>
			break;
	}
	return i;
 8003764:	b2d8      	uxtb	r0, r3
}
 8003766:	bd10      	pop	{r4, pc}
		if (menu[i].isSelect == true)
 8003768:	fb01 0403 	mla	r4, r1, r3, r0
 800376c:	78a4      	ldrb	r4, [r4, #2]
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <getMenuSelectitem+0xc>
	for (i = 0; i < menu->menuItemCount; i++) {
 8003772:	3301      	adds	r3, #1
 8003774:	e7f4      	b.n	8003760 <getMenuSelectitem+0x8>
	...

08003778 <exitMenu>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  返回主menu選單
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void exitMenu(void) {
	CurMenu = mainMenu;
 8003778:	4a05      	ldr	r2, [pc, #20]	; (8003790 <exitMenu+0x18>)
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <exitMenu+0x1c>)
 800377c:	601a      	str	r2, [r3, #0]
	MenuWindow.title = defaultTitle;
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <exitMenu+0x20>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <exitMenu+0x24>)
 8003784:	619a      	str	r2, [r3, #24]
	//setShow_ui(MAIN_UI);
	isChangeMenu = true;
 8003786:	2201      	movs	r2, #1
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <exitMenu+0x28>)
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20003f28 	.word	0x20003f28
 8003794:	2000008c 	.word	0x2000008c
 8003798:	200000cc 	.word	0x200000cc
 800379c:	200000b0 	.word	0x200000b0
 80037a0:	200000d0 	.word	0x200000d0

080037a4 <gotoNextMenu>:
}
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  前往下一個選單
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void gotoNextMenu(void) {
	if (CurItem->childrenMenu != NULL) {
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <gotoNextMenu+0x28>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	b14a      	cbz	r2, 80037c0 <gotoNextMenu+0x1c>
		CurMenu = CurItem->childrenMenu;
 80037ac:	4908      	ldr	r1, [pc, #32]	; (80037d0 <gotoNextMenu+0x2c>)
		MenuWindow.title = CurItem->title + 2;
 80037ae:	68db      	ldr	r3, [r3, #12]
		CurMenu = CurItem->childrenMenu;
 80037b0:	600a      	str	r2, [r1, #0]
		MenuWindow.title = CurItem->title + 2;
 80037b2:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <gotoNextMenu+0x30>)
 80037b4:	3302      	adds	r3, #2
 80037b6:	6193      	str	r3, [r2, #24]
		isChangeMenu = true;
 80037b8:	2201      	movs	r2, #1
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <gotoNextMenu+0x34>)
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	4770      	bx	lr
	} else if (CurItem->Function != NULL && CurItem->parentMenu == NULL) {
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	b112      	cbz	r2, 80037ca <gotoNextMenu+0x26>
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	b903      	cbnz	r3, 80037ca <gotoNextMenu+0x26>
		CurItem->Function(); //執行選中子選單函數
 80037c8:	4710      	bx	r2
 80037ca:	4770      	bx	lr
 80037cc:	20003e58 	.word	0x20003e58
 80037d0:	2000008c 	.word	0x2000008c
 80037d4:	200000b0 	.word	0x200000b0
 80037d8:	200000d0 	.word	0x200000d0

080037dc <DisplayMenuInit>:
		exitMenu();
	}
}

/*顯示菜單*/
void DisplayMenuInit(MenuItem_Typedef* menu) {
 80037dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t topitem;
	uint8_t showItems;

	if (isChangeMenu == false)
 80037e0:	4f20      	ldr	r7, [pc, #128]	; (8003864 <DisplayMenuInit+0x88>)
void DisplayMenuInit(MenuItem_Typedef* menu) {
 80037e2:	4606      	mov	r6, r0
	if (isChangeMenu == false)
 80037e4:	783b      	ldrb	r3, [r7, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d02f      	beq.n	800384a <DisplayMenuInit+0x6e>
		return;

	selected = getMenuSelectitem(menu);
 80037ea:	f7ff ffb5 	bl	8003758 <getMenuSelectitem>
 80037ee:	4b1e      	ldr	r3, [pc, #120]	; (8003868 <DisplayMenuInit+0x8c>)
	cur_sequence = selected;
	if (selected < menu->cursorPosition)
		menu->cursorPosition = 0;
	topitem = selected - menu->cursorPosition;
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 80037f0:	4d1e      	ldr	r5, [pc, #120]	; (800386c <DisplayMenuInit+0x90>)
	selected = getMenuSelectitem(menu);
 80037f2:	6018      	str	r0, [r3, #0]
	cur_sequence = selected;
 80037f4:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <DisplayMenuInit+0x94>)
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 80037f6:	7872      	ldrb	r2, [r6, #1]
	cur_sequence = selected;
 80037f8:	6018      	str	r0, [r3, #0]
	if (selected < menu->cursorPosition)
 80037fa:	f996 3000 	ldrsb.w	r3, [r6]
	showItems = MenuWindow.itemsperpage;
	if (menu->menuItemCount < MenuWindow.itemsperpage)
		showItems = menu->menuItemCount;
	for (int i = 0; i < showItems; i++) {
		MenuItem_Typedef* Item = &menu[topitem + i];
		GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
 80037fe:	f04f 091c 	mov.w	r9, #28
	if (selected < menu->cursorPosition)
 8003802:	4298      	cmp	r0, r3
		menu->cursorPosition = 0;
 8003804:	bfbc      	itt	lt
 8003806:	2300      	movlt	r3, #0
 8003808:	7033      	strblt	r3, [r6, #0]
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 800380a:	692b      	ldr	r3, [r5, #16]
	topitem = selected - menu->cursorPosition;
 800380c:	f996 4000 	ldrsb.w	r4, [r6]
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 8003810:	429a      	cmp	r2, r3
		topitem = 0;
 8003812:	bf92      	itee	ls
 8003814:	2400      	movls	r4, #0
	topitem = selected - menu->cursorPosition;
 8003816:	1b00      	subhi	r0, r0, r4
 8003818:	b2c4      	uxtbhi	r4, r0
	GUI_WindowsDraw(&MenuWindow);
 800381a:	4814      	ldr	r0, [pc, #80]	; (800386c <DisplayMenuInit+0x90>)
	MenuWindow.topitem = topitem;
 800381c:	616c      	str	r4, [r5, #20]
	GUI_WindowsDraw(&MenuWindow);
 800381e:	f000 fad7 	bl	8003dd0 <GUI_WindowsDraw>
	MenuScrollbar.topitem = topitem;
 8003822:	4814      	ldr	r0, [pc, #80]	; (8003874 <DisplayMenuInit+0x98>)
 8003824:	6184      	str	r4, [r0, #24]
	MenuScrollbar.totalitems = menu->menuItemCount;
 8003826:	7873      	ldrb	r3, [r6, #1]
 8003828:	6103      	str	r3, [r0, #16]
	GUI_ScrollbarDraw(&MenuScrollbar);
 800382a:	f000 f9fd 	bl	8003c28 <GUI_ScrollbarDraw>
	showItems = MenuWindow.itemsperpage;
 800382e:	692b      	ldr	r3, [r5, #16]
	for (int i = 0; i < showItems; i++) {
 8003830:	2500      	movs	r5, #0
	if (menu->menuItemCount < MenuWindow.itemsperpage)
 8003832:	f896 8001 	ldrb.w	r8, [r6, #1]
 8003836:	4543      	cmp	r3, r8
	showItems = MenuWindow.itemsperpage;
 8003838:	bf98      	it	ls
 800383a:	fa5f f883 	uxtbls.w	r8, r3
	for (int i = 0; i < showItems; i++) {
 800383e:	4545      	cmp	r5, r8
 8003840:	db05      	blt.n	800384e <DisplayMenuInit+0x72>
	}

//	CurItem = menu + cur_sequence;
//	CurItem->isSelect = true;

	GUI_Refresh(); //刷新屏幕
 8003842:	f000 f9b6 	bl	8003bb2 <GUI_Refresh>
	isChangeMenu = false;
 8003846:	2300      	movs	r3, #0
 8003848:	703b      	strb	r3, [r7, #0]
 800384a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
 800384e:	1962      	adds	r2, r4, r5
 8003850:	ebc5 1105 	rsb	r1, r5, r5, lsl #4
 8003854:	fb09 6202 	mla	r2, r9, r2, r6
 8003858:	3113      	adds	r1, #19
 800385a:	2014      	movs	r0, #20
 800385c:	f000 f946 	bl	8003aec <GUI_MenuItemDraw>
	for (int i = 0; i < showItems; i++) {
 8003860:	3501      	adds	r5, #1
 8003862:	e7ec      	b.n	800383e <DisplayMenuInit+0x62>
 8003864:	200000d0 	.word	0x200000d0
 8003868:	20003e64 	.word	0x20003e64
 800386c:	200000b0 	.word	0x200000b0
 8003870:	20003e60 	.word	0x20003e60
 8003874:	20000090 	.word	0x20000090

08003878 <Menu_SetSelected>:
}


void Menu_SetSelected(int item_index,bool selected){
	//判斷index是否越界
	CurItem = CurMenu + item_index;
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <Menu_SetSelected+0x14>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	231c      	movs	r3, #28
 800387e:	fb03 2000 	mla	r0, r3, r0, r2
 8003882:	4b03      	ldr	r3, [pc, #12]	; (8003890 <Menu_SetSelected+0x18>)
	CurItem->isSelect = selected;
 8003884:	7081      	strb	r1, [r0, #2]
	CurItem = CurMenu + item_index;
 8003886:	6018      	str	r0, [r3, #0]
	CurItem->isSelect = selected;
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	2000008c 	.word	0x2000008c
 8003890:	20003e58 	.word	0x20003e58

08003894 <Menu_Task>:
}

/*菜單運行*/
void Menu_Task(void *pvParameters) {
 8003894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint8_t showItems;
	Rotary_state rstate =state_no_changed;
	DisplayMenuInit(CurMenu);
 8003898:	4c2d      	ldr	r4, [pc, #180]	; (8003950 <Menu_Task+0xbc>)
	RotaryEcncorder_SetRange(0,CurMenu->menuItemCount-1);

	while(1){
			cur_rotateNum = RotaryEcncorder_GetCount();
 800389a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800395c <Menu_Task+0xc8>
	DisplayMenuInit(CurMenu);
 800389e:	6820      	ldr	r0, [r4, #0]
 80038a0:	f7ff ff9c 	bl	80037dc <DisplayMenuInit>
	RotaryEcncorder_SetRange(0,CurMenu->menuItemCount-1);
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	2000      	movs	r0, #0
 80038a8:	7859      	ldrb	r1, [r3, #1]
				case state_no_changed:
					break;
				case state_counter_clock_wise:
				case state_clock_wise:
					//清除窗口內容
					GUI_RectangleFill(MenuWindow.x+1,MenuScrollbar.y,MenuScrollbar.x-1,MenuWindow.height-2,0);
 80038aa:	4e2a      	ldr	r6, [pc, #168]	; (8003954 <Menu_Task+0xc0>)
	RotaryEcncorder_SetRange(0,CurMenu->menuItemCount-1);
 80038ac:	3901      	subs	r1, #1
 80038ae:	f7fd f9db 	bl	8000c68 <RotaryEcncorder_SetRange>
			cur_rotateNum = RotaryEcncorder_GetCount();
 80038b2:	f7fd f9f1 	bl	8000c98 <RotaryEcncorder_GetCount>
 80038b6:	f8ca 0000 	str.w	r0, [sl]
			rstate = RotaryEcncorder_GetState();
 80038ba:	f7fd fa09 	bl	8000cd0 <RotaryEcncorder_GetState>
			switch(rstate){
 80038be:	3801      	subs	r0, #1
 80038c0:	2801      	cmp	r0, #1
 80038c2:	d833      	bhi.n	800392c <Menu_Task+0x98>
					GUI_RectangleFill(MenuWindow.x+1,MenuScrollbar.y,MenuScrollbar.x-1,MenuWindow.height-2,0);
 80038c4:	2500      	movs	r5, #0
 80038c6:	4f24      	ldr	r7, [pc, #144]	; (8003958 <Menu_Task+0xc4>)
 80038c8:	68f3      	ldr	r3, [r6, #12]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	6830      	ldr	r0, [r6, #0]
 80038ce:	9500      	str	r5, [sp, #0]
					Menu_SetSelected(cur_sequence,false);
 80038d0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8003960 <Menu_Task+0xcc>
					GUI_RectangleFill(MenuWindow.x+1,MenuScrollbar.y,MenuScrollbar.x-1,MenuWindow.height-2,0);
 80038d4:	3b02      	subs	r3, #2
 80038d6:	3a01      	subs	r2, #1
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	3001      	adds	r0, #1
 80038dc:	f000 f866 	bl	80039ac <GUI_RectangleFill>
					Menu_SetSelected(cur_sequence,false);
 80038e0:	4629      	mov	r1, r5
 80038e2:	f8d8 0000 	ldr.w	r0, [r8]
 80038e6:	f7ff ffc7 	bl	8003878 <Menu_SetSelected>
					//菜單項目序號--
					cur_sequence = cur_rotateNum;
 80038ea:	f8da 5000 	ldr.w	r5, [sl]
					Menu_SetSelected(cur_sequence,true);
 80038ee:	2101      	movs	r1, #1
 80038f0:	4628      	mov	r0, r5
					cur_sequence = cur_rotateNum;
 80038f2:	f8c8 5000 	str.w	r5, [r8]
					Menu_SetSelected(cur_sequence,true);
 80038f6:	f7ff ffbf 	bl	8003878 <Menu_SetSelected>
					//光標位置--
					CurMenu->cursorPosition = cur_sequence;
 80038fa:	6823      	ldr	r3, [r4, #0]
					} else {
						showItems = MenuWindow.itemsperpage;
						MenuWindow.topitem = cur_sequence;
					}
					for (int i = 0; i < showItems; i++) {
						MenuItem_Typedef* Item = CurMenu + MenuWindow.topitem + i;
 80038fc:	f04f 0b1c 	mov.w	fp, #28
					CurMenu->cursorPosition = cur_sequence;
 8003900:	701d      	strb	r5, [r3, #0]
					if (CurMenu->menuItemCount <= MenuWindow.itemsperpage) {
 8003902:	f893 9001 	ldrb.w	r9, [r3, #1]
 8003906:	6933      	ldr	r3, [r6, #16]
 8003908:	4599      	cmp	r9, r3
						MenuWindow.topitem = cur_sequence;
 800390a:	bf88      	it	hi
 800390c:	6175      	strhi	r5, [r6, #20]
					for (int i = 0; i < showItems; i++) {
 800390e:	f04f 0500 	mov.w	r5, #0
						showItems = MenuWindow.itemsperpage;
 8003912:	bf88      	it	hi
 8003914:	fa5f f983 	uxtbhi.w	r9, r3
					for (int i = 0; i < showItems; i++) {
 8003918:	454d      	cmp	r5, r9
 800391a:	db0b      	blt.n	8003934 <Menu_Task+0xa0>
						GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
					}
					MenuScrollbar.topitem = cur_sequence;
 800391c:	f8d8 3000 	ldr.w	r3, [r8]
					GUI_Scrollbar_SetPos(&MenuScrollbar);
 8003920:	480d      	ldr	r0, [pc, #52]	; (8003958 <Menu_Task+0xc4>)
					MenuScrollbar.topitem = cur_sequence;
 8003922:	61bb      	str	r3, [r7, #24]
					GUI_Scrollbar_SetPos(&MenuScrollbar);
 8003924:	f000 f947 	bl	8003bb6 <GUI_Scrollbar_SetPos>
					GUI_Refresh();
 8003928:	f000 f943 	bl	8003bb2 <GUI_Refresh>
//					MenuScrollbar.topitem = cur_sequence;
//					GUI_Scrollbar_SetPos(&MenuScrollbar);
//					GUI_Refresh();
//				break;
			}
			vTaskDelay(100/portTICK_PERIOD_MS);
 800392c:	2064      	movs	r0, #100	; 0x64
 800392e:	f7ff fb8b 	bl	8003048 <vTaskDelay>
			cur_rotateNum = RotaryEcncorder_GetCount();
 8003932:	e7be      	b.n	80038b2 <Menu_Task+0x1e>
						MenuItem_Typedef* Item = CurMenu + MenuWindow.topitem + i;
 8003934:	6972      	ldr	r2, [r6, #20]
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	442a      	add	r2, r5
						GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
 800393a:	ebc5 1105 	rsb	r1, r5, r5, lsl #4
 800393e:	fb0b 3202 	mla	r2, fp, r2, r3
 8003942:	3113      	adds	r1, #19
 8003944:	2014      	movs	r0, #20
 8003946:	f000 f8d1 	bl	8003aec <GUI_MenuItemDraw>
					for (int i = 0; i < showItems; i++) {
 800394a:	3501      	adds	r5, #1
 800394c:	e7e4      	b.n	8003918 <Menu_Task+0x84>
 800394e:	bf00      	nop
 8003950:	2000008c 	.word	0x2000008c
 8003954:	200000b0 	.word	0x200000b0
 8003958:	20000090 	.word	0x20000090
 800395c:	20003e5c 	.word	0x20003e5c
 8003960:	20003e60 	.word	0x20003e60

08003964 <GUI_Rectangle>:
*           color	顯示顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_Rectangle(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8003964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003968:	461c      	mov	r4, r3
 800396a:	f89d 5018 	ldrb.w	r5, [sp, #24]
	GUI_HLine(x0, y0, x1, color);
 800396e:	fa1f f880 	uxth.w	r8, r0
 8003972:	b2cf      	uxtb	r7, r1
 8003974:	b296      	uxth	r6, r2
	GUI_HLine(x0, y1, x1, color);
 8003976:	b2e4      	uxtb	r4, r4
	GUI_HLine(x0, y0, x1, color);
 8003978:	462b      	mov	r3, r5
 800397a:	4632      	mov	r2, r6
 800397c:	4639      	mov	r1, r7
 800397e:	4640      	mov	r0, r8
 8003980:	f000 f8ed 	bl	8003b5e <GUI_HLine>
	GUI_HLine(x0, y1, x1, color);
 8003984:	462b      	mov	r3, r5
 8003986:	4632      	mov	r2, r6
 8003988:	4621      	mov	r1, r4
 800398a:	4640      	mov	r0, r8
 800398c:	f000 f8e7 	bl	8003b5e <GUI_HLine>
	GUI_RLine(x0, y0, y1, color);
 8003990:	462b      	mov	r3, r5
 8003992:	4622      	mov	r2, r4
 8003994:	4639      	mov	r1, r7
 8003996:	4640      	mov	r0, r8
 8003998:	f000 f8f6 	bl	8003b88 <GUI_RLine>
	GUI_RLine(x1, y0, y1, color);
 800399c:	462b      	mov	r3, r5
 800399e:	4622      	mov	r2, r4
 80039a0:	4639      	mov	r1, r7
 80039a2:	4630      	mov	r0, r6
}
 80039a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	GUI_RLine(x1, y0, y1, color);
 80039a8:	f000 b8ee 	b.w	8003b88 <GUI_RLine>

080039ac <GUI_RectangleFill>:
*           color	填充顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_RectangleFill(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 80039ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t  i;

	/* 先找出矩形左上角與右下角的兩個點，保存在(x0,y0)，(x1,y1) */
	if(x0>x1) 						// 若x0>x1，則x0與x1交換
 80039b0:	4290      	cmp	r0, r2
{  
 80039b2:	460c      	mov	r4, r1
 80039b4:	461f      	mov	r7, r3
 80039b6:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if(x0>x1) 						// 若x0>x1，則x0與x1交換
 80039ba:	d82b      	bhi.n	8003a14 <GUI_RectangleFill+0x68>
	{  
		i = x0;
		x0 = x1;
		x1 = i;
	}
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 80039bc:	4299      	cmp	r1, r3
 80039be:	d809      	bhi.n	80039d4 <GUI_RectangleFill+0x28>
		y0 = y1;
		y1 = i;
	}

	/* 判斷是否只是直線 */
	if(y0==y1) 
 80039c0:	42bc      	cmp	r4, r7
 80039c2:	d109      	bne.n	80039d8 <GUI_RectangleFill+0x2c>
	{  
		GUI_HLine(x0, y0, x1, color);
 80039c4:	4643      	mov	r3, r8
 80039c6:	b2e1      	uxtb	r1, r4
 80039c8:	b292      	uxth	r2, r2
 80039ca:	b280      	uxth	r0, r0
	while(y0<=y1)						
	{  
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
		y0++;							// 下一行
	}
}
 80039cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GUI_HLine(x0, y0, x1, color);
 80039d0:	f000 b8c5 	b.w	8003b5e <GUI_HLine>
 80039d4:	463c      	mov	r4, r7
 80039d6:	460f      	mov	r7, r1
	if(x0==x1) 
 80039d8:	4290      	cmp	r0, r2
 80039da:	d10d      	bne.n	80039f8 <GUI_RectangleFill+0x4c>
		GUI_RLine(x0, y0, y1, color);
 80039dc:	4643      	mov	r3, r8
 80039de:	b2fa      	uxtb	r2, r7
 80039e0:	b2e1      	uxtb	r1, r4
 80039e2:	b280      	uxth	r0, r0
}
 80039e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GUI_RLine(x0, y0, y1, color);
 80039e8:	f000 b8ce 	b.w	8003b88 <GUI_RLine>
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 80039ec:	463b      	mov	r3, r7
 80039ee:	4627      	mov	r7, r4
 80039f0:	461c      	mov	r4, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	4610      	mov	r0, r2
 80039f6:	461a      	mov	r2, r3
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
 80039f8:	b296      	uxth	r6, r2
 80039fa:	b285      	uxth	r5, r0
	while(y0<=y1)						
 80039fc:	42bc      	cmp	r4, r7
 80039fe:	d901      	bls.n	8003a04 <GUI_RectangleFill+0x58>
 8003a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
 8003a04:	b2e1      	uxtb	r1, r4
 8003a06:	4643      	mov	r3, r8
 8003a08:	4632      	mov	r2, r6
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f000 f8a7 	bl	8003b5e <GUI_HLine>
		y0++;							// 下一行
 8003a10:	3401      	adds	r4, #1
 8003a12:	e7f3      	b.n	80039fc <GUI_RectangleFill+0x50>
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 8003a14:	4299      	cmp	r1, r3
 8003a16:	d8e9      	bhi.n	80039ec <GUI_RectangleFill+0x40>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	e7cf      	b.n	80039c0 <GUI_RectangleFill+0x14>

08003a20 <GUI_Line>:
*           color	顯示顏色(對於黑白色LCM，為0時滅，為1時顯示)
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_Line(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8003a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	4699      	mov	r9, r3
	int8_t    dy_sym;				// y軸增長方向，為-1時減值方向，為1時增值方向
	int32_t   dx_x2;				// dx*2值變量，用於加快運算速度
	int32_t   dy_x2;				// dy*2值變量，用於加快運算速度
	int32_t   di;					// 決策變量

	dx = x1-x0;						// 求取兩點之間的差值
 8003a26:	1a13      	subs	r3, r2, r0
	dy = y1-y0;
	/* 判斷增長方向，或是否為水平線、垂直線、點 */
	if(dx>0)						// 判斷x軸方向
 8003a28:	2b00      	cmp	r3, #0
{  
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	460d      	mov	r5, r1
 8003a2e:	4692      	mov	sl, r2
 8003a30:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	dy = y1-y0;
 8003a34:	eba9 0201 	sub.w	r2, r9, r1
 8003a38:	b280      	uxth	r0, r0
 8003a3a:	b2c9      	uxtb	r1, r1
	if(dx>0)						// 判斷x軸方向
 8003a3c:	dc08      	bgt.n	8003a50 <GUI_Line+0x30>
	{  
		dx_sym = 1;					// dx>0，設置dx_sym=1
	}
	else
	{  
		if(dx<0)
 8003a3e:	d113      	bne.n	8003a68 <GUI_Line+0x48>
			dx_sym = -1;			// dx<0，設置dx_sym=-1
		else
		{  							// dx==0，畫垂直線，或一點
			GUI_RLine(x0, y0, y1, color);
 8003a40:	4633      	mov	r3, r6
 8003a42:	fa5f f289 	uxtb.w	r2, r9
				x0 += dx_sym;
			}
		}
		GUI_Point(x0, y0, color);		// 顯示最後一點
	} 
}
 8003a46:	b003      	add	sp, #12
 8003a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			GUI_RLine(x0, y0, y1, color);
 8003a4c:	f000 b89c 	b.w	8003b88 <GUI_RLine>
		dx_sym = 1;					// dx>0，設置dx_sym=1
 8003a50:	2701      	movs	r7, #1
	if(dy>0)						// 判斷y軸方向
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	dc0b      	bgt.n	8003a6e <GUI_Line+0x4e>
		if(dy<0)
 8003a56:	d124      	bne.n	8003aa2 <GUI_Line+0x82>
			GUI_HLine(x0, y0, x1, color);
 8003a58:	4633      	mov	r3, r6
 8003a5a:	fa1f f28a 	uxth.w	r2, sl
}
 8003a5e:	b003      	add	sp, #12
 8003a60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			GUI_HLine(x0, y0, x1, color);
 8003a64:	f000 b87b 	b.w	8003b5e <GUI_HLine>
			dx_sym = -1;			// dx<0，設置dx_sym=-1
 8003a68:	f04f 37ff 	mov.w	r7, #4294967295
 8003a6c:	e7f1      	b.n	8003a52 <GUI_Line+0x32>
		dy_sym = 1;					// dy>0，設置dy_sym=1
 8003a6e:	f04f 0801 	mov.w	r8, #1
	dx = dx_sym * dx;
 8003a72:	fb03 f107 	mul.w	r1, r3, r7
	dy = dy_sym * dy;
 8003a76:	fb02 f208 	mul.w	r2, r2, r8
	if(dx>=dy)						// 對於dx>=dy，則使用x軸為基準
 8003a7a:	4291      	cmp	r1, r2
	dx_x2 = dx*2;
 8003a7c:	ea4f 0b41 	mov.w	fp, r1, lsl #1
	dy_x2 = dy*2;
 8003a80:	ea4f 0342 	mov.w	r3, r2, lsl #1
	if(dx>=dy)						// 對於dx>=dy，則使用x軸為基準
 8003a84:	db1d      	blt.n	8003ac2 <GUI_Line+0xa2>
		di = dy_x2 - dx;
 8003a86:	eba3 0901 	sub.w	r9, r3, r1
				di += dy_x2 - dx_x2;
 8003a8a:	eba9 0b01 	sub.w	fp, r9, r1
		while(x0!=x1)
 8003a8e:	4554      	cmp	r4, sl
 8003a90:	b2e9      	uxtb	r1, r5
 8003a92:	b2a0      	uxth	r0, r4
 8003a94:	d108      	bne.n	8003aa8 <GUI_Line+0x88>
		GUI_Point(x0, y0, color);		// 顯示最後一點
 8003a96:	4632      	mov	r2, r6
}
 8003a98:	b003      	add	sp, #12
 8003a9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Point(x0, y0, color);		// 顯示最後一點
 8003a9e:	f000 b85b 	b.w	8003b58 <GUI_Point>
			dy_sym = -1;			// dy<0，設置dy_sym=-1
 8003aa2:	f04f 38ff 	mov.w	r8, #4294967295
 8003aa6:	e7e4      	b.n	8003a72 <GUI_Line+0x52>
			GUI_Point(x0, y0, color);
 8003aa8:	4632      	mov	r2, r6
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	f000 f854 	bl	8003b58 <GUI_Point>
			if(di<0)
 8003ab0:	9b01      	ldr	r3, [sp, #4]
 8003ab2:	f1b9 0f00 	cmp.w	r9, #0
 8003ab6:	443c      	add	r4, r7
				di += dy_x2;		// 計算出下一步的決策值
 8003ab8:	bfb2      	itee	lt
 8003aba:	4499      	addlt	r9, r3
				di += dy_x2 - dx_x2;
 8003abc:	44d9      	addge	r9, fp
				y0 += dy_sym;
 8003abe:	4445      	addge	r5, r8
 8003ac0:	e7e5      	b.n	8003a8e <GUI_Line+0x6e>
		di = dx_x2 - dy;
 8003ac2:	ebab 0a02 	sub.w	sl, fp, r2
				di += dx_x2 - dy_x2;
 8003ac6:	ebaa 0302 	sub.w	r3, sl, r2
		while(y0!=y1)
 8003aca:	454d      	cmp	r5, r9
 8003acc:	b2e9      	uxtb	r1, r5
 8003ace:	b2a0      	uxth	r0, r4
 8003ad0:	d0e1      	beq.n	8003a96 <GUI_Line+0x76>
			GUI_Point(x0, y0, color);
 8003ad2:	4632      	mov	r2, r6
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	f000 f83f 	bl	8003b58 <GUI_Point>
			if(di<0)
 8003ada:	9b01      	ldr	r3, [sp, #4]
 8003adc:	f1ba 0f00 	cmp.w	sl, #0
 8003ae0:	4445      	add	r5, r8
				di += dx_x2;
 8003ae2:	bfb2      	itee	lt
 8003ae4:	44da      	addlt	sl, fp
				di += dx_x2 - dy_x2;
 8003ae6:	449a      	addge	sl, r3
				x0 += dx_sym;
 8003ae8:	19e4      	addge	r4, r4, r7
 8003aea:	e7ee      	b.n	8003aca <GUI_Line+0xaa>

08003aec <GUI_MenuItemDraw>:
* 功能：顯示條目菜單
* 入口參數：ico		圖標菜單句柄
* 出口參數：返回0表示操作失敗，返回1表示操作成功
****************************************************************************/
uint8_t  GUI_MenuItemDraw(uint32_t x, uint32_t y, MenuItem_Typedef *item)
{  
 8003aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( x>GUI_LCM_XMAX || y>GUI_LCM_YMAX) return(0);
	if(y<2) return(0);
 8003aee:	f1a1 0e02 	sub.w	lr, r1, #2
 8003af2:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
{  
 8003af6:	4615      	mov	r5, r2
	if(y<2) return(0);
 8003af8:	d82a      	bhi.n	8003b50 <GUI_MenuItemDraw+0x64>
	if(x<18) return(0);
 8003afa:	f1a0 0412 	sub.w	r4, r0, #18
 8003afe:	2cee      	cmp	r4, #238	; 0xee
 8003b00:	d826      	bhi.n	8003b50 <GUI_MenuItemDraw+0x64>
	if( (item->title)==NULL )  return(0);
 8003b02:	68d3      	ldr	r3, [r2, #12]
 8003b04:	b333      	cbz	r3, 8003b54 <GUI_MenuItemDraw+0x68>

	if(item->isSelect == false)
 8003b06:	7893      	ldrb	r3, [r2, #2]
 8003b08:	b28f      	uxth	r7, r1
 8003b0a:	b286      	uxth	r6, r0
 8003b0c:	b9a3      	cbnz	r3, 8003b38 <GUI_MenuItemDraw+0x4c>
	{  
		if(item->icoUnselected != NULL)
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	b132      	cbz	r2, 8003b20 <GUI_MenuItemDraw+0x34>
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoUnselected ,16, 16);
 8003b12:	2310      	movs	r3, #16
 8003b14:	fa5f f18e 	uxtb.w	r1, lr
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	b2e0      	uxtb	r0, r4
 8003b1c:	f7fc ff26 	bl	800096c <OLED_ShowPicture>
		show_str(x, y,(uint8_t *) item->title,12,12,1);
 8003b20:	2401      	movs	r4, #1
 8003b22:	9401      	str	r4, [sp, #4]
	}
	else
	{  
		if(item->icoSelected != NULL)
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoSelected ,16, 16);
		show_str(x,y,(uint8_t *) item->title, 12,12,0);
 8003b24:	230c      	movs	r3, #12
 8003b26:	4630      	mov	r0, r6
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	68ea      	ldr	r2, [r5, #12]
 8003b2c:	4639      	mov	r1, r7
 8003b2e:	f000 f8dd 	bl	8003cec <show_str>
	}
	return(1);
 8003b32:	2001      	movs	r0, #1
}
 8003b34:	b003      	add	sp, #12
 8003b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(item->icoSelected != NULL)
 8003b38:	6852      	ldr	r2, [r2, #4]
 8003b3a:	b132      	cbz	r2, 8003b4a <GUI_MenuItemDraw+0x5e>
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoSelected ,16, 16);
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	fa5f f18e 	uxtb.w	r1, lr
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	b2e0      	uxtb	r0, r4
 8003b46:	f7fc ff11 	bl	800096c <OLED_ShowPicture>
		show_str(x,y,(uint8_t *) item->title, 12,12,0);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	e7e9      	b.n	8003b24 <GUI_MenuItemDraw+0x38>
	if(y<2) return(0);
 8003b50:	2000      	movs	r0, #0
 8003b52:	e7ef      	b.n	8003b34 <GUI_MenuItemDraw+0x48>
 8003b54:	4618      	mov	r0, r3
 8003b56:	e7ed      	b.n	8003b34 <GUI_MenuItemDraw+0x48>

08003b58 <GUI_Point>:
*          效範圍)
* 說明：用戶根據LCM的實際情況編寫此函數。
****************************************************************************/
void  GUI_Point(uint16_t x, uint8_t y, TCOLOR color)
{
	OLED_DrawPoint(x,y,color);
 8003b58:	b2c0      	uxtb	r0, r0
 8003b5a:	f7fc be2b 	b.w	80007b4 <OLED_DrawPoint>

08003b5e <GUI_HLine>:
*      新8個點，而不需要一個點一個點的寫到LCM中。
****************************************************************************/
void  GUI_HLine(uint16_t x0, uint8_t y0, uint16_t x1, TCOLOR color)
{
	uint8_t  temp;
	if(x0>x1)               // 對x0、x1大小進行排列，以便畫圖
 8003b5e:	4290      	cmp	r0, r2
{
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	461f      	mov	r7, r3
 8003b64:	bf88      	it	hi
 8003b66:	b2d3      	uxtbhi	r3, r2
 8003b68:	4604      	mov	r4, r0
 8003b6a:	4615      	mov	r5, r2
 8003b6c:	460e      	mov	r6, r1
	if(x0>x1)               // 對x0、x1大小進行排列，以便畫圖
 8003b6e:	bf84      	itt	hi
 8003b70:	4605      	movhi	r5, r0
	{
		temp = x1;
		x1 = x0;
		x0 = temp;
 8003b72:	461c      	movhi	r4, r3
	OLED_DrawPoint(x,y,color);
 8003b74:	b2e0      	uxtb	r0, r4
	}
	do
	{
		GUI_Point(x0, y0, color);   // 逐點顯示，描出垂直線
		x0++;
 8003b76:	3401      	adds	r4, #1
	OLED_DrawPoint(x,y,color);
 8003b78:	463a      	mov	r2, r7
 8003b7a:	4631      	mov	r1, r6
		x0++;
 8003b7c:	b2a4      	uxth	r4, r4
	OLED_DrawPoint(x,y,color);
 8003b7e:	f7fc fe19 	bl	80007b4 <OLED_DrawPoint>
	}
	while(x1>=x0);
 8003b82:	42a5      	cmp	r5, r4
 8003b84:	d2f6      	bcs.n	8003b74 <GUI_HLine+0x16>
}
 8003b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b88 <GUI_RLine>:
*      新8個點，而不需要一個點一個點的寫到LCM中。
****************************************************************************/
void  GUI_RLine(uint16_t x0, uint8_t y0, uint8_t y1, TCOLOR color)
{
    uint8_t  temp;
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8003b88:	4291      	cmp	r1, r2
{
 8003b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8c:	461f      	mov	r7, r3
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8003b8e:	bf88      	it	hi
 8003b90:	460b      	movhi	r3, r1
{
 8003b92:	460c      	mov	r4, r1
 8003b94:	4615      	mov	r5, r2
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8003b96:	bf84      	itt	hi
 8003b98:	4614      	movhi	r4, r2
 8003b9a:	461d      	movhi	r5, r3
	OLED_DrawPoint(x,y,color);
 8003b9c:	b2c6      	uxtb	r6, r0
 8003b9e:	4621      	mov	r1, r4
        y0 = temp;
    }
    do
    {
        GUI_Point(x0, y0, color);   // 逐點顯示，描出垂直線
        y0++;
 8003ba0:	3401      	adds	r4, #1
	OLED_DrawPoint(x,y,color);
 8003ba2:	463a      	mov	r2, r7
 8003ba4:	4630      	mov	r0, r6
        y0++;
 8003ba6:	b2e4      	uxtb	r4, r4
	OLED_DrawPoint(x,y,color);
 8003ba8:	f7fc fe04 	bl	80007b4 <OLED_DrawPoint>
    }
    while(y1>=y0);
 8003bac:	42a5      	cmp	r5, r4
 8003bae:	d2f6      	bcs.n	8003b9e <GUI_RLine+0x16>
}
 8003bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bb2 <GUI_Refresh>:
* 功能：刷新屏幕
*           
****************************************************************************/
void  GUI_Refresh(void)
{
	OLED_RefreshGram();
 8003bb2:	f7fc be41 	b.w	8000838 <OLED_RefreshGram>

08003bb6 <GUI_Scrollbar_SetPos>:
0x40,0x70,0x7C,0x7E,0x7E,0x7C,0x70,0x40,
};

//設置滾動條的位置
void GUI_Scrollbar_SetPos(Scrollbar_Typedef *scbx)
{	
 8003bb6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint16_t x,y,xlen,ylen;
//	uint8_t scbplen;
//	
//	scbplen = SCROLL_BTN_HEIGHT;  //得到按鈕的高度
	
	scblen=scbx->height-2*SCROLL_BTN_HEIGHT-scbx->scbbarlen;//得到滾動條滾動空間的長度
 8003bba:	68c4      	ldr	r4, [r0, #12]
 8003bbc:	8b82      	ldrh	r2, [r0, #28]
 8003bbe:	3c14      	subs	r4, #20
 8003bc0:	1aa4      	subs	r4, r4, r2
 8003bc2:	fa1f f984 	uxth.w	r9, r4
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
	xlen=scbx->width-2-1;         //滾動條寬度 -1
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
	
	//清除滾動條
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 8003bc6:	2400      	movs	r4, #0
{	
 8003bc8:	4605      	mov	r5, r0
	x=scbx->x+1;                  //滾動條起始坐標x
 8003bca:	6807      	ldr	r7, [r0, #0]
	xlen=scbx->width-2-1;         //滾動條寬度 -1
 8003bcc:	6886      	ldr	r6, [r0, #8]
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 8003bce:	6841      	ldr	r1, [r0, #4]
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
 8003bd0:	1e53      	subs	r3, r2, #1
	x=scbx->x+1;                  //滾動條起始坐標x
 8003bd2:	3701      	adds	r7, #1
	xlen=scbx->width-2-1;         //滾動條寬度 -1
 8003bd4:	3e03      	subs	r6, #3
	x=scbx->x+1;                  //滾動條起始坐標x
 8003bd6:	b2bf      	uxth	r7, r7
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 8003bd8:	310a      	adds	r1, #10
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
 8003bda:	444b      	add	r3, r9
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 8003bdc:	b2b6      	uxth	r6, r6
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 8003bde:	fa1f f881 	uxth.w	r8, r1
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 8003be2:	443e      	add	r6, r7
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	9400      	str	r4, [sp, #0]
 8003be8:	4443      	add	r3, r8
 8003bea:	4632      	mov	r2, r6
 8003bec:	4641      	mov	r1, r8
 8003bee:	4638      	mov	r0, r7
 8003bf0:	f7ff fedc 	bl	80039ac <GUI_RectangleFill>
	if(scbx->totalitems <= scbx->itemsperpage)//總條目不夠一頁顯示的
 8003bf4:	6929      	ldr	r1, [r5, #16]
 8003bf6:	696b      	ldr	r3, [r5, #20]
	{
		scbpos=(scbx->topitem*scblen)/(scbx->totalitems-1);//計算當前滾動條偏移的位置
	}
	
	//畫出滾動條
	GUI_RectangleFill(x ,y+scbpos,x+xlen,y+scbpos+scbx->scbbarlen, 1);
 8003bf8:	2201      	movs	r2, #1
	if(scbx->totalitems <= scbx->itemsperpage)//總條目不夠一頁顯示的
 8003bfa:	4299      	cmp	r1, r3
		scbpos=(scbx->topitem*scblen)/(scbx->totalitems-1);//計算當前滾動條偏移的位置
 8003bfc:	bf81      	itttt	hi
 8003bfe:	69ab      	ldrhi	r3, [r5, #24]
 8003c00:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8003c04:	fb03 f409 	mulhi.w	r4, r3, r9
 8003c08:	fbb4 f4f1 	udivhi	r4, r4, r1
	GUI_RectangleFill(x ,y+scbpos,x+xlen,y+scbpos+scbx->scbbarlen, 1);
 8003c0c:	69eb      	ldr	r3, [r5, #28]
 8003c0e:	b2a4      	uxth	r4, r4
 8003c10:	eb04 0108 	add.w	r1, r4, r8
 8003c14:	9200      	str	r2, [sp, #0]
 8003c16:	440b      	add	r3, r1
 8003c18:	4632      	mov	r2, r6
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	f7ff fec6 	bl	80039ac <GUI_RectangleFill>
	//GUI_Refresh();	//刷新屏幕
}
 8003c20:	b003      	add	sp, #12
 8003c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003c28 <GUI_ScrollbarDraw>:



//創建一個滾動條
void GUI_ScrollbarDraw(Scrollbar_Typedef *scbx)
{
 8003c28:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t scbactlen=0;//滾動條可以滾動的空間長度
	if(scbx==NULL) return;
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d057      	beq.n	8003ce0 <GUI_ScrollbarDraw+0xb8>
	if(scbx->width<SCROLL_BTN_WIDTH) return;
 8003c30:	6882      	ldr	r2, [r0, #8]
 8003c32:	2a09      	cmp	r2, #9
 8003c34:	d954      	bls.n	8003ce0 <GUI_ScrollbarDraw+0xb8>
	if(scbx->height<2*SCROLL_BTN_HEIGHT) return;
 8003c36:	68c3      	ldr	r3, [r0, #12]
 8003c38:	2b13      	cmp	r3, #19
 8003c3a:	d951      	bls.n	8003ce0 <GUI_ScrollbarDraw+0xb8>
	
	//畫外邊框
	GUI_Rectangle(scbx->x, scbx->y, scbx->x+scbx->width-1, scbx->y+scbx->height-1, 1);
 8003c3c:	c803      	ldmia	r0, {r0, r1}
 8003c3e:	2501      	movs	r5, #1
	//畫上下兩個按鈕
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+1, (uint8_t *)scroll_btn_up, 8, 8);
 8003c40:	2608      	movs	r6, #8
	GUI_Rectangle(scbx->x, scbx->y, scbx->x+scbx->width-1, scbx->y+scbx->height-1, 1);
 8003c42:	440b      	add	r3, r1
 8003c44:	4402      	add	r2, r0
 8003c46:	9500      	str	r5, [sp, #0]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	3a01      	subs	r2, #1
 8003c4c:	f7ff fe8a 	bl	8003964 <GUI_Rectangle>
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+1, (uint8_t *)scroll_btn_up, 8, 8);
 8003c50:	68a0      	ldr	r0, [r4, #8]
 8003c52:	6861      	ldr	r1, [r4, #4]
 8003c54:	f1a0 0308 	sub.w	r3, r0, #8
 8003c58:	6820      	ldr	r0, [r4, #0]
 8003c5a:	4429      	add	r1, r5
 8003c5c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003c60:	9600      	str	r6, [sp, #0]
 8003c62:	4633      	mov	r3, r6
 8003c64:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <GUI_ScrollbarDraw+0xbc>)
 8003c66:	b2c9      	uxtb	r1, r1
 8003c68:	b2c0      	uxtb	r0, r0
 8003c6a:	f7fc fe7f 	bl	800096c <OLED_ShowPicture>
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+scbx->height-9, (uint8_t *)scroll_btn_down, 8, 8);
 8003c6e:	68e3      	ldr	r3, [r4, #12]
 8003c70:	68a0      	ldr	r0, [r4, #8]
 8003c72:	6861      	ldr	r1, [r4, #4]
 8003c74:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <GUI_ScrollbarDraw+0xc0>)
 8003c76:	4419      	add	r1, r3
 8003c78:	f1a0 0308 	sub.w	r3, r0, #8
 8003c7c:	6820      	ldr	r0, [r4, #0]
 8003c7e:	3909      	subs	r1, #9
 8003c80:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003c84:	9600      	str	r6, [sp, #0]
 8003c86:	4633      	mov	r3, r6
 8003c88:	b2c9      	uxtb	r1, r1
 8003c8a:	b2c0      	uxtb	r0, r0
 8003c8c:	f7fc fe6e 	bl	800096c <OLED_ShowPicture>
	//畫按鈕邊框
	GUI_Line(scbx->x, scbx->y+9, scbx->x+scbx->width-1, scbx->y+9,1);
 8003c90:	e894 0009 	ldmia.w	r4, {r0, r3}
 8003c94:	68a2      	ldr	r2, [r4, #8]
 8003c96:	3309      	adds	r3, #9
 8003c98:	4402      	add	r2, r0
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	9500      	str	r5, [sp, #0]
 8003c9e:	3a01      	subs	r2, #1
 8003ca0:	f7ff febe 	bl	8003a20 <GUI_Line>
	GUI_Line(scbx->x, scbx->y+scbx->height-10, scbx->x+scbx->width-1, scbx->y+scbx->height-10,1);
 8003ca4:	e894 0009 	ldmia.w	r4, {r0, r3}
 8003ca8:	68e2      	ldr	r2, [r4, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	68a2      	ldr	r2, [r4, #8]
 8003cae:	3b0a      	subs	r3, #10
 8003cb0:	4402      	add	r2, r0
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	9500      	str	r5, [sp, #0]
 8003cb6:	3a01      	subs	r2, #1
 8003cb8:	f7ff feb2 	bl	8003a20 <GUI_Line>
	
	
	//可供滾動條滾動的空間範圍
	scbactlen=scbx->height -2*SCROLL_BTN_HEIGHT;
 8003cbc:	68e3      	ldr	r3, [r4, #12]
	
	//每頁滾動條目大於總條目數 滾動條目等於最大可滾動的控件
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8003cbe:	6921      	ldr	r1, [r4, #16]
	scbactlen=scbx->height -2*SCROLL_BTN_HEIGHT;
 8003cc0:	f1a3 0214 	sub.w	r2, r3, #20
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8003cc4:	6963      	ldr	r3, [r4, #20]
	//每頁滾動條目小於總條目數
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
	//設置滾動條的位置
	GUI_Scrollbar_SetPos(scbx);
 8003cc6:	4620      	mov	r0, r4
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8003cc8:	428b      	cmp	r3, r1
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
 8003cca:	bf3b      	ittet	cc
 8003ccc:	4353      	mulcc	r3, r2
 8003cce:	fbb3 f3f1 	udivcc	r3, r3, r1
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8003cd2:	61e2      	strcs	r2, [r4, #28]
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
 8003cd4:	61e3      	strcc	r3, [r4, #28]
}
 8003cd6:	b002      	add	sp, #8
 8003cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GUI_Scrollbar_SetPos(scbx);
 8003cdc:	f7ff bf6b 	b.w	8003bb6 <GUI_Scrollbar_SetPos>
}
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}
 8003ce4:	0800479c 	.word	0x0800479c
 8003ce8:	08004794 	.word	0x08004794

08003cec <show_str>:
//str  :字符串
//f_w:字寬
//f_h:字高
//mode:0,非疊加方式;1,疊加方式
void show_str(uint16_t x,uint16_t y,const uint8_t*str,uint8_t f_w,uint8_t f_h,uint8_t mode)
{					
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4680      	mov	r8, r0
	uint16_t x0 = x;
	uint16_t y0 = y;
	while (*str != 0)
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	4645      	mov	r5, r8
{					
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8003cfc:	4616      	mov	r6, r2
 8003cfe:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
			y += f_h;
			x = x0;
			str++;
		}
		else
			OLED_ShowChar(x, y, *str, f_w / 2, f_h, mode);     //有效部分寫入
 8003d02:	ea4f 0a53 	mov.w	sl, r3, lsr #1
{					
 8003d06:	9203      	str	r2, [sp, #12]
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 8003d08:	087a      	lsrs	r2, r7, #1
 8003d0a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
		str++;
		x += f_h / 2; //字符,為全字的一半
 8003d0e:	b293      	uxth	r3, r2
		if (y > (y0 + LCD_HIGH - f_h))
 8003d10:	f101 0940 	add.w	r9, r1, #64	; 0x40
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 8003d14:	eb00 0b08 	add.w	fp, r0, r8
		x += f_h / 2; //字符,為全字的一半
 8003d18:	9302      	str	r3, [sp, #8]
		if (y > (y0 + LCD_HIGH - f_h))
 8003d1a:	eba9 0907 	sub.w	r9, r9, r7
	while (*str != 0)
 8003d1e:	7832      	ldrb	r2, [r6, #0]
 8003d20:	b912      	cbnz	r2, 8003d28 <show_str+0x3c>

	}
}  			 		 
 8003d22:	b005      	add	sp, #20
 8003d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 8003d28:	455d      	cmp	r5, fp
			y += f_h;
 8003d2a:	bfc2      	ittt	gt
 8003d2c:	19e4      	addgt	r4, r4, r7
 8003d2e:	b2a4      	uxthgt	r4, r4
			x = x0;
 8003d30:	4645      	movgt	r5, r8
		if (y > (y0 + LCD_HIGH - f_h))
 8003d32:	454c      	cmp	r4, r9
 8003d34:	dcf5      	bgt.n	8003d22 <show_str+0x36>
		if (*str == 13) //換行符號
 8003d36:	2a0d      	cmp	r2, #13
 8003d38:	d108      	bne.n	8003d4c <show_str+0x60>
			x = x0;
 8003d3a:	4645      	mov	r5, r8
			y += f_h;
 8003d3c:	443c      	add	r4, r7
 8003d3e:	b2a4      	uxth	r4, r4
			str++;
 8003d40:	3601      	adds	r6, #1
		x += f_h / 2; //字符,為全字的一半
 8003d42:	9b02      	ldr	r3, [sp, #8]
		str++;
 8003d44:	3601      	adds	r6, #1
		x += f_h / 2; //字符,為全字的一半
 8003d46:	441d      	add	r5, r3
 8003d48:	b2ad      	uxth	r5, r5
 8003d4a:	e7e8      	b.n	8003d1e <show_str+0x32>
			OLED_ShowChar(x, y, *str, f_w / 2, f_h, mode);     //有效部分寫入
 8003d4c:	9b03      	ldr	r3, [sp, #12]
 8003d4e:	9700      	str	r7, [sp, #0]
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	b2e1      	uxtb	r1, r4
 8003d54:	4653      	mov	r3, sl
 8003d56:	b2e8      	uxtb	r0, r5
 8003d58:	f7fc fdac 	bl	80008b4 <OLED_ShowChar>
 8003d5c:	e7f1      	b.n	8003d42 <show_str+0x56>

08003d5e <show_str_mid>:
//在指定寬度的中間顯示字符串(置中顯示)
//如果字符長度超過了len,則用Show_Str顯示
//len:指定要顯示的寬度
void show_str_mid(uint16_t x,uint16_t y,const uint8_t*str,uint8_t f_w,uint8_t f_h,uint8_t mode,uint16_t len)
{
 8003d5e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d62:	4606      	mov	r6, r0
	uint16_t strlenth=0;
   	strlenth=strlen((char*)str);
 8003d64:	4610      	mov	r0, r2
{
 8003d66:	4689      	mov	r9, r1
 8003d68:	4617      	mov	r7, r2
 8003d6a:	469a      	mov	sl, r3
   	strlenth=strlen((char*)str);
 8003d6c:	f7fc fa60 	bl	8000230 <strlen>
{
 8003d70:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003d74:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	strlenth*=f_h/2;
 8003d78:	ea4f 0558 	mov.w	r5, r8, lsr #1
 8003d7c:	4368      	muls	r0, r5
 8003d7e:	b280      	uxth	r0, r0
	if(strlenth>len)show_str(x,y,str,f_w,f_h,mode);
 8003d80:	42a0      	cmp	r0, r4
{
 8003d82:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
	if(strlenth>len)show_str(x,y,str,f_w,f_h,mode);
 8003d86:	d90c      	bls.n	8003da2 <show_str_mid+0x44>
 8003d88:	4653      	mov	r3, sl
 8003d8a:	463a      	mov	r2, r7
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	4630      	mov	r0, r6
 8003d90:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003d94:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	else
	{
		strlenth=(len-strlenth)/2;
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
	}
}   
 8003d98:	b001      	add	sp, #4
 8003d9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
 8003d9e:	f7ff bfa5 	b.w	8003cec <show_str>
		strlenth=(len-strlenth)/2;
 8003da2:	1a24      	subs	r4, r4, r0
 8003da4:	2002      	movs	r0, #2
 8003da6:	fb94 f0f0 	sdiv	r0, r4, r0
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
 8003daa:	4430      	add	r0, r6
 8003dac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003db0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003db4:	4653      	mov	r3, sl
 8003db6:	463a      	mov	r2, r7
 8003db8:	4649      	mov	r1, r9
 8003dba:	b280      	uxth	r0, r0
 8003dbc:	e7ec      	b.n	8003d98 <show_str_mid+0x3a>

08003dbe <getWindowStringlen>:

#if  GUI_WINDOW_EN==1

//得到字符串的長度
uint16_t getWindowStringlen(const unsigned char *str)
{
 8003dbe:	b508      	push	{r3, lr}
	uint16_t strlenth=0;
	strlenth=strlen((const char*)str);
 8003dc0:	f7fc fa36 	bl	8000230 <strlen>
 8003dc4:	b280      	uxth	r0, r0
	strlenth*=6;
 8003dc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003dca:	0040      	lsls	r0, r0, #1

	return strlenth;
 8003dcc:	b280      	uxth	r0, r0
}
 8003dce:	bd08      	pop	{r3, pc}

08003dd0 <GUI_WindowsDraw>:
* 功能：顯示視窗。根據提供的視窗參數進行描繪視窗。
* 入口參數：win		窗口句柄
* 出口參數：返回0表示操作失敗，返回1表示操作成功
****************************************************************************/
uint8_t  GUI_WindowsDraw(WINDOWS *win)
{  
 8003dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* 參數過濾，若窗口起出範圍，則返回0 */
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8003dd2:	6882      	ldr	r2, [r0, #8]
{  
 8003dd4:	b085      	sub	sp, #20
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8003dd6:	2a13      	cmp	r2, #19
{  
 8003dd8:	4604      	mov	r4, r0
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8003dda:	d802      	bhi.n	8003de2 <GUI_WindowsDraw+0x12>
 8003ddc:	2000      	movs	r0, #0
	{  
		return 0;//顯示的標題超過了窗體的寬度
	}	
	show_str_mid(win->x, win->y+1, win->title,12,12,0,win->width);//顯示標題
	return(1);
}
 8003dde:	b005      	add	sp, #20
 8003de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8003de2:	68c3      	ldr	r3, [r0, #12]
 8003de4:	2b13      	cmp	r3, #19
 8003de6:	d9f9      	bls.n	8003ddc <GUI_WindowsDraw+0xc>
	if( (win->x + win->width ) > GUI_LCM_XMAX ) return(0);			// 窗口寬度是否溢出
 8003de8:	6800      	ldr	r0, [r0, #0]
 8003dea:	4402      	add	r2, r0
 8003dec:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003df0:	d8f4      	bhi.n	8003ddc <GUI_WindowsDraw+0xc>
	if( (win->y + win->height ) > GUI_LCM_YMAX ) return(0);			// 窗口高度是否溢出
 8003df2:	6861      	ldr	r1, [r4, #4]
 8003df4:	440b      	add	r3, r1
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d8f0      	bhi.n	8003ddc <GUI_WindowsDraw+0xc>
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 0);// 清除視窗(全螢幕清除)
 8003dfa:	2600      	movs	r6, #0
	GUI_Rectangle(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 1);	// 畫窗口邊框
 8003dfc:	2501      	movs	r5, #1
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 0);// 清除視窗(全螢幕清除)
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	3a01      	subs	r2, #1
 8003e02:	9600      	str	r6, [sp, #0]
 8003e04:	f7ff fdd2 	bl	80039ac <GUI_RectangleFill>
	GUI_Rectangle(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 1);	// 畫窗口邊框
 8003e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e0c:	68e3      	ldr	r3, [r4, #12]
 8003e0e:	68a2      	ldr	r2, [r4, #8]
 8003e10:	440b      	add	r3, r1
 8003e12:	4402      	add	r2, r0
 8003e14:	3b01      	subs	r3, #1
 8003e16:	3a01      	subs	r2, #1
 8003e18:	9500      	str	r5, [sp, #0]
 8003e1a:	f7ff fda3 	bl	8003964 <GUI_Rectangle>
	GUI_HLine(win->x, win->y + 14, win->x + win->width - 1, disp_color);					// 畫標題目欄下邊框
 8003e1e:	8820      	ldrh	r0, [r4, #0]
 8003e20:	68a2      	ldr	r2, [r4, #8]
 8003e22:	6861      	ldr	r1, [r4, #4]
 8003e24:	4402      	add	r2, r0
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <GUI_WindowsDraw+0xa4>)
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	310e      	adds	r1, #14
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b292      	uxth	r2, r2
 8003e30:	b2c9      	uxtb	r1, r1
 8003e32:	f7ff fe94 	bl	8003b5e <GUI_HLine>
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + 14-1, 1);
 8003e36:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003e3a:	4402      	add	r2, r0
 8003e3c:	f101 030d 	add.w	r3, r1, #13
 8003e40:	3a01      	subs	r2, #1
 8003e42:	9500      	str	r5, [sp, #0]
 8003e44:	f7ff fdb2 	bl	80039ac <GUI_RectangleFill>
	if(getWindowStringlen(win->title)>(win->width-2))
 8003e48:	69a7      	ldr	r7, [r4, #24]
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	f7ff ffb7 	bl	8003dbe <getWindowStringlen>
 8003e50:	68a3      	ldr	r3, [r4, #8]
 8003e52:	1e9a      	subs	r2, r3, #2
 8003e54:	4290      	cmp	r0, r2
 8003e56:	d8c1      	bhi.n	8003ddc <GUI_WindowsDraw+0xc>
	show_str_mid(win->x, win->y+1, win->title,12,12,0,win->width);//顯示標題
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	9302      	str	r3, [sp, #8]
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	6861      	ldr	r1, [r4, #4]
 8003e60:	8820      	ldrh	r0, [r4, #0]
 8003e62:	4429      	add	r1, r5
 8003e64:	9601      	str	r6, [sp, #4]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	463a      	mov	r2, r7
 8003e6a:	b289      	uxth	r1, r1
 8003e6c:	f7ff ff77 	bl	8003d5e <show_str_mid>
	return(1);
 8003e70:	4628      	mov	r0, r5
 8003e72:	e7b4      	b.n	8003dde <GUI_WindowsDraw+0xe>
 8003e74:	200000d1 	.word	0x200000d1

08003e78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003e78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003e7a:	e003      	b.n	8003e84 <LoopCopyDataInit>

08003e7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003e7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003e80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003e82:	3104      	adds	r1, #4

08003e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003e84:	480a      	ldr	r0, [pc, #40]	; (8003eb0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003e88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003e8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003e8c:	d3f6      	bcc.n	8003e7c <CopyDataInit>
  ldr r2, =_sbss
 8003e8e:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003e90:	e002      	b.n	8003e98 <LoopFillZerobss>

08003e92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003e92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003e94:	f842 3b04 	str.w	r3, [r2], #4

08003e98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003e9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003e9c:	d3f9      	bcc.n	8003e92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e9e:	f7fc fc3b 	bl	8000718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ea2:	f000 f80f 	bl	8003ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ea6:	f7fc fa55 	bl	8000354 <main>
  bx lr
 8003eaa:	4770      	bx	lr
  ldr r3, =_sidata
 8003eac:	080047ac 	.word	0x080047ac
  ldr r0, =_sdata
 8003eb0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003eb4:	200000d4 	.word	0x200000d4
  ldr r2, =_sbss
 8003eb8:	200000d4 	.word	0x200000d4
  ldr r3, = _ebss
 8003ebc:	20004040 	.word	0x20004040

08003ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ec0:	e7fe      	b.n	8003ec0 <ADC1_2_IRQHandler>
	...

08003ec4 <__libc_init_array>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	2500      	movs	r5, #0
 8003ec8:	4e0c      	ldr	r6, [pc, #48]	; (8003efc <__libc_init_array+0x38>)
 8003eca:	4c0d      	ldr	r4, [pc, #52]	; (8003f00 <__libc_init_array+0x3c>)
 8003ecc:	1ba4      	subs	r4, r4, r6
 8003ece:	10a4      	asrs	r4, r4, #2
 8003ed0:	42a5      	cmp	r5, r4
 8003ed2:	d109      	bne.n	8003ee8 <__libc_init_array+0x24>
 8003ed4:	f000 f826 	bl	8003f24 <_init>
 8003ed8:	2500      	movs	r5, #0
 8003eda:	4e0a      	ldr	r6, [pc, #40]	; (8003f04 <__libc_init_array+0x40>)
 8003edc:	4c0a      	ldr	r4, [pc, #40]	; (8003f08 <__libc_init_array+0x44>)
 8003ede:	1ba4      	subs	r4, r4, r6
 8003ee0:	10a4      	asrs	r4, r4, #2
 8003ee2:	42a5      	cmp	r5, r4
 8003ee4:	d105      	bne.n	8003ef2 <__libc_init_array+0x2e>
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eec:	4798      	blx	r3
 8003eee:	3501      	adds	r5, #1
 8003ef0:	e7ee      	b.n	8003ed0 <__libc_init_array+0xc>
 8003ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ef6:	4798      	blx	r3
 8003ef8:	3501      	adds	r5, #1
 8003efa:	e7f2      	b.n	8003ee2 <__libc_init_array+0x1e>
 8003efc:	080047a4 	.word	0x080047a4
 8003f00:	080047a4 	.word	0x080047a4
 8003f04:	080047a4 	.word	0x080047a4
 8003f08:	080047a8 	.word	0x080047a8

08003f0c <memcpy>:
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	1e43      	subs	r3, r0, #1
 8003f10:	440a      	add	r2, r1
 8003f12:	4291      	cmp	r1, r2
 8003f14:	d100      	bne.n	8003f18 <memcpy+0xc>
 8003f16:	bd10      	pop	{r4, pc}
 8003f18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f20:	e7f7      	b.n	8003f12 <memcpy+0x6>
	...

08003f24 <_init>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr

08003f30 <_fini>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	bf00      	nop
 8003f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f36:	bc08      	pop	{r3}
 8003f38:	469e      	mov	lr, r3
 8003f3a:	4770      	bx	lr
