
OLED_MENU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  080081e8  080081e8  000181e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c70  08008c70  00018c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c78  08008c78  00018c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008c7c  08008c7c  00018c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000072c  20000000  08008c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003f44  2000072c  080093ac  0002072c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004670  080093ac  00024670  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002072c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b978  00000000  00000000  00020755  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005e26  00000000  00000000  0004c0cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000eabb  00000000  00000000  00051ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001148  00000000  00000000  000609b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001770  00000000  00000000  00061af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b538  00000000  00000000  00063268  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000638b  00000000  00000000  0006e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00074b2b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c74  00000000  00000000  00074ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000072c 	.word	0x2000072c
 800020c:	00000000 	.word	0x00000000
 8000210:	080081d0 	.word	0x080081d0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000730 	.word	0x20000730
 800022c:	080081d0 	.word	0x080081d0

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037e:	f1a4 0401 	sub.w	r4, r4, #1
 8000382:	d1e9      	bne.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f092 0f00 	teq	r2, #0
 800052a:	bf14      	ite	ne
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e720      	b.n	8000384 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aedc 	beq.w	8000332 <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6c1      	b.n	8000332 <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_uldivmod>:
 8000b60:	b953      	cbnz	r3, 8000b78 <__aeabi_uldivmod+0x18>
 8000b62:	b94a      	cbnz	r2, 8000b78 <__aeabi_uldivmod+0x18>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	bf08      	it	eq
 8000b68:	2800      	cmpeq	r0, #0
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b70:	f04f 30ff 	movne.w	r0, #4294967295
 8000b74:	f000 b97a 	b.w	8000e6c <__aeabi_idiv0>
 8000b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b80:	f000 f806 	bl	8000b90 <__udivmoddi4>
 8000b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8c:	b004      	add	sp, #16
 8000b8e:	4770      	bx	lr

08000b90 <__udivmoddi4>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	468c      	mov	ip, r1
 8000b96:	460e      	mov	r6, r1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	9d08      	ldr	r5, [sp, #32]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d150      	bne.n	8000c42 <__udivmoddi4+0xb2>
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	4617      	mov	r7, r2
 8000ba4:	d96c      	bls.n	8000c80 <__udivmoddi4+0xf0>
 8000ba6:	fab2 fe82 	clz	lr, r2
 8000baa:	f1be 0f00 	cmp.w	lr, #0
 8000bae:	d00b      	beq.n	8000bc8 <__udivmoddi4+0x38>
 8000bb0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bb4:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bb8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bbc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bc0:	ea4c 0c06 	orr.w	ip, ip, r6
 8000bc4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bc8:	0c3a      	lsrs	r2, r7, #16
 8000bca:	fbbc f9f2 	udiv	r9, ip, r2
 8000bce:	b2bb      	uxth	r3, r7
 8000bd0:	fb02 cc19 	mls	ip, r2, r9, ip
 8000bd4:	fb09 fa03 	mul.w	sl, r9, r3
 8000bd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000bdc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000be0:	45b2      	cmp	sl, r6
 8000be2:	d90a      	bls.n	8000bfa <__udivmoddi4+0x6a>
 8000be4:	19f6      	adds	r6, r6, r7
 8000be6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000bea:	f080 8125 	bcs.w	8000e38 <__udivmoddi4+0x2a8>
 8000bee:	45b2      	cmp	sl, r6
 8000bf0:	f240 8122 	bls.w	8000e38 <__udivmoddi4+0x2a8>
 8000bf4:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf8:	443e      	add	r6, r7
 8000bfa:	eba6 060a 	sub.w	r6, r6, sl
 8000bfe:	fbb6 f0f2 	udiv	r0, r6, r2
 8000c02:	fb02 6610 	mls	r6, r2, r0, r6
 8000c06:	fb00 f303 	mul.w	r3, r0, r3
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000c10:	42a3      	cmp	r3, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x98>
 8000c14:	19e4      	adds	r4, r4, r7
 8000c16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1a:	f080 810b 	bcs.w	8000e34 <__udivmoddi4+0x2a4>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	f240 8108 	bls.w	8000e34 <__udivmoddi4+0x2a4>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	2100      	movs	r1, #0
 8000c2a:	1ae4      	subs	r4, r4, r3
 8000c2c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d062      	beq.n	8000cfa <__udivmoddi4+0x16a>
 8000c34:	2300      	movs	r3, #0
 8000c36:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c3a:	602c      	str	r4, [r5, #0]
 8000c3c:	606b      	str	r3, [r5, #4]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0xc6>
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d055      	beq.n	8000cf6 <__udivmoddi4+0x166>
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c50:	4608      	mov	r0, r1
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	f040 808f 	bne.w	8000d7e <__udivmoddi4+0x1ee>
 8000c60:	42b3      	cmp	r3, r6
 8000c62:	d302      	bcc.n	8000c6a <__udivmoddi4+0xda>
 8000c64:	4282      	cmp	r2, r0
 8000c66:	f200 80fc 	bhi.w	8000e62 <__udivmoddi4+0x2d2>
 8000c6a:	1a84      	subs	r4, r0, r2
 8000c6c:	eb66 0603 	sbc.w	r6, r6, r3
 8000c70:	2001      	movs	r0, #1
 8000c72:	46b4      	mov	ip, r6
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d040      	beq.n	8000cfa <__udivmoddi4+0x16a>
 8000c78:	e885 1010 	stmia.w	r5, {r4, ip}
 8000c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c80:	b912      	cbnz	r2, 8000c88 <__udivmoddi4+0xf8>
 8000c82:	2701      	movs	r7, #1
 8000c84:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c88:	fab7 fe87 	clz	lr, r7
 8000c8c:	f1be 0f00 	cmp.w	lr, #0
 8000c90:	d135      	bne.n	8000cfe <__udivmoddi4+0x16e>
 8000c92:	2101      	movs	r1, #1
 8000c94:	1bf6      	subs	r6, r6, r7
 8000c96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c9a:	fa1f f887 	uxth.w	r8, r7
 8000c9e:	fbb6 f2fc 	udiv	r2, r6, ip
 8000ca2:	fb0c 6612 	mls	r6, ip, r2, r6
 8000ca6:	fb08 f002 	mul.w	r0, r8, r2
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000cb0:	42b0      	cmp	r0, r6
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x134>
 8000cb4:	19f6      	adds	r6, r6, r7
 8000cb6:	f102 33ff 	add.w	r3, r2, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x132>
 8000cbc:	42b0      	cmp	r0, r6
 8000cbe:	f200 80d2 	bhi.w	8000e66 <__udivmoddi4+0x2d6>
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	1a36      	subs	r6, r6, r0
 8000cc6:	fbb6 f0fc 	udiv	r0, r6, ip
 8000cca:	fb0c 6610 	mls	r6, ip, r0, r6
 8000cce:	fb08 f800 	mul.w	r8, r8, r0
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x15c>
 8000cdc:	19e4      	adds	r4, r4, r7
 8000cde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x15a>
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	f200 80b9 	bhi.w	8000e5c <__udivmoddi4+0x2cc>
 8000cea:	4618      	mov	r0, r3
 8000cec:	eba4 0408 	sub.w	r4, r4, r8
 8000cf0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000cf4:	e79c      	b.n	8000c30 <__udivmoddi4+0xa0>
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d02:	f1ce 0320 	rsb	r3, lr, #32
 8000d06:	fa26 f203 	lsr.w	r2, r6, r3
 8000d0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000d0e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000d12:	fa1f f887 	uxth.w	r8, r7
 8000d16:	fb0c 2211 	mls	r2, ip, r1, r2
 8000d1a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d1e:	fa20 f303 	lsr.w	r3, r0, r3
 8000d22:	fb01 f908 	mul.w	r9, r1, r8
 8000d26:	4333      	orrs	r3, r6
 8000d28:	0c1e      	lsrs	r6, r3, #16
 8000d2a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000d2e:	45b1      	cmp	r9, r6
 8000d30:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0x1ba>
 8000d36:	19f6      	adds	r6, r6, r7
 8000d38:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d3c:	f080 808c 	bcs.w	8000e58 <__udivmoddi4+0x2c8>
 8000d40:	45b1      	cmp	r9, r6
 8000d42:	f240 8089 	bls.w	8000e58 <__udivmoddi4+0x2c8>
 8000d46:	3902      	subs	r1, #2
 8000d48:	443e      	add	r6, r7
 8000d4a:	eba6 0609 	sub.w	r6, r6, r9
 8000d4e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000d52:	fb0c 6210 	mls	r2, ip, r0, r6
 8000d56:	fb00 f908 	mul.w	r9, r0, r8
 8000d5a:	b29e      	uxth	r6, r3
 8000d5c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000d60:	45b1      	cmp	r9, r6
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x1e4>
 8000d64:	19f6      	adds	r6, r6, r7
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d271      	bcs.n	8000e50 <__udivmoddi4+0x2c0>
 8000d6c:	45b1      	cmp	r9, r6
 8000d6e:	d96f      	bls.n	8000e50 <__udivmoddi4+0x2c0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	443e      	add	r6, r7
 8000d74:	eba6 0609 	sub.w	r6, r6, r9
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	e78f      	b.n	8000c9e <__udivmoddi4+0x10e>
 8000d7e:	f1c1 0720 	rsb	r7, r1, #32
 8000d82:	fa22 f807 	lsr.w	r8, r2, r7
 8000d86:	408b      	lsls	r3, r1
 8000d88:	ea48 0303 	orr.w	r3, r8, r3
 8000d8c:	fa26 f407 	lsr.w	r4, r6, r7
 8000d90:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000d94:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d98:	fa1f fc83 	uxth.w	ip, r3
 8000d9c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000da0:	408e      	lsls	r6, r1
 8000da2:	fa20 f807 	lsr.w	r8, r0, r7
 8000da6:	fb09 fa0c 	mul.w	sl, r9, ip
 8000daa:	ea48 0806 	orr.w	r8, r8, r6
 8000dae:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000db2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000db6:	45a2      	cmp	sl, r4
 8000db8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbc:	fa00 f601 	lsl.w	r6, r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x244>
 8000dc2:	18e4      	adds	r4, r4, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc8:	d244      	bcs.n	8000e54 <__udivmoddi4+0x2c4>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d942      	bls.n	8000e54 <__udivmoddi4+0x2c4>
 8000dce:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd2:	441c      	add	r4, r3
 8000dd4:	eba4 040a 	sub.w	r4, r4, sl
 8000dd8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ddc:	fb0e 4410 	mls	r4, lr, r0, r4
 8000de0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000de4:	fa1f f888 	uxth.w	r8, r8
 8000de8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x270>
 8000df0:	18e4      	adds	r4, r4, r3
 8000df2:	f100 3eff 	add.w	lr, r0, #4294967295
 8000df6:	d229      	bcs.n	8000e4c <__udivmoddi4+0x2bc>
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d927      	bls.n	8000e4c <__udivmoddi4+0x2bc>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	441c      	add	r4, r3
 8000e00:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e04:	fba0 8902 	umull	r8, r9, r0, r2
 8000e08:	eba4 0c0c 	sub.w	ip, r4, ip
 8000e0c:	45cc      	cmp	ip, r9
 8000e0e:	46c2      	mov	sl, r8
 8000e10:	46ce      	mov	lr, r9
 8000e12:	d315      	bcc.n	8000e40 <__udivmoddi4+0x2b0>
 8000e14:	d012      	beq.n	8000e3c <__udivmoddi4+0x2ac>
 8000e16:	b155      	cbz	r5, 8000e2e <__udivmoddi4+0x29e>
 8000e18:	ebb6 030a 	subs.w	r3, r6, sl
 8000e1c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000e20:	fa06 f707 	lsl.w	r7, r6, r7
 8000e24:	40cb      	lsrs	r3, r1
 8000e26:	431f      	orrs	r7, r3
 8000e28:	40ce      	lsrs	r6, r1
 8000e2a:	602f      	str	r7, [r5, #0]
 8000e2c:	606e      	str	r6, [r5, #4]
 8000e2e:	2100      	movs	r1, #0
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	4610      	mov	r0, r2
 8000e36:	e6f7      	b.n	8000c28 <__udivmoddi4+0x98>
 8000e38:	4689      	mov	r9, r1
 8000e3a:	e6de      	b.n	8000bfa <__udivmoddi4+0x6a>
 8000e3c:	4546      	cmp	r6, r8
 8000e3e:	d2ea      	bcs.n	8000e16 <__udivmoddi4+0x286>
 8000e40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e44:	eb69 0e03 	sbc.w	lr, r9, r3
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7e4      	b.n	8000e16 <__udivmoddi4+0x286>
 8000e4c:	4670      	mov	r0, lr
 8000e4e:	e7d7      	b.n	8000e00 <__udivmoddi4+0x270>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e78f      	b.n	8000d74 <__udivmoddi4+0x1e4>
 8000e54:	4681      	mov	r9, r0
 8000e56:	e7bd      	b.n	8000dd4 <__udivmoddi4+0x244>
 8000e58:	4611      	mov	r1, r2
 8000e5a:	e776      	b.n	8000d4a <__udivmoddi4+0x1ba>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	443c      	add	r4, r7
 8000e60:	e744      	b.n	8000cec <__udivmoddi4+0x15c>
 8000e62:	4608      	mov	r0, r1
 8000e64:	e706      	b.n	8000c74 <__udivmoddi4+0xe4>
 8000e66:	3a02      	subs	r2, #2
 8000e68:	443e      	add	r6, r7
 8000e6a:	e72b      	b.n	8000cc4 <__udivmoddi4+0x134>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <START_task>:

}

/* USER CODE BEGIN 4 */

void START_task(void *pvParameters){
 8000e70:	b507      	push	{r0, r1, r2, lr}
	taskENTER_CRITICAL();
 8000e72:	f002 f96f 	bl	8003154 <vPortEnterCritical>
	EventGroupHandler = xEventGroupCreate(); //create event group
 8000e76:	f001 fffc 	bl	8002e72 <xEventGroupCreate>
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <START_task+0x5c>)

	xTaskCreate((TaskFunction_t  )(Button_task),         	  	//Task Function
 8000e7c:	2246      	movs	r2, #70	; 0x46
	EventGroupHandler = xEventGroupCreate(); //create event group
 8000e7e:	6018      	str	r0, [r3, #0]
	xTaskCreate((TaskFunction_t  )(Button_task),         	  	//Task Function
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <START_task+0x60>)
 8000e82:	4914      	ldr	r1, [pc, #80]	; (8000ed4 <START_task+0x64>)
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	2301      	movs	r3, #1
 8000e88:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <START_task+0x68>)
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f002 feaf 	bl	8003bf0 <xTaskCreate>
				(uint16_t        ) Button_task_STACK_SIZE, 	//Task Stack Size
				(void *          ) NULL,				    //Task Fuction Parameter
				(UBaseType_t     ) Button_task_PRIORITY, 		//Task Priority

				(TaskHandle_t    ) &RTCUITaskHandler);	    //Task Handler
	xTaskCreate((TaskFunction_t  )(Menu_Task),         	  	//Task Function
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <START_task+0x6c>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	2302      	movs	r3, #2
 8000e9a:	4911      	ldr	r1, [pc, #68]	; (8000ee0 <START_task+0x70>)
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <START_task+0x74>)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f002 fea5 	bl	8003bf0 <xTaskCreate>
				(uint16_t        ) MENU_TASK_STACK_SIZE, 	//Task Stack Size
				(void *          ) NULL,				    //Task Fuction Parameter
				(UBaseType_t     ) MENU_TASK_PRIORITY, 		//Task Priority
				(TaskHandle_t    ) &MenuTaskHandler);	    //Task Handler

	xTaskCreate((TaskFunction_t  )(GPIO_task),         	  	//Task Function
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <START_task+0x78>)
 8000ea8:	2246      	movs	r2, #70	; 0x46
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	2305      	movs	r3, #5
 8000eae:	490f      	ldr	r1, [pc, #60]	; (8000eec <START_task+0x7c>)
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <START_task+0x80>)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f002 fe9b 	bl	8003bf0 <xTaskCreate>
//				(uint16_t        ) RTCUI_TASK_STACK_SIZE, 	//Task Stack Size
//				(void *          ) NULL,				    //Task Fuction Parameter
//				(UBaseType_t     ) RTCUI_TASK_PRIORITY, 		//Task Priority
//				(TaskHandle_t    ) &RTCUITaskHandler);	    //Task Handler

	vTaskDelete(StartTaskHandler);
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <START_task+0x84>)
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	f002 ff77 	bl	8003db0 <vTaskDelete>
	taskEXIT_CRITICAL();
}
 8000ec2:	b003      	add	sp, #12
 8000ec4:	f85d eb04 	ldr.w	lr, [sp], #4
	taskEXIT_CRITICAL();
 8000ec8:	f002 b966 	b.w	8003198 <vPortExitCritical>
 8000ecc:	2000456c 	.word	0x2000456c
 8000ed0:	2000465c 	.word	0x2000465c
 8000ed4:	08008208 	.word	0x08008208
 8000ed8:	08001971 	.word	0x08001971
 8000edc:	20004658 	.word	0x20004658
 8000ee0:	08008214 	.word	0x08008214
 8000ee4:	08004b19 	.word	0x08004b19
 8000ee8:	20004568 	.word	0x20004568
 8000eec:	0800821e 	.word	0x0800821e
 8000ef0:	08000ef9 	.word	0x08000ef9
 8000ef4:	200045c4 	.word	0x200045c4

08000ef8 <GPIO_task>:
void GPIO_task(void *pvParameters){
 8000ef8:	b508      	push	{r3, lr}

	while(1){
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000efa:	4d0a      	ldr	r5, [pc, #40]	; (8000f24 <GPIO_task+0x2c>)
		vTaskDelay(1000/portTICK_PERIOD_MS);
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000efc:	4c0a      	ldr	r4, [pc, #40]	; (8000f28 <GPIO_task+0x30>)
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000efe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f02:	4628      	mov	r0, r5
 8000f04:	f000 ff67 	bl	8001dd6 <HAL_GPIO_TogglePin>
		vTaskDelay(1000/portTICK_PERIOD_MS);
 8000f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0c:	f003 f914 	bl	8004138 <vTaskDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f10:	4620      	mov	r0, r4
 8000f12:	2104      	movs	r1, #4
 8000f14:	f000 ff5f 	bl	8001dd6 <HAL_GPIO_TogglePin>
		vTaskDelay(2000/portTICK_PERIOD_MS);
 8000f18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f1c:	f003 f90c 	bl	8004138 <vTaskDelay>
 8000f20:	e7ed      	b.n	8000efe <GPIO_task+0x6>
 8000f22:	bf00      	nop
 8000f24:	40010800 	.word	0x40010800
 8000f28:	40011400 	.word	0x40011400

08000f2c <SystemClock_Config>:
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000f2c:	2305      	movs	r3, #5
{
 8000f2e:	b530      	push	{r4, r5, lr}
 8000f30:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000f32:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f38:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f3c:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f40:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f48:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f4a:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4e:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f50:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	f000 ff4b 	bl	8001dec <HAL_RCC_OscConfig>
 8000f56:	b100      	cbz	r0, 8000f5a <SystemClock_Config+0x2e>
 8000f58:	e7fe      	b.n	8000f58 <SystemClock_Config+0x2c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f66:	4629      	mov	r1, r5
 8000f68:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6a:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f6e:	f001 f905 	bl	800217c <HAL_RCC_ClockConfig>
 8000f72:	b100      	cbz	r0, 8000f76 <SystemClock_Config+0x4a>
 8000f74:	e7fe      	b.n	8000f74 <SystemClock_Config+0x48>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f76:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7a:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f7c:	9406      	str	r4, [sp, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f7e:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f001 f9b6 	bl	80022f0 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4604      	mov	r4, r0
 8000f86:	b100      	cbz	r0, 8000f8a <SystemClock_Config+0x5e>
 8000f88:	e7fe      	b.n	8000f88 <SystemClock_Config+0x5c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f8a:	f001 f99b 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f96:	f000 fdff 	bl	8001b98 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	f000 fe12 	bl	8001bc4 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	4621      	mov	r1, r4
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 fdc2 	bl	8001b30 <HAL_NVIC_SetPriority>
}
 8000fac:	b017      	add	sp, #92	; 0x5c
 8000fae:	bd30      	pop	{r4, r5, pc}

08000fb0 <main>:
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8000fb4:	f000 fd74 	bl	8001aa0 <HAL_Init>
  SystemClock_Config();
 8000fb8:	f7ff ffb8 	bl	8000f2c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbc:	4b7e      	ldr	r3, [pc, #504]	; (80011b8 <main+0x208>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc2:	2401      	movs	r4, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc4:	f042 0210 	orr.w	r2, r2, #16
 8000fc8:	619a      	str	r2, [r3, #24]
 8000fca:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = ROTARY_SW_Pin;
 8000fcc:	2708      	movs	r7, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	f002 0210 	and.w	r2, r2, #16
 8000fd2:	9203      	str	r2, [sp, #12]
 8000fd4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 8000fd8:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fdc:	f042 0220 	orr.w	r2, r2, #32
 8000fe0:	619a      	str	r2, [r3, #24]
 8000fe2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 8000fe4:	4875      	ldr	r0, [pc, #468]	; (80011bc <main+0x20c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	f002 0220 	and.w	r2, r2, #32
 8000fea:	9204      	str	r2, [sp, #16]
 8000fec:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	f042 0204 	orr.w	r2, r2, #4
 8000ff6:	619a      	str	r2, [r3, #24]
 8000ff8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	f002 0204 	and.w	r2, r2, #4
 8001002:	9205      	str	r2, [sp, #20]
 8001004:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LED0_Pin;
 8001008:	f44f 7880 	mov.w	r8, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	f042 0208 	orr.w	r2, r2, #8
 8001010:	619a      	str	r2, [r3, #24]
 8001012:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	9306      	str	r3, [sp, #24]
 800101c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|OLED_RST_Pin, GPIO_PIN_SET);
 800101e:	f000 fed5 	bl	8001dcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	4866      	ldr	r0, [pc, #408]	; (80011c0 <main+0x210>)
 8001028:	f000 fed0 	bl	8001dcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001032:	4864      	ldr	r0, [pc, #400]	; (80011c4 <main+0x214>)
 8001034:	f000 feca 	bl	8001dcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2104      	movs	r1, #4
 800103c:	4862      	ldr	r0, [pc, #392]	; (80011c8 <main+0x218>)
 800103e:	f000 fec5 	bl	8001dcc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(ROTARY_SW_GPIO_Port, &GPIO_InitStruct);
 8001042:	a909      	add	r1, sp, #36	; 0x24
 8001044:	485e      	ldr	r0, [pc, #376]	; (80011c0 <main+0x210>)
  GPIO_InitStruct.Pin = ROTARY_SW_Pin;
 8001046:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ROTARY_SW_GPIO_Port, &GPIO_InitStruct);
 800104c:	f000 fdcc 	bl	8001be8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001054:	a909      	add	r1, sp, #36	; 0x24
 8001056:	4859      	ldr	r0, [pc, #356]	; (80011bc <main+0x20c>)
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001058:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105e:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001060:	f000 fdc2 	bl	8001be8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8001064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8001068:	a909      	add	r1, sp, #36	; 0x24
 800106a:	4854      	ldr	r0, [pc, #336]	; (80011bc <main+0x20c>)
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800106c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001070:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001072:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8001074:	f000 fdb8 	bl	8001be8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8001078:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800107a:	a909      	add	r1, sp, #36	; 0x24
 800107c:	4850      	ldr	r0, [pc, #320]	; (80011c0 <main+0x210>)
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800107e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001084:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8001086:	f000 fdaf 	bl	8001be8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800108a:	a909      	add	r1, sp, #36	; 0x24
 800108c:	484d      	ldr	r0, [pc, #308]	; (80011c4 <main+0x214>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = LED0_Pin;
 8001092:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800109a:	f000 fda5 	bl	8001be8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin;
 800109e:	2304      	movs	r3, #4
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010a0:	a909      	add	r1, sp, #36	; 0x24
 80010a2:	4849      	ldr	r0, [pc, #292]	; (80011c8 <main+0x218>)
  GPIO_InitStruct.Pin = LED1_Pin;
 80010a4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f000 fd9b 	bl	8001be8 <HAL_GPIO_Init>
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80010b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010b6:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
  hspi2.Instance = SPI2;
 80010ba:	4844      	ldr	r0, [pc, #272]	; (80011cc <main+0x21c>)
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80010bc:	4944      	ldr	r1, [pc, #272]	; (80011d0 <main+0x220>)
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010be:	f8c0 9010 	str.w	r9, [r0, #16]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80010c2:	e880 400a 	stmia.w	r0, {r1, r3, lr}
  hspi2.Init.CRCPolynomial = 10;
 80010c6:	f04f 090a 	mov.w	r9, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010ca:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ce:	60c5      	str	r5, [r0, #12]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010d0:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010d2:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010d4:	61c7      	str	r7, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d6:	6205      	str	r5, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d8:	6245      	str	r5, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010da:	6285      	str	r5, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010dc:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010e0:	f001 fdb2 	bl	8002c48 <HAL_SPI_Init>
 80010e4:	b100      	cbz	r0, 80010e8 <main+0x138>
 80010e6:	e7fe      	b.n	80010e6 <main+0x136>
  htim2.Instance = TIM2;
 80010e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ec:	4d39      	ldr	r5, [pc, #228]	; (80011d4 <main+0x224>)
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010ee:	900a      	str	r0, [sp, #40]	; 0x28
  htim2.Init.Prescaler = 3;
 80010f0:	e885 0048 	stmia.w	r5, {r3, r6}
  htim2.Init.Period = 65535;
 80010f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	60a8      	str	r0, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fa:	6128      	str	r0, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	61a8      	str	r0, [r5, #24]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010fe:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001100:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001102:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001104:	a909      	add	r1, sp, #36	; 0x24
 8001106:	4628      	mov	r0, r5
  htim2.Init.Period = 65535;
 8001108:	60eb      	str	r3, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800110a:	9609      	str	r6, [sp, #36]	; 0x24
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800110c:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfig.IC1Filter = 10;
 800110e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001112:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.IC2Filter = 10;
 8001114:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001118:	f001 fe40 	bl	8002d9c <HAL_TIM_Encoder_Init>
 800111c:	b100      	cbz	r0, 8001120 <main+0x170>
 800111e:	e7fe      	b.n	800111e <main+0x16e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001124:	a907      	add	r1, sp, #28
 8001126:	4628      	mov	r0, r5
 8001128:	f001 fe81 	bl	8002e2e <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	b100      	cbz	r0, 8001130 <main+0x180>
 800112e:	e7fe      	b.n	800112e <main+0x17e>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 8001134:	4d28      	ldr	r5, [pc, #160]	; (80011d8 <main+0x228>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001136:	4a29      	ldr	r2, [pc, #164]	; (80011dc <main+0x22c>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001138:	4628      	mov	r0, r5
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800113a:	e885 000c 	stmia.w	r5, {r2, r3}
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800113e:	f8c5 8008 	str.w	r8, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001142:	f001 fc31 	bl	80029a8 <HAL_RTC_Init>
 8001146:	b100      	cbz	r0, 800114a <main+0x19a>
 8001148:	e7fe      	b.n	8001148 <main+0x198>
  sTime.Minutes = 0x30;
 800114a:	2330      	movs	r3, #48	; 0x30
  sTime.Hours = 0x18;
 800114c:	f04f 0818 	mov.w	r8, #24
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001150:	4622      	mov	r2, r4
 8001152:	a907      	add	r1, sp, #28
 8001154:	4628      	mov	r0, r5
  sTime.Hours = 0x18;
 8001156:	f88d 801c 	strb.w	r8, [sp, #28]
  sTime.Minutes = 0x30;
 800115a:	f88d 301d 	strb.w	r3, [sp, #29]
  sTime.Seconds = 0x30;
 800115e:	f88d 301e 	strb.w	r3, [sp, #30]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001162:	f001 fa79 	bl	8002658 <HAL_RTC_SetTime>
 8001166:	b100      	cbz	r0, 800116a <main+0x1ba>
 8001168:	e7fe      	b.n	8001168 <main+0x1b8>
  DateToUpdate.Date = 0x22;
 800116a:	2322      	movs	r3, #34	; 0x22
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800116c:	4628      	mov	r0, r5
 800116e:	4622      	mov	r2, r4
 8001170:	a909      	add	r1, sp, #36	; 0x24
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001172:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  DateToUpdate.Month = RTC_MONTH_AUGUST;
 8001176:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  DateToUpdate.Date = 0x22;
 800117a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  DateToUpdate.Year = 0x18;
 800117e:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001182:	f001 fb71 	bl	8002868 <HAL_RTC_SetDate>
 8001186:	4605      	mov	r5, r0
 8001188:	b100      	cbz	r0, 800118c <main+0x1dc>
 800118a:	e7fe      	b.n	800118a <main+0x1da>
	RotaryEcncorder_Init();
 800118c:	f000 fc02 	bl	8001994 <RotaryEcncorder_Init>
	RotaryEcncorder_SetRange(0,10);
 8001190:	4649      	mov	r1, r9
 8001192:	4628      	mov	r0, r5
 8001194:	f000 fc16 	bl	80019c4 <RotaryEcncorder_SetRange>
	OLED_Init();
 8001198:	f000 fabc 	bl	8001714 <OLED_Init>
	mainMenuInit();
 800119c:	f003 fc14 	bl	80049c8 <mainMenuInit>
	xTaskCreate((TaskFunction_t  )(START_task),         	//Task Function
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <main+0x230>)
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	490f      	ldr	r1, [pc, #60]	; (80011e4 <main+0x234>)
 80011a8:	462b      	mov	r3, r5
 80011aa:	9400      	str	r4, [sp, #0]
 80011ac:	480e      	ldr	r0, [pc, #56]	; (80011e8 <main+0x238>)
 80011ae:	f002 fd1f 	bl	8003bf0 <xTaskCreate>
	vTaskStartScheduler();
 80011b2:	f002 fe69 	bl	8003e88 <vTaskStartScheduler>
 80011b6:	e7fe      	b.n	80011b6 <main+0x206>
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010c00 	.word	0x40010c00
 80011c0:	40011000 	.word	0x40011000
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40011400 	.word	0x40011400
 80011cc:	2000450c 	.word	0x2000450c
 80011d0:	40003800 	.word	0x40003800
 80011d4:	20004584 	.word	0x20004584
 80011d8:	20004570 	.word	0x20004570
 80011dc:	40002800 	.word	0x40002800
 80011e0:	200045c4 	.word	0x200045c4
 80011e4:	08008228 	.word	0x08008228
 80011e8:	08000e71 	.word	0x08000e71

080011ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_MspInit+0x98>)
{
 80011ee:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80011f0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f2:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	699a      	ldr	r2, [r3, #24]
 80011fc:	f002 0201 	and.w	r2, r2, #1
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	69da      	ldr	r2, [r3, #28]
 8001206:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800120a:	61da      	str	r2, [r3, #28]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001216:	f000 fc79 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	f06f 000b 	mvn.w	r0, #11
 8001220:	4611      	mov	r1, r2
 8001222:	f000 fc85 	bl	8001b30 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	f06f 000a 	mvn.w	r0, #10
 800122c:	4611      	mov	r1, r2
 800122e:	f000 fc7f 	bl	8001b30 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	f06f 0009 	mvn.w	r0, #9
 8001238:	4611      	mov	r1, r2
 800123a:	f000 fc79 	bl	8001b30 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	f06f 0004 	mvn.w	r0, #4
 8001244:	4611      	mov	r1, r2
 8001246:	f000 fc73 	bl	8001b30 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	f06f 0003 	mvn.w	r0, #3
 8001250:	4611      	mov	r1, r2
 8001252:	f000 fc6d 	bl	8001b30 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	f06f 0001 	mvn.w	r0, #1
 800125c:	4611      	mov	r1, r2
 800125e:	f000 fc67 	bl	8001b30 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	4611      	mov	r1, r2
 800126a:	f000 fc61 	bl	8001b30 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_MspInit+0x9c>)
 8001270:	6853      	ldr	r3, [r2, #4]
 8001272:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001276:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800127a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127c:	b003      	add	sp, #12
 800127e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	40010000 	.word	0x40010000

0800128c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800128c:	b507      	push	{r0, r1, r2, lr}

  if(hrtc->Instance==RTC)
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_RTC_MspInit+0x30>)
 8001290:	6802      	ldr	r2, [r0, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d10e      	bne.n	80012b4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001296:	f000 fda3 	bl	8001de0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_RTC_MspInit+0x34>)
 800129c:	69da      	ldr	r2, [r3, #28]
 800129e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80012a2:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012a4:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <HAL_RTC_MspInit+0x38>)
 80012b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012b4:	b003      	add	sp, #12
 80012b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ba:	bf00      	nop
 80012bc:	40002800 	.word	0x40002800
 80012c0:	40021000 	.word	0x40021000
 80012c4:	4242043c 	.word	0x4242043c

080012c8 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 80012ca:	6802      	ldr	r2, [r0, #0]
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_SPI_MspInit+0x3c>)
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d115      	bne.n	80012fe <HAL_SPI_MspInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d2:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80012d6:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012de:	61da      	str	r2, [r3, #28]
 80012e0:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <HAL_SPI_MspInit+0x40>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80012ec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80012f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f000 fc75 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012fe:	b007      	add	sp, #28
 8001300:	f85d fb04 	ldr.w	pc, [sp], #4
 8001304:	40003800 	.word	0x40003800
 8001308:	40010c00 	.word	0x40010c00

0800130c <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800130c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM2)
 800130e:	6803      	ldr	r3, [r0, #0]
 8001310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001314:	d114      	bne.n	8001340 <HAL_TIM_Encoder_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001316:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800131a:	69da      	ldr	r2, [r3, #28]
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ROTARY_A_Pin|ROTARY_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	61da      	str	r2, [r3, #28]
 8001324:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	4808      	ldr	r0, [pc, #32]	; (8001348 <HAL_TIM_Encoder_MspInit+0x3c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ROTARY_A_Pin|ROTARY_B_Pin;
 8001330:	2303      	movs	r3, #3
 8001332:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001338:	2301      	movs	r3, #1
 800133a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f000 fc54 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001340:	b007      	add	sp, #28
 8001342:	f85d fb04 	ldr.w	pc, [sp], #4
 8001346:	bf00      	nop
 8001348:	40010800 	.word	0x40010800

0800134c <NMI_Handler>:
 800134c:	4770      	bx	lr

0800134e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800134e:	e7fe      	b.n	800134e <HardFault_Handler>

08001350 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler>

08001352 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001352:	e7fe      	b.n	8001352 <BusFault_Handler>

08001354 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler>

08001356 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001358:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800135a:	f003 f8f1 	bl	8004540 <xTaskGetSchedulerState>
 800135e:	2801      	cmp	r0, #1
 8001360:	d001      	beq.n	8001366 <SysTick_Handler+0xe>
		xPortSysTickHandler();
 8001362:	f001 ff4f 	bl	8003204 <xPortSysTickHandler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f000 fbad 	bl	8001ac4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800136e:	f000 bc36 	b.w	8001bde <HAL_SYSTICK_IRQHandler>
	...

08001374 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <SystemInit+0x40>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800137e:	6859      	ldr	r1, [r3, #4]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <SystemInit+0x44>)
 8001382:	400a      	ands	r2, r1
 8001384:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800138c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001390:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001398:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80013a0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80013a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80013a6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <SystemInit+0x48>)
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	f8ff0000 	.word	0xf8ff0000
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <write>:
#define Max_Column	0x3F			// 256/4-1
#define Max_Row		0x3F			// 64-1
#define	Brightness	0x0F

uint16_t gram[64][64] = { 0 }; // row : 64 col: 64 *4 = 256   u16 = [p1,p2,p3,p4]
static void write(uint8_t bytes, uint8_t is_data) {
 80013c0:	b513      	push	{r0, r1, r4, lr}
 80013c2:	460c      	mov	r4, r1
	uint8_t tmp = bytes;
 80013c4:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <write+0x44>)
 80013d0:	f000 fcfc 	bl	8001dcc <HAL_GPIO_WritePin>
	if (is_data) {
 80013d4:	b1a4      	cbz	r4, 8001400 <write+0x40>
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, SET);
 80013d6:	2201      	movs	r2, #1
	}
	/* We are sending commands */
	else {
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <write+0x48>)
 80013dc:	f000 fcf6 	bl	8001dcc <HAL_GPIO_WritePin>
	}
	HAL_SPI_Transmit(&hspi2, &tmp, 1, 1000);
 80013e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e4:	f10d 0107 	add.w	r1, sp, #7
 80013e8:	2201      	movs	r2, #1
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <write+0x4c>)
 80013ec:	f001 fb83 	bl	8002af6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <write+0x44>)
 80013f8:	f000 fce8 	bl	8001dcc <HAL_GPIO_WritePin>
}
 80013fc:	b002      	add	sp, #8
 80013fe:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 8001400:	4622      	mov	r2, r4
 8001402:	e7e9      	b.n	80013d8 <write+0x18>
 8001404:	40010c00 	.word	0x40010c00
 8001408:	40011000 	.word	0x40011000
 800140c:	2000450c 	.word	0x2000450c

08001410 <OLED_DrawPoint>:
//   y: OLED螢幕y座標
//	 mode: 0x00(滅) 0x01(亮)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t mode) {

	if (x > 255 || y > 63)
 8001410:	293f      	cmp	r1, #63	; 0x3f
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t mode) {
 8001412:	b510      	push	{r4, lr}
	if (x > 255 || y > 63)
 8001414:	d811      	bhi.n	800143a <OLED_DrawPoint+0x2a>
		return;
	uint16_t point = 0x000f;
	uint8_t group = x >> 2;
 8001416:	0884      	lsrs	r4, r0, #2
	uint8_t group_bit = 3 - (x % 4);
 8001418:	43c0      	mvns	r0, r0
	point = point << (group_bit * 4);
 800141a:	f000 0303 	and.w	r3, r0, #3
 800141e:	0098      	lsls	r0, r3, #2
 8001420:	230f      	movs	r3, #15
 8001422:	0189      	lsls	r1, r1, #6
 8001424:	4083      	lsls	r3, r0
 8001426:	b29b      	uxth	r3, r3
 8001428:	4806      	ldr	r0, [pc, #24]	; (8001444 <OLED_DrawPoint+0x34>)

	if (!mode) {
		point = ~point;
		gram[y][group] &= point;
 800142a:	4421      	add	r1, r4
	if (!mode) {
 800142c:	b932      	cbnz	r2, 800143c <OLED_DrawPoint+0x2c>
		gram[y][group] &= point;
 800142e:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8001432:	ea22 0303 	bic.w	r3, r2, r3
	} else {
		gram[y][group] |= point;
 8001436:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800143a:	bd10      	pop	{r4, pc}
 800143c:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8001440:	4313      	orrs	r3, r2
 8001442:	e7f8      	b.n	8001436 <OLED_DrawPoint+0x26>
 8001444:	20000748 	.word	0x20000748

08001448 <OLED_FillBlock>:
void OLED_FillBlock(unsigned char a, unsigned char b,unsigned char c, unsigned char d,unsigned char Data){
 8001448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800144c:	4607      	mov	r7, r0
 800144e:	4688      	mov	r8, r1
 8001450:	461e      	mov	r6, r3
	for(int y=c;y<d;y++)
 8001452:	4614      	mov	r4, r2
void OLED_FillBlock(unsigned char a, unsigned char b,unsigned char c, unsigned char d,unsigned char Data){
 8001454:	f89d 9020 	ldrb.w	r9, [sp, #32]
	for(int y=c;y<d;y++)
 8001458:	42b4      	cmp	r4, r6
 800145a:	db01      	blt.n	8001460 <OLED_FillBlock+0x18>
}
 800145c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for(int x=a;x<b;x++)
 8001460:	463d      	mov	r5, r7
			OLED_DrawPoint(x,y,Data);
 8001462:	fa5f fa84 	uxtb.w	sl, r4
		for(int x=a;x<b;x++)
 8001466:	4545      	cmp	r5, r8
 8001468:	db01      	blt.n	800146e <OLED_FillBlock+0x26>
	for(int y=c;y<d;y++)
 800146a:	3401      	adds	r4, #1
 800146c:	e7f4      	b.n	8001458 <OLED_FillBlock+0x10>
			OLED_DrawPoint(x,y,Data);
 800146e:	b2e8      	uxtb	r0, r5
 8001470:	464a      	mov	r2, r9
 8001472:	4651      	mov	r1, sl
 8001474:	f7ff ffcc 	bl	8001410 <OLED_DrawPoint>
		for(int x=a;x<b;x++)
 8001478:	3501      	adds	r5, #1
 800147a:	e7f4      	b.n	8001466 <OLED_FillBlock+0x1e>

0800147c <OLED_FillRam>:
void OLED_FillRam(unsigned char Data) {
 800147c:	b507      	push	{r0, r1, r2, lr}
	OLED_FillBlock(0x00, Max_Column, 0x00, Max_Row,Data);
 800147e:	233f      	movs	r3, #63	; 0x3f
 8001480:	2200      	movs	r2, #0
 8001482:	9000      	str	r0, [sp, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	4610      	mov	r0, r2
 8001488:	f7ff ffde 	bl	8001448 <OLED_FillBlock>
}
 800148c:	b003      	add	sp, #12
 800148e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001494 <OLED_RefreshGram>:
	point = (gram[y][group] & (point << (group_bit * 4))) >> (group_bit * 4);
	point = point & 0x00ff;
	return point;

}
void OLED_RefreshGram() {
 8001494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Write_Command(0x15);			// Set Column Address
 8001496:	2100      	movs	r1, #0
 8001498:	2015      	movs	r0, #21
 800149a:	f7ff ff91 	bl	80013c0 <write>
	Write_Data(a);				//   Default => 0x00
 800149e:	2101      	movs	r1, #1
 80014a0:	201c      	movs	r0, #28
 80014a2:	f7ff ff8d 	bl	80013c0 <write>
	Write_Data(b);				//   Default => 0x77
 80014a6:	2101      	movs	r1, #1
 80014a8:	205b      	movs	r0, #91	; 0x5b
 80014aa:	f7ff ff89 	bl	80013c0 <write>
	Write_Command(0x75);			// Set Row Address
 80014ae:	2100      	movs	r1, #0
 80014b0:	2075      	movs	r0, #117	; 0x75
 80014b2:	f7ff ff85 	bl	80013c0 <write>
	Write_Data(a);				//   Default => 0x00
 80014b6:	2101      	movs	r1, #1
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff ff81 	bl	80013c0 <write>
	Write_Data(b);				//   Default => 0x7F
 80014be:	2101      	movs	r1, #1
 80014c0:	203f      	movs	r0, #63	; 0x3f
 80014c2:	f7ff ff7d 	bl	80013c0 <write>
	Write_Command(0x5C);			// Enable MCU to Write into RAM
 80014c6:	2100      	movs	r1, #0
 80014c8:	205c      	movs	r0, #92	; 0x5c
 80014ca:	f7ff ff79 	bl	80013c0 <write>
 80014ce:	2500      	movs	r5, #0
 80014d0:	4f0a      	ldr	r7, [pc, #40]	; (80014fc <OLED_RefreshGram+0x68>)
void OLED_RefreshGram() {
 80014d2:	2400      	movs	r4, #0
 80014d4:	197e      	adds	r6, r7, r5
	Set_Column_Address(Shift + a, Shift + b);
	Set_Row_Address(c, d);
	Set_Write_RAM();
	for (int y = 0; y < (d - c+1); y++) {
		for (int x = 0; x < (b - a+1); x++) {
			Write_Data((gram[y][x] & 0xff00) >> 8); //draw 3,4 point
 80014d6:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 80014da:	2101      	movs	r1, #1
 80014dc:	0a00      	lsrs	r0, r0, #8
 80014de:	f7ff ff6f 	bl	80013c0 <write>
			Write_Data(gram[y][x] & 0x00ff); 		//draw 1,2 point
 80014e2:	f816 0014 	ldrb.w	r0, [r6, r4, lsl #1]
 80014e6:	2101      	movs	r1, #1
		for (int x = 0; x < (b - a+1); x++) {
 80014e8:	3401      	adds	r4, #1
			Write_Data(gram[y][x] & 0x00ff); 		//draw 1,2 point
 80014ea:	f7ff ff69 	bl	80013c0 <write>
		for (int x = 0; x < (b - a+1); x++) {
 80014ee:	2c40      	cmp	r4, #64	; 0x40
 80014f0:	d1f1      	bne.n	80014d6 <OLED_RefreshGram+0x42>
 80014f2:	3580      	adds	r5, #128	; 0x80
	for (int y = 0; y < (d - c+1); y++) {
 80014f4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80014f8:	d1eb      	bne.n	80014d2 <OLED_RefreshGram+0x3e>
 80014fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014fc:	20000748 	.word	0x20000748

08001500 <OLED_Clear>:
{
 8001500:	b508      	push	{r3, lr}
	OLED_FillRam(0x00);
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff ffba 	bl	800147c <OLED_FillRam>
}
 8001508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OLED_RefreshGram();
 800150c:	f7ff bfc2 	b.w	8001494 <OLED_RefreshGram>

08001510 <OLED_ShowChar>:
//   chr: 字元
//   f_w:字元寬度像素
//   f_h:字元高度像素
//	 mode: 0x00(滅) 0x01(亮)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 8001510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001514:	b085      	sub	sp, #20
 8001516:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 800151a:	9300      	str	r3, [sp, #0]
	uint8_t temp,t,t1;
	uint8_t y0=y;
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 800151c:	f016 0307 	ands.w	r3, r6, #7
 8001520:	bf18      	it	ne
 8001522:	2301      	movne	r3, #1
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 8001524:	4688      	mov	r8, r1
	uint8_t csize=(f_h/8+((f_h%8)?1:0))*f_w;//得到自由分辨字符所占的字节数
 8001526:	9900      	ldr	r1, [sp, #0]
 8001528:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 800152c:	434b      	muls	r3, r1
 800152e:	210c      	movs	r1, #12
 8001530:	b2db      	uxtb	r3, r3
 8001532:	9301      	str	r3, [sp, #4]
	chr=chr-' ';//得到偏移后的值
 8001534:	3a20      	subs	r2, #32
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <OLED_ShowChar+0xb0>)
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	fb01 3302 	mla	r3, r1, r2, r3
 800153e:	2106      	movs	r1, #6
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 8001540:	4605      	mov	r5, r0
	for(t=0;t<csize;t++)
 8001542:	4644      	mov	r4, r8
 8001544:	f04f 0a00 	mov.w	sl, #0
 8001548:	9303      	str	r3, [sp, #12]
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <OLED_ShowChar+0xb4>)
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t f_w, uint8_t f_h,uint8_t mode){
 800154c:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
 8001550:	fb01 3302 	mla	r3, r1, r2, r3
 8001554:	9302      	str	r3, [sp, #8]
	for(t=0;t<csize;t++)
 8001556:	9b01      	ldr	r3, [sp, #4]
 8001558:	fa5f f28a 	uxtb.w	r2, sl
 800155c:	4293      	cmp	r3, r2
 800155e:	d802      	bhi.n	8001566 <OLED_ShowChar+0x56>
				x++;
				break;
			}
		}
	}
}
 8001560:	b005      	add	sp, #20
 8001562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(f_w==6&&f_h==8)temp=asc2_0608[chr][t];		//调用0608ascii字体
 8001566:	9b00      	ldr	r3, [sp, #0]
 8001568:	2b06      	cmp	r3, #6
 800156a:	d1f9      	bne.n	8001560 <OLED_ShowChar+0x50>
 800156c:	2e08      	cmp	r6, #8
 800156e:	d120      	bne.n	80015b2 <OLED_ShowChar+0xa2>
 8001570:	9b02      	ldr	r3, [sp, #8]
 8001572:	f104 0908 	add.w	r9, r4, #8
		else if(f_w==6&&f_h==12)temp=asc2_0612[chr][t];	//调用0612ascii字体
 8001576:	f813 700a 	ldrb.w	r7, [r3, sl]
 800157a:	fa5f f989 	uxtb.w	r9, r9
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800157e:	063b      	lsls	r3, r7, #24
			else OLED_DrawPoint(x,y,!mode);
 8001580:	bf58      	it	pl
 8001582:	fabb f28b 	clzpl	r2, fp
 8001586:	4621      	mov	r1, r4
			y++;
 8001588:	f104 0401 	add.w	r4, r4, #1
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800158c:	bf4c      	ite	mi
 800158e:	465a      	movmi	r2, fp
			else OLED_DrawPoint(x,y,!mode);
 8001590:	0952      	lsrpl	r2, r2, #5
 8001592:	4628      	mov	r0, r5
			y++;
 8001594:	b2e4      	uxtb	r4, r4
			else OLED_DrawPoint(x,y,!mode);
 8001596:	f7ff ff3b 	bl	8001410 <OLED_DrawPoint>
			if((y-y0)==f_h)
 800159a:	eba4 0208 	sub.w	r2, r4, r8
			temp<<=1;
 800159e:	007f      	lsls	r7, r7, #1
			if((y-y0)==f_h)
 80015a0:	42b2      	cmp	r2, r6
			temp<<=1;
 80015a2:	b2ff      	uxtb	r7, r7
			if((y-y0)==f_h)
 80015a4:	d109      	bne.n	80015ba <OLED_ShowChar+0xaa>
				y=y0;
 80015a6:	4644      	mov	r4, r8
				x++;
 80015a8:	3501      	adds	r5, #1
 80015aa:	b2ed      	uxtb	r5, r5
 80015ac:	f10a 0a01 	add.w	sl, sl, #1
 80015b0:	e7d1      	b.n	8001556 <OLED_ShowChar+0x46>
		else if(f_w==6&&f_h==12)temp=asc2_0612[chr][t];	//调用0612ascii字体
 80015b2:	2e0c      	cmp	r6, #12
 80015b4:	d1d4      	bne.n	8001560 <OLED_ShowChar+0x50>
 80015b6:	9b03      	ldr	r3, [sp, #12]
 80015b8:	e7db      	b.n	8001572 <OLED_ShowChar+0x62>
		for(t1=0;t1<8;t1++)
 80015ba:	45a1      	cmp	r9, r4
 80015bc:	d1df      	bne.n	800157e <OLED_ShowChar+0x6e>
 80015be:	e7f5      	b.n	80015ac <OLED_ShowChar+0x9c>
 80015c0:	08008580 	.word	0x08008580
 80015c4:	08008346 	.word	0x08008346

080015c8 <OLED_ShowNum>:
//   len:數字的位數，如1000,len=4
//   f_w:字寬度像素
//   f_h:字高度像素
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void OLED_ShowNum(uint8_t x,uint8_t y,uint32_t num,uint8_t len,uint8_t f_w,uint8_t f_h)
{
 80015c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t t,temp;
	uint8_t enshow=0;
	for(t=0;t<len;t++)
 80015cc:	2400      	movs	r4, #0
{
 80015ce:	4698      	mov	r8, r3
 80015d0:	4605      	mov	r5, r0
 80015d2:	4689      	mov	r9, r1
	uint8_t enshow=0;
 80015d4:	46a2      	mov	sl, r4
 80015d6:	270a      	movs	r7, #10
{
 80015d8:	b085      	sub	sp, #20
 80015da:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80015de:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80015e2:	9203      	str	r2, [sp, #12]
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	f108 3bff 	add.w	fp, r8, #4294967295
	for(t=0;t<len;t++)
 80015ea:	4544      	cmp	r4, r8
 80015ec:	d102      	bne.n	80015f4 <OLED_ShowNum+0x2c>
			else
				enshow=1;
		}
		OLED_ShowChar(x+(f_w)*t,y,temp+'0',f_w,f_h,1);
	}
}
 80015ee:	b005      	add	sp, #20
 80015f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t result=1;
 80015f4:	2201      	movs	r2, #1
 80015f6:	ebab 0304 	sub.w	r3, fp, r4
 80015fa:	b2db      	uxtb	r3, r3
	while(n--)result*=m;
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2bff      	cmp	r3, #255	; 0xff
 8001602:	d11b      	bne.n	800163c <OLED_ShowNum+0x74>
		temp=(num/mypow(10,len-t-1))%10;
 8001604:	9b03      	ldr	r3, [sp, #12]
 8001606:	fbb3 f2f2 	udiv	r2, r3, r2
 800160a:	fbb2 f3f7 	udiv	r3, r2, r7
 800160e:	fb07 2213 	mls	r2, r7, r3, r2
 8001612:	b2d3      	uxtb	r3, r2
		if(enshow==0&&t<(len-1))
 8001614:	f1ba 0f00 	cmp.w	sl, #0
 8001618:	d113      	bne.n	8001642 <OLED_ShowNum+0x7a>
 800161a:	45a3      	cmp	fp, r4
 800161c:	dd11      	ble.n	8001642 <OLED_ShowNum+0x7a>
 800161e:	2101      	movs	r1, #1
			if(temp==0)
 8001620:	b972      	cbnz	r2, 8001640 <OLED_ShowNum+0x78>
				OLED_ShowChar(x+(f_w)*t,y,' ',f_w,f_h,1);
 8001622:	9b02      	ldr	r3, [sp, #8]
 8001624:	2220      	movs	r2, #32
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4633      	mov	r3, r6
 800162a:	9101      	str	r1, [sp, #4]
		OLED_ShowChar(x+(f_w)*t,y,temp+'0',f_w,f_h,1);
 800162c:	4628      	mov	r0, r5
 800162e:	4649      	mov	r1, r9
 8001630:	4435      	add	r5, r6
 8001632:	f7ff ff6d 	bl	8001510 <OLED_ShowChar>
 8001636:	3401      	adds	r4, #1
 8001638:	b2ed      	uxtb	r5, r5
 800163a:	e7d6      	b.n	80015ea <OLED_ShowNum+0x22>
	while(n--)result*=m;
 800163c:	437a      	muls	r2, r7
 800163e:	e7dd      	b.n	80015fc <OLED_ShowNum+0x34>
 8001640:	468a      	mov	sl, r1
		OLED_ShowChar(x+(f_w)*t,y,temp+'0',f_w,f_h,1);
 8001642:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001646:	2301      	movs	r3, #1
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	9b02      	ldr	r3, [sp, #8]
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	4633      	mov	r3, r6
 8001652:	e7eb      	b.n	800162c <OLED_ShowNum+0x64>

08001654 <OLED_ShowPicture>:
//   p_w:圖片寬度像素
//   p_h:圖片高度像素
//	 mode: 0x00(滅) 0x01(亮)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void OLED_ShowPicture(uint8_t x,uint8_t y,const uint8_t *p,uint8_t p_w,uint8_t p_h)
{
 8001654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001658:	468a      	mov	sl, r1
 800165a:	4698      	mov	r8, r3
 800165c:	b087      	sub	sp, #28
 800165e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	uint8_t temp,i,col,row;
	uint8_t y0=y;
	uint8_t width=p_w;
	if(x+p_w>OLED_PIXEL_WIDTH)width=OLED_PIXEL_WIDTH-p_w;//实际显示宽度
 8001662:	18c3      	adds	r3, r0, r3
 8001664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001668:	bfc8      	it	gt
 800166a:	f1c8 0800 	rsbgt	r8, r8, #0
	uint8_t high=p_h;
	if(y+p_h>OLED_PIXEL_HEIGHT)high=OLED_PIXEL_HEIGHT-p_h;//实际显示高度
 800166e:	eb01 030a 	add.w	r3, r1, sl
	if(x+p_w>OLED_PIXEL_WIDTH)width=OLED_PIXEL_WIDTH-p_w;//实际显示宽度
 8001672:	bfc8      	it	gt
 8001674:	fa5f f888 	uxtbgt.w	r8, r8
	if(y+p_h>OLED_PIXEL_HEIGHT)high=OLED_PIXEL_HEIGHT-p_h;//实际显示高度
 8001678:	2b40      	cmp	r3, #64	; 0x40
	uint8_t high=p_h;
 800167a:	bfd2      	itee	le
 800167c:	460d      	movle	r5, r1
	if(y+p_h>OLED_PIXEL_HEIGHT)high=OLED_PIXEL_HEIGHT-p_h;//实际显示高度
 800167e:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 8001682:	b2ed      	uxtbgt	r5, r5
	uint8_t exp_col_bytes=(p_h/8+((p_h%8)?1:0));//显示一列的字节数
	uint8_t act_col_bytes=(high/8+((high%8)?1:0));//实际显示一列的字节数
 8001684:	f015 0307 	ands.w	r3, r5, #7
 8001688:	bf18      	it	ne
 800168a:	2301      	movne	r3, #1
 800168c:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 8001690:	9301      	str	r3, [sp, #4]
	uint8_t exp_col_bytes=(p_h/8+((p_h%8)?1:0));//显示一列的字节数
 8001692:	f011 0307 	ands.w	r3, r1, #7
 8001696:	bf18      	it	ne
 8001698:	2301      	movne	r3, #1
 800169a:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
 800169e:	9303      	str	r3, [sp, #12]
{
 80016a0:	4606      	mov	r6, r0
 80016a2:	4617      	mov	r7, r2

	for(row=0;row<width;row++)//列++
 80016a4:	4654      	mov	r4, sl
 80016a6:	2300      	movs	r3, #0
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4590      	cmp	r8, r2
 80016ac:	d92e      	bls.n	800170c <OLED_ShowPicture+0xb8>
 80016ae:	9a01      	ldr	r2, [sp, #4]
 80016b0:	46bb      	mov	fp, r7
 80016b2:	443a      	add	r2, r7
 80016b4:	9204      	str	r2, [sp, #16]
 80016b6:	e01e      	b.n	80016f6 <OLED_ShowPicture+0xa2>
 80016b8:	f104 0208 	add.w	r2, r4, #8
 80016bc:	b2d2      	uxtb	r2, r2
	{
		for(col=0;col<act_col_bytes;col++)//显示一列
		{
			temp = p[col+row*exp_col_bytes];
 80016be:	f81b 9b01 	ldrb.w	r9, [fp], #1
 80016c2:	9202      	str	r2, [sp, #8]
			for(i=0;i<8;i++)
			{
				if(temp&0x80)OLED_DrawPoint(x,y,1);
 80016c4:	f019 0f80 	tst.w	r9, #128	; 0x80
				else OLED_DrawPoint(x,y,0);
 80016c8:	4621      	mov	r1, r4
				temp<<=1;
				y++;
 80016ca:	f104 0401 	add.w	r4, r4, #1
				if(temp&0x80)OLED_DrawPoint(x,y,1);
 80016ce:	bf14      	ite	ne
 80016d0:	2201      	movne	r2, #1
				else OLED_DrawPoint(x,y,0);
 80016d2:	2200      	moveq	r2, #0
 80016d4:	4630      	mov	r0, r6
				y++;
 80016d6:	b2e4      	uxtb	r4, r4
 80016d8:	9305      	str	r3, [sp, #20]
				else OLED_DrawPoint(x,y,0);
 80016da:	f7ff fe99 	bl	8001410 <OLED_DrawPoint>
				if((y-y0)==high)
 80016de:	eba4 020a 	sub.w	r2, r4, sl
				temp<<=1;
 80016e2:	ea4f 0949 	mov.w	r9, r9, lsl #1
				if((y-y0)==high)
 80016e6:	42aa      	cmp	r2, r5
				else OLED_DrawPoint(x,y,0);
 80016e8:	9b05      	ldr	r3, [sp, #20]
				temp<<=1;
 80016ea:	fa5f f989 	uxtb.w	r9, r9
				if((y-y0)==high)
 80016ee:	d109      	bne.n	8001704 <OLED_ShowPicture+0xb0>
				{
					y=y0;
 80016f0:	4654      	mov	r4, sl
					x++;
 80016f2:	3601      	adds	r6, #1
 80016f4:	b2f6      	uxtb	r6, r6
		for(col=0;col<act_col_bytes;col++)//显示一列
 80016f6:	9a04      	ldr	r2, [sp, #16]
 80016f8:	4593      	cmp	fp, r2
 80016fa:	d1dd      	bne.n	80016b8 <OLED_ShowPicture+0x64>
 80016fc:	9a03      	ldr	r2, [sp, #12]
 80016fe:	3301      	adds	r3, #1
 8001700:	4417      	add	r7, r2
 8001702:	e7d1      	b.n	80016a8 <OLED_ShowPicture+0x54>
			for(i=0;i<8;i++)
 8001704:	9a02      	ldr	r2, [sp, #8]
 8001706:	4294      	cmp	r4, r2
 8001708:	d1dc      	bne.n	80016c4 <OLED_ShowPicture+0x70>
 800170a:	e7f4      	b.n	80016f6 <OLED_ShowPicture+0xa2>
					break;
				}
			}
		}
	}
}
 800170c:	b007      	add	sp, #28
 800170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001714 <OLED_Init>:
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  OLED Initialization
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void OLED_Init() {
 8001714:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t dummy = 0x0;
 8001716:	2400      	movs	r4, #0


	//LCD_RST_SetLow();
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 8001718:	4e7f      	ldr	r6, [pc, #508]	; (8001918 <OLED_Init+0x204>)
 800171a:	4622      	mov	r2, r4
	uint8_t dummy = 0x0;
 800171c:	ad02      	add	r5, sp, #8
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 800171e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001722:	4630      	mov	r0, r6
	uint8_t dummy = 0x0;
 8001724:	f805 4d01 	strb.w	r4, [r5, #-1]!
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,RESET);
 8001728:	f000 fb50 	bl	8001dcc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800172c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001730:	f000 f9da 	bl	8001ae8 <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin,SET);
 8001734:	4630      	mov	r0, r6
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173c:	f000 fb46 	bl	8001dcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &dummy, 1, 1000);
 8001740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001744:	2201      	movs	r2, #1
 8001746:	4629      	mov	r1, r5
 8001748:	4874      	ldr	r0, [pc, #464]	; (800191c <OLED_Init+0x208>)
 800174a:	f001 f9d4 	bl	8002af6 <HAL_SPI_Transmit>
	Write_Command(0xFD);			// Set Command Lock
 800174e:	4621      	mov	r1, r4
 8001750:	20fd      	movs	r0, #253	; 0xfd
 8001752:	f7ff fe35 	bl	80013c0 <write>
	Write_Data(0x12 | d);			//   Default => 0x12
 8001756:	2101      	movs	r1, #1
 8001758:	2012      	movs	r0, #18
 800175a:	f7ff fe31 	bl	80013c0 <write>
	Write_Command(0xAE | d);			// Set Display On/Off
 800175e:	4621      	mov	r1, r4
 8001760:	20ae      	movs	r0, #174	; 0xae
 8001762:	f7ff fe2d 	bl	80013c0 <write>
	Write_Command(0xB3);	// Set Display Clock Divider / Oscillator Frequency
 8001766:	4621      	mov	r1, r4
 8001768:	20b3      	movs	r0, #179	; 0xb3
 800176a:	f7ff fe29 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0xD0
 800176e:	2101      	movs	r1, #1
 8001770:	2091      	movs	r0, #145	; 0x91
 8001772:	f7ff fe25 	bl	80013c0 <write>
	Write_Command(0xCA);			// Set Multiplex Ratio
 8001776:	4621      	mov	r1, r4
 8001778:	20ca      	movs	r0, #202	; 0xca
 800177a:	f7ff fe21 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0x7F (1/128 Duty)
 800177e:	2101      	movs	r1, #1
 8001780:	203f      	movs	r0, #63	; 0x3f
 8001782:	f7ff fe1d 	bl	80013c0 <write>
	Write_Command(0xA2);			// Set Vertical Scroll by Row
 8001786:	4621      	mov	r1, r4
 8001788:	20a2      	movs	r0, #162	; 0xa2
 800178a:	f7ff fe19 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0x00
 800178e:	4620      	mov	r0, r4
 8001790:	2101      	movs	r1, #1
 8001792:	f7ff fe15 	bl	80013c0 <write>
	Write_Command(0xA1);			// Set Vertical Scroll by RAM
 8001796:	4621      	mov	r1, r4
 8001798:	20a1      	movs	r0, #161	; 0xa1
 800179a:	f7ff fe11 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0x00
 800179e:	4620      	mov	r0, r4
 80017a0:	2101      	movs	r1, #1
 80017a2:	f7ff fe0d 	bl	80013c0 <write>
	Write_Command(0xA0);			// Set Re-Map / Dual COM Line Mode
 80017a6:	4621      	mov	r1, r4
 80017a8:	20a0      	movs	r0, #160	; 0xa0
 80017aa:	f7ff fe09 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0x40
 80017ae:	2101      	movs	r1, #1
 80017b0:	2014      	movs	r0, #20
 80017b2:	f7ff fe05 	bl	80013c0 <write>
	Write_Data(0x11);			//   Default => 0x01 (Disable Dual COM Mode)
 80017b6:	2101      	movs	r1, #1
 80017b8:	2011      	movs	r0, #17
 80017ba:	f7ff fe01 	bl	80013c0 <write>
	Write_Command(0xB5);			// General Purpose IO
 80017be:	4621      	mov	r1, r4
 80017c0:	20b5      	movs	r0, #181	; 0xb5
 80017c2:	f7ff fdfd 	bl	80013c0 <write>
	Write_Data(d);			//   Default => 0x0A (GPIO Pins output Low Level.)
 80017c6:	4620      	mov	r0, r4
 80017c8:	2101      	movs	r1, #1
 80017ca:	f7ff fdf9 	bl	80013c0 <write>
	Write_Command(0xAB);			// Function Selection
 80017ce:	4621      	mov	r1, r4
 80017d0:	20ab      	movs	r0, #171	; 0xab
 80017d2:	f7ff fdf5 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0x01
 80017d6:	2101      	movs	r1, #1
 80017d8:	4608      	mov	r0, r1
 80017da:	f7ff fdf1 	bl	80013c0 <write>
	Write_Command(0xB4);			// Display Enhancement
 80017de:	4621      	mov	r1, r4
 80017e0:	20b4      	movs	r0, #180	; 0xb4
 80017e2:	f7ff fded 	bl	80013c0 <write>
	Write_Data(0xA0 | a);			//   Default => 0xA2
 80017e6:	2101      	movs	r1, #1
 80017e8:	20a0      	movs	r0, #160	; 0xa0
 80017ea:	f7ff fde9 	bl	80013c0 <write>
	Write_Data(0x05 | b);			//   Default => 0xB5
 80017ee:	2101      	movs	r1, #1
 80017f0:	20fd      	movs	r0, #253	; 0xfd
 80017f2:	f7ff fde5 	bl	80013c0 <write>
	Write_Command(0xC1);			// Set Contrast Current
 80017f6:	4621      	mov	r1, r4
 80017f8:	20c1      	movs	r0, #193	; 0xc1
 80017fa:	f7ff fde1 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0x7F
 80017fe:	2101      	movs	r1, #1
 8001800:	209f      	movs	r0, #159	; 0x9f
 8001802:	f7ff fddd 	bl	80013c0 <write>
	Write_Command(0xC7);			// Master Contrast Current Control
 8001806:	4621      	mov	r1, r4
 8001808:	20c7      	movs	r0, #199	; 0xc7
 800180a:	f7ff fdd9 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0x0f (Maximum)
 800180e:	2101      	movs	r1, #1
 8001810:	200f      	movs	r0, #15
 8001812:	f7ff fdd5 	bl	80013c0 <write>
	Write_Command(0xB8);			// Set Gray Scale Table
 8001816:	4621      	mov	r1, r4
 8001818:	20b8      	movs	r0, #184	; 0xb8
 800181a:	f7ff fdd1 	bl	80013c0 <write>
	Write_Data(0x0C);			//   Gray Scale Level 1
 800181e:	2101      	movs	r1, #1
 8001820:	200c      	movs	r0, #12
 8001822:	f7ff fdcd 	bl	80013c0 <write>
	Write_Data(0x18);			//   Gray Scale Level 2
 8001826:	2101      	movs	r1, #1
 8001828:	2018      	movs	r0, #24
 800182a:	f7ff fdc9 	bl	80013c0 <write>
	Write_Data(0x24);			//   Gray Scale Level 3
 800182e:	2101      	movs	r1, #1
 8001830:	2024      	movs	r0, #36	; 0x24
 8001832:	f7ff fdc5 	bl	80013c0 <write>
	Write_Data(0x30);			//   Gray Scale Level 4
 8001836:	2101      	movs	r1, #1
 8001838:	2030      	movs	r0, #48	; 0x30
 800183a:	f7ff fdc1 	bl	80013c0 <write>
	Write_Data(0x3C);			//   Gray Scale Level 5
 800183e:	2101      	movs	r1, #1
 8001840:	203c      	movs	r0, #60	; 0x3c
 8001842:	f7ff fdbd 	bl	80013c0 <write>
	Write_Data(0x48);			//   Gray Scale Level 6
 8001846:	2101      	movs	r1, #1
 8001848:	2048      	movs	r0, #72	; 0x48
 800184a:	f7ff fdb9 	bl	80013c0 <write>
	Write_Data(0x54);			//   Gray Scale Level 7
 800184e:	2101      	movs	r1, #1
 8001850:	2054      	movs	r0, #84	; 0x54
 8001852:	f7ff fdb5 	bl	80013c0 <write>
	Write_Data(0x60);			//   Gray Scale Level 8
 8001856:	2101      	movs	r1, #1
 8001858:	2060      	movs	r0, #96	; 0x60
 800185a:	f7ff fdb1 	bl	80013c0 <write>
	Write_Data(0x6C);			//   Gray Scale Level 9
 800185e:	2101      	movs	r1, #1
 8001860:	206c      	movs	r0, #108	; 0x6c
 8001862:	f7ff fdad 	bl	80013c0 <write>
	Write_Data(0x78);			//   Gray Scale Level 10
 8001866:	2101      	movs	r1, #1
 8001868:	2078      	movs	r0, #120	; 0x78
 800186a:	f7ff fda9 	bl	80013c0 <write>
	Write_Data(0x84);			//   Gray Scale Level 11
 800186e:	2101      	movs	r1, #1
 8001870:	2084      	movs	r0, #132	; 0x84
 8001872:	f7ff fda5 	bl	80013c0 <write>
	Write_Data(0x90);			//   Gray Scale Level 12
 8001876:	2101      	movs	r1, #1
 8001878:	2090      	movs	r0, #144	; 0x90
 800187a:	f7ff fda1 	bl	80013c0 <write>
	Write_Data(0x9C);			//   Gray Scale Level 13
 800187e:	2101      	movs	r1, #1
 8001880:	209c      	movs	r0, #156	; 0x9c
 8001882:	f7ff fd9d 	bl	80013c0 <write>
	Write_Data(0xA8);			//   Gray Scale Level 14
 8001886:	2101      	movs	r1, #1
 8001888:	20a8      	movs	r0, #168	; 0xa8
 800188a:	f7ff fd99 	bl	80013c0 <write>
	Write_Data(0xB4);			//   Gray Scale Level 15
 800188e:	2101      	movs	r1, #1
 8001890:	20b4      	movs	r0, #180	; 0xb4
 8001892:	f7ff fd95 	bl	80013c0 <write>
	Write_Command(0x00);			// Enable Gray Scale Table
 8001896:	4621      	mov	r1, r4
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff fd91 	bl	80013c0 <write>
	Write_Command(0xB1);// Phase 1 (Reset) & Phase 2 (Pre-Charge) Period Adjustment
 800189e:	4621      	mov	r1, r4
 80018a0:	20b1      	movs	r0, #177	; 0xb1
 80018a2:	f7ff fd8d 	bl	80013c0 <write>
	Write_Data(d);//   Default => 0x74 (7 Display Clocks [Phase 2] / 9 Display Clocks [Phase 1])
 80018a6:	2101      	movs	r1, #1
 80018a8:	20e2      	movs	r0, #226	; 0xe2
 80018aa:	f7ff fd89 	bl	80013c0 <write>
	Write_Command(0xD1);			// Display Enhancement
 80018ae:	4621      	mov	r1, r4
 80018b0:	20d1      	movs	r0, #209	; 0xd1
 80018b2:	f7ff fd85 	bl	80013c0 <write>
	Write_Data(0x82 | d);			//   Default => 0xA2
 80018b6:	2101      	movs	r1, #1
 80018b8:	20a2      	movs	r0, #162	; 0xa2
 80018ba:	f7ff fd81 	bl	80013c0 <write>
	Write_Data(0x20);
 80018be:	2101      	movs	r1, #1
 80018c0:	2020      	movs	r0, #32
 80018c2:	f7ff fd7d 	bl	80013c0 <write>
	Write_Command(0xBB);			// Set Pre-Charge Voltage Level
 80018c6:	4621      	mov	r1, r4
 80018c8:	20bb      	movs	r0, #187	; 0xbb
 80018ca:	f7ff fd79 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0x17 (0.50*VCC)
 80018ce:	2101      	movs	r1, #1
 80018d0:	201f      	movs	r0, #31
 80018d2:	f7ff fd75 	bl	80013c0 <write>
	Write_Command(0xB6);			// Set Second Pre-Charge Period
 80018d6:	4621      	mov	r1, r4
 80018d8:	20b6      	movs	r0, #182	; 0xb6
 80018da:	f7ff fd71 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0x08 (8 Display Clocks)
 80018de:	2101      	movs	r1, #1
 80018e0:	2008      	movs	r0, #8
 80018e2:	f7ff fd6d 	bl	80013c0 <write>
	Write_Command(0xBE);			// Set COM Deselect Voltage Level
 80018e6:	4621      	mov	r1, r4
 80018e8:	20be      	movs	r0, #190	; 0xbe
 80018ea:	f7ff fd69 	bl	80013c0 <write>
	Write_Data(d);				//   Default => 0x04 (0.80*VCC)
 80018ee:	2101      	movs	r1, #1
 80018f0:	2007      	movs	r0, #7
 80018f2:	f7ff fd65 	bl	80013c0 <write>
	Write_Command(0xA4 | d);			// Set Display Mode
 80018f6:	4621      	mov	r1, r4
 80018f8:	20a6      	movs	r0, #166	; 0xa6
 80018fa:	f7ff fd61 	bl	80013c0 <write>
	Write_Command(0xA8 | a);
 80018fe:	4621      	mov	r1, r4
 8001900:	20a9      	movs	r0, #169	; 0xa9
 8001902:	f7ff fd5d 	bl	80013c0 <write>
	Set_Precharge_Period(0x08);		// Set Second Pre-Charge Period as 8 Clocks
	Set_VCOMH(0x07);	// Set Common Pins Deselect Voltage Level as 0.86*VCC
	Set_Display_Mode(0x02);			// Normal Display Mode (0x00/0x01/0x02/0x03)
	Set_Partial_Display(0x01, 0x00, 0x00);	// Disable Partial Display

	OLED_Clear();				// Clear Screen
 8001906:	f7ff fdfb 	bl	8001500 <OLED_Clear>
	Write_Command(0xAE | d);			// Set Display On/Off
 800190a:	4621      	mov	r1, r4
 800190c:	20af      	movs	r0, #175	; 0xaf
 800190e:	f7ff fd57 	bl	80013c0 <write>

	Set_Display_On_Off(0x01);		// Display On (0x00/0x01)

}
 8001912:	b002      	add	sp, #8
 8001914:	bd70      	pop	{r4, r5, r6, pc}
 8001916:	bf00      	nop
 8001918:	40010c00 	.word	0x40010c00
 800191c:	2000450c 	.word	0x2000450c

08001920 <RotaryEcncorder_ButtonScan>:
		vTaskDelay(10 / portTICK_PERIOD_MS);
	}

}

Button_state RotaryEcncorder_ButtonScan(void) {
 8001920:	b510      	push	{r4, lr}
	Button_state button_state;
	current_state = HAL_GPIO_ReadPin(ROTARY_SW_GPIO_Port, ROTARY_SW_Pin);
 8001922:	2108      	movs	r1, #8
 8001924:	480f      	ldr	r0, [pc, #60]	; (8001964 <RotaryEcncorder_ButtonScan+0x44>)
 8001926:	f000 fa4b 	bl	8001dc0 <HAL_GPIO_ReadPin>
	if (current_state == 0 && old_state == 1) {
 800192a:	b980      	cbnz	r0, 800194e <RotaryEcncorder_ButtonScan+0x2e>
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <RotaryEcncorder_ButtonScan+0x48>)
 800192e:	6813      	ldr	r3, [r2, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d103      	bne.n	800193c <RotaryEcncorder_ButtonScan+0x1c>
		old_state = current_state;
		button_state = button_debouce;
 8001934:	2402      	movs	r4, #2
		old_state = current_state;
 8001936:	6010      	str	r0, [r2, #0]
		press_count = 0;
		button_state = button_release;
	}
	return button_state;

}
 8001938:	4620      	mov	r0, r4
 800193a:	bd10      	pop	{r4, pc}
	} else if (current_state == 0 && old_state == 0 && press_count == 0) {
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1fb      	bne.n	8001938 <RotaryEcncorder_ButtonScan+0x18>
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <RotaryEcncorder_ButtonScan+0x4c>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2a00      	cmp	r2, #0
 8001946:	d1f7      	bne.n	8001938 <RotaryEcncorder_ButtonScan+0x18>
		press_count = 1;
 8001948:	2401      	movs	r4, #1
 800194a:	601c      	str	r4, [r3, #0]
 800194c:	e7f4      	b.n	8001938 <RotaryEcncorder_ButtonScan+0x18>
	else if (current_state == 1 && old_state == 0) {
 800194e:	2801      	cmp	r0, #1
 8001950:	d1f2      	bne.n	8001938 <RotaryEcncorder_ButtonScan+0x18>
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <RotaryEcncorder_ButtonScan+0x48>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ee      	bne.n	8001938 <RotaryEcncorder_ButtonScan+0x18>
		press_count = 0;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <RotaryEcncorder_ButtonScan+0x4c>)
		button_state = button_release;
 800195c:	2403      	movs	r4, #3
		press_count = 0;
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e7ea      	b.n	8001938 <RotaryEcncorder_ButtonScan+0x18>
 8001962:	bf00      	nop
 8001964:	40011000 	.word	0x40011000
 8001968:	20000004 	.word	0x20000004
 800196c:	2000274c 	.word	0x2000274c

08001970 <Button_task>:
void Button_task(void *pvParameters) {
 8001970:	b510      	push	{r4, lr}
		if (EventGroupHandler !=NULL) {
 8001972:	4c07      	ldr	r4, [pc, #28]	; (8001990 <Button_task+0x20>)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	b13b      	cbz	r3, 8001988 <Button_task+0x18>
			bstate = RotaryEcncorder_ButtonScan();
 8001978:	f7ff ffd2 	bl	8001920 <RotaryEcncorder_ButtonScan>
			switch (bstate) {
 800197c:	2801      	cmp	r0, #1
			bstate = RotaryEcncorder_ButtonScan();
 800197e:	4601      	mov	r1, r0
			switch (bstate) {
 8001980:	d102      	bne.n	8001988 <Button_task+0x18>
				xEventGroupSetBits(EventGroupHandler, BUTTON_PRESS_EVENT);
 8001982:	6820      	ldr	r0, [r4, #0]
 8001984:	f001 fb0c 	bl	8002fa0 <xEventGroupSetBits>
		vTaskDelay(10 / portTICK_PERIOD_MS);
 8001988:	200a      	movs	r0, #10
 800198a:	f002 fbd5 	bl	8004138 <vTaskDelay>
		if (EventGroupHandler !=NULL) {
 800198e:	e7f1      	b.n	8001974 <Button_task+0x4>
 8001990:	2000456c 	.word	0x2000456c

08001994 <RotaryEcncorder_Init>:

void RotaryEcncorder_Init() {
 8001994:	b510      	push	{r4, lr}
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001996:	4c05      	ldr	r4, [pc, #20]	; (80019ac <RotaryEcncorder_Init+0x18>)
 8001998:	2118      	movs	r1, #24
 800199a:	4620      	mov	r0, r4
 800199c:	f001 f98f 	bl	8002cbe <HAL_TIM_Encoder_Start>
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//   設定旋轉編碼器數值
//   count:設定值範圍-32767~32767
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void RotaryEcncorder_SetCount(int32_t count) {
	__HAL_TIM_SET_COUNTER(&htim2,32767+count);
 80019a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24
 80019a8:	bd10      	pop	{r4, pc}
 80019aa:	bf00      	nop
 80019ac:	20004584 	.word	0x20004584

080019b0 <RotaryEcncorder_SetCount>:
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <RotaryEcncorder_SetCount+0x10>)
 80019b2:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	307f      	adds	r0, #127	; 0x7f
 80019ba:	6258      	str	r0, [r3, #36]	; 0x24
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20004584 	.word	0x20004584

080019c4 <RotaryEcncorder_SetRange>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void RotaryEcncorder_SetRange(int32_t min ,int32_t max) {

	int32_t temp;

	if(max < min)
 80019c4:	4281      	cmp	r1, r0
 80019c6:	bfbc      	itt	lt
 80019c8:	4603      	movlt	r3, r0
 80019ca:	4608      	movlt	r0, r1
	}

	if(min < -32767)min = -32767;
	if(max > 32767)max = 32767;

	range_min = min;
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <RotaryEcncorder_SetRange+0x28>)
	if(max < min)
 80019ce:	bfb8      	it	lt
 80019d0:	4619      	movlt	r1, r3
	range_min = min;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <RotaryEcncorder_SetRange+0x2c>)
 80019d4:	4290      	cmp	r0, r2
 80019d6:	bfac      	ite	ge
 80019d8:	6018      	strge	r0, [r3, #0]
 80019da:	601a      	strlt	r2, [r3, #0]
	range_max = max;
 80019dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <RotaryEcncorder_SetRange+0x30>)
 80019e2:	4291      	cmp	r1, r2
 80019e4:	bfd4      	ite	le
 80019e6:	6019      	strle	r1, [r3, #0]
 80019e8:	601a      	strgt	r2, [r3, #0]
 80019ea:	4770      	bx	lr
 80019ec:	ffff8001 	.word	0xffff8001
 80019f0:	20002750 	.word	0x20002750
 80019f4:	20000008 	.word	0x20000008

080019f8 <RotaryEcncorder_GetCount>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//   取得旋轉編碼器計數值
//   返回值範圍0~32767
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
int32_t RotaryEcncorder_GetCount() {
 80019f8:	b508      	push	{r3, lr}
	int32_t count;

	count = __HAL_TIM_GET_COUNTER(&htim2);  //value: cw:0->65535  or  ccw:0<-65535<-0
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <RotaryEcncorder_GetCount+0x2c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
	count -= 32767; //-32767 ~ 32767
	if(count > range_max)
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <RotaryEcncorder_GetCount+0x30>)
	count -= 32767; //-32767 ~ 32767
 8001a02:	f5a0 40ff 	sub.w	r0, r0, #32640	; 0x7f80
	if(count > range_max)
 8001a06:	681a      	ldr	r2, [r3, #0]
	count -= 32767; //-32767 ~ 32767
 8001a08:	387f      	subs	r0, #127	; 0x7f
	if(count > range_max)
 8001a0a:	4290      	cmp	r0, r2
 8001a0c:	dd04      	ble.n	8001a18 <RotaryEcncorder_GetCount+0x20>
		RotaryEcncorder_SetCount(count);
	}
	else if(count < range_min)
	{
		count = range_min;
		RotaryEcncorder_SetCount(count);
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f7ff ffce 	bl	80019b0 <RotaryEcncorder_SetCount>
 8001a14:	4610      	mov	r0, r2
	}
	return count;
 8001a16:	e003      	b.n	8001a20 <RotaryEcncorder_GetCount+0x28>
	else if(count < range_min)
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <RotaryEcncorder_GetCount+0x34>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4290      	cmp	r0, r2
 8001a1e:	dbf6      	blt.n	8001a0e <RotaryEcncorder_GetCount+0x16>
}
 8001a20:	bd08      	pop	{r3, pc}
 8001a22:	bf00      	nop
 8001a24:	20004584 	.word	0x20004584
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20002750 	.word	0x20002750

08001a30 <RotaryEcncorder_GetState>:

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//   取得旋轉編碼器狀態
//   返回值範圍-32767~32767
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Rotary_state RotaryEcncorder_GetState() {
 8001a30:	b508      	push	{r3, lr}
	Rotary_state rstate;
	current_count = RotaryEcncorder_GetCount();  //value range: -32767~32767
 8001a32:	f7ff ffe1 	bl	80019f8 <RotaryEcncorder_GetCount>
	if (current_count - last_count > 0) {
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <RotaryEcncorder_GetState+0x24>)
	current_count = RotaryEcncorder_GetCount();  //value range: -32767~32767
 8001a38:	4601      	mov	r1, r0
	if (current_count - last_count > 0) {
 8001a3a:	6813      	ldr	r3, [r2, #0]
 8001a3c:	1ac3      	subs	r3, r0, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	dc03      	bgt.n	8001a4a <RotaryEcncorder_GetState+0x1a>
		rstate = state_clock_wise;
	} else if (current_count - last_count < 0) {
 8001a42:	d104      	bne.n	8001a4e <RotaryEcncorder_GetState+0x1e>
		rstate = state_counter_clock_wise;
	} else {
		rstate = state_no_changed;
 8001a44:	4618      	mov	r0, r3
	}
	last_count = current_count;
 8001a46:	6011      	str	r1, [r2, #0]
	return rstate;
}
 8001a48:	bd08      	pop	{r3, pc}
		rstate = state_clock_wise;
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	e7fb      	b.n	8001a46 <RotaryEcncorder_GetState+0x16>
		rstate = state_counter_clock_wise;
 8001a4e:	2002      	movs	r0, #2
 8001a50:	e7f9      	b.n	8001a46 <RotaryEcncorder_GetState+0x16>
 8001a52:	bf00      	nop
 8001a54:	20002748 	.word	0x20002748

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_InitTick+0x3c>)
{
 8001a5c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5e:	7818      	ldrb	r0, [r3, #0]
 8001a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a64:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a68:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_InitTick+0x40>)
 8001a6a:	6810      	ldr	r0, [r2, #0]
 8001a6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a70:	f000 f892 	bl	8001b98 <HAL_SYSTICK_Config>
 8001a74:	4604      	mov	r4, r0
 8001a76:	b958      	cbnz	r0, 8001a90 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a78:	2d0f      	cmp	r5, #15
 8001a7a:	d809      	bhi.n	8001a90 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4629      	mov	r1, r5
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f854 	bl	8001b30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <HAL_InitTick+0x44>)
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	601d      	str	r5, [r3, #0]
 8001a8e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a90:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
 8001a94:	2000000c 	.word	0x2000000c
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000010 	.word	0x20000010

08001aa0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_Init+0x20>)
{
 8001aa2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa8:	f043 0310 	orr.w	r3, r3, #16
 8001aac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aae:	f000 f82d 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff ffd0 	bl	8001a58 <HAL_InitTick>
  HAL_MspInit();
 8001ab8:	f7ff fb98 	bl	80011ec <HAL_MspInit>
}
 8001abc:	2000      	movs	r0, #0
 8001abe:	bd08      	pop	{r3, pc}
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_IncTick+0x10>)
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_IncTick+0x14>)
 8001ac8:	6811      	ldr	r1, [r2, #0]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	440b      	add	r3, r1
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200045c8 	.word	0x200045c8
 8001ad8:	2000000c 	.word	0x2000000c

08001adc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001adc:	4b01      	ldr	r3, [pc, #4]	; (8001ae4 <HAL_GetTick+0x8>)
 8001ade:	6818      	ldr	r0, [r3, #0]
}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	200045c8 	.word	0x200045c8

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b538      	push	{r3, r4, r5, lr}
 8001aea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff fff6 	bl	8001adc <HAL_GetTick>
 8001af0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001af4:	bf1e      	ittt	ne
 8001af6:	4b04      	ldrne	r3, [pc, #16]	; (8001b08 <HAL_Delay+0x20>)
 8001af8:	781b      	ldrbne	r3, [r3, #0]
 8001afa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	1b40      	subs	r0, r0, r5
 8001b02:	4284      	cmp	r4, r0
 8001b04:	d8fa      	bhi.n	8001afc <HAL_Delay+0x14>
  {
  }
}
 8001b06:	bd38      	pop	{r3, r4, r5, pc}
 8001b08:	2000000c 	.word	0x2000000c

08001b0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b0e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b12:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b1a:	041b      	lsls	r3, r3, #16
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001b26:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001b28:	60d3      	str	r3, [r2, #12]
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b530      	push	{r4, r5, lr}
 8001b34:	68dc      	ldr	r4, [r3, #12]
 8001b36:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	bf28      	it	cs
 8001b44:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4c:	bf98      	it	ls
 8001b4e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	fa05 f303 	lsl.w	r3, r5, r3
 8001b54:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b58:	bf88      	it	hi
 8001b5a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4019      	ands	r1, r3
 8001b5e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	fa05 f404 	lsl.w	r4, r5, r4
 8001b64:	3c01      	subs	r4, #1
 8001b66:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001b68:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6a:	ea42 0201 	orr.w	r2, r2, r1
 8001b6e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	bfaf      	iteee	ge
 8001b74:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	4b06      	ldrlt	r3, [pc, #24]	; (8001b94 <HAL_NVIC_SetPriority+0x64>)
 8001b7a:	f000 000f 	andlt.w	r0, r0, #15
 8001b7e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	bfa5      	ittet	ge
 8001b82:	b2d2      	uxtbge	r2, r2
 8001b84:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001b8e:	bd30      	pop	{r4, r5, pc}
 8001b90:	e000ed00 	.word	0xe000ed00
 8001b94:	e000ed14 	.word	0xe000ed14

08001b98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	3801      	subs	r0, #1
 8001b9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b9e:	d20a      	bcs.n	8001bb6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001bc6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	bf0c      	ite	eq
 8001bcc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001bd0:	f022 0204 	bicne.w	r2, r2, #4
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001bdc:	4770      	bx	lr

08001bde <HAL_SYSTICK_IRQHandler>:
{
 8001bde:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001be0:	f7ff fffc 	bl	8001bdc <HAL_SYSTICK_Callback>
 8001be4:	bd08      	pop	{r3, pc}
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001bec:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf0:	4f6c      	ldr	r7, [pc, #432]	; (8001da4 <HAL_GPIO_Init+0x1bc>)
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf4:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8001db0 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8001bf8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8001db4 <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 8001bfc:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c00:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001c02:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c06:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001c0a:	45a0      	cmp	r8, r4
 8001c0c:	f040 8085 	bne.w	8001d1a <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8001c10:	684d      	ldr	r5, [r1, #4]
 8001c12:	2d12      	cmp	r5, #18
 8001c14:	f000 80b7 	beq.w	8001d86 <HAL_GPIO_Init+0x19e>
 8001c18:	f200 808d 	bhi.w	8001d36 <HAL_GPIO_Init+0x14e>
 8001c1c:	2d02      	cmp	r5, #2
 8001c1e:	f000 80af 	beq.w	8001d80 <HAL_GPIO_Init+0x198>
 8001c22:	f200 8081 	bhi.w	8001d28 <HAL_GPIO_Init+0x140>
 8001c26:	2d00      	cmp	r5, #0
 8001c28:	f000 8091 	beq.w	8001d4e <HAL_GPIO_Init+0x166>
 8001c2c:	2d01      	cmp	r5, #1
 8001c2e:	f000 80a5 	beq.w	8001d7c <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c32:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c36:	2cff      	cmp	r4, #255	; 0xff
 8001c38:	bf93      	iteet	ls
 8001c3a:	4682      	movls	sl, r0
 8001c3c:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001c40:	3d08      	subhi	r5, #8
 8001c42:	f8d0 b000 	ldrls.w	fp, [r0]
 8001c46:	bf92      	itee	ls
 8001c48:	00b5      	lslls	r5, r6, #2
 8001c4a:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001c4e:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c50:	fa09 f805 	lsl.w	r8, r9, r5
 8001c54:	ea2b 0808 	bic.w	r8, fp, r8
 8001c58:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c5c:	bf88      	it	hi
 8001c5e:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c62:	ea48 0505 	orr.w	r5, r8, r5
 8001c66:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001c6e:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001c72:	d052      	beq.n	8001d1a <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c74:	69bd      	ldr	r5, [r7, #24]
 8001c76:	f026 0803 	bic.w	r8, r6, #3
 8001c7a:	f045 0501 	orr.w	r5, r5, #1
 8001c7e:	61bd      	str	r5, [r7, #24]
 8001c80:	69bd      	ldr	r5, [r7, #24]
 8001c82:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001c86:	f005 0501 	and.w	r5, r5, #1
 8001c8a:	9501      	str	r5, [sp, #4]
 8001c8c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001c90:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c94:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001c96:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001c9a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001c9e:	fa09 f90b 	lsl.w	r9, r9, fp
 8001ca2:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca6:	4d41      	ldr	r5, [pc, #260]	; (8001dac <HAL_GPIO_Init+0x1c4>)
 8001ca8:	42a8      	cmp	r0, r5
 8001caa:	d071      	beq.n	8001d90 <HAL_GPIO_Init+0x1a8>
 8001cac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cb0:	42a8      	cmp	r0, r5
 8001cb2:	d06f      	beq.n	8001d94 <HAL_GPIO_Init+0x1ac>
 8001cb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cb8:	42a8      	cmp	r0, r5
 8001cba:	d06d      	beq.n	8001d98 <HAL_GPIO_Init+0x1b0>
 8001cbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cc0:	42a8      	cmp	r0, r5
 8001cc2:	d06b      	beq.n	8001d9c <HAL_GPIO_Init+0x1b4>
 8001cc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cc8:	42a8      	cmp	r0, r5
 8001cca:	d069      	beq.n	8001da0 <HAL_GPIO_Init+0x1b8>
 8001ccc:	4570      	cmp	r0, lr
 8001cce:	bf0c      	ite	eq
 8001cd0:	2505      	moveq	r5, #5
 8001cd2:	2506      	movne	r5, #6
 8001cd4:	fa05 f50b 	lsl.w	r5, r5, fp
 8001cd8:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001cdc:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce6:	bf14      	ite	ne
 8001ce8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cea:	43a5      	biceq	r5, r4
 8001cec:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cee:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf0:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001cf4:	bf14      	ite	ne
 8001cf6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cf8:	43a5      	biceq	r5, r4
 8001cfa:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cfc:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfe:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d02:	bf14      	ite	ne
 8001d04:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d06:	43a5      	biceq	r5, r4
 8001d08:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d0a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d10:	bf14      	ite	ne
 8001d12:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d14:	ea25 0404 	biceq.w	r4, r5, r4
 8001d18:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	3601      	adds	r6, #1
 8001d1c:	2e10      	cmp	r6, #16
 8001d1e:	f47f af6d 	bne.w	8001bfc <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 8001d22:	b003      	add	sp, #12
 8001d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001d28:	2d03      	cmp	r5, #3
 8001d2a:	d025      	beq.n	8001d78 <HAL_GPIO_Init+0x190>
 8001d2c:	2d11      	cmp	r5, #17
 8001d2e:	d180      	bne.n	8001c32 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d30:	68ca      	ldr	r2, [r1, #12]
 8001d32:	3204      	adds	r2, #4
          break;
 8001d34:	e77d      	b.n	8001c32 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001d36:	4565      	cmp	r5, ip
 8001d38:	d009      	beq.n	8001d4e <HAL_GPIO_Init+0x166>
 8001d3a:	d812      	bhi.n	8001d62 <HAL_GPIO_Init+0x17a>
 8001d3c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001db8 <HAL_GPIO_Init+0x1d0>
 8001d40:	454d      	cmp	r5, r9
 8001d42:	d004      	beq.n	8001d4e <HAL_GPIO_Init+0x166>
 8001d44:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001d48:	454d      	cmp	r5, r9
 8001d4a:	f47f af72 	bne.w	8001c32 <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d4e:	688a      	ldr	r2, [r1, #8]
 8001d50:	b1e2      	cbz	r2, 8001d8c <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d52:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001d54:	bf0c      	ite	eq
 8001d56:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001d5a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d5e:	2208      	movs	r2, #8
 8001d60:	e767      	b.n	8001c32 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001d62:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8001dbc <HAL_GPIO_Init+0x1d4>
 8001d66:	454d      	cmp	r5, r9
 8001d68:	d0f1      	beq.n	8001d4e <HAL_GPIO_Init+0x166>
 8001d6a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001d6e:	454d      	cmp	r5, r9
 8001d70:	d0ed      	beq.n	8001d4e <HAL_GPIO_Init+0x166>
 8001d72:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001d76:	e7e7      	b.n	8001d48 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d78:	2200      	movs	r2, #0
 8001d7a:	e75a      	b.n	8001c32 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d7c:	68ca      	ldr	r2, [r1, #12]
          break;
 8001d7e:	e758      	b.n	8001c32 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d80:	68ca      	ldr	r2, [r1, #12]
 8001d82:	3208      	adds	r2, #8
          break;
 8001d84:	e755      	b.n	8001c32 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d86:	68ca      	ldr	r2, [r1, #12]
 8001d88:	320c      	adds	r2, #12
          break;
 8001d8a:	e752      	b.n	8001c32 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	e750      	b.n	8001c32 <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d90:	2500      	movs	r5, #0
 8001d92:	e79f      	b.n	8001cd4 <HAL_GPIO_Init+0xec>
 8001d94:	2501      	movs	r5, #1
 8001d96:	e79d      	b.n	8001cd4 <HAL_GPIO_Init+0xec>
 8001d98:	2502      	movs	r5, #2
 8001d9a:	e79b      	b.n	8001cd4 <HAL_GPIO_Init+0xec>
 8001d9c:	2503      	movs	r5, #3
 8001d9e:	e799      	b.n	8001cd4 <HAL_GPIO_Init+0xec>
 8001da0:	2504      	movs	r5, #4
 8001da2:	e797      	b.n	8001cd4 <HAL_GPIO_Init+0xec>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010400 	.word	0x40010400
 8001dac:	40010800 	.word	0x40010800
 8001db0:	40011c00 	.word	0x40011c00
 8001db4:	10210000 	.word	0x10210000
 8001db8:	10110000 	.word	0x10110000
 8001dbc:	10310000 	.word	0x10310000

08001dc0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc0:	6883      	ldr	r3, [r0, #8]
 8001dc2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001dc4:	bf14      	ite	ne
 8001dc6:	2001      	movne	r0, #1
 8001dc8:	2000      	moveq	r0, #0
 8001dca:	4770      	bx	lr

08001dcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dcc:	b10a      	cbz	r2, 8001dd2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dce:	6101      	str	r1, [r0, #16]
 8001dd0:	4770      	bx	lr
 8001dd2:	0409      	lsls	r1, r1, #16
 8001dd4:	e7fb      	b.n	8001dce <HAL_GPIO_WritePin+0x2>

08001dd6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001dd6:	68c3      	ldr	r3, [r0, #12]
 8001dd8:	4059      	eors	r1, r3
 8001dda:	60c1      	str	r1, [r0, #12]
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001de0:	2201      	movs	r2, #1
 8001de2:	4b01      	ldr	r3, [pc, #4]	; (8001de8 <HAL_PWR_EnableBkUpAccess+0x8>)
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	4770      	bx	lr
 8001de8:	420e0020 	.word	0x420e0020

08001dec <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dec:	6803      	ldr	r3, [r0, #0]
{
 8001dee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df2:	07db      	lsls	r3, r3, #31
{
 8001df4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	d410      	bmi.n	8001e1a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	079f      	lsls	r7, r3, #30
 8001dfc:	d45e      	bmi.n	8001ebc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfe:	682b      	ldr	r3, [r5, #0]
 8001e00:	0719      	lsls	r1, r3, #28
 8001e02:	f100 8095 	bmi.w	8001f30 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e06:	682b      	ldr	r3, [r5, #0]
 8001e08:	075a      	lsls	r2, r3, #29
 8001e0a:	f100 80bf 	bmi.w	8001f8c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0e:	69ea      	ldr	r2, [r5, #28]
 8001e10:	2a00      	cmp	r2, #0
 8001e12:	f040 812d 	bne.w	8002070 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001e16:	2000      	movs	r0, #0
 8001e18:	e014      	b.n	8001e44 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e1a:	4c90      	ldr	r4, [pc, #576]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001e1c:	6863      	ldr	r3, [r4, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d007      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e26:	6863      	ldr	r3, [r4, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_OscConfig+0x5e>
 8001e30:	6863      	ldr	r3, [r4, #4]
 8001e32:	03de      	lsls	r6, r3, #15
 8001e34:	d509      	bpl.n	8001e4a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	039c      	lsls	r4, r3, #14
 8001e3a:	d5dd      	bpl.n	8001df8 <HAL_RCC_OscConfig+0xc>
 8001e3c:	686b      	ldr	r3, [r5, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1da      	bne.n	8001df8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001e42:	2001      	movs	r0, #1
}
 8001e44:	b002      	add	sp, #8
 8001e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4a:	686b      	ldr	r3, [r5, #4]
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e50:	d110      	bne.n	8001e74 <HAL_RCC_OscConfig+0x88>
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fe3f 	bl	8001adc <HAL_GetTick>
 8001e5e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	0398      	lsls	r0, r3, #14
 8001e64:	d4c8      	bmi.n	8001df8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e66:	f7ff fe39 	bl	8001adc <HAL_GetTick>
 8001e6a:	1b80      	subs	r0, r0, r6
 8001e6c:	2864      	cmp	r0, #100	; 0x64
 8001e6e:	d9f7      	bls.n	8001e60 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001e70:	2003      	movs	r0, #3
 8001e72:	e7e7      	b.n	8001e44 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e74:	b99b      	cbnz	r3, 8001e9e <HAL_RCC_OscConfig+0xb2>
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7c:	6023      	str	r3, [r4, #0]
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e84:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e86:	f7ff fe29 	bl	8001adc <HAL_GetTick>
 8001e8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	0399      	lsls	r1, r3, #14
 8001e90:	d5b2      	bpl.n	8001df8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e92:	f7ff fe23 	bl	8001adc <HAL_GetTick>
 8001e96:	1b80      	subs	r0, r0, r6
 8001e98:	2864      	cmp	r0, #100	; 0x64
 8001e9a:	d9f7      	bls.n	8001e8c <HAL_RCC_OscConfig+0xa0>
 8001e9c:	e7e8      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	d103      	bne.n	8001eae <HAL_RCC_OscConfig+0xc2>
 8001ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eaa:	6023      	str	r3, [r4, #0]
 8001eac:	e7d1      	b.n	8001e52 <HAL_RCC_OscConfig+0x66>
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6023      	str	r3, [r4, #0]
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	e7cd      	b.n	8001e58 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ebc:	4c67      	ldr	r4, [pc, #412]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001ebe:	6863      	ldr	r3, [r4, #4]
 8001ec0:	f013 0f0c 	tst.w	r3, #12
 8001ec4:	d007      	beq.n	8001ed6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ec6:	6863      	ldr	r3, [r4, #4]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d110      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x106>
 8001ed0:	6863      	ldr	r3, [r4, #4]
 8001ed2:	03da      	lsls	r2, r3, #15
 8001ed4:	d40d      	bmi.n	8001ef2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	079b      	lsls	r3, r3, #30
 8001eda:	d502      	bpl.n	8001ee2 <HAL_RCC_OscConfig+0xf6>
 8001edc:	692b      	ldr	r3, [r5, #16]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d1af      	bne.n	8001e42 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	696a      	ldr	r2, [r5, #20]
 8001ee6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001eea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001eee:	6023      	str	r3, [r4, #0]
 8001ef0:	e785      	b.n	8001dfe <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef2:	692a      	ldr	r2, [r5, #16]
 8001ef4:	4b5a      	ldr	r3, [pc, #360]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	b16a      	cbz	r2, 8001f14 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001efc:	f7ff fdee 	bl	8001adc <HAL_GetTick>
 8001f00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	079f      	lsls	r7, r3, #30
 8001f06:	d4ec      	bmi.n	8001ee2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff fde8 	bl	8001adc <HAL_GetTick>
 8001f0c:	1b80      	subs	r0, r0, r6
 8001f0e:	2802      	cmp	r0, #2
 8001f10:	d9f7      	bls.n	8001f02 <HAL_RCC_OscConfig+0x116>
 8001f12:	e7ad      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001f14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f16:	f7ff fde1 	bl	8001adc <HAL_GetTick>
 8001f1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	0798      	lsls	r0, r3, #30
 8001f20:	f57f af6d 	bpl.w	8001dfe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f24:	f7ff fdda 	bl	8001adc <HAL_GetTick>
 8001f28:	1b80      	subs	r0, r0, r6
 8001f2a:	2802      	cmp	r0, #2
 8001f2c:	d9f6      	bls.n	8001f1c <HAL_RCC_OscConfig+0x130>
 8001f2e:	e79f      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f30:	69aa      	ldr	r2, [r5, #24]
 8001f32:	4c4a      	ldr	r4, [pc, #296]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f34:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <HAL_RCC_OscConfig+0x278>)
 8001f36:	b1da      	cbz	r2, 8001f70 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fdce 	bl	8001adc <HAL_GetTick>
 8001f40:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f44:	079b      	lsls	r3, r3, #30
 8001f46:	d50d      	bpl.n	8001f64 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f48:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f4c:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f54:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001f56:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001f58:	9b01      	ldr	r3, [sp, #4]
 8001f5a:	1e5a      	subs	r2, r3, #1
 8001f5c:	9201      	str	r2, [sp, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f9      	bne.n	8001f56 <HAL_RCC_OscConfig+0x16a>
 8001f62:	e750      	b.n	8001e06 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f64:	f7ff fdba 	bl	8001adc <HAL_GetTick>
 8001f68:	1b80      	subs	r0, r0, r6
 8001f6a:	2802      	cmp	r0, #2
 8001f6c:	d9e9      	bls.n	8001f42 <HAL_RCC_OscConfig+0x156>
 8001f6e:	e77f      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001f70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f72:	f7ff fdb3 	bl	8001adc <HAL_GetTick>
 8001f76:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f7a:	079f      	lsls	r7, r3, #30
 8001f7c:	f57f af43 	bpl.w	8001e06 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f80:	f7ff fdac 	bl	8001adc <HAL_GetTick>
 8001f84:	1b80      	subs	r0, r0, r6
 8001f86:	2802      	cmp	r0, #2
 8001f88:	d9f6      	bls.n	8001f78 <HAL_RCC_OscConfig+0x18c>
 8001f8a:	e771      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8c:	4c33      	ldr	r4, [pc, #204]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f8e:	69e3      	ldr	r3, [r4, #28]
 8001f90:	00d8      	lsls	r0, r3, #3
 8001f92:	d424      	bmi.n	8001fde <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001f94:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	69e3      	ldr	r3, [r4, #28]
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	61e3      	str	r3, [r4, #28]
 8001f9e:	69e3      	ldr	r3, [r4, #28]
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	4e30      	ldr	r6, [pc, #192]	; (800206c <HAL_RCC_OscConfig+0x280>)
 8001faa:	6833      	ldr	r3, [r6, #0]
 8001fac:	05d9      	lsls	r1, r3, #23
 8001fae:	d518      	bpl.n	8001fe2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb0:	68eb      	ldr	r3, [r5, #12]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d126      	bne.n	8002004 <HAL_RCC_OscConfig+0x218>
 8001fb6:	6a23      	ldr	r3, [r4, #32]
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fd8d 	bl	8001adc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001fc6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc8:	6a23      	ldr	r3, [r4, #32]
 8001fca:	079b      	lsls	r3, r3, #30
 8001fcc:	d53f      	bpl.n	800204e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001fce:	2f00      	cmp	r7, #0
 8001fd0:	f43f af1d 	beq.w	8001e0e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd4:	69e3      	ldr	r3, [r4, #28]
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fda:	61e3      	str	r3, [r4, #28]
 8001fdc:	e717      	b.n	8001e0e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001fde:	2700      	movs	r7, #0
 8001fe0:	e7e2      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	6833      	ldr	r3, [r6, #0]
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001fea:	f7ff fd77 	bl	8001adc <HAL_GetTick>
 8001fee:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	6833      	ldr	r3, [r6, #0]
 8001ff2:	05da      	lsls	r2, r3, #23
 8001ff4:	d4dc      	bmi.n	8001fb0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7ff fd71 	bl	8001adc <HAL_GetTick>
 8001ffa:	eba0 0008 	sub.w	r0, r0, r8
 8001ffe:	2864      	cmp	r0, #100	; 0x64
 8002000:	d9f6      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x204>
 8002002:	e735      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002004:	b9ab      	cbnz	r3, 8002032 <HAL_RCC_OscConfig+0x246>
 8002006:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002008:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6223      	str	r3, [r4, #32]
 8002012:	6a23      	ldr	r3, [r4, #32]
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800201a:	f7ff fd5f 	bl	8001adc <HAL_GetTick>
 800201e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002020:	6a23      	ldr	r3, [r4, #32]
 8002022:	0798      	lsls	r0, r3, #30
 8002024:	d5d3      	bpl.n	8001fce <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff fd59 	bl	8001adc <HAL_GetTick>
 800202a:	1b80      	subs	r0, r0, r6
 800202c:	4540      	cmp	r0, r8
 800202e:	d9f7      	bls.n	8002020 <HAL_RCC_OscConfig+0x234>
 8002030:	e71e      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002032:	2b05      	cmp	r3, #5
 8002034:	6a23      	ldr	r3, [r4, #32]
 8002036:	d103      	bne.n	8002040 <HAL_RCC_OscConfig+0x254>
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6223      	str	r3, [r4, #32]
 800203e:	e7ba      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1ca>
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6223      	str	r3, [r4, #32]
 8002046:	6a23      	ldr	r3, [r4, #32]
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	e7b6      	b.n	8001fbc <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7ff fd45 	bl	8001adc <HAL_GetTick>
 8002052:	eba0 0008 	sub.w	r0, r0, r8
 8002056:	42b0      	cmp	r0, r6
 8002058:	d9b6      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x1dc>
 800205a:	e709      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
 800205c:	40021000 	.word	0x40021000
 8002060:	42420000 	.word	0x42420000
 8002064:	42420480 	.word	0x42420480
 8002068:	20000000 	.word	0x20000000
 800206c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002070:	4c22      	ldr	r4, [pc, #136]	; (80020fc <HAL_RCC_OscConfig+0x310>)
 8002072:	6863      	ldr	r3, [r4, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	f43f aee2 	beq.w	8001e42 <HAL_RCC_OscConfig+0x56>
 800207e:	2300      	movs	r3, #0
 8002080:	4e1f      	ldr	r6, [pc, #124]	; (8002100 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002082:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002084:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002086:	d12b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002088:	f7ff fd28 	bl	8001adc <HAL_GetTick>
 800208c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	0199      	lsls	r1, r3, #6
 8002092:	d41f      	bmi.n	80020d4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002094:	6a2b      	ldr	r3, [r5, #32]
 8002096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209a:	d105      	bne.n	80020a8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209c:	6862      	ldr	r2, [r4, #4]
 800209e:	68a9      	ldr	r1, [r5, #8]
 80020a0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80020a4:	430a      	orrs	r2, r1
 80020a6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80020aa:	6862      	ldr	r2, [r4, #4]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80020b2:	4313      	orrs	r3, r2
 80020b4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80020b6:	2301      	movs	r3, #1
 80020b8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80020ba:	f7ff fd0f 	bl	8001adc <HAL_GetTick>
 80020be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	019a      	lsls	r2, r3, #6
 80020c4:	f53f aea7 	bmi.w	8001e16 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff fd08 	bl	8001adc <HAL_GetTick>
 80020cc:	1b40      	subs	r0, r0, r5
 80020ce:	2802      	cmp	r0, #2
 80020d0:	d9f6      	bls.n	80020c0 <HAL_RCC_OscConfig+0x2d4>
 80020d2:	e6cd      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff fd02 	bl	8001adc <HAL_GetTick>
 80020d8:	1bc0      	subs	r0, r0, r7
 80020da:	2802      	cmp	r0, #2
 80020dc:	d9d7      	bls.n	800208e <HAL_RCC_OscConfig+0x2a2>
 80020de:	e6c7      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80020e0:	f7ff fcfc 	bl	8001adc <HAL_GetTick>
 80020e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	f57f ae94 	bpl.w	8001e16 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff fcf5 	bl	8001adc <HAL_GetTick>
 80020f2:	1b40      	subs	r0, r0, r5
 80020f4:	2802      	cmp	r0, #2
 80020f6:	d9f6      	bls.n	80020e6 <HAL_RCC_OscConfig+0x2fa>
 80020f8:	e6ba      	b.n	8001e70 <HAL_RCC_OscConfig+0x84>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	42420060 	.word	0x42420060

08002104 <HAL_RCC_GetSysClockFreq>:
{
 8002104:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002106:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002108:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800210a:	ac02      	add	r4, sp, #8
 800210c:	f103 0510 	add.w	r5, r3, #16
 8002110:	4622      	mov	r2, r4
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
 8002116:	3308      	adds	r3, #8
 8002118:	c203      	stmia	r2!, {r0, r1}
 800211a:	42ab      	cmp	r3, r5
 800211c:	4614      	mov	r4, r2
 800211e:	d1f7      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002120:	2301      	movs	r3, #1
 8002122:	f88d 3004 	strb.w	r3, [sp, #4]
 8002126:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002128:	4911      	ldr	r1, [pc, #68]	; (8002170 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800212a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800212e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002130:	f003 020c 	and.w	r2, r3, #12
 8002134:	2a08      	cmp	r2, #8
 8002136:	d117      	bne.n	8002168 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002138:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800213c:	a806      	add	r0, sp, #24
 800213e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002140:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002142:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002146:	d50c      	bpl.n	8002162 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002148:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800214a:	480a      	ldr	r0, [pc, #40]	; (8002174 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800214c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002150:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002152:	aa06      	add	r2, sp, #24
 8002154:	4413      	add	r3, r2
 8002156:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800215a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800215e:	b007      	add	sp, #28
 8002160:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002162:	4805      	ldr	r0, [pc, #20]	; (8002178 <HAL_RCC_GetSysClockFreq+0x74>)
 8002164:	4350      	muls	r0, r2
 8002166:	e7fa      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800216a:	e7f8      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x5a>
 800216c:	080081e8 	.word	0x080081e8
 8002170:	40021000 	.word	0x40021000
 8002174:	007a1200 	.word	0x007a1200
 8002178:	003d0900 	.word	0x003d0900

0800217c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800217c:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <HAL_RCC_ClockConfig+0x138>)
{
 800217e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002182:	6813      	ldr	r3, [r2, #0]
{
 8002184:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	428b      	cmp	r3, r1
{
 800218c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800218e:	d328      	bcc.n	80021e2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	682a      	ldr	r2, [r5, #0]
 8002192:	0791      	lsls	r1, r2, #30
 8002194:	d432      	bmi.n	80021fc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	07d2      	lsls	r2, r2, #31
 8002198:	d438      	bmi.n	800220c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800219a:	4a46      	ldr	r2, [pc, #280]	; (80022b4 <HAL_RCC_ClockConfig+0x138>)
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	429e      	cmp	r6, r3
 80021a4:	d373      	bcc.n	800228e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a6:	682a      	ldr	r2, [r5, #0]
 80021a8:	4c43      	ldr	r4, [pc, #268]	; (80022b8 <HAL_RCC_ClockConfig+0x13c>)
 80021aa:	f012 0f04 	tst.w	r2, #4
 80021ae:	d179      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b0:	0713      	lsls	r3, r2, #28
 80021b2:	d506      	bpl.n	80021c2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	692a      	ldr	r2, [r5, #16]
 80021b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021c0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021c2:	f7ff ff9f 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80021c6:	6863      	ldr	r3, [r4, #4]
 80021c8:	4a3c      	ldr	r2, [pc, #240]	; (80022bc <HAL_RCC_ClockConfig+0x140>)
 80021ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	40d8      	lsrs	r0, r3
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_RCC_ClockConfig+0x144>)
 80021d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff fc3e 	bl	8001a58 <HAL_InitTick>
  return HAL_OK;
 80021dc:	2000      	movs	r0, #0
}
 80021de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	6813      	ldr	r3, [r2, #0]
 80021e4:	f023 0307 	bic.w	r3, r3, #7
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021ec:	6813      	ldr	r3, [r2, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	4299      	cmp	r1, r3
 80021f4:	d0cc      	beq.n	8002190 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80021f6:	2001      	movs	r0, #1
 80021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	492e      	ldr	r1, [pc, #184]	; (80022b8 <HAL_RCC_ClockConfig+0x13c>)
 80021fe:	68a8      	ldr	r0, [r5, #8]
 8002200:	684b      	ldr	r3, [r1, #4]
 8002202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002206:	4303      	orrs	r3, r0
 8002208:	604b      	str	r3, [r1, #4]
 800220a:	e7c4      	b.n	8002196 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220c:	686a      	ldr	r2, [r5, #4]
 800220e:	4c2a      	ldr	r4, [pc, #168]	; (80022b8 <HAL_RCC_ClockConfig+0x13c>)
 8002210:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002214:	d11c      	bne.n	8002250 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	d0ec      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	4313      	orrs	r3, r2
 8002228:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800222a:	f7ff fc57 	bl	8001adc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002230:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002232:	2b01      	cmp	r3, #1
 8002234:	d114      	bne.n	8002260 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002236:	6863      	ldr	r3, [r4, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b04      	cmp	r3, #4
 800223e:	d0ac      	beq.n	800219a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7ff fc4c 	bl	8001adc <HAL_GetTick>
 8002244:	1bc0      	subs	r0, r0, r7
 8002246:	4540      	cmp	r0, r8
 8002248:	d9f5      	bls.n	8002236 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800224a:	2003      	movs	r0, #3
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002250:	2a02      	cmp	r2, #2
 8002252:	d102      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002254:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002258:	e7df      	b.n	800221a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	f013 0f02 	tst.w	r3, #2
 800225e:	e7dc      	b.n	800221a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002260:	2b02      	cmp	r3, #2
 8002262:	d10f      	bne.n	8002284 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002264:	6863      	ldr	r3, [r4, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d095      	beq.n	800219a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226e:	f7ff fc35 	bl	8001adc <HAL_GetTick>
 8002272:	1bc0      	subs	r0, r0, r7
 8002274:	4540      	cmp	r0, r8
 8002276:	d9f5      	bls.n	8002264 <HAL_RCC_ClockConfig+0xe8>
 8002278:	e7e7      	b.n	800224a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227a:	f7ff fc2f 	bl	8001adc <HAL_GetTick>
 800227e:	1bc0      	subs	r0, r0, r7
 8002280:	4540      	cmp	r0, r8
 8002282:	d8e2      	bhi.n	800224a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	f013 0f0c 	tst.w	r3, #12
 800228a:	d1f6      	bne.n	800227a <HAL_RCC_ClockConfig+0xfe>
 800228c:	e785      	b.n	800219a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	6813      	ldr	r3, [r2, #0]
 8002290:	f023 0307 	bic.w	r3, r3, #7
 8002294:	4333      	orrs	r3, r6
 8002296:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002298:	6813      	ldr	r3, [r2, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	429e      	cmp	r6, r3
 80022a0:	d1a9      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x7a>
 80022a2:	e780      	b.n	80021a6 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	6863      	ldr	r3, [r4, #4]
 80022a6:	68e9      	ldr	r1, [r5, #12]
 80022a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6063      	str	r3, [r4, #4]
 80022b0:	e77e      	b.n	80021b0 <HAL_RCC_ClockConfig+0x34>
 80022b2:	bf00      	nop
 80022b4:	40022000 	.word	0x40022000
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08008233 	.word	0x08008233
 80022c0:	20000000 	.word	0x20000000

080022c4 <HAL_RCC_GetHCLKFreq>:
}
 80022c4:	4b01      	ldr	r3, [pc, #4]	; (80022cc <HAL_RCC_GetHCLKFreq+0x8>)
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000000 	.word	0x20000000

080022d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	4a03      	ldr	r2, [pc, #12]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80022de:	6810      	ldr	r0, [r2, #0]
} 
 80022e0:	40d8      	lsrs	r0, r3
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000
 80022e8:	08008243 	.word	0x08008243
 80022ec:	20000000 	.word	0x20000000

080022f0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022f0:	6803      	ldr	r3, [r0, #0]
{
 80022f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022f6:	07d9      	lsls	r1, r3, #31
{
 80022f8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022fa:	d520      	bpl.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fc:	4c35      	ldr	r4, [pc, #212]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80022fe:	69e3      	ldr	r3, [r4, #28]
 8002300:	00da      	lsls	r2, r3, #3
 8002302:	d432      	bmi.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002304:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	69e3      	ldr	r3, [r4, #28]
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	61e3      	str	r3, [r4, #28]
 800230e:	69e3      	ldr	r3, [r4, #28]
 8002310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4e2f      	ldr	r6, [pc, #188]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800231a:	6833      	ldr	r3, [r6, #0]
 800231c:	05db      	lsls	r3, r3, #23
 800231e:	d526      	bpl.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002320:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002322:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002326:	d136      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002328:	6a23      	ldr	r3, [r4, #32]
 800232a:	686a      	ldr	r2, [r5, #4]
 800232c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002330:	4313      	orrs	r3, r2
 8002332:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002334:	b11f      	cbz	r7, 800233e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	69e3      	ldr	r3, [r4, #28]
 8002338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800233e:	6828      	ldr	r0, [r5, #0]
 8002340:	0783      	lsls	r3, r0, #30
 8002342:	d506      	bpl.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002344:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002346:	68a9      	ldr	r1, [r5, #8]
 8002348:	6853      	ldr	r3, [r2, #4]
 800234a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800234e:	430b      	orrs	r3, r1
 8002350:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002352:	f010 0010 	ands.w	r0, r0, #16
 8002356:	d01b      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002358:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800235a:	6969      	ldr	r1, [r5, #20]
 800235c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800235e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002360:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002364:	430b      	orrs	r3, r1
 8002366:	6053      	str	r3, [r2, #4]
 8002368:	e012      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800236a:	2700      	movs	r7, #0
 800236c:	e7d4      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	6833      	ldr	r3, [r6, #0]
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002376:	f7ff fbb1 	bl	8001adc <HAL_GetTick>
 800237a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	6833      	ldr	r3, [r6, #0]
 800237e:	05d8      	lsls	r0, r3, #23
 8002380:	d4ce      	bmi.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7ff fbab 	bl	8001adc <HAL_GetTick>
 8002386:	eba0 0008 	sub.w	r0, r0, r8
 800238a:	2864      	cmp	r0, #100	; 0x64
 800238c:	d9f6      	bls.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800238e:	2003      	movs	r0, #3
}
 8002390:	b002      	add	sp, #8
 8002392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002396:	686a      	ldr	r2, [r5, #4]
 8002398:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800239c:	4293      	cmp	r3, r2
 800239e:	d0c3      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80023a0:	2001      	movs	r0, #1
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023a4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80023a6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023a8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ae:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80023b0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023b2:	07d9      	lsls	r1, r3, #31
 80023b4:	d5b8      	bpl.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80023b6:	f7ff fb91 	bl	8001adc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80023be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	6a23      	ldr	r3, [r4, #32]
 80023c2:	079a      	lsls	r2, r3, #30
 80023c4:	d4b0      	bmi.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7ff fb89 	bl	8001adc <HAL_GetTick>
 80023ca:	1b80      	subs	r0, r0, r6
 80023cc:	4540      	cmp	r0, r8
 80023ce:	d9f7      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80023d0:	e7dd      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40007000 	.word	0x40007000
 80023dc:	42420440 	.word	0x42420440

080023e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023e0:	4602      	mov	r2, r0
 80023e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023e4:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
{
 80023e6:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023e8:	ad02      	add	r5, sp, #8
 80023ea:	f103 0610 	add.w	r6, r3, #16
 80023ee:	462c      	mov	r4, r5
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	3308      	adds	r3, #8
 80023f6:	c403      	stmia	r4!, {r0, r1}
 80023f8:	42b3      	cmp	r3, r6
 80023fa:	4625      	mov	r5, r4
 80023fc:	d1f7      	bne.n	80023ee <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023fe:	2301      	movs	r3, #1
 8002400:	f88d 3004 	strb.w	r3, [sp, #4]
 8002404:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8002406:	1e50      	subs	r0, r2, #1
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002408:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 800240c:	280f      	cmp	r0, #15
 800240e:	d85e      	bhi.n	80024ce <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8002410:	e8df f000 	tbb	[pc, r0]
 8002414:	2d5d5132 	.word	0x2d5d5132
 8002418:	2d5d5d5d 	.word	0x2d5d5d5d
 800241c:	5d5d5d5d 	.word	0x5d5d5d5d
 8002420:	085d5d5d 	.word	0x085d5d5d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8002426:	6859      	ldr	r1, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800242e:	d037      	beq.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002430:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8002434:	a806      	add	r0, sp, #24
 8002436:	4402      	add	r2, r0
 8002438:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800243c:	03ca      	lsls	r2, r1, #15
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800243e:	bf41      	itttt	mi
 8002440:	685a      	ldrmi	r2, [r3, #4]
 8002442:	a906      	addmi	r1, sp, #24
 8002444:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8002448:	1852      	addmi	r2, r2, r1
 800244a:	bf44      	itt	mi
 800244c:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002450:	4a22      	ldrmi	r2, [pc, #136]	; (80024dc <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002452:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002454:	bf4c      	ite	mi
 8002456:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800245a:	4a21      	ldrpl	r2, [pc, #132]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800245c:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800245e:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002462:	d41d      	bmi.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 8002464:	2303      	movs	r3, #3
 8002466:	0040      	lsls	r0, r0, #1
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002468:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800246c:	e018      	b.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
    {
      break;
    }
  }
  return(frequency);
}
 800246e:	b006      	add	sp, #24
 8002470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      frequency = HAL_RCC_GetSysClockFreq();
 8002474:	f7ff be46 	b.w	8002104 <HAL_RCC_GetSysClockFreq>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002478:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800247c:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 800247e:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002480:	4019      	ands	r1, r3
 8002482:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8002486:	d01f      	beq.n	80024c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002490:	d108      	bne.n	80024a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        frequency = LSI_VALUE;
 8002492:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002496:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8002498:	f013 0f02 	tst.w	r3, #2
        frequency = HSE_VALUE / 128U;
 800249c:	bf08      	it	eq
 800249e:	2000      	moveq	r0, #0
}
 80024a0:	b006      	add	sp, #24
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024a8:	d111      	bne.n	80024ce <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80024aa:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80024ac:	f24f 4024 	movw	r0, #62500	; 0xf424
 80024b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024b4:	e7f2      	b.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024b6:	f7ff ff0b 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	e7cf      	b.n	8002468 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        frequency = LSE_VALUE;
 80024c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024cc:	e7e8      	b.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
        frequency = 0U;
 80024ce:	2000      	movs	r0, #0
 80024d0:	e7e6      	b.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80024d2:	bf00      	nop
 80024d4:	080081f8 	.word	0x080081f8
 80024d8:	40021000 	.word	0x40021000
 80024dc:	007a1200 	.word	0x007a1200
 80024e0:	003d0900 	.word	0x003d0900

080024e4 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80024e4:	6803      	ldr	r3, [r0, #0]
{
 80024e6:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80024e8:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80024ea:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80024ec:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80024ee:	b295      	uxth	r5, r2
 80024f0:	b28c      	uxth	r4, r1
 80024f2:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80024f4:	bf1d      	ittte	ne
 80024f6:	69d8      	ldrne	r0, [r3, #28]
 80024f8:	b280      	uxthne	r0, r0
 80024fa:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80024fe:	b280      	uxtheq	r0, r0
 8002500:	bf08      	it	eq
 8002502:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8002506:	bd30      	pop	{r4, r5, pc}

08002508 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002508:	6803      	ldr	r3, [r0, #0]
 800250a:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 800250e:	b29b      	uxth	r3, r3
}
 8002510:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002514:	4770      	bx	lr

08002516 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002516:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002518:	2809      	cmp	r0, #9
 800251a:	d803      	bhi.n	8002524 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800251c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002520:	b2c0      	uxtb	r0, r0
 8002522:	4770      	bx	lr
    Value -= 10U;
 8002524:	380a      	subs	r0, #10
    bcdhigh++;
 8002526:	3301      	adds	r3, #1
    Value -= 10U;
 8002528:	b2c0      	uxtb	r0, r0
 800252a:	e7f5      	b.n	8002518 <RTC_ByteToBcd2+0x2>

0800252c <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 800252c:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800252e:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002530:	f000 000f 	and.w	r0, r0, #15
 8002534:	fb02 0003 	mla	r0, r2, r3, r0
}
 8002538:	b2c0      	uxtb	r0, r0
 800253a:	4770      	bx	lr

0800253c <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 800253c:	2902      	cmp	r1, #2
{
 800253e:	b570      	push	{r4, r5, r6, lr}
 8002540:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 8002544:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8002548:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 800254c:	d81a      	bhi.n	8002584 <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 800254e:	434b      	muls	r3, r1
 8002550:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 8002554:	fbb3 f0f6 	udiv	r0, r3, r6
 8002558:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800255c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002560:	3204      	adds	r2, #4
 8002562:	442a      	add	r2, r5
 8002564:	4410      	add	r0, r2
 8002566:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 800256a:	4418      	add	r0, r3
 800256c:	2364      	movs	r3, #100	; 0x64
 800256e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002572:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8002574:	2307      	movs	r3, #7
 8002576:	fbb0 f3f3 	udiv	r3, r0, r3
 800257a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800257e:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8002580:	b2c0      	uxtb	r0, r0
 8002582:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8002584:	fb03 f001 	mul.w	r0, r3, r1
 8002588:	fbb0 f0f6 	udiv	r0, r0, r6
 800258c:	3202      	adds	r2, #2
 800258e:	442a      	add	r2, r5
 8002590:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002594:	4410      	add	r0, r2
 8002596:	2264      	movs	r2, #100	; 0x64
 8002598:	fbb5 f3f3 	udiv	r3, r5, r3
 800259c:	fbb5 f2f2 	udiv	r2, r5, r2
 80025a0:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 80025a4:	4418      	add	r0, r3
 80025a6:	1a80      	subs	r0, r0, r2
 80025a8:	e7e4      	b.n	8002574 <RTC_WeekDayNum+0x38>

080025aa <RTC_EnterInitMode>:
{
 80025aa:	b538      	push	{r3, r4, r5, lr}
 80025ac:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80025ae:	f7ff fa95 	bl	8001adc <HAL_GetTick>
 80025b2:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	0692      	lsls	r2, r2, #26
 80025ba:	d505      	bpl.n	80025c8 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025bc:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 80025be:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025c0:	f042 0210 	orr.w	r2, r2, #16
 80025c4:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 80025c6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80025c8:	f7ff fa88 	bl	8001adc <HAL_GetTick>
 80025cc:	1b40      	subs	r0, r0, r5
 80025ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80025d2:	d9ef      	bls.n	80025b4 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80025d4:	2003      	movs	r0, #3
}
 80025d6:	bd38      	pop	{r3, r4, r5, pc}

080025d8 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025d8:	6802      	ldr	r2, [r0, #0]
{
 80025da:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025dc:	6853      	ldr	r3, [r2, #4]
{
 80025de:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025e0:	f023 0310 	bic.w	r3, r3, #16
 80025e4:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80025e6:	f7ff fa79 	bl	8001adc <HAL_GetTick>
 80025ea:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	069b      	lsls	r3, r3, #26
 80025f2:	d501      	bpl.n	80025f8 <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 80025f4:	2000      	movs	r0, #0
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80025f8:	f7ff fa70 	bl	8001adc <HAL_GetTick>
 80025fc:	1b40      	subs	r0, r0, r5
 80025fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002602:	d9f3      	bls.n	80025ec <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8002604:	2003      	movs	r0, #3
}
 8002606:	bd38      	pop	{r3, r4, r5, pc}

08002608 <RTC_WriteTimeCounter>:
{
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	4605      	mov	r5, r0
 800260c:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800260e:	f7ff ffcc 	bl	80025aa <RTC_EnterInitMode>
 8002612:	b958      	cbnz	r0, 800262c <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002618:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800261a:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800261c:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800261e:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002620:	f7ff ffda 	bl	80025d8 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8002624:	3000      	adds	r0, #0
 8002626:	bf18      	it	ne
 8002628:	2001      	movne	r0, #1
 800262a:	bd38      	pop	{r3, r4, r5, pc}
 800262c:	2001      	movs	r0, #1
}
 800262e:	bd38      	pop	{r3, r4, r5, pc}

08002630 <RTC_WriteAlarmCounter>:
{
 8002630:	b538      	push	{r3, r4, r5, lr}
 8002632:	4605      	mov	r5, r0
 8002634:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002636:	f7ff ffb8 	bl	80025aa <RTC_EnterInitMode>
 800263a:	b958      	cbnz	r0, 8002654 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002640:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002642:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002644:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002646:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002648:	f7ff ffc6 	bl	80025d8 <RTC_ExitInitMode>
    status = HAL_ERROR;
 800264c:	3000      	adds	r0, #0
 800264e:	bf18      	it	ne
 8002650:	2001      	movne	r0, #1
 8002652:	bd38      	pop	{r3, r4, r5, pc}
 8002654:	2001      	movs	r0, #1
}
 8002656:	bd38      	pop	{r3, r4, r5, pc}

08002658 <HAL_RTC_SetTime>:
{
 8002658:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 800265a:	4604      	mov	r4, r0
 800265c:	b1e0      	cbz	r0, 8002698 <HAL_RTC_SetTime+0x40>
 800265e:	b1d9      	cbz	r1, 8002698 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8002660:	7c03      	ldrb	r3, [r0, #16]
 8002662:	2602      	movs	r6, #2
 8002664:	2b01      	cmp	r3, #1
 8002666:	d046      	beq.n	80026f6 <HAL_RTC_SetTime+0x9e>
 8002668:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800266a:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 800266c:	7403      	strb	r3, [r0, #16]
 800266e:	7808      	ldrb	r0, [r1, #0]
 8002670:	784e      	ldrb	r6, [r1, #1]
 8002672:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8002674:	b992      	cbnz	r2, 800269c <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 8002676:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002678:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 800267c:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800267e:	fb03 5000 	mla	r0, r3, r0, r5
 8002682:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002684:	4629      	mov	r1, r5
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff ffbe 	bl	8002608 <RTC_WriteTimeCounter>
 800268c:	4606      	mov	r6, r0
 800268e:	b1b0      	cbz	r0, 80026be <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002690:	2304      	movs	r3, #4
 8002692:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8002694:	2300      	movs	r3, #0
 8002696:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8002698:	2601      	movs	r6, #1
 800269a:	e02c      	b.n	80026f6 <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800269c:	f7ff ff46 	bl	800252c <RTC_Bcd2ToByte>
 80026a0:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80026a2:	4630      	mov	r0, r6
 80026a4:	f7ff ff42 	bl	800252c <RTC_Bcd2ToByte>
 80026a8:	233c      	movs	r3, #60	; 0x3c
 80026aa:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80026ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026b0:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 80026b4:	4608      	mov	r0, r1
 80026b6:	f7ff ff39 	bl	800252c <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80026ba:	4405      	add	r5, r0
 80026bc:	e7e2      	b.n	8002684 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80026be:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80026c0:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80026c2:	6853      	ldr	r3, [r2, #4]
 80026c4:	f023 0305 	bic.w	r3, r3, #5
 80026c8:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80026ca:	f7ff ff1d 	bl	8002508 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80026ce:	1c43      	adds	r3, r0, #1
 80026d0:	d00d      	beq.n	80026ee <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 80026d2:	4285      	cmp	r5, r0
 80026d4:	d90b      	bls.n	80026ee <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80026d6:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80026da:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80026de:	4620      	mov	r0, r4
 80026e0:	f7ff ffa6 	bl	8002630 <RTC_WriteAlarmCounter>
 80026e4:	b118      	cbz	r0, 80026ee <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80026e6:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80026e8:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80026ea:	7463      	strb	r3, [r4, #17]
 80026ec:	e7d4      	b.n	8002698 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 80026ee:	2301      	movs	r3, #1
 80026f0:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 80026f2:	2300      	movs	r3, #0
 80026f4:	7423      	strb	r3, [r4, #16]
}
 80026f6:	4630      	mov	r0, r6
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080026fc <HAL_RTC_GetTime>:
{
 80026fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002700:	460d      	mov	r5, r1
 8002702:	4690      	mov	r8, r2
  if((hrtc == NULL) || (sTime == NULL))
 8002704:	4604      	mov	r4, r0
 8002706:	b910      	cbnz	r0, 800270e <HAL_RTC_GetTime+0x12>
     return HAL_ERROR;
 8002708:	2001      	movs	r0, #1
 800270a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if((hrtc == NULL) || (sTime == NULL))
 800270e:	2900      	cmp	r1, #0
 8002710:	d0fa      	beq.n	8002708 <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002712:	6803      	ldr	r3, [r0, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	075e      	lsls	r6, r3, #29
 8002718:	d4f6      	bmi.n	8002708 <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 800271a:	f7ff fee3 	bl	80024e4 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 800271e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002722:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002726:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002728:	fb02 0213 	mls	r2, r2, r3, r0
 800272c:	203c      	movs	r0, #60	; 0x3c
 800272e:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002732:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 8002736:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002738:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800273a:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 800273c:	f240 8085 	bls.w	800284a <HAL_RTC_GetTime+0x14e>
    sTime->Hours = (hours % 24U);    
 8002740:	2118      	movs	r1, #24
 8002742:	fbb3 f2f1 	udiv	r2, r3, r1
 8002746:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800274a:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);    
 800274c:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800274e:	f7ff fedb 	bl	8002508 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002752:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002754:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002756:	d004      	beq.n	8002762 <HAL_RTC_GetTime+0x66>
 8002758:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 800275a:	bf2c      	ite	cs
 800275c:	f04f 36ff 	movcs.w	r6, #4294967295
      counter_alarm -= counter_time;
 8002760:	1bc6      	subcc	r6, r0, r7
 8002762:	4b40      	ldr	r3, [pc, #256]	; (8002864 <HAL_RTC_GetTime+0x168>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002764:	4620      	mov	r0, r4
 8002766:	fbb7 f9f3 	udiv	r9, r7, r3
 800276a:	fb03 7919 	mls	r9, r3, r9, r7
 800276e:	4649      	mov	r1, r9
 8002770:	f7ff ff4a 	bl	8002608 <RTC_WriteTimeCounter>
 8002774:	2800      	cmp	r0, #0
 8002776:	d1c7      	bne.n	8002708 <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002778:	1c72      	adds	r2, r6, #1
 800277a:	d02f      	beq.n	80027dc <HAL_RTC_GetTime+0xe0>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800277c:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff ff55 	bl	8002630 <RTC_WriteAlarmCounter>
 8002786:	2800      	cmp	r0, #0
 8002788:	d1be      	bne.n	8002708 <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RTC_GetTime+0x168>)
  for (loop = 0U; loop < DayElapsed; loop++)
 800278c:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 800278e:	fbb7 f7f3 	udiv	r7, r7, r3
  if((nYear % 100U) != 0U) 
 8002792:	f04f 0e64 	mov.w	lr, #100	; 0x64
  if((nYear % 400U) == 0U)
 8002796:	f44f 7cc8 	mov.w	ip, #400	; 0x190
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800279a:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 800279e:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 80027a0:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 80027a2:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 80027a4:	42b7      	cmp	r7, r6
 80027a6:	d11b      	bne.n	80027e0 <HAL_RTC_GetTime+0xe4>
  hrtc->DateToUpdate.Month = month;
 80027a8:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 80027aa:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 80027ac:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 80027ae:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 80027b0:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80027b2:	f7ff fec3 	bl	800253c <RTC_WeekDayNum>
 80027b6:	7320      	strb	r0, [r4, #12]
  if(Format != RTC_FORMAT_BIN)
 80027b8:	f1b8 0f00 	cmp.w	r8, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_RTC_GetTime+0xda>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80027be:	7828      	ldrb	r0, [r5, #0]
 80027c0:	f7ff fea9 	bl	8002516 <RTC_ByteToBcd2>
 80027c4:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80027c6:	7868      	ldrb	r0, [r5, #1]
 80027c8:	f7ff fea5 	bl	8002516 <RTC_ByteToBcd2>
 80027cc:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);  
 80027ce:	78a8      	ldrb	r0, [r5, #2]
 80027d0:	f7ff fea1 	bl	8002516 <RTC_ByteToBcd2>
 80027d4:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 80027d6:	2000      	movs	r0, #0
 80027d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80027dc:	4631      	mov	r1, r6
 80027de:	e7cf      	b.n	8002780 <HAL_RTC_GetTime+0x84>
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80027e0:	1e4b      	subs	r3, r1, #1
 80027e2:	2b09      	cmp	r3, #9
 80027e4:	d835      	bhi.n	8002852 <HAL_RTC_GetTime+0x156>
 80027e6:	fa29 f303 	lsr.w	r3, r9, r3
 80027ea:	07db      	lsls	r3, r3, #31
 80027ec:	d42f      	bmi.n	800284e <HAL_RTC_GetTime+0x152>
    else if((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80027ee:	f021 0302 	bic.w	r3, r1, #2
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d001      	beq.n	80027fa <HAL_RTC_GetTime+0xfe>
 80027f6:	2b09      	cmp	r3, #9
 80027f8:	d104      	bne.n	8002804 <HAL_RTC_GetTime+0x108>
      if(day < 30U)
 80027fa:	2a1d      	cmp	r2, #29
      if(day < 31U)
 80027fc:	d906      	bls.n	800280c <HAL_RTC_GetTime+0x110>
        month++;
 80027fe:	3101      	adds	r1, #1
        day = 1U;
 8002800:	2201      	movs	r2, #1
 8002802:	e02d      	b.n	8002860 <HAL_RTC_GetTime+0x164>
    else if(month == 2U)
 8002804:	2902      	cmp	r1, #2
 8002806:	d12b      	bne.n	8002860 <HAL_RTC_GetTime+0x164>
      if(day < 28U)
 8002808:	2a1b      	cmp	r2, #27
 800280a:	d801      	bhi.n	8002810 <HAL_RTC_GetTime+0x114>
        day++;
 800280c:	3201      	adds	r2, #1
 800280e:	e027      	b.n	8002860 <HAL_RTC_GetTime+0x164>
      else if(day == 28U)
 8002810:	2a1c      	cmp	r2, #28
 8002812:	d113      	bne.n	800283c <HAL_RTC_GetTime+0x140>
        if(RTC_IsLeapYear(year))
 8002814:	b282      	uxth	r2, r0
  if((nYear % 4U) != 0U) 
 8002816:	0793      	lsls	r3, r2, #30
 8002818:	d112      	bne.n	8002840 <HAL_RTC_GetTime+0x144>
  if((nYear % 100U) != 0U) 
 800281a:	fbb2 f3fe 	udiv	r3, r2, lr
 800281e:	fb0e 2313 	mls	r3, lr, r3, r2
 8002822:	b29b      	uxth	r3, r3
 8002824:	b97b      	cbnz	r3, 8002846 <HAL_RTC_GetTime+0x14a>
  if((nYear % 400U) == 0U)
 8002826:	fbb2 f3fc 	udiv	r3, r2, ip
 800282a:	fb0c 2313 	mls	r3, ip, r3, r2
 800282e:	b29b      	uxth	r3, r3
          day++;
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf16      	itet	ne
 8002834:	2201      	movne	r2, #1
 8002836:	221d      	moveq	r2, #29
 8002838:	2103      	movne	r1, #3
 800283a:	e011      	b.n	8002860 <HAL_RTC_GetTime+0x164>
      else if(day == 29U)
 800283c:	2a1d      	cmp	r2, #29
 800283e:	d10f      	bne.n	8002860 <HAL_RTC_GetTime+0x164>
          day = 1U;
 8002840:	2201      	movs	r2, #1
          month++;
 8002842:	2103      	movs	r1, #3
 8002844:	e00c      	b.n	8002860 <HAL_RTC_GetTime+0x164>
          day++;
 8002846:	221d      	movs	r2, #29
 8002848:	e00a      	b.n	8002860 <HAL_RTC_GetTime+0x164>
    sTime->Hours = hours;    
 800284a:	702b      	strb	r3, [r5, #0]
 800284c:	e7b4      	b.n	80027b8 <HAL_RTC_GetTime+0xbc>
      if(day < 31U)
 800284e:	2a1e      	cmp	r2, #30
 8002850:	e7d4      	b.n	80027fc <HAL_RTC_GetTime+0x100>
       (month == 8U) || (month == 10U) || (month == 12U))
 8002852:	290c      	cmp	r1, #12
 8002854:	d1cb      	bne.n	80027ee <HAL_RTC_GetTime+0xf2>
      if(day < 31U)
 8002856:	2a1e      	cmp	r2, #30
 8002858:	d9d8      	bls.n	800280c <HAL_RTC_GetTime+0x110>
          day = 1U;
 800285a:	2201      	movs	r2, #1
          month = 1U;
 800285c:	4611      	mov	r1, r2
          year++;
 800285e:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8002860:	3601      	adds	r6, #1
 8002862:	e79f      	b.n	80027a4 <HAL_RTC_GetTime+0xa8>
 8002864:	00015180 	.word	0x00015180

08002868 <HAL_RTC_SetDate>:
{
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 800286c:	4604      	mov	r4, r0
 800286e:	b358      	cbz	r0, 80028c8 <HAL_RTC_SetDate+0x60>
 8002870:	b351      	cbz	r1, 80028c8 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 8002872:	7c03      	ldrb	r3, [r0, #16]
 8002874:	2002      	movs	r0, #2
 8002876:	2b01      	cmp	r3, #1
 8002878:	d027      	beq.n	80028ca <HAL_RTC_SetDate+0x62>
 800287a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800287c:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 800287e:	7423      	strb	r3, [r4, #16]
 8002880:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002882:	bb1a      	cbnz	r2, 80028cc <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002884:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002886:	784b      	ldrb	r3, [r1, #1]
 8002888:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800288a:	788b      	ldrb	r3, [r1, #2]
 800288c:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800288e:	7ba2      	ldrb	r2, [r4, #14]
 8002890:	7b61      	ldrb	r1, [r4, #13]
 8002892:	7be0      	ldrb	r0, [r4, #15]
 8002894:	f7ff fe52 	bl	800253c <RTC_WeekDayNum>
 8002898:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800289a:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff fe21 	bl	80024e4 <RTC_ReadTimeCounter>
  if (hours > 24U)
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_RTC_SetDate+0xac>)
 80028a4:	4298      	cmp	r0, r3
 80028a6:	d930      	bls.n	800290a <HAL_RTC_SetDate+0xa2>
 80028a8:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 80028ac:	fbb0 f5f3 	udiv	r5, r0, r3
 80028b0:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80028b4:	4620      	mov	r0, r4
 80028b6:	4629      	mov	r1, r5
 80028b8:	f7ff fea6 	bl	8002608 <RTC_WriteTimeCounter>
 80028bc:	4606      	mov	r6, r0
 80028be:	b188      	cbz	r0, 80028e4 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80028c0:	2304      	movs	r3, #4
 80028c2:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80028c4:	2300      	movs	r3, #0
 80028c6:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 80028c8:	2001      	movs	r0, #1
}
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80028cc:	f7ff fe2e 	bl	800252c <RTC_Bcd2ToByte>
 80028d0:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80028d2:	7848      	ldrb	r0, [r1, #1]
 80028d4:	f7ff fe2a 	bl	800252c <RTC_Bcd2ToByte>
 80028d8:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80028da:	7888      	ldrb	r0, [r1, #2]
 80028dc:	f7ff fe26 	bl	800252c <RTC_Bcd2ToByte>
 80028e0:	73a0      	strb	r0, [r4, #14]
 80028e2:	e7d4      	b.n	800288e <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80028e4:	4620      	mov	r0, r4
 80028e6:	f7ff fe0f 	bl	8002508 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80028ea:	1c43      	adds	r3, r0, #1
 80028ec:	d00d      	beq.n	800290a <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 80028ee:	4285      	cmp	r5, r0
 80028f0:	d90b      	bls.n	800290a <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80028f2:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80028f6:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80028fa:	4620      	mov	r0, r4
 80028fc:	f7ff fe98 	bl	8002630 <RTC_WriteAlarmCounter>
 8002900:	b118      	cbz	r0, 800290a <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002902:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8002904:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002906:	7463      	strb	r3, [r4, #17]
 8002908:	e7de      	b.n	80028c8 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 800290a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 800290c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 800290e:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8002910:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	00015f8f 	.word	0x00015f8f

08002918 <HAL_RTC_GetDate>:
{
 8002918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800291a:	4617      	mov	r7, r2
  RTC_TimeTypeDef stime = {0U};
 800291c:	2200      	movs	r2, #0
{
 800291e:	460c      	mov	r4, r1
  RTC_TimeTypeDef stime = {0U};
 8002920:	f8ad 2004 	strh.w	r2, [sp, #4]
 8002924:	f88d 2006 	strb.w	r2, [sp, #6]
  if((hrtc == NULL) || (sDate == NULL))
 8002928:	4605      	mov	r5, r0
 800292a:	b918      	cbnz	r0, 8002934 <HAL_RTC_GetDate+0x1c>
     return HAL_ERROR;
 800292c:	2201      	movs	r2, #1
}
 800292e:	4610      	mov	r0, r2
 8002930:	b003      	add	sp, #12
 8002932:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((hrtc == NULL) || (sDate == NULL))
 8002934:	2900      	cmp	r1, #0
 8002936:	d0f9      	beq.n	800292c <HAL_RTC_GetDate+0x14>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002938:	a901      	add	r1, sp, #4
 800293a:	f7ff fedf 	bl	80026fc <HAL_RTC_GetTime>
 800293e:	4602      	mov	r2, r0
 8002940:	2800      	cmp	r0, #0
 8002942:	d1f3      	bne.n	800292c <HAL_RTC_GetDate+0x14>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002944:	7b2b      	ldrb	r3, [r5, #12]
 8002946:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002948:	7be8      	ldrb	r0, [r5, #15]
 800294a:	70e0      	strb	r0, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800294c:	7b6e      	ldrb	r6, [r5, #13]
 800294e:	7066      	strb	r6, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002950:	7ba9      	ldrb	r1, [r5, #14]
 8002952:	70a1      	strb	r1, [r4, #2]
  if(Format != RTC_FORMAT_BIN)
 8002954:	2f00      	cmp	r7, #0
 8002956:	d0ea      	beq.n	800292e <HAL_RTC_GetDate+0x16>
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002958:	f7ff fddd 	bl	8002516 <RTC_ByteToBcd2>
 800295c:	70e0      	strb	r0, [r4, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800295e:	4630      	mov	r0, r6
 8002960:	f7ff fdd9 	bl	8002516 <RTC_ByteToBcd2>
 8002964:	7060      	strb	r0, [r4, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);  
 8002966:	4608      	mov	r0, r1
 8002968:	f7ff fdd5 	bl	8002516 <RTC_ByteToBcd2>
 800296c:	70a0      	strb	r0, [r4, #2]
 800296e:	e7de      	b.n	800292e <HAL_RTC_GetDate+0x16>

08002970 <HAL_RTC_WaitForSynchro>:
{
 8002970:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002972:	4604      	mov	r4, r0
 8002974:	b1a8      	cbz	r0, 80029a2 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002976:	6802      	ldr	r2, [r0, #0]
 8002978:	6853      	ldr	r3, [r2, #4]
 800297a:	f023 0308 	bic.w	r3, r3, #8
 800297e:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002980:	f7ff f8ac 	bl	8001adc <HAL_GetTick>
 8002984:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	071b      	lsls	r3, r3, #28
 800298c:	d501      	bpl.n	8002992 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 800298e:	2000      	movs	r0, #0
 8002990:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8002992:	f7ff f8a3 	bl	8001adc <HAL_GetTick>
 8002996:	1b40      	subs	r0, r0, r5
 8002998:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800299c:	d9f3      	bls.n	8002986 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800299e:	2003      	movs	r0, #3
}
 80029a0:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
 80029a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080029a8 <HAL_RTC_Init>:
{
 80029a8:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 80029aa:	4604      	mov	r4, r0
 80029ac:	b170      	cbz	r0, 80029cc <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80029ae:	7c43      	ldrb	r3, [r0, #17]
 80029b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029b4:	b913      	cbnz	r3, 80029bc <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80029b6:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80029b8:	f7fe fc68 	bl	800128c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80029bc:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029be:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80029c0:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029c2:	f7ff ffd5 	bl	8002970 <HAL_RTC_WaitForSynchro>
 80029c6:	b118      	cbz	r0, 80029d0 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029c8:	2304      	movs	r3, #4
 80029ca:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 80029cc:	2001      	movs	r0, #1
}
 80029ce:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7ff fdea 	bl	80025aa <RTC_EnterInitMode>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d1f6      	bne.n	80029c8 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80029da:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80029dc:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80029de:	6853      	ldr	r3, [r2, #4]
 80029e0:	f023 0307 	bic.w	r3, r3, #7
 80029e4:	6053      	str	r3, [r2, #4]
 80029e6:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80029e8:	b118      	cbz	r0, 80029f2 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80029ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80029ec:	f021 0101 	bic.w	r1, r1, #1
 80029f0:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80029f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029f4:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80029f8:	4303      	orrs	r3, r0
 80029fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80029fc:	6860      	ldr	r0, [r4, #4]
 80029fe:	1c43      	adds	r3, r0, #1
 8002a00:	d105      	bne.n	8002a0e <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002a02:	2001      	movs	r0, #1
 8002a04:	f7ff fcec 	bl	80023e0 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d0dd      	beq.n	80029c8 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8002a0c:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	6893      	ldr	r3, [r2, #8]
 8002a12:	f023 030f 	bic.w	r3, r3, #15
 8002a16:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002a1a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002a1c:	68d3      	ldr	r3, [r2, #12]
 8002a1e:	b280      	uxth	r0, r0
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	4318      	orrs	r0, r3
 8002a26:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f7ff fdd5 	bl	80025d8 <RTC_ExitInitMode>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	b110      	cbz	r0, 8002a38 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a32:	2204      	movs	r2, #4
 8002a34:	7462      	strb	r2, [r4, #17]
 8002a36:	e7c9      	b.n	80029cc <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8002a38:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002a3a:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002a3c:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002a3e:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8002a40:	bd10      	pop	{r4, pc}
 8002a42:	bf00      	nop
 8002a44:	40006c00 	.word	0x40006c00

08002a48 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	4688      	mov	r8, r1
 8002a50:	4617      	mov	r7, r2
 8002a52:	461d      	mov	r5, r3
 8002a54:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	6893      	ldr	r3, [r2, #8]
 8002a5a:	ea38 0303 	bics.w	r3, r8, r3
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	429f      	cmp	r7, r3
 8002a66:	d102      	bne.n	8002a6e <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002a68:	2000      	movs	r0, #0
}
 8002a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002a6e:	1c6b      	adds	r3, r5, #1
 8002a70:	d0f2      	beq.n	8002a58 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002a72:	bb55      	cbnz	r5, 8002aca <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a7c:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a7e:	6862      	ldr	r2, [r4, #4]
 8002a80:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002a84:	d10a      	bne.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002a86:	68a2      	ldr	r2, [r4, #8]
 8002a88:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002a8c:	d002      	beq.n	8002a94 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8002a8e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002a92:	d103      	bne.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a9a:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a9c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a9e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002aa2:	d109      	bne.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aaa:	0412      	lsls	r2, r2, #16
 8002aac:	0c12      	lsrs	r2, r2, #16
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ab6:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2003      	movs	r0, #3
 8002ac2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002aca:	f7ff f807 	bl	8001adc <HAL_GetTick>
 8002ace:	1b80      	subs	r0, r0, r6
 8002ad0:	4285      	cmp	r5, r0
 8002ad2:	d8c0      	bhi.n	8002a56 <SPI_WaitFlagStateUntilTimeout+0xe>
 8002ad4:	e7ce      	b.n	8002a74 <SPI_WaitFlagStateUntilTimeout+0x2c>

08002ad6 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad6:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad8:	460b      	mov	r3, r1
 8002ada:	9200      	str	r2, [sp, #0]
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	2200      	movs	r2, #0
{
 8002ae0:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae2:	f7ff ffb1 	bl	8002a48 <SPI_WaitFlagStateUntilTimeout>
 8002ae6:	b120      	cbz	r0, 8002af2 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002ae8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002aec:	f043 0320 	orr.w	r3, r3, #32
 8002af0:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002af2:	b002      	add	sp, #8
 8002af4:	bd10      	pop	{r4, pc}

08002af6 <HAL_SPI_Transmit>:
{
 8002af6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002afa:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002afc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002b00:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002b02:	2b01      	cmp	r3, #1
{
 8002b04:	460d      	mov	r5, r1
 8002b06:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002b08:	f000 809c 	beq.w	8002c44 <HAL_SPI_Transmit+0x14e>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002b12:	f7fe ffe3 	bl	8001adc <HAL_GetTick>
 8002b16:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8002b18:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002b1c:	b2c0      	uxtb	r0, r0
 8002b1e:	2801      	cmp	r0, #1
 8002b20:	f040 808e 	bne.w	8002c40 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8002b24:	2d00      	cmp	r5, #0
 8002b26:	d04e      	beq.n	8002bc6 <HAL_SPI_Transmit+0xd0>
 8002b28:	f1b8 0f00 	cmp.w	r8, #0
 8002b2c:	d04b      	beq.n	8002bc6 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b38:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002b3a:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002b3e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b40:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b42:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b44:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b46:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b48:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b4e:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8002b50:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002b54:	bf02      	ittt	eq
 8002b56:	681a      	ldreq	r2, [r3, #0]
 8002b58:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8002b5c:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002b62:	bf5e      	ittt	pl
 8002b64:	681a      	ldrpl	r2, [r3, #0]
 8002b66:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002b6a:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b6c:	68e2      	ldr	r2, [r4, #12]
 8002b6e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002b72:	6862      	ldr	r2, [r4, #4]
 8002b74:	d138      	bne.n	8002be8 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002b76:	b11a      	cbz	r2, 8002b80 <HAL_SPI_Transmit+0x8a>
 8002b78:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002b7a:	b292      	uxth	r2, r2
 8002b7c:	2a01      	cmp	r2, #1
 8002b7e:	d106      	bne.n	8002b8e <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8002b80:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002b84:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8002b86:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002b8e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	b993      	cbnz	r3, 8002bba <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002b94:	9700      	str	r7, [sp, #0]
 8002b96:	4633      	mov	r3, r6
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff ff53 	bl	8002a48 <SPI_WaitFlagStateUntilTimeout>
 8002ba2:	b978      	cbnz	r0, 8002bc4 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002ba4:	463a      	mov	r2, r7
 8002ba6:	4631      	mov	r1, r6
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7ff ff94 	bl	8002ad6 <SPI_CheckFlag_BSY>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d038      	beq.n	8002c24 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bb2:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8002bb4:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bb6:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8002bb8:	e005      	b.n	8002bc6 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	0790      	lsls	r0, r2, #30
 8002bc0:	d4de      	bmi.n	8002b80 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002bc2:	b94e      	cbnz	r6, 8002bd8 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8002bc4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002bd2:	b004      	add	sp, #16
 8002bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002bd8:	1c71      	adds	r1, r6, #1
 8002bda:	d0d8      	beq.n	8002b8e <HAL_SPI_Transmit+0x98>
 8002bdc:	f7fe ff7e 	bl	8001adc <HAL_GetTick>
 8002be0:	1bc0      	subs	r0, r0, r7
 8002be2:	4286      	cmp	r6, r0
 8002be4:	d8d3      	bhi.n	8002b8e <HAL_SPI_Transmit+0x98>
 8002be6:	e7ed      	b.n	8002bc4 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002be8:	b11a      	cbz	r2, 8002bf2 <HAL_SPI_Transmit+0xfc>
 8002bea:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002bec:	b292      	uxth	r2, r2
 8002bee:	2a01      	cmp	r2, #1
 8002bf0:	d106      	bne.n	8002c00 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002bf2:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002bf6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002bf8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002c00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0c5      	beq.n	8002b94 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	0792      	lsls	r2, r2, #30
 8002c0e:	d4f0      	bmi.n	8002bf2 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002c10:	2e00      	cmp	r6, #0
 8002c12:	d0d7      	beq.n	8002bc4 <HAL_SPI_Transmit+0xce>
 8002c14:	1c73      	adds	r3, r6, #1
 8002c16:	d0f3      	beq.n	8002c00 <HAL_SPI_Transmit+0x10a>
 8002c18:	f7fe ff60 	bl	8001adc <HAL_GetTick>
 8002c1c:	1bc0      	subs	r0, r0, r7
 8002c1e:	4286      	cmp	r6, r0
 8002c20:	d8ee      	bhi.n	8002c00 <HAL_SPI_Transmit+0x10a>
 8002c22:	e7cf      	b.n	8002bc4 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c24:	68a3      	ldr	r3, [r4, #8]
 8002c26:	b933      	cbnz	r3, 8002c36 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c28:	9303      	str	r3, [sp, #12]
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	9203      	str	r2, [sp, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	9303      	str	r3, [sp, #12]
 8002c34:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002c38:	3000      	adds	r0, #0
 8002c3a:	bf18      	it	ne
 8002c3c:	2001      	movne	r0, #1
 8002c3e:	e7c2      	b.n	8002bc6 <HAL_SPI_Transmit+0xd0>
 8002c40:	2002      	movs	r0, #2
 8002c42:	e7c0      	b.n	8002bc6 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8002c44:	2002      	movs	r0, #2
 8002c46:	e7c4      	b.n	8002bd2 <HAL_SPI_Transmit+0xdc>

08002c48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c48:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d034      	beq.n	8002cba <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002c54:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002c58:	b90b      	cbnz	r3, 8002c5e <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c5a:	f7fe fb35 	bl	80012c8 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002c5e:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c60:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002c62:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002c66:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c68:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c70:	6863      	ldr	r3, [r4, #4]
 8002c72:	69a2      	ldr	r2, [r4, #24]
 8002c74:	4303      	orrs	r3, r0
 8002c76:	68e0      	ldr	r0, [r4, #12]
 8002c78:	4303      	orrs	r3, r0
 8002c7a:	6920      	ldr	r0, [r4, #16]
 8002c7c:	4303      	orrs	r3, r0
 8002c7e:	6960      	ldr	r0, [r4, #20]
 8002c80:	4303      	orrs	r3, r0
 8002c82:	69e0      	ldr	r0, [r4, #28]
 8002c84:	4303      	orrs	r3, r0
 8002c86:	6a20      	ldr	r0, [r4, #32]
 8002c88:	4303      	orrs	r3, r0
 8002c8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002c8c:	4303      	orrs	r3, r0
 8002c8e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002c92:	4303      	orrs	r3, r0
 8002c94:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002c96:	0c12      	lsrs	r2, r2, #16
 8002c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c9a:	f002 0204 	and.w	r2, r2, #4
 8002c9e:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002ca0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ca2:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002ca4:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ca6:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ca8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cae:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8002cb0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cb2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002cb4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8002cb8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cba:	2001      	movs	r0, #1
}
 8002cbc:	bd10      	pop	{r4, pc}

08002cbe <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cbe:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002cc0:	b189      	cbz	r1, 8002ce6 <HAL_TIM_Encoder_Start+0x28>
 8002cc2:	2904      	cmp	r1, #4
 8002cc4:	d007      	beq.n	8002cd6 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8002cd6:	6a1a      	ldr	r2, [r3, #32]
 8002cd8:	f022 0210 	bic.w	r2, r2, #16
 8002cdc:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002cde:	6a1a      	ldr	r2, [r3, #32]
 8002ce0:	f042 0210 	orr.w	r2, r2, #16
 8002ce4:	e006      	b.n	8002cf4 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8002ce6:	6a1a      	ldr	r2, [r3, #32]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8002cf6:	681a      	ldr	r2, [r3, #0]
}
 8002cf8:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	4770      	bx	lr
	...

08002d04 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d04:	4a24      	ldr	r2, [pc, #144]	; (8002d98 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8002d06:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d08:	4290      	cmp	r0, r2
 8002d0a:	d012      	beq.n	8002d32 <TIM_Base_SetConfig+0x2e>
 8002d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d10:	4290      	cmp	r0, r2
 8002d12:	d00e      	beq.n	8002d32 <TIM_Base_SetConfig+0x2e>
 8002d14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d18:	d00b      	beq.n	8002d32 <TIM_Base_SetConfig+0x2e>
 8002d1a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002d1e:	4290      	cmp	r0, r2
 8002d20:	d007      	beq.n	8002d32 <TIM_Base_SetConfig+0x2e>
 8002d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d26:	4290      	cmp	r0, r2
 8002d28:	d003      	beq.n	8002d32 <TIM_Base_SetConfig+0x2e>
 8002d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d2e:	4290      	cmp	r0, r2
 8002d30:	d11d      	bne.n	8002d6e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002d32:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d38:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3a:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <TIM_Base_SetConfig+0x94>)
 8002d3c:	4290      	cmp	r0, r2
 8002d3e:	d012      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d44:	4290      	cmp	r0, r2
 8002d46:	d00e      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d4c:	d00b      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d4e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002d52:	4290      	cmp	r0, r2
 8002d54:	d007      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d5a:	4290      	cmp	r0, r2
 8002d5c:	d003      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d62:	4290      	cmp	r0, r2
 8002d64:	d103      	bne.n	8002d6e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d66:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d6c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002d6e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002d74:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002d76:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d78:	688b      	ldr	r3, [r1, #8]
 8002d7a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d7c:	680b      	ldr	r3, [r1, #0]
 8002d7e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <TIM_Base_SetConfig+0x94>)
 8002d82:	4298      	cmp	r0, r3
 8002d84:	d003      	beq.n	8002d8e <TIM_Base_SetConfig+0x8a>
 8002d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8a:	4298      	cmp	r0, r3
 8002d8c:	d101      	bne.n	8002d92 <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 8002d8e:	690b      	ldr	r3, [r1, #16]
 8002d90:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002d92:	2301      	movs	r3, #1
 8002d94:	6143      	str	r3, [r0, #20]
 8002d96:	4770      	bx	lr
 8002d98:	40012c00 	.word	0x40012c00

08002d9c <HAL_TIM_Encoder_Init>:
{
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	460c      	mov	r4, r1
  if(htim == NULL)
 8002da0:	4605      	mov	r5, r0
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d041      	beq.n	8002e2a <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002da6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002daa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dae:	b91b      	cbnz	r3, 8002db8 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002db0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002db4:	f7fe faaa 	bl	800130c <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002db8:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 8002dba:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002dbc:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002dc0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002dc4:	6883      	ldr	r3, [r0, #8]
 8002dc6:	f023 0307 	bic.w	r3, r3, #7
 8002dca:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dcc:	f7ff ff9a 	bl	8002d04 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002dd2:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002dd6:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002dd8:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8002dda:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ddc:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002dde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002de2:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002de6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002dea:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002dec:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002df0:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002df2:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002dfa:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 8002dfc:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e02:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e06:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002e0a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e0c:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e0e:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e12:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002e14:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8002e16:	6183      	str	r3, [r0, #24]
  htim->State= HAL_TIM_STATE_READY;
 8002e18:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e1a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8002e1e:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8002e20:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 8002e22:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8002e26:	2000      	movs	r0, #0
 8002e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002e2a:	2001      	movs	r0, #1
}
 8002e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e2e <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002e2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002e32:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	f04f 0302 	mov.w	r3, #2
 8002e3a:	d018      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e40:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002e42:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e44:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e46:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e4c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4322      	orrs	r2, r4
 8002e52:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5a:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002e6e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002e70:	bd10      	pop	{r4, pc}

08002e72 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002e72:	b510      	push	{r4, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8002e74:	2018      	movs	r0, #24
 8002e76:	f000 fa9b 	bl	80033b0 <pvPortMalloc>

		if( pxEventBits != NULL )
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	b120      	cbz	r0, 8002e88 <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002e84:	f000 f8cd 	bl	8003022 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8002e88:	4620      	mov	r0, r4
 8002e8a:	bd10      	pop	{r4, pc}

08002e8c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e90:	9f08      	ldr	r7, [sp, #32]
 8002e92:	460d      	mov	r5, r1
 8002e94:	4690      	mov	r8, r2
 8002e96:	4699      	mov	r9, r3
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002e98:	4606      	mov	r6, r0
 8002e9a:	b940      	cbnz	r0, 8002eae <xEventGroupWaitBits+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	e7fe      	b.n	8002eac <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002eae:	f011 4a7f 	ands.w	sl, r1, #4278190080	; 0xff000000
 8002eb2:	d008      	beq.n	8002ec6 <xEventGroupWaitBits+0x3a>
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	e7fe      	b.n	8002ec4 <xEventGroupWaitBits+0x38>
	configASSERT( uxBitsToWaitFor != 0 );
 8002ec6:	b941      	cbnz	r1, 8002eda <xEventGroupWaitBits+0x4e>
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	e7fe      	b.n	8002ed8 <xEventGroupWaitBits+0x4c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eda:	f001 fb31 	bl	8004540 <xTaskGetSchedulerState>
 8002ede:	bb48      	cbnz	r0, 8002f34 <xEventGroupWaitBits+0xa8>
 8002ee0:	b347      	cbz	r7, 8002f34 <xEventGroupWaitBits+0xa8>
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	e7fe      	b.n	8002ef2 <xEventGroupWaitBits+0x66>

	if( xWaitForAllBits == pdFALSE )
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002ef4:	bb43      	cbnz	r3, 8002f48 <xEventGroupWaitBits+0xbc>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002ef6:	b197      	cbz	r7, 8002f1e <xEventGroupWaitBits+0x92>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002ef8:	f1b8 0f00 	cmp.w	r8, #0
 8002efc:	bf0c      	ite	eq
 8002efe:	2100      	moveq	r1, #0
 8002f00:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
 8002f04:	f1b9 0f00 	cmp.w	r9, #0
 8002f08:	d001      	beq.n	8002f0e <xEventGroupWaitBits+0x82>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002f0a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002f0e:	463a      	mov	r2, r7
 8002f10:	4329      	orrs	r1, r5
 8002f12:	1d30      	adds	r0, r6, #4
 8002f14:	f001 f9f4 	bl	8004300 <vTaskPlaceOnUnorderedEventList>
 8002f18:	46ba      	mov	sl, r7
			uxReturn = 0;
 8002f1a:	2400      	movs	r4, #0
 8002f1c:	e01a      	b.n	8002f54 <xEventGroupWaitBits+0xc8>
 8002f1e:	46ba      	mov	sl, r7
 8002f20:	e018      	b.n	8002f54 <xEventGroupWaitBits+0xc8>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002f22:	429d      	cmp	r5, r3
 8002f24:	d133      	bne.n	8002f8e <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 8002f26:	f1b8 0f00 	cmp.w	r8, #0
 8002f2a:	d030      	beq.n	8002f8e <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002f2c:	ea24 0505 	bic.w	r5, r4, r5
 8002f30:	6035      	str	r5, [r6, #0]
 8002f32:	e02c      	b.n	8002f8e <xEventGroupWaitBits+0x102>
	vTaskSuspendAll();
 8002f34:	f000 ffe8 	bl	8003f08 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002f38:	6834      	ldr	r4, [r6, #0]
 8002f3a:	ea05 0304 	and.w	r3, r5, r4
	if( xWaitForAllBits == pdFALSE )
 8002f3e:	f1b9 0f00 	cmp.w	r9, #0
 8002f42:	d0d7      	beq.n	8002ef4 <xEventGroupWaitBits+0x68>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002f44:	429d      	cmp	r5, r3
 8002f46:	d1d6      	bne.n	8002ef6 <xEventGroupWaitBits+0x6a>
			if( xClearOnExit != pdFALSE )
 8002f48:	f1b8 0f00 	cmp.w	r8, #0
 8002f4c:	d002      	beq.n	8002f54 <xEventGroupWaitBits+0xc8>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002f4e:	ea24 0305 	bic.w	r3, r4, r5
 8002f52:	6033      	str	r3, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
 8002f54:	f001 f878 	bl	8004048 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8002f58:	f1ba 0f00 	cmp.w	sl, #0
 8002f5c:	d01b      	beq.n	8002f96 <xEventGroupWaitBits+0x10a>
		if( xAlreadyYielded == pdFALSE )
 8002f5e:	b938      	cbnz	r0, 8002f70 <xEventGroupWaitBits+0xe4>
			portYIELD_WITHIN_API();
 8002f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <xEventGroupWaitBits+0x110>)
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8002f70:	f001 fb46 	bl	8004600 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002f74:	0183      	lsls	r3, r0, #6
		uxReturn = uxTaskResetEventItemValue();
 8002f76:	4604      	mov	r4, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002f78:	d40b      	bmi.n	8002f92 <xEventGroupWaitBits+0x106>
			taskENTER_CRITICAL();
 8002f7a:	f000 f8eb 	bl	8003154 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8002f7e:	6834      	ldr	r4, [r6, #0]
 8002f80:	ea05 0304 	and.w	r3, r5, r4
	if( xWaitForAllBits == pdFALSE )
 8002f84:	f1b9 0f00 	cmp.w	r9, #0
 8002f88:	d1cb      	bne.n	8002f22 <xEventGroupWaitBits+0x96>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1cb      	bne.n	8002f26 <xEventGroupWaitBits+0x9a>
			taskEXIT_CRITICAL();
 8002f8e:	f000 f903 	bl	8003198 <vPortExitCritical>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002f92:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
}
 8002f96:	4620      	mov	r0, r4
 8002f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <xEventGroupSetBits>:
{
 8002fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa2:	460f      	mov	r7, r1
	configASSERT( xEventGroup );
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	b940      	cbnz	r0, 8002fba <xEventGroupSetBits+0x1a>
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	e7fe      	b.n	8002fb8 <xEventGroupSetBits+0x18>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002fba:	f011 457f 	ands.w	r5, r1, #4278190080	; 0xff000000
 8002fbe:	d008      	beq.n	8002fd2 <xEventGroupSetBits+0x32>
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	e7fe      	b.n	8002fd0 <xEventGroupSetBits+0x30>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fd2:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 8002fd6:	f000 ff97 	bl	8003f08 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002fda:	6823      	ldr	r3, [r4, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002fdc:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002fde:	433b      	orrs	r3, r7
 8002fe0:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 8002fe2:	4286      	cmp	r6, r0
 8002fe4:	6821      	ldr	r1, [r4, #0]
 8002fe6:	d106      	bne.n	8002ff6 <xEventGroupSetBits+0x56>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002fe8:	ea21 0105 	bic.w	r1, r1, r5
 8002fec:	6021      	str	r1, [r4, #0]
	( void ) xTaskResumeAll();
 8002fee:	f001 f82b 	bl	8004048 <xTaskResumeAll>
 8002ff2:	6820      	ldr	r0, [r4, #0]
}
 8002ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002ff6:	e890 0088 	ldmia.w	r0, {r3, r7}
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002ffa:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002ffe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003002:	d103      	bne.n	800300c <xEventGroupSetBits+0x6c>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003004:	420a      	tst	r2, r1
 8003006:	d104      	bne.n	8003012 <xEventGroupSetBits+0x72>
{
 8003008:	4638      	mov	r0, r7
 800300a:	e7ea      	b.n	8002fe2 <xEventGroupSetBits+0x42>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800300c:	ea32 0e01 	bics.w	lr, r2, r1
 8003010:	d1fa      	bne.n	8003008 <xEventGroupSetBits+0x68>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003012:	01db      	lsls	r3, r3, #7
 8003014:	d500      	bpl.n	8003018 <xEventGroupSetBits+0x78>
					uxBitsToClear |= uxBitsWaitedFor;
 8003016:	4315      	orrs	r5, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003018:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800301c:	f001 f9fe 	bl	800441c <vTaskRemoveFromUnorderedEventList>
 8003020:	e7f2      	b.n	8003008 <xEventGroupSetBits+0x68>

08003022 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003022:	f100 0308 	add.w	r3, r0, #8
 8003026:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003028:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800302c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800302e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003030:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003032:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003034:	6003      	str	r3, [r0, #0]
 8003036:	4770      	bx	lr

08003038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	6103      	str	r3, [r0, #16]
 800303c:	4770      	bx	lr

0800303e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800303e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003040:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003042:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003044:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800304a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800304c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800304e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003050:	3301      	adds	r3, #1
 8003052:	6003      	str	r3, [r0, #0]
 8003054:	4770      	bx	lr

08003056 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003056:	680a      	ldr	r2, [r1, #0]
{
 8003058:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800305a:	1c53      	adds	r3, r2, #1
 800305c:	d10a      	bne.n	8003074 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800305e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003064:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003066:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003068:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800306a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800306c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800306e:	3301      	adds	r3, #1
 8003070:	6003      	str	r3, [r0, #0]
 8003072:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003074:	f100 0308 	add.w	r3, r0, #8
 8003078:	685c      	ldr	r4, [r3, #4]
 800307a:	6825      	ldr	r5, [r4, #0]
 800307c:	42aa      	cmp	r2, r5
 800307e:	d3ef      	bcc.n	8003060 <vListInsert+0xa>
 8003080:	4623      	mov	r3, r4
 8003082:	e7f9      	b.n	8003078 <vListInsert+0x22>

08003084 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003084:	6841      	ldr	r1, [r0, #4]
 8003086:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003088:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800308a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800308c:	6882      	ldr	r2, [r0, #8]
 800308e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003094:	bf08      	it	eq
 8003096:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003098:	2200      	movs	r2, #0
 800309a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	3a01      	subs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030a2:	6818      	ldr	r0, [r3, #0]
}
 80030a4:	4770      	bx	lr
	...

080030a8 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
	volatile uint32_t ulDummy = 0UL;
 80030a8:	2300      	movs	r3, #0
{
 80030aa:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0UL;
 80030ac:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <prvTaskExitError+0x3c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
 80030b4:	d008      	beq.n	80030c8 <prvTaskExitError+0x20>
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	e7fe      	b.n	80030c6 <prvTaskExitError+0x1e>
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80030d8:	9b01      	ldr	r3, [sp, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0fc      	beq.n	80030d8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80030de:	b002      	add	sp, #8
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000014 	.word	0x20000014

080030e8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80030e8:	4806      	ldr	r0, [pc, #24]	; (8003104 <prvPortStartFirstTask+0x1c>)
 80030ea:	6800      	ldr	r0, [r0, #0]
 80030ec:	6800      	ldr	r0, [r0, #0]
 80030ee:	f380 8808 	msr	MSP, r0
 80030f2:	b662      	cpsie	i
 80030f4:	b661      	cpsie	f
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	df00      	svc	0
 8003100:	bf00      	nop
 8003102:	0000      	.short	0x0000
 8003104:	e000ed08 	.word	0xe000ed08

08003108 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800310c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003112:	f021 0101 	bic.w	r1, r1, #1
 8003116:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800311a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800311e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8003122:	3840      	subs	r0, #64	; 0x40
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	080030a9 	.word	0x080030a9
 800312c:	00000000 	.word	0x00000000

08003130 <SVC_Handler>:
	__asm volatile(
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <pxCurrentTCBConst2>)
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	6808      	ldr	r0, [r1, #0]
 8003136:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800313a:	f380 8809 	msr	PSP, r0
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f04f 0000 	mov.w	r0, #0
 8003146:	f380 8811 	msr	BASEPRI, r0
 800314a:	f04e 0e0d 	orr.w	lr, lr, #13
 800314e:	4770      	bx	lr

08003150 <pxCurrentTCBConst2>:
 8003150:	20004374 	.word	0x20004374

08003154 <vPortEnterCritical>:
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003164:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <vPortEnterCritical+0x3c>)
 8003166:	6813      	ldr	r3, [r2, #0]
 8003168:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800316a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800316c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800316e:	d10d      	bne.n	800318c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <vPortEnterCritical+0x40>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003178:	d008      	beq.n	800318c <vPortEnterCritical+0x38>
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	e7fe      	b.n	800318a <vPortEnterCritical+0x36>
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000014 	.word	0x20000014
 8003194:	e000ed04 	.word	0xe000ed04

08003198 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003198:	4a08      	ldr	r2, [pc, #32]	; (80031bc <vPortExitCritical+0x24>)
 800319a:	6813      	ldr	r3, [r2, #0]
 800319c:	b943      	cbnz	r3, 80031b0 <vPortExitCritical+0x18>
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	e7fe      	b.n	80031ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80031b0:	3b01      	subs	r3, #1
 80031b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80031b4:	b90b      	cbnz	r3, 80031ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	4770      	bx	lr
 80031bc:	20000014 	.word	0x20000014

080031c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80031c0:	f3ef 8009 	mrs	r0, PSP
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <pxCurrentTCBConst>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031d0:	6010      	str	r0, [r2, #0]
 80031d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80031d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80031da:	f380 8811 	msr	BASEPRI, r0
 80031de:	f000 ffcf 	bl	8004180 <vTaskSwitchContext>
 80031e2:	f04f 0000 	mov.w	r0, #0
 80031e6:	f380 8811 	msr	BASEPRI, r0
 80031ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	6808      	ldr	r0, [r1, #0]
 80031f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031f6:	f380 8809 	msr	PSP, r0
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	4770      	bx	lr

08003200 <pxCurrentTCBConst>:
 8003200:	20004374 	.word	0x20004374

08003204 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003204:	b508      	push	{r3, lr}
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003216:	f000 fe85 	bl	8003f24 <xTaskIncrementTick>
 800321a:	b118      	cbz	r0, 8003224 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800321c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003220:	4b02      	ldr	r3, [pc, #8]	; (800322c <xPortSysTickHandler+0x28>)
 8003222:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003224:	2300      	movs	r3, #0
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	bd08      	pop	{r3, pc}
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003230:	2200      	movs	r2, #0
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003234:	4905      	ldr	r1, [pc, #20]	; (800324c <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003236:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003238:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800323a:	4a05      	ldr	r2, [pc, #20]	; (8003250 <vPortSetupTimerInterrupt+0x20>)
 800323c:	4905      	ldr	r1, [pc, #20]	; (8003254 <vPortSetupTimerInterrupt+0x24>)
 800323e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e010 	.word	0xe000e010
 800324c:	e000e018 	.word	0xe000e018
 8003250:	e000e014 	.word	0xe000e014
 8003254:	0001193f 	.word	0x0001193f

08003258 <xPortStartScheduler>:
{
 8003258:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800325a:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800325c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800325e:	781a      	ldrb	r2, [r3, #0]
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003268:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800326a:	4a24      	ldr	r2, [pc, #144]	; (80032fc <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003272:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003276:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800327a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800327c:	2207      	movs	r2, #7
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <xPortStartScheduler+0xa8>)
 8003280:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003282:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003286:	1e54      	subs	r4, r2, #1
 8003288:	0600      	lsls	r0, r0, #24
 800328a:	d40d      	bmi.n	80032a8 <xPortStartScheduler+0x50>
 800328c:	b101      	cbz	r1, 8003290 <xPortStartScheduler+0x38>
 800328e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2a03      	cmp	r2, #3
 8003294:	d011      	beq.n	80032ba <xPortStartScheduler+0x62>
	__asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	e7fe      	b.n	80032a6 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80032ac:	2101      	movs	r1, #1
 80032ae:	0052      	lsls	r2, r2, #1
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	f88d 2003 	strb.w	r2, [sp, #3]
 80032b6:	4622      	mov	r2, r4
 80032b8:	e7e3      	b.n	8003282 <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 80032ba:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032bc:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80032c2:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80032c4:	9b01      	ldr	r3, [sp, #4]
 80032c6:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <xPortStartScheduler+0xa0>)
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80032cc:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <xPortStartScheduler+0xac>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80032d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80032dc:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80032de:	f7ff ffa7 	bl	8003230 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <xPortStartScheduler+0xb0>)
 80032e4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80032e6:	f7ff feff 	bl	80030e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80032ea:	f000 ff49 	bl	8004180 <vTaskSwitchContext>
	prvTaskExitError();
 80032ee:	f7ff fedb 	bl	80030a8 <prvTaskExitError>
}
 80032f2:	4620      	mov	r0, r4
 80032f4:	b002      	add	sp, #8
 80032f6:	bd10      	pop	{r4, pc}
 80032f8:	e000e400 	.word	0xe000e400
 80032fc:	20002754 	.word	0x20002754
 8003300:	20002758 	.word	0x20002758
 8003304:	e000ed20 	.word	0xe000ed20
 8003308:	20000014 	.word	0x20000014

0800330c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800330c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003310:	2b0f      	cmp	r3, #15
 8003312:	d90e      	bls.n	8003332 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003314:	4a10      	ldr	r2, [pc, #64]	; (8003358 <vPortValidateInterruptPriority+0x4c>)
 8003316:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003318:	4a10      	ldr	r2, [pc, #64]	; (800335c <vPortValidateInterruptPriority+0x50>)
 800331a:	7812      	ldrb	r2, [r2, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d908      	bls.n	8003332 <vPortValidateInterruptPriority+0x26>
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	e7fe      	b.n	8003330 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <vPortValidateInterruptPriority+0x54>)
 8003334:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <vPortValidateInterruptPriority+0x58>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800333e:	4293      	cmp	r3, r2
 8003340:	d908      	bls.n	8003354 <vPortValidateInterruptPriority+0x48>
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	e7fe      	b.n	8003352 <vPortValidateInterruptPriority+0x46>
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000e3f0 	.word	0xe000e3f0
 800335c:	20002754 	.word	0x20002754
 8003360:	e000ed0c 	.word	0xe000ed0c
 8003364:	20002758 	.word	0x20002758

08003368 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003368:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <prvInsertBlockIntoFreeList+0x40>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4282      	cmp	r2, r0
 8003370:	d318      	bcc.n	80033a4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003372:	685c      	ldr	r4, [r3, #4]
 8003374:	1919      	adds	r1, r3, r4
 8003376:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003378:	bf01      	itttt	eq
 800337a:	6841      	ldreq	r1, [r0, #4]
 800337c:	4618      	moveq	r0, r3
 800337e:	1909      	addeq	r1, r1, r4
 8003380:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003382:	6844      	ldr	r4, [r0, #4]
 8003384:	1901      	adds	r1, r0, r4
 8003386:	428a      	cmp	r2, r1
 8003388:	d107      	bne.n	800339a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800338a:	4908      	ldr	r1, [pc, #32]	; (80033ac <prvInsertBlockIntoFreeList+0x44>)
 800338c:	6809      	ldr	r1, [r1, #0]
 800338e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003390:	bf1f      	itttt	ne
 8003392:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003394:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003396:	1909      	addne	r1, r1, r4
 8003398:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800339a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800339c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800339e:	bf18      	it	ne
 80033a0:	6018      	strne	r0, [r3, #0]
 80033a2:	bd10      	pop	{r4, pc}
 80033a4:	4613      	mov	r3, r2
 80033a6:	e7e1      	b.n	800336c <prvInsertBlockIntoFreeList+0x4>
 80033a8:	2000436c 	.word	0x2000436c
 80033ac:	2000275c 	.word	0x2000275c

080033b0 <pvPortMalloc>:
{
 80033b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80033b6:	f000 fda7 	bl	8003f08 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80033ba:	493e      	ldr	r1, [pc, #248]	; (80034b4 <pvPortMalloc+0x104>)
 80033bc:	4d3e      	ldr	r5, [pc, #248]	; (80034b8 <pvPortMalloc+0x108>)
 80033be:	680b      	ldr	r3, [r1, #0]
 80033c0:	bb0b      	cbnz	r3, 8003406 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80033c2:	4a3e      	ldr	r2, [pc, #248]	; (80034bc <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033c4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033c6:	bf1d      	ittte	ne
 80033c8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033ca:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033ce:	f502 53e0 	addne.w	r3, r2, #7168	; 0x1c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033d2:	f44f 53e0 	moveq.w	r3, #7168	; 0x1c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033d6:	bf1c      	itt	ne
 80033d8:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033da:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80033dc:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033de:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033e0:	4e37      	ldr	r6, [pc, #220]	; (80034c0 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 80033e2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033e4:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80033e8:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033ea:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80033ec:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80033ee:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 80033f0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033f2:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033f4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033f6:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033f8:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033fa:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033fc:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <pvPortMalloc+0x118>)
 80033fe:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003404:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003406:	682f      	ldr	r7, [r5, #0]
 8003408:	4227      	tst	r7, r4
 800340a:	d116      	bne.n	800343a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800340c:	2c00      	cmp	r4, #0
 800340e:	d040      	beq.n	8003492 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8003410:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003414:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003416:	bf1c      	itt	ne
 8003418:	f023 0307 	bicne.w	r3, r3, #7
 800341c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800341e:	b163      	cbz	r3, 800343a <pvPortMalloc+0x8a>
 8003420:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <pvPortMalloc+0x118>)
 8003422:	6816      	ldr	r6, [r2, #0]
 8003424:	4690      	mov	r8, r2
 8003426:	42b3      	cmp	r3, r6
 8003428:	d807      	bhi.n	800343a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800342a:	4a25      	ldr	r2, [pc, #148]	; (80034c0 <pvPortMalloc+0x110>)
 800342c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800342e:	6868      	ldr	r0, [r5, #4]
 8003430:	4283      	cmp	r3, r0
 8003432:	d804      	bhi.n	800343e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003434:	6809      	ldr	r1, [r1, #0]
 8003436:	428d      	cmp	r5, r1
 8003438:	d107      	bne.n	800344a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800343a:	2400      	movs	r4, #0
 800343c:	e029      	b.n	8003492 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800343e:	682c      	ldr	r4, [r5, #0]
 8003440:	2c00      	cmp	r4, #0
 8003442:	d0f7      	beq.n	8003434 <pvPortMalloc+0x84>
 8003444:	462a      	mov	r2, r5
 8003446:	4625      	mov	r5, r4
 8003448:	e7f1      	b.n	800342e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800344a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800344c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800344e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003450:	1ac2      	subs	r2, r0, r3
 8003452:	2a10      	cmp	r2, #16
 8003454:	d90f      	bls.n	8003476 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003456:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003458:	0741      	lsls	r1, r0, #29
 800345a:	d008      	beq.n	800346e <pvPortMalloc+0xbe>
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	e7fe      	b.n	800346c <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800346e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003470:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003472:	f7ff ff79 	bl	8003368 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003476:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003478:	4912      	ldr	r1, [pc, #72]	; (80034c4 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800347a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800347c:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 800347e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003480:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003482:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003486:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003488:	bf38      	it	cc
 800348a:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800348c:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800348e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003490:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003492:	f000 fdd9 	bl	8004048 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003496:	0763      	lsls	r3, r4, #29
 8003498:	d008      	beq.n	80034ac <pvPortMalloc+0xfc>
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	e7fe      	b.n	80034aa <pvPortMalloc+0xfa>
}
 80034ac:	4620      	mov	r0, r4
 80034ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b2:	bf00      	nop
 80034b4:	2000275c 	.word	0x2000275c
 80034b8:	20004360 	.word	0x20004360
 80034bc:	20002760 	.word	0x20002760
 80034c0:	2000436c 	.word	0x2000436c
 80034c4:	20004368 	.word	0x20004368
 80034c8:	20004364 	.word	0x20004364

080034cc <vPortFree>:
{
 80034cc:	b510      	push	{r4, lr}
	if( pv != NULL )
 80034ce:	4604      	mov	r4, r0
 80034d0:	b370      	cbz	r0, 8003530 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <vPortFree+0x68>)
 80034d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	4213      	tst	r3, r2
 80034dc:	d108      	bne.n	80034f0 <vPortFree+0x24>
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	e7fe      	b.n	80034ee <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034f0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80034f4:	b141      	cbz	r1, 8003508 <vPortFree+0x3c>
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	e7fe      	b.n	8003506 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003508:	ea23 0302 	bic.w	r3, r3, r2
 800350c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003510:	f000 fcfa 	bl	8003f08 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003514:	4a08      	ldr	r2, [pc, #32]	; (8003538 <vPortFree+0x6c>)
 8003516:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800351a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800351c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003520:	440b      	add	r3, r1
 8003522:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003524:	f7ff ff20 	bl	8003368 <prvInsertBlockIntoFreeList>
}
 8003528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800352c:	f000 bd8c 	b.w	8004048 <xTaskResumeAll>
 8003530:	bd10      	pop	{r4, pc}
 8003532:	bf00      	nop
 8003534:	20004360 	.word	0x20004360
 8003538:	20004364 	.word	0x20004364

0800353c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800353c:	b510      	push	{r4, lr}
 800353e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003540:	f7ff fe08 	bl	8003154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003544:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003546:	f7ff fe27 	bl	8003198 <vPortExitCritical>

	return xReturn;
}
 800354a:	fab4 f084 	clz	r0, r4
 800354e:	0940      	lsrs	r0, r0, #5
 8003550:	bd10      	pop	{r4, pc}

08003552 <prvCopyDataToQueue>:
{
 8003552:	b570      	push	{r4, r5, r6, lr}
 8003554:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003556:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003558:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800355a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800355c:	b942      	cbnz	r2, 8003570 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800355e:	6805      	ldr	r5, [r0, #0]
 8003560:	b99d      	cbnz	r5, 800358a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003562:	6840      	ldr	r0, [r0, #4]
 8003564:	f000 fffc 	bl	8004560 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003568:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800356a:	3601      	adds	r6, #1
 800356c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800356e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003570:	b96d      	cbnz	r5, 800358e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003572:	6880      	ldr	r0, [r0, #8]
 8003574:	f001 ff10 	bl	8005398 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003578:	68a3      	ldr	r3, [r4, #8]
 800357a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800357c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800357e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003580:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003582:	4293      	cmp	r3, r2
 8003584:	d301      	bcc.n	800358a <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800358a:	2000      	movs	r0, #0
 800358c:	e7ed      	b.n	800356a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800358e:	68c0      	ldr	r0, [r0, #12]
 8003590:	f001 ff02 	bl	8005398 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003594:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003596:	68e2      	ldr	r2, [r4, #12]
 8003598:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800359a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800359c:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800359e:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80035a0:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80035a2:	bf3e      	ittt	cc
 80035a4:	6862      	ldrcc	r2, [r4, #4]
 80035a6:	189b      	addcc	r3, r3, r2
 80035a8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80035aa:	2d02      	cmp	r5, #2
 80035ac:	d1ed      	bne.n	800358a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ae:	b10e      	cbz	r6, 80035b4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80035b0:	3e01      	subs	r6, #1
 80035b2:	e7ea      	b.n	800358a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80035b4:	4630      	mov	r0, r6
 80035b6:	e7d8      	b.n	800356a <prvCopyDataToQueue+0x18>

080035b8 <prvCopyDataFromQueue>:
{
 80035b8:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80035bc:	b410      	push	{r4}
 80035be:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035c0:	b162      	cbz	r2, 80035dc <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80035c2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035c4:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80035c6:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035c8:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80035ca:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80035cc:	bf28      	it	cs
 80035ce:	6819      	ldrcs	r1, [r3, #0]
}
 80035d0:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80035d2:	bf28      	it	cs
 80035d4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80035d6:	68d9      	ldr	r1, [r3, #12]
 80035d8:	f001 bede 	b.w	8005398 <memcpy>
}
 80035dc:	bc10      	pop	{r4}
 80035de:	4770      	bx	lr

080035e0 <prvUnlockQueue>:
{
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80035e4:	f7ff fdb6 	bl	8003154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80035e8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ec:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80035f0:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035f2:	2d00      	cmp	r5, #0
 80035f4:	dc14      	bgt.n	8003620 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80035f6:	23ff      	movs	r3, #255	; 0xff
 80035f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80035fc:	f7ff fdcc 	bl	8003198 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003600:	f7ff fda8 	bl	8003154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003604:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003608:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800360c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800360e:	2d00      	cmp	r5, #0
 8003610:	dc12      	bgt.n	8003638 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8003612:	23ff      	movs	r3, #255	; 0xff
 8003614:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8003618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800361c:	f7ff bdbc 	b.w	8003198 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0e7      	beq.n	80035f6 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003626:	4630      	mov	r0, r6
 8003628:	f000 feb6 	bl	8004398 <xTaskRemoveFromEventList>
 800362c:	b108      	cbz	r0, 8003632 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800362e:	f000 ff81 	bl	8004534 <vTaskMissedYield>
 8003632:	3d01      	subs	r5, #1
 8003634:	b26d      	sxtb	r5, r5
 8003636:	e7dc      	b.n	80035f2 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0e9      	beq.n	8003612 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800363e:	4630      	mov	r0, r6
 8003640:	f000 feaa 	bl	8004398 <xTaskRemoveFromEventList>
 8003644:	b108      	cbz	r0, 800364a <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003646:	f000 ff75 	bl	8004534 <vTaskMissedYield>
 800364a:	3d01      	subs	r5, #1
 800364c:	b26d      	sxtb	r5, r5
 800364e:	e7de      	b.n	800360e <prvUnlockQueue+0x2e>

08003650 <xQueueGenericReset>:
{
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003654:	4604      	mov	r4, r0
 8003656:	b940      	cbnz	r0, 800366a <xQueueGenericReset+0x1a>
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	e7fe      	b.n	8003668 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800366a:	f7ff fd73 	bl	8003154 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800366e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	4343      	muls	r3, r0
 8003676:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003678:	1a1b      	subs	r3, r3, r0
 800367a:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800367c:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800367e:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003680:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8003682:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003684:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003686:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8003688:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800368c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003690:	b995      	cbnz	r5, 80036b8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003692:	6923      	ldr	r3, [r4, #16]
 8003694:	b163      	cbz	r3, 80036b0 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003696:	f104 0010 	add.w	r0, r4, #16
 800369a:	f000 fe7d 	bl	8004398 <xTaskRemoveFromEventList>
 800369e:	b138      	cbz	r0, 80036b0 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80036a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <xQueueGenericReset+0x7c>)
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80036b0:	f7ff fd72 	bl	8003198 <vPortExitCritical>
}
 80036b4:	2001      	movs	r0, #1
 80036b6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036b8:	f104 0010 	add.w	r0, r4, #16
 80036bc:	f7ff fcb1 	bl	8003022 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036c4:	f7ff fcad 	bl	8003022 <vListInitialise>
 80036c8:	e7f2      	b.n	80036b0 <xQueueGenericReset+0x60>
 80036ca:	bf00      	nop
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <xQueueGenericCreate>:
	{
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036d4:	4606      	mov	r6, r0
 80036d6:	b940      	cbnz	r0, 80036ea <xQueueGenericCreate+0x1a>
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	e7fe      	b.n	80036e8 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ea:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80036ec:	3048      	adds	r0, #72	; 0x48
 80036ee:	f7ff fe5f 	bl	80033b0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80036f2:	4604      	mov	r4, r0
 80036f4:	b138      	cbz	r0, 8003706 <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80036f6:	b945      	cbnz	r5, 800370a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036f8:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80036fa:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036fc:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036fe:	2101      	movs	r1, #1
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff ffa5 	bl	8003650 <xQueueGenericReset>
	}
 8003706:	4620      	mov	r0, r4
 8003708:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800370a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800370e:	6003      	str	r3, [r0, #0]
 8003710:	e7f3      	b.n	80036fa <xQueueGenericCreate+0x2a>
	...

08003714 <xQueueGenericSend>:
{
 8003714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003718:	4689      	mov	r9, r1
 800371a:	9201      	str	r2, [sp, #4]
 800371c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800371e:	4604      	mov	r4, r0
 8003720:	b940      	cbnz	r0, 8003734 <xQueueGenericSend+0x20>
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	e7fe      	b.n	8003732 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003734:	2900      	cmp	r1, #0
 8003736:	f040 8088 	bne.w	800384a <xQueueGenericSend+0x136>
 800373a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8084 	beq.w	800384a <xQueueGenericSend+0x136>
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	e7fe      	b.n	8003752 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003754:	9e01      	ldr	r6, [sp, #4]
 8003756:	2e00      	cmp	r6, #0
 8003758:	f000 8082 	beq.w	8003860 <xQueueGenericSend+0x14c>
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	e7fe      	b.n	800376c <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800376e:	9d01      	ldr	r5, [sp, #4]
 8003770:	b91d      	cbnz	r5, 800377a <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8003772:	f7ff fd11 	bl	8003198 <vPortExitCritical>
			return errQUEUE_FULL;
 8003776:	2000      	movs	r0, #0
 8003778:	e058      	b.n	800382c <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 800377a:	b916      	cbnz	r6, 8003782 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800377c:	a802      	add	r0, sp, #8
 800377e:	f000 fe91 	bl	80044a4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003782:	f7ff fd09 	bl	8003198 <vPortExitCritical>
		vTaskSuspendAll();
 8003786:	f000 fbbf 	bl	8003f08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800378a:	f7ff fce3 	bl	8003154 <vPortEnterCritical>
 800378e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003792:	2bff      	cmp	r3, #255	; 0xff
 8003794:	bf08      	it	eq
 8003796:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800379a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800379e:	2bff      	cmp	r3, #255	; 0xff
 80037a0:	bf08      	it	eq
 80037a2:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80037a6:	f7ff fcf7 	bl	8003198 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037aa:	a901      	add	r1, sp, #4
 80037ac:	a802      	add	r0, sp, #8
 80037ae:	f000 fe85 	bl	80044bc <xTaskCheckForTimeOut>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d143      	bne.n	800383e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037b6:	f7ff fccd 	bl	8003154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037ba:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80037bc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80037be:	f7ff fceb 	bl	8003198 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037c2:	42ae      	cmp	r6, r5
 80037c4:	d135      	bne.n	8003832 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037c6:	9901      	ldr	r1, [sp, #4]
 80037c8:	f104 0010 	add.w	r0, r4, #16
 80037cc:	f000 fd7e 	bl	80042cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7ff ff05 	bl	80035e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037d6:	f000 fc37 	bl	8004048 <xTaskResumeAll>
 80037da:	b938      	cbnz	r0, 80037ec <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 80037dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037e0:	f8ca 3000 	str.w	r3, [sl]
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80037ee:	f7ff fcb1 	bl	8003154 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80037f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d301      	bcc.n	80037fe <xQueueGenericSend+0xea>
 80037fa:	2f02      	cmp	r7, #2
 80037fc:	d1b7      	bne.n	800376e <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037fe:	463a      	mov	r2, r7
 8003800:	4649      	mov	r1, r9
 8003802:	4620      	mov	r0, r4
 8003804:	f7ff fea5 	bl	8003552 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800380a:	b11b      	cbz	r3, 8003814 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800380c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003810:	f000 fdc2 	bl	8004398 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003814:	b138      	cbz	r0, 8003826 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8003816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <xQueueGenericSend+0x168>)
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003826:	f7ff fcb7 	bl	8003198 <vPortExitCritical>
				return pdPASS;
 800382a:	2001      	movs	r0, #1
}
 800382c:	b004      	add	sp, #16
 800382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003832:	4620      	mov	r0, r4
 8003834:	f7ff fed4 	bl	80035e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003838:	f000 fc06 	bl	8004048 <xTaskResumeAll>
 800383c:	e7d6      	b.n	80037ec <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 800383e:	4620      	mov	r0, r4
 8003840:	f7ff fece 	bl	80035e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003844:	f000 fc00 	bl	8004048 <xTaskResumeAll>
 8003848:	e795      	b.n	8003776 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800384a:	2f02      	cmp	r7, #2
 800384c:	d102      	bne.n	8003854 <xQueueGenericSend+0x140>
 800384e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d10a      	bne.n	800386a <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003854:	f000 fe74 	bl	8004540 <xTaskGetSchedulerState>
 8003858:	2800      	cmp	r0, #0
 800385a:	f43f af7b 	beq.w	8003754 <xQueueGenericSend+0x40>
 800385e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003860:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8003864:	f8df a014 	ldr.w	sl, [pc, #20]	; 800387c <xQueueGenericSend+0x168>
 8003868:	e7c1      	b.n	80037ee <xQueueGenericSend+0xda>
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	e7fe      	b.n	800387a <xQueueGenericSend+0x166>
 800387c:	e000ed04 	.word	0xe000ed04

08003880 <xQueueGenericSendFromISR>:
{
 8003880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003884:	4688      	mov	r8, r1
 8003886:	4691      	mov	r9, r2
 8003888:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800388a:	4604      	mov	r4, r0
 800388c:	b940      	cbnz	r0, 80038a0 <xQueueGenericSendFromISR+0x20>
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	e7fe      	b.n	800389e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a0:	bb09      	cbnz	r1, 80038e6 <xQueueGenericSendFromISR+0x66>
 80038a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80038a4:	b1fb      	cbz	r3, 80038e6 <xQueueGenericSendFromISR+0x66>
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	e7fe      	b.n	80038b6 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80038bc:	f000 fd6c 	bl	8004398 <xTaskRemoveFromEventList>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d034      	beq.n	800392e <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 80038c4:	f1b9 0f00 	cmp.w	r9, #0
 80038c8:	d031      	beq.n	800392e <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038ca:	2001      	movs	r0, #1
 80038cc:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80038d0:	f386 8811 	msr	BASEPRI, r6
}
 80038d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038d8:	3501      	adds	r5, #1
 80038da:	b26d      	sxtb	r5, r5
 80038dc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80038e0:	e025      	b.n	800392e <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 80038e2:	2000      	movs	r0, #0
 80038e4:	e7f4      	b.n	80038d0 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038e6:	2f02      	cmp	r7, #2
 80038e8:	d102      	bne.n	80038f0 <xQueueGenericSendFromISR+0x70>
 80038ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d120      	bne.n	8003932 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038f0:	f7ff fd0c 	bl	800330c <vPortValidateInterruptPriority>
	__asm volatile
 80038f4:	f3ef 8611 	mrs	r6, BASEPRI
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003908:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800390a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800390c:	429a      	cmp	r2, r3
 800390e:	d301      	bcc.n	8003914 <xQueueGenericSendFromISR+0x94>
 8003910:	2f02      	cmp	r7, #2
 8003912:	d1e6      	bne.n	80038e2 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003914:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003918:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800391a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800391c:	4641      	mov	r1, r8
 800391e:	4620      	mov	r0, r4
 8003920:	f7ff fe17 	bl	8003552 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003924:	1c6b      	adds	r3, r5, #1
 8003926:	d1d7      	bne.n	80038d8 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1c4      	bne.n	80038b8 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 800392e:	2001      	movs	r0, #1
 8003930:	e7ce      	b.n	80038d0 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	e7fe      	b.n	8003942 <xQueueGenericSendFromISR+0xc2>

08003944 <xQueueReceive>:
{
 8003944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003948:	b085      	sub	sp, #20
 800394a:	4688      	mov	r8, r1
 800394c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800394e:	4604      	mov	r4, r0
 8003950:	b940      	cbnz	r0, 8003964 <xQueueReceive+0x20>
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	e7fe      	b.n	8003962 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003964:	2900      	cmp	r1, #0
 8003966:	f040 8086 	bne.w	8003a76 <xQueueReceive+0x132>
 800396a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8082 	beq.w	8003a76 <xQueueReceive+0x132>
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	e7fe      	b.n	8003982 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003984:	9e01      	ldr	r6, [sp, #4]
 8003986:	2e00      	cmp	r6, #0
 8003988:	d07a      	beq.n	8003a80 <xQueueReceive+0x13c>
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	e7fe      	b.n	800399a <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 800399c:	9d01      	ldr	r5, [sp, #4]
 800399e:	b91d      	cbnz	r5, 80039a8 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 80039a0:	f7ff fbfa 	bl	8003198 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80039a4:	2000      	movs	r0, #0
 80039a6:	e052      	b.n	8003a4e <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 80039a8:	b916      	cbnz	r6, 80039b0 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039aa:	a802      	add	r0, sp, #8
 80039ac:	f000 fd7a 	bl	80044a4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80039b0:	f7ff fbf2 	bl	8003198 <vPortExitCritical>
		vTaskSuspendAll();
 80039b4:	f000 faa8 	bl	8003f08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039b8:	f7ff fbcc 	bl	8003154 <vPortEnterCritical>
 80039bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80039c0:	2bff      	cmp	r3, #255	; 0xff
 80039c2:	bf08      	it	eq
 80039c4:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80039c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80039cc:	2bff      	cmp	r3, #255	; 0xff
 80039ce:	bf08      	it	eq
 80039d0:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80039d4:	f7ff fbe0 	bl	8003198 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039d8:	a901      	add	r1, sp, #4
 80039da:	a802      	add	r0, sp, #8
 80039dc:	f000 fd6e 	bl	80044bc <xTaskCheckForTimeOut>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d13d      	bne.n	8003a60 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039e4:	4620      	mov	r0, r4
 80039e6:	f7ff fda9 	bl	800353c <prvIsQueueEmpty>
 80039ea:	b398      	cbz	r0, 8003a54 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039ec:	9901      	ldr	r1, [sp, #4]
 80039ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80039f2:	f000 fc6b 	bl	80042cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff fdf2 	bl	80035e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039fc:	f000 fb24 	bl	8004048 <xTaskResumeAll>
 8003a00:	b938      	cbnz	r0, 8003a12 <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8003a02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a06:	f8c9 3000 	str.w	r3, [r9]
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003a14:	f7ff fb9e 	bl	8003154 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a18:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a1a:	2d00      	cmp	r5, #0
 8003a1c:	d0be      	beq.n	800399c <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a1e:	4641      	mov	r1, r8
 8003a20:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a22:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a24:	f7ff fdc8 	bl	80035b8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a28:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	b163      	cbz	r3, 8003a48 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a2e:	f104 0010 	add.w	r0, r4, #16
 8003a32:	f000 fcb1 	bl	8004398 <xTaskRemoveFromEventList>
 8003a36:	b138      	cbz	r0, 8003a48 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8003a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <xQueueReceive+0x144>)
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003a48:	f7ff fba6 	bl	8003198 <vPortExitCritical>
				return pdPASS;
 8003a4c:	2001      	movs	r0, #1
}
 8003a4e:	b005      	add	sp, #20
 8003a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7ff fdc3 	bl	80035e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a5a:	f000 faf5 	bl	8004048 <xTaskResumeAll>
 8003a5e:	e7d8      	b.n	8003a12 <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7ff fdbd 	bl	80035e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a66:	f000 faef 	bl	8004048 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f7ff fd66 	bl	800353c <prvIsQueueEmpty>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d0ce      	beq.n	8003a12 <xQueueReceive+0xce>
 8003a74:	e796      	b.n	80039a4 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a76:	f000 fd63 	bl	8004540 <xTaskGetSchedulerState>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d082      	beq.n	8003984 <xQueueReceive+0x40>
 8003a7e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003a80:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003a82:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8003a88 <xQueueReceive+0x144>
 8003a86:	e7c5      	b.n	8003a14 <xQueueReceive+0xd0>
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4604      	mov	r4, r0
 8003a90:	460d      	mov	r5, r1
 8003a92:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a94:	f7ff fb5e 	bl	8003154 <vPortEnterCritical>
 8003a98:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003a9c:	2bff      	cmp	r3, #255	; 0xff
 8003a9e:	bf04      	itt	eq
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8003aa6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003aaa:	2bff      	cmp	r3, #255	; 0xff
 8003aac:	bf04      	itt	eq
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8003ab4:	f7ff fb70 	bl	8003198 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ab8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003aba:	b92b      	cbnz	r3, 8003ac8 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003abc:	4632      	mov	r2, r6
 8003abe:	4629      	mov	r1, r5
 8003ac0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ac4:	f000 fc48 	bl	8004358 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ac8:	4620      	mov	r0, r4
	}
 8003aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8003ace:	f7ff bd87 	b.w	80035e0 <prvUnlockQueue>
	...

08003ad4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad4:	4a06      	ldr	r2, [pc, #24]	; (8003af0 <prvResetNextTaskUnblockTime+0x1c>)
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <prvResetNextTaskUnblockTime+0x20>)
 8003adc:	b919      	cbnz	r1, 8003ae6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003aea:	68d2      	ldr	r2, [r2, #12]
 8003aec:	6852      	ldr	r2, [r2, #4]
 8003aee:	e7f8      	b.n	8003ae2 <prvResetNextTaskUnblockTime+0xe>
 8003af0:	20004378 	.word	0x20004378
 8003af4:	20004428 	.word	0x20004428

08003af8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003afc:	4e1b      	ldr	r6, [pc, #108]	; (8003b6c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8003afe:	681d      	ldr	r5, [r3, #0]
{
 8003b00:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b02:	6830      	ldr	r0, [r6, #0]
{
 8003b04:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b06:	3004      	adds	r0, #4
 8003b08:	f7ff fabc 	bl	8003084 <uxListRemove>
 8003b0c:	4633      	mov	r3, r6
 8003b0e:	b940      	cbnz	r0, 8003b22 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003b10:	2001      	movs	r0, #1
 8003b12:	6831      	ldr	r1, [r6, #0]
 8003b14:	4e16      	ldr	r6, [pc, #88]	; (8003b70 <prvAddCurrentTaskToDelayedList+0x78>)
 8003b16:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003b18:	6832      	ldr	r2, [r6, #0]
 8003b1a:	4088      	lsls	r0, r1
 8003b1c:	ea22 0200 	bic.w	r2, r2, r0
 8003b20:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b22:	1c62      	adds	r2, r4, #1
 8003b24:	d107      	bne.n	8003b36 <prvAddCurrentTaskToDelayedList+0x3e>
 8003b26:	b137      	cbz	r7, 8003b36 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	4812      	ldr	r0, [pc, #72]	; (8003b74 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003b2c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b32:	f7ff ba84 	b.w	800303e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b36:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b38:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003b3a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b3c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003b3e:	d907      	bls.n	8003b50 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <prvAddCurrentTaskToDelayedList+0x80>)
 8003b42:	6810      	ldr	r0, [r2, #0]
 8003b44:	6819      	ldr	r1, [r3, #0]
}
 8003b46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b4a:	3104      	adds	r1, #4
 8003b4c:	f7ff ba83 	b.w	8003056 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <prvAddCurrentTaskToDelayedList+0x84>)
 8003b52:	6810      	ldr	r0, [r2, #0]
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	3104      	adds	r1, #4
 8003b58:	f7ff fa7d 	bl	8003056 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <prvAddCurrentTaskToDelayedList+0x88>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003b62:	bf38      	it	cc
 8003b64:	601c      	strcc	r4, [r3, #0]
 8003b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b68:	20004470 	.word	0x20004470
 8003b6c:	20004374 	.word	0x20004374
 8003b70:	200043f8 	.word	0x200043f8
 8003b74:	20004448 	.word	0x20004448
 8003b78:	2000437c 	.word	0x2000437c
 8003b7c:	20004378 	.word	0x20004378
 8003b80:	20004428 	.word	0x20004428

08003b84 <prvIdleTask>:
{
 8003b84:	b580      	push	{r7, lr}
				taskYIELD();
 8003b86:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003bec <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b8a:	4f14      	ldr	r7, [pc, #80]	; (8003bdc <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b8c:	4c14      	ldr	r4, [pc, #80]	; (8003be0 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8003b8e:	4e15      	ldr	r6, [pc, #84]	; (8003be4 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	b963      	cbnz	r3, 8003bae <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <prvIdleTask+0x64>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d9f8      	bls.n	8003b8e <prvIdleTask+0xa>
				taskYIELD();
 8003b9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ba0:	f8c8 3000 	str.w	r3, [r8]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	e7ee      	b.n	8003b8c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8003bae:	f7ff fad1 	bl	8003154 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bb6:	1d28      	adds	r0, r5, #4
 8003bb8:	f7ff fa64 	bl	8003084 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bbc:	6833      	ldr	r3, [r6, #0]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003bc8:	f7ff fae6 	bl	8003198 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003bcc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003bce:	f7ff fc7d 	bl	80034cc <vPortFree>
			vPortFree( pxTCB );
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f7ff fc7a 	bl	80034cc <vPortFree>
 8003bd8:	e7da      	b.n	8003b90 <prvIdleTask+0xc>
 8003bda:	bf00      	nop
 8003bdc:	2000445c 	.word	0x2000445c
 8003be0:	200043e8 	.word	0x200043e8
 8003be4:	200043e4 	.word	0x200043e4
 8003be8:	20004380 	.word	0x20004380
 8003bec:	e000ed04 	.word	0xe000ed04

08003bf0 <xTaskCreate>:
	{
 8003bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003bf8:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfa:	4650      	mov	r0, sl
	{
 8003bfc:	460f      	mov	r7, r1
 8003bfe:	4699      	mov	r9, r3
 8003c00:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c02:	f7ff fbd5 	bl	80033b0 <pvPortMalloc>
			if( pxStack != NULL )
 8003c06:	4605      	mov	r5, r0
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	f000 809f 	beq.w	8003d4c <xTaskCreate+0x15c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003c0e:	2050      	movs	r0, #80	; 0x50
 8003c10:	f7ff fbce 	bl	80033b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003c14:	4604      	mov	r4, r0
 8003c16:	2800      	cmp	r0, #0
 8003c18:	f000 8095 	beq.w	8003d46 <xTaskCreate+0x156>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003c1c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8003c20:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003c22:	4455      	add	r5, sl
 8003c24:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003c26:	f025 0a07 	bic.w	sl, r5, #7
 8003c2a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8003c2e:	3709      	adds	r7, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c30:	7859      	ldrb	r1, [r3, #1]
 8003c32:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003c36:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003c3a:	b109      	cbz	r1, 8003c40 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c3c:	42bb      	cmp	r3, r7
 8003c3e:	d1f7      	bne.n	8003c30 <xTaskCreate+0x40>
 8003c40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c42:	f04f 0b00 	mov.w	fp, #0
 8003c46:	2d04      	cmp	r5, #4
 8003c48:	bf28      	it	cs
 8003c4a:	2504      	movcs	r5, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c4c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003c4e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003c50:	6425      	str	r5, [r4, #64]	; 0x40
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c52:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c54:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
		pxNewTCB->uxMutexesHeld = 0;
 8003c58:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c5c:	f7ff f9ec 	bl	8003038 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c60:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c64:	f104 0018 	add.w	r0, r4, #24
 8003c68:	f7ff f9e6 	bl	8003038 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003c6c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c70:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c72:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c74:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c76:	f884 b04c 	strb.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c7a:	464a      	mov	r2, r9
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	4650      	mov	r0, sl
 8003c80:	f7ff fa42 	bl	8003108 <pxPortInitialiseStack>
 8003c84:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003c86:	b106      	cbz	r6, 8003c8a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c88:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8003c8a:	f7ff fa63 	bl	8003154 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003c8e:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 8003c90:	4e36      	ldr	r6, [pc, #216]	; (8003d6c <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8003da8 <xTaskCreate+0x1b8>
 8003c98:	3201      	adds	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003c9c:	6832      	ldr	r2, [r6, #0]
 8003c9e:	2a00      	cmp	r2, #0
 8003ca0:	d157      	bne.n	8003d52 <xTaskCreate+0x162>
			pxCurrentTCB = pxNewTCB;
 8003ca2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d125      	bne.n	8003cf6 <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003caa:	4831      	ldr	r0, [pc, #196]	; (8003d70 <xTaskCreate+0x180>)
 8003cac:	f7ff f9b9 	bl	8003022 <vListInitialise>
 8003cb0:	4830      	ldr	r0, [pc, #192]	; (8003d74 <xTaskCreate+0x184>)
 8003cb2:	f7ff f9b6 	bl	8003022 <vListInitialise>
 8003cb6:	4830      	ldr	r0, [pc, #192]	; (8003d78 <xTaskCreate+0x188>)
 8003cb8:	f7ff f9b3 	bl	8003022 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8003cbc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8003dac <xTaskCreate+0x1bc>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cc0:	482e      	ldr	r0, [pc, #184]	; (8003d7c <xTaskCreate+0x18c>)
 8003cc2:	f7ff f9ae 	bl	8003022 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cc6:	4d2e      	ldr	r5, [pc, #184]	; (8003d80 <xTaskCreate+0x190>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cc8:	482e      	ldr	r0, [pc, #184]	; (8003d84 <xTaskCreate+0x194>)
 8003cca:	f7ff f9aa 	bl	8003022 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8003cce:	4648      	mov	r0, r9
 8003cd0:	f7ff f9a7 	bl	8003022 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f7ff f9a4 	bl	8003022 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cda:	482b      	ldr	r0, [pc, #172]	; (8003d88 <xTaskCreate+0x198>)
 8003cdc:	f7ff f9a1 	bl	8003022 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003ce0:	482a      	ldr	r0, [pc, #168]	; (8003d8c <xTaskCreate+0x19c>)
 8003ce2:	f7ff f99e 	bl	8003022 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003ce6:	482a      	ldr	r0, [pc, #168]	; (8003d90 <xTaskCreate+0x1a0>)
 8003ce8:	f7ff f99b 	bl	8003022 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <xTaskCreate+0x1a4>)
 8003cee:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cf2:	4b29      	ldr	r3, [pc, #164]	; (8003d98 <xTaskCreate+0x1a8>)
 8003cf4:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003cf6:	2501      	movs	r5, #1
		uxTaskNumber++;
 8003cf8:	4a28      	ldr	r2, [pc, #160]	; (8003d9c <xTaskCreate+0x1ac>)
		prvAddTaskToReadyList( pxNewTCB );
 8003cfa:	4929      	ldr	r1, [pc, #164]	; (8003da0 <xTaskCreate+0x1b0>)
		uxTaskNumber++;
 8003cfc:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003cfe:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003d00:	3301      	adds	r3, #1
 8003d02:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003d04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d06:	fa05 f302 	lsl.w	r3, r5, r2
 8003d0a:	4303      	orrs	r3, r0
 8003d0c:	2014      	movs	r0, #20
 8003d0e:	600b      	str	r3, [r1, #0]
 8003d10:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <xTaskCreate+0x180>)
 8003d12:	4639      	mov	r1, r7
 8003d14:	fb00 3002 	mla	r0, r0, r2, r3
 8003d18:	f7ff f991 	bl	800303e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003d1c:	f7ff fa3c 	bl	8003198 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003d20:	f8d8 3000 	ldr.w	r3, [r8]
 8003d24:	b163      	cbz	r3, 8003d40 <xTaskCreate+0x150>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d26:	6833      	ldr	r3, [r6, #0]
 8003d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d207      	bcs.n	8003d40 <xTaskCreate+0x150>
			taskYIELD_IF_USING_PREEMPTION();
 8003d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <xTaskCreate+0x1b4>)
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
	}
 8003d40:	4628      	mov	r0, r5
 8003d42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8003d46:	4628      	mov	r0, r5
 8003d48:	f7ff fbc0 	bl	80034cc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d4c:	f04f 35ff 	mov.w	r5, #4294967295
 8003d50:	e7f6      	b.n	8003d40 <xTaskCreate+0x150>
			if( xSchedulerRunning == pdFALSE )
 8003d52:	f8d8 3000 	ldr.w	r3, [r8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1cd      	bne.n	8003cf6 <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d5a:	6833      	ldr	r3, [r6, #0]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d60:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003d62:	bf98      	it	ls
 8003d64:	6034      	strls	r4, [r6, #0]
 8003d66:	e7c6      	b.n	8003cf6 <xTaskCreate+0x106>
 8003d68:	200043e4 	.word	0x200043e4
 8003d6c:	20004374 	.word	0x20004374
 8003d70:	20004380 	.word	0x20004380
 8003d74:	20004394 	.word	0x20004394
 8003d78:	200043a8 	.word	0x200043a8
 8003d7c:	200043bc 	.word	0x200043bc
 8003d80:	20004410 	.word	0x20004410
 8003d84:	200043d0 	.word	0x200043d0
 8003d88:	20004430 	.word	0x20004430
 8003d8c:	2000445c 	.word	0x2000445c
 8003d90:	20004448 	.word	0x20004448
 8003d94:	20004378 	.word	0x20004378
 8003d98:	2000437c 	.word	0x2000437c
 8003d9c:	200043f4 	.word	0x200043f4
 8003da0:	200043f8 	.word	0x200043f8
 8003da4:	e000ed04 	.word	0xe000ed04
 8003da8:	20004444 	.word	0x20004444
 8003dac:	200043fc 	.word	0x200043fc

08003db0 <vTaskDelete>:
	{
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	4604      	mov	r4, r0
 8003db4:	4d2a      	ldr	r5, [pc, #168]	; (8003e60 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 8003db6:	f7ff f9cd 	bl	8003154 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003dba:	b904      	cbnz	r4, 8003dbe <vTaskDelete+0xe>
 8003dbc:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dbe:	1d26      	adds	r6, r4, #4
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f7ff f95f 	bl	8003084 <uxListRemove>
 8003dc6:	b960      	cbnz	r0, 8003de2 <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003dc8:	2114      	movs	r1, #20
 8003dca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003dcc:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <vTaskDelete+0xb4>)
 8003dce:	4341      	muls	r1, r0
 8003dd0:	585b      	ldr	r3, [r3, r1]
 8003dd2:	b933      	cbnz	r3, 8003de2 <vTaskDelete+0x32>
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	4924      	ldr	r1, [pc, #144]	; (8003e68 <vTaskDelete+0xb8>)
 8003dd8:	4082      	lsls	r2, r0
 8003dda:	680b      	ldr	r3, [r1, #0]
 8003ddc:	ea23 0302 	bic.w	r3, r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003de4:	b11b      	cbz	r3, 8003dee <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003de6:	f104 0018 	add.w	r0, r4, #24
 8003dea:	f7ff f94b 	bl	8003084 <uxListRemove>
			uxTaskNumber++;
 8003dee:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <vTaskDelete+0xbc>)
 8003df0:	6813      	ldr	r3, [r2, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8003df6:	682b      	ldr	r3, [r5, #0]
 8003df8:	429c      	cmp	r4, r3
 8003dfa:	d11b      	bne.n	8003e34 <vTaskDelete+0x84>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003dfc:	4631      	mov	r1, r6
 8003dfe:	481c      	ldr	r0, [pc, #112]	; (8003e70 <vTaskDelete+0xc0>)
 8003e00:	f7ff f91d 	bl	800303e <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8003e04:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <vTaskDelete+0xc4>)
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8003e0c:	f7ff f9c4 	bl	8003198 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <vTaskDelete+0xc8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	b31b      	cbz	r3, 8003e5e <vTaskDelete+0xae>
			if( pxTCB == pxCurrentTCB )
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	d120      	bne.n	8003e5e <vTaskDelete+0xae>
				configASSERT( uxSchedulerSuspended == 0 );
 8003e1c:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <vTaskDelete+0xcc>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	b1ab      	cbz	r3, 8003e4e <vTaskDelete+0x9e>
 8003e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	e7fe      	b.n	8003e32 <vTaskDelete+0x82>
				--uxCurrentNumberOfTasks;
 8003e34:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <vTaskDelete+0xd0>)
			vPortFree( pxTCB->pxStack );
 8003e36:	6b20      	ldr	r0, [r4, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 8003e38:	6813      	ldr	r3, [r2, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	6013      	str	r3, [r2, #0]
			vPortFree( pxTCB->pxStack );
 8003e3e:	f7ff fb45 	bl	80034cc <vPortFree>
			vPortFree( pxTCB );
 8003e42:	4620      	mov	r0, r4
 8003e44:	f7ff fb42 	bl	80034cc <vPortFree>
				prvResetNextTaskUnblockTime();
 8003e48:	f7ff fe44 	bl	8003ad4 <prvResetNextTaskUnblockTime>
 8003e4c:	e7de      	b.n	8003e0c <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 8003e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <vTaskDelete+0xd4>)
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	20004374 	.word	0x20004374
 8003e64:	20004380 	.word	0x20004380
 8003e68:	200043f8 	.word	0x200043f8
 8003e6c:	200043f4 	.word	0x200043f4
 8003e70:	2000445c 	.word	0x2000445c
 8003e74:	200043e8 	.word	0x200043e8
 8003e78:	20004444 	.word	0x20004444
 8003e7c:	200043f0 	.word	0x200043f0
 8003e80:	200043e4 	.word	0x200043e4
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <vTaskStartScheduler>:
{
 8003e88:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8003e8a:	2400      	movs	r4, #0
 8003e8c:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <vTaskStartScheduler+0x68>)
 8003e8e:	9400      	str	r4, [sp, #0]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	2246      	movs	r2, #70	; 0x46
 8003e94:	4623      	mov	r3, r4
 8003e96:	4917      	ldr	r1, [pc, #92]	; (8003ef4 <vTaskStartScheduler+0x6c>)
 8003e98:	4817      	ldr	r0, [pc, #92]	; (8003ef8 <vTaskStartScheduler+0x70>)
 8003e9a:	f7ff fea9 	bl	8003bf0 <xTaskCreate>
		if( xReturn == pdPASS )
 8003e9e:	2801      	cmp	r0, #1
 8003ea0:	d118      	bne.n	8003ed4 <vTaskStartScheduler+0x4c>
			xReturn = xTimerCreateTimerTask();
 8003ea2:	f000 fbfd 	bl	80046a0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8003ea6:	2801      	cmp	r0, #1
 8003ea8:	d114      	bne.n	8003ed4 <vTaskStartScheduler+0x4c>
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003eba:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <vTaskStartScheduler+0x74>)
 8003ec0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <vTaskStartScheduler+0x78>)
 8003ec4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <vTaskStartScheduler+0x7c>)
 8003ec8:	601c      	str	r4, [r3, #0]
}
 8003eca:	b002      	add	sp, #8
 8003ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003ed0:	f7ff b9c2 	b.w	8003258 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d108      	bne.n	8003eea <vTaskStartScheduler+0x62>
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	e7fe      	b.n	8003ee8 <vTaskStartScheduler+0x60>
}
 8003eea:	b002      	add	sp, #8
 8003eec:	bd10      	pop	{r4, pc}
 8003eee:	bf00      	nop
 8003ef0:	20004424 	.word	0x20004424
 8003ef4:	0800824b 	.word	0x0800824b
 8003ef8:	08003b85 	.word	0x08003b85
 8003efc:	20004428 	.word	0x20004428
 8003f00:	20004444 	.word	0x20004444
 8003f04:	20004470 	.word	0x20004470

08003f08 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003f08:	4a02      	ldr	r2, [pc, #8]	; (8003f14 <vTaskSuspendAll+0xc>)
 8003f0a:	6813      	ldr	r3, [r2, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	200043f0 	.word	0x200043f0

08003f18 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003f18:	4b01      	ldr	r3, [pc, #4]	; (8003f20 <xTaskGetTickCount+0x8>)
 8003f1a:	6818      	ldr	r0, [r3, #0]
}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20004470 	.word	0x20004470

08003f24 <xTaskIncrementTick>:
{
 8003f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f28:	4b3c      	ldr	r3, [pc, #240]	; (800401c <xTaskIncrementTick+0xf8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d153      	bne.n	8003fd8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f30:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <xTaskIncrementTick+0xfc>)
 8003f32:	681c      	ldr	r4, [r3, #0]
 8003f34:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003f36:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f38:	b9bc      	cbnz	r4, 8003f6a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003f3a:	4b3a      	ldr	r3, [pc, #232]	; (8004024 <xTaskIncrementTick+0x100>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	b142      	cbz	r2, 8003f54 <xTaskIncrementTick+0x30>
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	e7fe      	b.n	8003f52 <xTaskIncrementTick+0x2e>
 8003f54:	4a34      	ldr	r2, [pc, #208]	; (8004028 <xTaskIncrementTick+0x104>)
 8003f56:	6819      	ldr	r1, [r3, #0]
 8003f58:	6810      	ldr	r0, [r2, #0]
 8003f5a:	6018      	str	r0, [r3, #0]
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	4a33      	ldr	r2, [pc, #204]	; (800402c <xTaskIncrementTick+0x108>)
 8003f60:	6813      	ldr	r3, [r2, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	f7ff fdb5 	bl	8003ad4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f6a:	4d31      	ldr	r5, [pc, #196]	; (8004030 <xTaskIncrementTick+0x10c>)
 8003f6c:	f04f 0b00 	mov.w	fp, #0
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	4f30      	ldr	r7, [pc, #192]	; (8004034 <xTaskIncrementTick+0x110>)
 8003f74:	429c      	cmp	r4, r3
 8003f76:	d33e      	bcc.n	8003ff6 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f78:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004024 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003f7c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004044 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f80:	f8d8 2000 	ldr.w	r2, [r8]
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	bb72      	cbnz	r2, 8003fe6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f88:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8c:	602a      	str	r2, [r5, #0]
					break;
 8003f8e:	e032      	b.n	8003ff6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f90:	f106 0a04 	add.w	sl, r6, #4
 8003f94:	4650      	mov	r0, sl
 8003f96:	f7ff f875 	bl	8003084 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f9a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003f9c:	b119      	cbz	r1, 8003fa6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f9e:	f106 0018 	add.w	r0, r6, #24
 8003fa2:	f7ff f86f 	bl	8003084 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f04f 0e14 	mov.w	lr, #20
 8003fac:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003fae:	f8d9 3000 	ldr.w	r3, [r9]
 8003fb2:	fa02 f100 	lsl.w	r1, r2, r0
 8003fb6:	4319      	orrs	r1, r3
 8003fb8:	4b1f      	ldr	r3, [pc, #124]	; (8004038 <xTaskIncrementTick+0x114>)
 8003fba:	f8c9 1000 	str.w	r1, [r9]
 8003fbe:	fb0e 3000 	mla	r0, lr, r0, r3
 8003fc2:	4651      	mov	r1, sl
 8003fc4:	f7ff f83b 	bl	800303e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fc8:	6838      	ldr	r0, [r7, #0]
 8003fca:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003fcc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003fce:	4291      	cmp	r1, r2
 8003fd0:	bf28      	it	cs
 8003fd2:	f04f 0b01 	movcs.w	fp, #1
 8003fd6:	e7d3      	b.n	8003f80 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003fd8:	4a18      	ldr	r2, [pc, #96]	; (800403c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8003fda:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8003fde:	6813      	ldr	r3, [r2, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e011      	b.n	800400a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fe6:	f8d8 2000 	ldr.w	r2, [r8]
 8003fea:	68d2      	ldr	r2, [r2, #12]
 8003fec:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fee:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003ff0:	428c      	cmp	r4, r1
 8003ff2:	d2cd      	bcs.n	8003f90 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003ff4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <xTaskIncrementTick+0x114>)
 8003ffa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ffc:	2214      	movs	r2, #20
 8003ffe:	434a      	muls	r2, r1
 8004000:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004002:	2a02      	cmp	r2, #2
 8004004:	bf28      	it	cs
 8004006:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800400a:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <xTaskIncrementTick+0x11c>)
 800400c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800400e:	2a00      	cmp	r2, #0
 8004010:	bf18      	it	ne
 8004012:	f04f 0b01 	movne.w	fp, #1
}
 8004016:	4658      	mov	r0, fp
 8004018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401c:	200043f0 	.word	0x200043f0
 8004020:	20004470 	.word	0x20004470
 8004024:	20004378 	.word	0x20004378
 8004028:	2000437c 	.word	0x2000437c
 800402c:	2000442c 	.word	0x2000442c
 8004030:	20004428 	.word	0x20004428
 8004034:	20004374 	.word	0x20004374
 8004038:	20004380 	.word	0x20004380
 800403c:	200043ec 	.word	0x200043ec
 8004040:	20004474 	.word	0x20004474
 8004044:	200043f8 	.word	0x200043f8

08004048 <xTaskResumeAll>:
{
 8004048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800404c:	4c31      	ldr	r4, [pc, #196]	; (8004114 <xTaskResumeAll+0xcc>)
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	b943      	cbnz	r3, 8004064 <xTaskResumeAll+0x1c>
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	e7fe      	b.n	8004062 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004064:	f7ff f876 	bl	8003154 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	3b01      	subs	r3, #1
 800406c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800406e:	6824      	ldr	r4, [r4, #0]
 8004070:	b12c      	cbz	r4, 800407e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004072:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004074:	f7ff f890 	bl	8003198 <vPortExitCritical>
}
 8004078:	4620      	mov	r0, r4
 800407a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800407e:	4b26      	ldr	r3, [pc, #152]	; (8004118 <xTaskResumeAll+0xd0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f5      	beq.n	8004072 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004086:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004130 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800408a:	4f24      	ldr	r7, [pc, #144]	; (800411c <xTaskResumeAll+0xd4>)
 800408c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004134 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004090:	f8d9 3000 	ldr.w	r3, [r9]
 8004094:	b9e3      	cbnz	r3, 80040d0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004096:	b10c      	cbz	r4, 800409c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004098:	f7ff fd1c 	bl	8003ad4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800409c:	4d20      	ldr	r5, [pc, #128]	; (8004120 <xTaskResumeAll+0xd8>)
 800409e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80040a0:	b144      	cbz	r4, 80040b4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80040a2:	2701      	movs	r7, #1
 80040a4:	4e1f      	ldr	r6, [pc, #124]	; (8004124 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80040a6:	f7ff ff3d 	bl	8003f24 <xTaskIncrementTick>
 80040aa:	b100      	cbz	r0, 80040ae <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80040ac:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80040ae:	3c01      	subs	r4, #1
 80040b0:	d1f9      	bne.n	80040a6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80040b2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <xTaskResumeAll+0xdc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0da      	beq.n	8004072 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80040bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <xTaskResumeAll+0xe0>)
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80040cc:	2401      	movs	r4, #1
 80040ce:	e7d1      	b.n	8004074 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80040d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80040d4:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80040d6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d8:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040da:	f104 0018 	add.w	r0, r4, #24
 80040de:	f7fe ffd1 	bl	8003084 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040e2:	4630      	mov	r0, r6
 80040e4:	f7fe ffce 	bl	8003084 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040e8:	2014      	movs	r0, #20
 80040ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040ec:	6839      	ldr	r1, [r7, #0]
 80040ee:	fa05 f302 	lsl.w	r3, r5, r2
 80040f2:	430b      	orrs	r3, r1
 80040f4:	fb00 8002 	mla	r0, r0, r2, r8
 80040f8:	4631      	mov	r1, r6
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	f7fe ff9f 	bl	800303e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <xTaskResumeAll+0xe4>)
 8004102:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800410a:	bf24      	itt	cs
 800410c:	4b05      	ldrcs	r3, [pc, #20]	; (8004124 <xTaskResumeAll+0xdc>)
 800410e:	601d      	strcs	r5, [r3, #0]
 8004110:	e7be      	b.n	8004090 <xTaskResumeAll+0x48>
 8004112:	bf00      	nop
 8004114:	200043f0 	.word	0x200043f0
 8004118:	200043e4 	.word	0x200043e4
 800411c:	200043f8 	.word	0x200043f8
 8004120:	200043ec 	.word	0x200043ec
 8004124:	20004474 	.word	0x20004474
 8004128:	e000ed04 	.word	0xe000ed04
 800412c:	20004374 	.word	0x20004374
 8004130:	20004430 	.word	0x20004430
 8004134:	20004380 	.word	0x20004380

08004138 <vTaskDelay>:
	{
 8004138:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800413a:	b940      	cbnz	r0, 800414e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800413c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <vTaskDelay+0x40>)
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <vTaskDelay+0x44>)
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	b141      	cbz	r1, 8004166 <vTaskDelay+0x2e>
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	e7fe      	b.n	8004164 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004166:	f7ff fecf 	bl	8003f08 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800416a:	f7ff fcc5 	bl	8003af8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800416e:	f7ff ff6b 	bl	8004048 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004172:	2800      	cmp	r0, #0
 8004174:	d0e2      	beq.n	800413c <vTaskDelay+0x4>
 8004176:	bd08      	pop	{r3, pc}
 8004178:	e000ed04 	.word	0xe000ed04
 800417c:	200043f0 	.word	0x200043f0

08004180 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004180:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <vTaskSwitchContext+0x60>)
{
 8004182:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <vTaskSwitchContext+0x64>)
 8004188:	b112      	cbz	r2, 8004190 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800418a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004190:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <vTaskSwitchContext+0x68>)
 8004194:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	2214      	movs	r2, #20
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f1c3 031f 	rsb	r3, r3, #31
 80041a2:	435a      	muls	r2, r3
 80041a4:	4911      	ldr	r1, [pc, #68]	; (80041ec <vTaskSwitchContext+0x6c>)
 80041a6:	588c      	ldr	r4, [r1, r2]
 80041a8:	1888      	adds	r0, r1, r2
 80041aa:	b944      	cbnz	r4, 80041be <vTaskSwitchContext+0x3e>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	e7fe      	b.n	80041bc <vTaskSwitchContext+0x3c>
 80041be:	6844      	ldr	r4, [r0, #4]
 80041c0:	3208      	adds	r2, #8
 80041c2:	6864      	ldr	r4, [r4, #4]
 80041c4:	440a      	add	r2, r1
 80041c6:	4294      	cmp	r4, r2
 80041c8:	bf08      	it	eq
 80041ca:	6862      	ldreq	r2, [r4, #4]
 80041cc:	6044      	str	r4, [r0, #4]
 80041ce:	bf08      	it	eq
 80041d0:	6042      	streq	r2, [r0, #4]
 80041d2:	2214      	movs	r2, #20
 80041d4:	fb02 1303 	mla	r3, r2, r3, r1
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <vTaskSwitchContext+0x70>)
 80041de:	e7d5      	b.n	800418c <vTaskSwitchContext+0xc>
 80041e0:	200043f0 	.word	0x200043f0
 80041e4:	20004474 	.word	0x20004474
 80041e8:	200043f8 	.word	0x200043f8
 80041ec:	20004380 	.word	0x20004380
 80041f0:	20004374 	.word	0x20004374

080041f4 <vTaskSuspend>:
	{
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4604      	mov	r4, r0
 80041f8:	4e2c      	ldr	r6, [pc, #176]	; (80042ac <vTaskSuspend+0xb8>)
		taskENTER_CRITICAL();
 80041fa:	f7fe ffab 	bl	8003154 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80041fe:	b904      	cbnz	r4, 8004202 <vTaskSuspend+0xe>
 8004200:	6834      	ldr	r4, [r6, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004202:	1d25      	adds	r5, r4, #4
 8004204:	4628      	mov	r0, r5
 8004206:	f7fe ff3d 	bl	8003084 <uxListRemove>
 800420a:	b960      	cbnz	r0, 8004226 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800420c:	2114      	movs	r1, #20
 800420e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004210:	4b27      	ldr	r3, [pc, #156]	; (80042b0 <vTaskSuspend+0xbc>)
 8004212:	4341      	muls	r1, r0
 8004214:	585b      	ldr	r3, [r3, r1]
 8004216:	b933      	cbnz	r3, 8004226 <vTaskSuspend+0x32>
 8004218:	2201      	movs	r2, #1
 800421a:	4926      	ldr	r1, [pc, #152]	; (80042b4 <vTaskSuspend+0xc0>)
 800421c:	4082      	lsls	r2, r0
 800421e:	680b      	ldr	r3, [r1, #0]
 8004220:	ea23 0302 	bic.w	r3, r3, r2
 8004224:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004228:	b11b      	cbz	r3, 8004232 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800422a:	f104 0018 	add.w	r0, r4, #24
 800422e:	f7fe ff29 	bl	8003084 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004232:	4629      	mov	r1, r5
 8004234:	4820      	ldr	r0, [pc, #128]	; (80042b8 <vTaskSuspend+0xc4>)
 8004236:	f7fe ff02 	bl	800303e <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800423a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
		if( xSchedulerRunning != pdFALSE )
 800423e:	4d1f      	ldr	r5, [pc, #124]	; (80042bc <vTaskSuspend+0xc8>)
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004240:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004242:	bf04      	itt	eq
 8004244:	2300      	moveq	r3, #0
 8004246:	f884 304c 	strbeq.w	r3, [r4, #76]	; 0x4c
		taskEXIT_CRITICAL();
 800424a:	f7fe ffa5 	bl	8003198 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800424e:	682a      	ldr	r2, [r5, #0]
 8004250:	b12a      	cbz	r2, 800425e <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 8004252:	f7fe ff7f 	bl	8003154 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8004256:	f7ff fc3d 	bl	8003ad4 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 800425a:	f7fe ff9d 	bl	8003198 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 800425e:	6833      	ldr	r3, [r6, #0]
 8004260:	429c      	cmp	r4, r3
 8004262:	d122      	bne.n	80042aa <vTaskSuspend+0xb6>
			if( xSchedulerRunning != pdFALSE )
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	b1a3      	cbz	r3, 8004292 <vTaskSuspend+0x9e>
				configASSERT( uxSchedulerSuspended == 0 );
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <vTaskSuspend+0xcc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	b143      	cbz	r3, 8004280 <vTaskSuspend+0x8c>
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	e7fe      	b.n	800427e <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 8004280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <vTaskSuspend+0xd0>)
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8004292:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <vTaskSuspend+0xc4>)
 8004294:	6811      	ldr	r1, [r2, #0]
 8004296:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <vTaskSuspend+0xd4>)
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	4291      	cmp	r1, r2
 800429c:	d101      	bne.n	80042a2 <vTaskSuspend+0xae>
					pxCurrentTCB = NULL;
 800429e:	6033      	str	r3, [r6, #0]
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
	}
 80042a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 80042a6:	f7ff bf6b 	b.w	8004180 <vTaskSwitchContext>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	20004374 	.word	0x20004374
 80042b0:	20004380 	.word	0x20004380
 80042b4:	200043f8 	.word	0x200043f8
 80042b8:	20004448 	.word	0x20004448
 80042bc:	20004444 	.word	0x20004444
 80042c0:	200043f0 	.word	0x200043f0
 80042c4:	e000ed04 	.word	0xe000ed04
 80042c8:	200043e4 	.word	0x200043e4

080042cc <vTaskPlaceOnEventList>:
{
 80042cc:	b510      	push	{r4, lr}
 80042ce:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80042d0:	b940      	cbnz	r0, 80042e4 <vTaskPlaceOnEventList+0x18>
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	e7fe      	b.n	80042e2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <vTaskPlaceOnEventList+0x30>)
 80042e6:	6819      	ldr	r1, [r3, #0]
 80042e8:	3118      	adds	r1, #24
 80042ea:	f7fe feb4 	bl	8003056 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042ee:	4620      	mov	r0, r4
}
 80042f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042f4:	2101      	movs	r1, #1
 80042f6:	f7ff bbff 	b.w	8003af8 <prvAddCurrentTaskToDelayedList>
 80042fa:	bf00      	nop
 80042fc:	20004374 	.word	0x20004374

08004300 <vTaskPlaceOnUnorderedEventList>:
{
 8004300:	b510      	push	{r4, lr}
 8004302:	4614      	mov	r4, r2
	configASSERT( pxEventList );
 8004304:	b940      	cbnz	r0, 8004318 <vTaskPlaceOnUnorderedEventList+0x18>
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	e7fe      	b.n	8004316 <vTaskPlaceOnUnorderedEventList+0x16>
	configASSERT( uxSchedulerSuspended != 0 );
 8004318:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <vTaskPlaceOnUnorderedEventList+0x50>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	b943      	cbnz	r3, 8004330 <vTaskPlaceOnUnorderedEventList+0x30>
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	e7fe      	b.n	800432e <vTaskPlaceOnUnorderedEventList+0x2e>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004330:	4b08      	ldr	r3, [pc, #32]	; (8004354 <vTaskPlaceOnUnorderedEventList+0x54>)
 8004332:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	6191      	str	r1, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800433a:	6819      	ldr	r1, [r3, #0]
 800433c:	3118      	adds	r1, #24
 800433e:	f7fe fe7e 	bl	800303e <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004342:	4620      	mov	r0, r4
}
 8004344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004348:	2101      	movs	r1, #1
 800434a:	f7ff bbd5 	b.w	8003af8 <prvAddCurrentTaskToDelayedList>
 800434e:	bf00      	nop
 8004350:	200043f0 	.word	0x200043f0
 8004354:	20004374 	.word	0x20004374

08004358 <vTaskPlaceOnEventListRestricted>:
	{
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	460d      	mov	r5, r1
 800435c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800435e:	b940      	cbnz	r0, 8004372 <vTaskPlaceOnEventListRestricted+0x1a>
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	e7fe      	b.n	8004370 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <vTaskPlaceOnEventListRestricted+0x3c>)
 8004374:	6819      	ldr	r1, [r3, #0]
 8004376:	3118      	adds	r1, #24
 8004378:	f7fe fe61 	bl	800303e <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800437c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800437e:	4621      	mov	r1, r4
 8004380:	bf08      	it	eq
 8004382:	4628      	moveq	r0, r5
	}
 8004384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004388:	bf18      	it	ne
 800438a:	f04f 30ff 	movne.w	r0, #4294967295
 800438e:	f7ff bbb3 	b.w	8003af8 <prvAddCurrentTaskToDelayedList>
 8004392:	bf00      	nop
 8004394:	20004374 	.word	0x20004374

08004398 <xTaskRemoveFromEventList>:
{
 8004398:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800439a:	68c3      	ldr	r3, [r0, #12]
 800439c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800439e:	b944      	cbnz	r4, 80043b2 <xTaskRemoveFromEventList+0x1a>
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	e7fe      	b.n	80043b0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043b2:	f104 0518 	add.w	r5, r4, #24
 80043b6:	4628      	mov	r0, r5
 80043b8:	f7fe fe64 	bl	8003084 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <xTaskRemoveFromEventList+0x6c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	b9e3      	cbnz	r3, 80043fc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043c2:	1d25      	adds	r5, r4, #4
 80043c4:	4628      	mov	r0, r5
 80043c6:	f7fe fe5d 	bl	8003084 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043ca:	2301      	movs	r3, #1
 80043cc:	490e      	ldr	r1, [pc, #56]	; (8004408 <xTaskRemoveFromEventList+0x70>)
 80043ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80043d0:	6808      	ldr	r0, [r1, #0]
 80043d2:	4093      	lsls	r3, r2
 80043d4:	4303      	orrs	r3, r0
 80043d6:	2014      	movs	r0, #20
 80043d8:	600b      	str	r3, [r1, #0]
 80043da:	4629      	mov	r1, r5
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <xTaskRemoveFromEventList+0x74>)
 80043de:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043e2:	f7fe fe2c 	bl	800303e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <xTaskRemoveFromEventList+0x78>)
 80043e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80043f0:	bf85      	ittet	hi
 80043f2:	2001      	movhi	r0, #1
 80043f4:	4b07      	ldrhi	r3, [pc, #28]	; (8004414 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 80043f6:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80043f8:	6018      	strhi	r0, [r3, #0]
}
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043fc:	4629      	mov	r1, r5
 80043fe:	4806      	ldr	r0, [pc, #24]	; (8004418 <xTaskRemoveFromEventList+0x80>)
 8004400:	e7ef      	b.n	80043e2 <xTaskRemoveFromEventList+0x4a>
 8004402:	bf00      	nop
 8004404:	200043f0 	.word	0x200043f0
 8004408:	200043f8 	.word	0x200043f8
 800440c:	20004380 	.word	0x20004380
 8004410:	20004374 	.word	0x20004374
 8004414:	20004474 	.word	0x20004474
 8004418:	20004430 	.word	0x20004430

0800441c <vTaskRemoveFromUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800441c:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <vTaskRemoveFromUnorderedEventList+0x74>)
{
 800441e:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	b942      	cbnz	r2, 8004436 <vTaskRemoveFromUnorderedEventList+0x1a>
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	e7fe      	b.n	8004434 <vTaskRemoveFromUnorderedEventList+0x18>
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004436:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004438:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800443c:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 800443e:	b944      	cbnz	r4, 8004452 <vTaskRemoveFromUnorderedEventList+0x36>
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	e7fe      	b.n	8004450 <vTaskRemoveFromUnorderedEventList+0x34>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004452:	2501      	movs	r5, #1
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004454:	1d26      	adds	r6, r4, #4
	( void ) uxListRemove( pxEventListItem );
 8004456:	f7fe fe15 	bl	8003084 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800445a:	4630      	mov	r0, r6
 800445c:	f7fe fe12 	bl	8003084 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004460:	490c      	ldr	r1, [pc, #48]	; (8004494 <vTaskRemoveFromUnorderedEventList+0x78>)
 8004462:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004464:	6808      	ldr	r0, [r1, #0]
 8004466:	fa05 f302 	lsl.w	r3, r5, r2
 800446a:	4303      	orrs	r3, r0
 800446c:	2014      	movs	r0, #20
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8004472:	4631      	mov	r1, r6
 8004474:	fb00 3002 	mla	r0, r0, r2, r3
 8004478:	f7fe fde1 	bl	800303e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <vTaskRemoveFromUnorderedEventList+0x80>)
 800447e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004486:	bf84      	itt	hi
 8004488:	4b05      	ldrhi	r3, [pc, #20]	; (80044a0 <vTaskRemoveFromUnorderedEventList+0x84>)
 800448a:	601d      	strhi	r5, [r3, #0]
 800448c:	bd70      	pop	{r4, r5, r6, pc}
 800448e:	bf00      	nop
 8004490:	200043f0 	.word	0x200043f0
 8004494:	200043f8 	.word	0x200043f8
 8004498:	20004380 	.word	0x20004380
 800449c:	20004374 	.word	0x20004374
 80044a0:	20004474 	.word	0x20004474

080044a4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <vTaskInternalSetTimeOutState+0x10>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044aa:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <vTaskInternalSetTimeOutState+0x14>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6043      	str	r3, [r0, #4]
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	2000442c 	.word	0x2000442c
 80044b8:	20004470 	.word	0x20004470

080044bc <xTaskCheckForTimeOut>:
{
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80044c0:	4605      	mov	r5, r0
 80044c2:	b940      	cbnz	r0, 80044d6 <xTaskCheckForTimeOut+0x1a>
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	e7fe      	b.n	80044d4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80044d6:	b941      	cbnz	r1, 80044ea <xTaskCheckForTimeOut+0x2e>
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	e7fe      	b.n	80044e8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80044ea:	f7fe fe33 	bl	8003154 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044f0:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80044f2:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	1c58      	adds	r0, r3, #1
 80044f8:	d00e      	beq.n	8004518 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044fa:	480d      	ldr	r0, [pc, #52]	; (8004530 <xTaskCheckForTimeOut+0x74>)
 80044fc:	682e      	ldr	r6, [r5, #0]
 80044fe:	6800      	ldr	r0, [r0, #0]
 8004500:	4286      	cmp	r6, r0
 8004502:	d001      	beq.n	8004508 <xTaskCheckForTimeOut+0x4c>
 8004504:	428a      	cmp	r2, r1
 8004506:	d20e      	bcs.n	8004526 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004508:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800450a:	429a      	cmp	r2, r3
 800450c:	d209      	bcs.n	8004522 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004512:	4628      	mov	r0, r5
 8004514:	f7ff ffc6 	bl	80044a4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004518:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800451a:	f7fe fe3d 	bl	8003198 <vPortExitCritical>
}
 800451e:	4620      	mov	r0, r4
 8004520:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004526:	2401      	movs	r4, #1
 8004528:	e7f7      	b.n	800451a <xTaskCheckForTimeOut+0x5e>
 800452a:	bf00      	nop
 800452c:	20004470 	.word	0x20004470
 8004530:	2000442c 	.word	0x2000442c

08004534 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004534:	2201      	movs	r2, #1
 8004536:	4b01      	ldr	r3, [pc, #4]	; (800453c <vTaskMissedYield+0x8>)
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	4770      	bx	lr
 800453c:	20004474 	.word	0x20004474

08004540 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <xTaskGetSchedulerState+0x18>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	b133      	cbz	r3, 8004554 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <xTaskGetSchedulerState+0x1c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800454c:	bf0c      	ite	eq
 800454e:	2002      	moveq	r0, #2
 8004550:	2000      	movne	r0, #0
 8004552:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004554:	2001      	movs	r0, #1
	}
 8004556:	4770      	bx	lr
 8004558:	20004444 	.word	0x20004444
 800455c:	200043f0 	.word	0x200043f0

08004560 <xTaskPriorityDisinherit>:
	{
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004562:	4604      	mov	r4, r0
 8004564:	b908      	cbnz	r0, 800456a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8004566:	2000      	movs	r0, #0
 8004568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <xTaskPriorityDisinherit+0x94>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4298      	cmp	r0, r3
 8004570:	d008      	beq.n	8004584 <xTaskPriorityDisinherit+0x24>
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	e7fe      	b.n	8004582 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004584:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004586:	b943      	cbnz	r3, 800459a <xTaskPriorityDisinherit+0x3a>
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	e7fe      	b.n	8004598 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800459a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800459c:	6c02      	ldr	r2, [r0, #64]	; 0x40
			( pxTCB->uxMutexesHeld )--;
 800459e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045a0:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80045a2:	6443      	str	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045a4:	d0df      	beq.n	8004566 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1dd      	bne.n	8004566 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045aa:	1d05      	adds	r5, r0, #4
 80045ac:	4628      	mov	r0, r5
 80045ae:	f7fe fd69 	bl	8003084 <uxListRemove>
 80045b2:	4e11      	ldr	r6, [pc, #68]	; (80045f8 <xTaskPriorityDisinherit+0x98>)
 80045b4:	4a11      	ldr	r2, [pc, #68]	; (80045fc <xTaskPriorityDisinherit+0x9c>)
 80045b6:	b950      	cbnz	r0, 80045ce <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045b8:	2114      	movs	r1, #20
 80045ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80045bc:	4379      	muls	r1, r7
 80045be:	5873      	ldr	r3, [r6, r1]
 80045c0:	b92b      	cbnz	r3, 80045ce <xTaskPriorityDisinherit+0x6e>
 80045c2:	2001      	movs	r0, #1
 80045c4:	6813      	ldr	r3, [r2, #0]
 80045c6:	40b8      	lsls	r0, r7
 80045c8:	ea23 0300 	bic.w	r3, r3, r0
 80045cc:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d0:	f1c3 0105 	rsb	r1, r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045d4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d6:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80045d8:	2401      	movs	r4, #1
 80045da:	6811      	ldr	r1, [r2, #0]
 80045dc:	fa04 f003 	lsl.w	r0, r4, r3
 80045e0:	4308      	orrs	r0, r1
 80045e2:	6010      	str	r0, [r2, #0]
 80045e4:	2014      	movs	r0, #20
 80045e6:	4629      	mov	r1, r5
 80045e8:	fb00 6003 	mla	r0, r0, r3, r6
 80045ec:	f7fe fd27 	bl	800303e <vListInsertEnd>
					xReturn = pdTRUE;
 80045f0:	4620      	mov	r0, r4
	}
 80045f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f4:	20004374 	.word	0x20004374
 80045f8:	20004380 	.word	0x20004380
 80045fc:	200043f8 	.word	0x200043f8

08004600 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <uxTaskResetEventItemValue+0x14>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f1c3 0305 	rsb	r3, r3, #5
 8004610:	6193      	str	r3, [r2, #24]
}
 8004612:	4770      	bx	lr
 8004614:	20004374 	.word	0x20004374

08004618 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800461a:	4c0d      	ldr	r4, [pc, #52]	; (8004650 <prvCheckForValidListAndQueue+0x38>)
	taskENTER_CRITICAL();
 800461c:	f7fe fd9a 	bl	8003154 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8004620:	6825      	ldr	r5, [r4, #0]
 8004622:	b98d      	cbnz	r5, 8004648 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
 8004624:	4f0b      	ldr	r7, [pc, #44]	; (8004654 <prvCheckForValidListAndQueue+0x3c>)
			vListInitialise( &xActiveTimerList2 );
 8004626:	4e0c      	ldr	r6, [pc, #48]	; (8004658 <prvCheckForValidListAndQueue+0x40>)
			vListInitialise( &xActiveTimerList1 );
 8004628:	4638      	mov	r0, r7
 800462a:	f7fe fcfa 	bl	8003022 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800462e:	4630      	mov	r0, r6
 8004630:	f7fe fcf7 	bl	8003022 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <prvCheckForValidListAndQueue+0x44>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004636:	462a      	mov	r2, r5
			pxCurrentTimerList = &xActiveTimerList1;
 8004638:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <prvCheckForValidListAndQueue+0x48>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800463c:	210c      	movs	r1, #12
 800463e:	2005      	movs	r0, #5
			pxOverflowTimerList = &xActiveTimerList2;
 8004640:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004642:	f7ff f845 	bl	80036d0 <xQueueGenericCreate>
 8004646:	6020      	str	r0, [r4, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8004648:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800464c:	f7fe bda4 	b.w	8003198 <vPortExitCritical>
 8004650:	200044ac 	.word	0x200044ac
 8004654:	20004480 	.word	0x20004480
 8004658:	20004494 	.word	0x20004494
 800465c:	20004478 	.word	0x20004478
 8004660:	2000447c 	.word	0x2000447c

08004664 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8004664:	4291      	cmp	r1, r2
{
 8004666:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004668:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800466a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800466c:	d80a      	bhi.n	8004684 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466e:	1ad2      	subs	r2, r2, r3
 8004670:	6983      	ldr	r3, [r0, #24]
 8004672:	429a      	cmp	r2, r3
 8004674:	d20d      	bcs.n	8004692 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <prvInsertTimerInActiveList+0x34>)
 8004678:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	f7fe fceb 	bl	8003056 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004680:	2000      	movs	r0, #0
 8004682:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004684:	429a      	cmp	r2, r3
 8004686:	d201      	bcs.n	800468c <prvInsertTimerInActiveList+0x28>
 8004688:	4299      	cmp	r1, r3
 800468a:	d202      	bcs.n	8004692 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800468c:	1d01      	adds	r1, r0, #4
 800468e:	4b03      	ldr	r3, [pc, #12]	; (800469c <prvInsertTimerInActiveList+0x38>)
 8004690:	e7f3      	b.n	800467a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8004692:	2001      	movs	r0, #1
}
 8004694:	bd08      	pop	{r3, pc}
 8004696:	bf00      	nop
 8004698:	2000447c 	.word	0x2000447c
 800469c:	20004478 	.word	0x20004478

080046a0 <xTimerCreateTimerTask>:
{
 80046a0:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
 80046a2:	f7ff ffb9 	bl	8004618 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <xTimerCreateTimerTask+0x3c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	b943      	cbnz	r3, 80046be <xTimerCreateTimerTask+0x1e>
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	e7fe      	b.n	80046bc <xTimerCreateTimerTask+0x1c>
			xReturn = xTaskCreate(	prvTimerTask,
 80046be:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <xTimerCreateTimerTask+0x40>)
 80046c0:	2246      	movs	r2, #70	; 0x46
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	2303      	movs	r3, #3
 80046c6:	4907      	ldr	r1, [pc, #28]	; (80046e4 <xTimerCreateTimerTask+0x44>)
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	4807      	ldr	r0, [pc, #28]	; (80046e8 <xTimerCreateTimerTask+0x48>)
 80046cc:	2300      	movs	r3, #0
 80046ce:	f7ff fa8f 	bl	8003bf0 <xTaskCreate>
	configASSERT( xReturn );
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d0ea      	beq.n	80046ac <xTimerCreateTimerTask+0xc>
}
 80046d6:	b003      	add	sp, #12
 80046d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80046dc:	200044ac 	.word	0x200044ac
 80046e0:	200044b0 	.word	0x200044b0
 80046e4:	08008250 	.word	0x08008250
 80046e8:	080047c1 	.word	0x080047c1

080046ec <xTimerGenericCommand>:
{
 80046ec:	b530      	push	{r4, r5, lr}
 80046ee:	4615      	mov	r5, r2
 80046f0:	b085      	sub	sp, #20
 80046f2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80046f4:	4603      	mov	r3, r0
 80046f6:	b940      	cbnz	r0, 800470a <xTimerGenericCommand+0x1e>
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	e7fe      	b.n	8004708 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 800470a:	4c0d      	ldr	r4, [pc, #52]	; (8004740 <xTimerGenericCommand+0x54>)
 800470c:	6820      	ldr	r0, [r4, #0]
 800470e:	b178      	cbz	r0, 8004730 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004710:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8004712:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004714:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004716:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004718:	dc0c      	bgt.n	8004734 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800471a:	f7ff ff11 	bl	8004540 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800471e:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004720:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004722:	bf0c      	ite	eq
 8004724:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004726:	461a      	movne	r2, r3
 8004728:	a901      	add	r1, sp, #4
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	f7fe fff2 	bl	8003714 <xQueueGenericSend>
}
 8004730:	b005      	add	sp, #20
 8004732:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004734:	2300      	movs	r3, #0
 8004736:	a901      	add	r1, sp, #4
 8004738:	f7ff f8a2 	bl	8003880 <xQueueGenericSendFromISR>
 800473c:	e7f8      	b.n	8004730 <xTimerGenericCommand+0x44>
 800473e:	bf00      	nop
 8004740:	200044ac 	.word	0x200044ac

08004744 <prvSwitchTimerLists>:
{
 8004744:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004748:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800474c:	4d1a      	ldr	r5, [pc, #104]	; (80047b8 <prvSwitchTimerLists+0x74>)
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	b932      	cbnz	r2, 8004762 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8004754:	4a19      	ldr	r2, [pc, #100]	; (80047bc <prvSwitchTimerLists+0x78>)
 8004756:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004758:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800475a:	6029      	str	r1, [r5, #0]
}
 800475c:	b002      	add	sp, #8
 800475e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004762:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004764:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004766:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004768:	1d27      	adds	r7, r4, #4
 800476a:	4638      	mov	r0, r7
 800476c:	f7fe fc8a 	bl	8003084 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004772:	4620      	mov	r0, r4
 8004774:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004776:	69e3      	ldr	r3, [r4, #28]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d1e8      	bne.n	800474e <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800477c:	69a3      	ldr	r3, [r4, #24]
 800477e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8004780:	429e      	cmp	r6, r3
 8004782:	d206      	bcs.n	8004792 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004784:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004786:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004788:	4639      	mov	r1, r7
 800478a:	6828      	ldr	r0, [r5, #0]
 800478c:	f7fe fc63 	bl	8003056 <vListInsert>
 8004790:	e7dd      	b.n	800474e <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004792:	2300      	movs	r3, #0
 8004794:	f8cd 8000 	str.w	r8, [sp]
 8004798:	4632      	mov	r2, r6
 800479a:	4619      	mov	r1, r3
 800479c:	4620      	mov	r0, r4
 800479e:	f7ff ffa5 	bl	80046ec <xTimerGenericCommand>
				configASSERT( xResult );
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d1d3      	bne.n	800474e <prvSwitchTimerLists+0xa>
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	e7fe      	b.n	80047b6 <prvSwitchTimerLists+0x72>
 80047b8:	20004478 	.word	0x20004478
 80047bc:	2000447c 	.word	0x2000447c

080047c0 <prvTimerTask>:
{
 80047c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047c4:	4d6c      	ldr	r5, [pc, #432]	; (8004978 <prvTimerTask+0x1b8>)
					portYIELD_WITHIN_API();
 80047c6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004988 <prvTimerTask+0x1c8>
 80047ca:	462f      	mov	r7, r5
{
 80047cc:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047ce:	682b      	ldr	r3, [r5, #0]
 80047d0:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 80047d4:	f1bb 0f00 	cmp.w	fp, #0
 80047d8:	d042      	beq.n	8004860 <prvTimerTask+0xa0>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 80047e0:	f7ff fb92 	bl	8003f08 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80047e4:	f7ff fb98 	bl	8003f18 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80047e8:	4b64      	ldr	r3, [pc, #400]	; (800497c <prvTimerTask+0x1bc>)
	xTimeNow = xTaskGetTickCount();
 80047ea:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	461e      	mov	r6, r3
 80047f0:	4290      	cmp	r0, r2
 80047f2:	d237      	bcs.n	8004864 <prvTimerTask+0xa4>
		*pxTimerListsWereSwitched = pdTRUE;
 80047f4:	2401      	movs	r4, #1
 80047f6:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 80047f8:	f7ff ffa4 	bl	8004744 <prvSwitchTimerLists>
 80047fc:	9b03      	ldr	r3, [sp, #12]
	xLastTime = xTimeNow;
 80047fe:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 8004802:	2c00      	cmp	r4, #0
 8004804:	d17d      	bne.n	8004902 <prvTimerTask+0x142>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004806:	f1bb 0f00 	cmp.w	fp, #0
 800480a:	d05f      	beq.n	80048cc <prvTimerTask+0x10c>
 800480c:	45d1      	cmp	r9, sl
 800480e:	d876      	bhi.n	80048fe <prvTimerTask+0x13e>
				( void ) xTaskResumeAll();
 8004810:	f7ff fc1a 	bl	8004048 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800481c:	f10b 0004 	add.w	r0, fp, #4
 8004820:	f7fe fc30 	bl	8003084 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d11d      	bne.n	8004868 <prvTimerTask+0xa8>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800482c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8004830:	464b      	mov	r3, r9
 8004832:	4652      	mov	r2, sl
 8004834:	4449      	add	r1, r9
 8004836:	4658      	mov	r0, fp
 8004838:	f7ff ff14 	bl	8004664 <prvInsertTimerInActiveList>
 800483c:	b1a0      	cbz	r0, 8004868 <prvTimerTask+0xa8>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800483e:	9400      	str	r4, [sp, #0]
 8004840:	4623      	mov	r3, r4
 8004842:	464a      	mov	r2, r9
 8004844:	4621      	mov	r1, r4
 8004846:	4658      	mov	r0, fp
 8004848:	f7ff ff50 	bl	80046ec <xTimerGenericCommand>
			configASSERT( xResult );
 800484c:	b960      	cbnz	r0, 8004868 <prvTimerTask+0xa8>
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	e7fe      	b.n	800485e <prvTimerTask+0x9e>
		xNextExpireTime = ( TickType_t ) 0U;
 8004860:	46d9      	mov	r9, fp
 8004862:	e7bd      	b.n	80047e0 <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 8004864:	2400      	movs	r4, #0
 8004866:	e7ca      	b.n	80047fe <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004868:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800486c:	4658      	mov	r0, fp
 800486e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004870:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8004984 <prvTimerTask+0x1c4>
 8004874:	2200      	movs	r2, #0
 8004876:	a905      	add	r1, sp, #20
 8004878:	f8d9 0000 	ldr.w	r0, [r9]
 800487c:	f7ff f862 	bl	8003944 <xQueueReceive>
 8004880:	2800      	cmp	r0, #0
 8004882:	d0a4      	beq.n	80047ce <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004884:	9b05      	ldr	r3, [sp, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	dbf4      	blt.n	8004874 <prvTimerTask+0xb4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800488a:	9c07      	ldr	r4, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800488c:	6963      	ldr	r3, [r4, #20]
 800488e:	b113      	cbz	r3, 8004896 <prvTimerTask+0xd6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004890:	1d20      	adds	r0, r4, #4
 8004892:	f7fe fbf7 	bl	8003084 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8004896:	f7ff fb3f 	bl	8003f18 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800489a:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800489c:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800489e:	4298      	cmp	r0, r3
 80048a0:	d201      	bcs.n	80048a6 <prvTimerTask+0xe6>
		prvSwitchTimerLists();
 80048a2:	f7ff ff4f 	bl	8004744 <prvSwitchTimerLists>
 80048a6:	9a05      	ldr	r2, [sp, #20]
	xLastTime = xTimeNow;
 80048a8:	f8c6 b000 	str.w	fp, [r6]
 80048ac:	2a09      	cmp	r2, #9
 80048ae:	d8e1      	bhi.n	8004874 <prvTimerTask+0xb4>
 80048b0:	2301      	movs	r3, #1
 80048b2:	4093      	lsls	r3, r2
 80048b4:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 80048b8:	d14a      	bne.n	8004950 <prvTimerTask+0x190>
 80048ba:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80048be:	d123      	bne.n	8004908 <prvTimerTask+0x148>
 80048c0:	069b      	lsls	r3, r3, #26
 80048c2:	d5d7      	bpl.n	8004874 <prvTimerTask+0xb4>
						vPortFree( pxTimer );
 80048c4:	4620      	mov	r0, r4
 80048c6:	f7fe fe01 	bl	80034cc <vPortFree>
 80048ca:	e7d3      	b.n	8004874 <prvTimerTask+0xb4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048cc:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <prvTimerTask+0x1c0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	fab2 f282 	clz	r2, r2
 80048d6:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048d8:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <prvTimerTask+0x1c4>)
 80048da:	eba9 010a 	sub.w	r1, r9, sl
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	f7ff f8d4 	bl	8003a8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048e4:	f7ff fbb0 	bl	8004048 <xTaskResumeAll>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d1c1      	bne.n	8004870 <prvTimerTask+0xb0>
					portYIELD_WITHIN_API();
 80048ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048f0:	f8c8 3000 	str.w	r3, [r8]
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	e7b8      	b.n	8004870 <prvTimerTask+0xb0>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048fe:	4622      	mov	r2, r4
 8004900:	e7ea      	b.n	80048d8 <prvTimerTask+0x118>
			( void ) xTaskResumeAll();
 8004902:	f7ff fba1 	bl	8004048 <xTaskResumeAll>
 8004906:	e7b3      	b.n	8004870 <prvTimerTask+0xb0>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004908:	69a1      	ldr	r1, [r4, #24]
 800490a:	9b06      	ldr	r3, [sp, #24]
 800490c:	465a      	mov	r2, fp
 800490e:	4419      	add	r1, r3
 8004910:	4620      	mov	r0, r4
 8004912:	f7ff fea7 	bl	8004664 <prvInsertTimerInActiveList>
 8004916:	2800      	cmp	r0, #0
 8004918:	d0ac      	beq.n	8004874 <prvTimerTask+0xb4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800491a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800491c:	4620      	mov	r0, r4
 800491e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004920:	69e3      	ldr	r3, [r4, #28]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d1a6      	bne.n	8004874 <prvTimerTask+0xb4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004926:	69a2      	ldr	r2, [r4, #24]
 8004928:	9906      	ldr	r1, [sp, #24]
 800492a:	f8cd a000 	str.w	sl, [sp]
 800492e:	440a      	add	r2, r1
 8004930:	4653      	mov	r3, sl
 8004932:	4651      	mov	r1, sl
 8004934:	4620      	mov	r0, r4
 8004936:	f7ff fed9 	bl	80046ec <xTimerGenericCommand>
							configASSERT( xResult );
 800493a:	2800      	cmp	r0, #0
 800493c:	d19a      	bne.n	8004874 <prvTimerTask+0xb4>
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	e7fe      	b.n	800494e <prvTimerTask+0x18e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004950:	9906      	ldr	r1, [sp, #24]
 8004952:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004954:	b941      	cbnz	r1, 8004968 <prvTimerTask+0x1a8>
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	e7fe      	b.n	8004966 <prvTimerTask+0x1a6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004968:	465b      	mov	r3, fp
 800496a:	465a      	mov	r2, fp
 800496c:	4459      	add	r1, fp
 800496e:	4620      	mov	r0, r4
 8004970:	f7ff fe78 	bl	8004664 <prvInsertTimerInActiveList>
 8004974:	e77e      	b.n	8004874 <prvTimerTask+0xb4>
 8004976:	bf00      	nop
 8004978:	20004478 	.word	0x20004478
 800497c:	200044a8 	.word	0x200044a8
 8004980:	2000447c 	.word	0x2000447c
 8004984:	200044ac 	.word	0x200044ac
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <gotoTimeSettingUI>:
"5.擴展模塊",
},
};

void gotoTimeSettingUI(void)
{
 800498c:	b507      	push	{r0, r1, r2, lr}
	exitMenu();
 800498e:	f000 f851 	bl	8004a34 <exitMenu>
	xTaskCreate((TaskFunction_t  )(RTCUI_Task),         	  	//Task Function
 8004992:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <gotoTimeSettingUI+0x2c>)
 8004994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	2303      	movs	r3, #3
 800499c:	4907      	ldr	r1, [pc, #28]	; (80049bc <gotoTimeSettingUI+0x30>)
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	4807      	ldr	r0, [pc, #28]	; (80049c0 <gotoTimeSettingUI+0x34>)
 80049a2:	2300      	movs	r3, #0
 80049a4:	f7ff f924 	bl	8003bf0 <xTaskCreate>
				(const char*     ) "RTCUI_Task",		      	//Task Name
				(uint16_t        ) RTCUI_TASK_STACK_SIZE, 	//Task Stack Size
				(void *          ) NULL,				    //Task Fuction Parameter
				(UBaseType_t     ) RTCUI_TASK_PRIORITY, 		//Task Priority
				(TaskHandle_t    ) &RTCUITaskHandler);	    //Task Handler
	vTaskSuspend(MenuTaskHandler);
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <gotoTimeSettingUI+0x38>)
 80049aa:	6818      	ldr	r0, [r3, #0]
}
 80049ac:	b003      	add	sp, #12
 80049ae:	f85d eb04 	ldr.w	lr, [sp], #4
	vTaskSuspend(MenuTaskHandler);
 80049b2:	f7ff bc1f 	b.w	80041f4 <vTaskSuspend>
 80049b6:	bf00      	nop
 80049b8:	2000465c 	.word	0x2000465c
 80049bc:	08008278 	.word	0x08008278
 80049c0:	08004c25 	.word	0x08004c25
 80049c4:	20004658 	.word	0x20004658

080049c8 <mainMenuInit>:



/*初始化主菜單*/
void mainMenuInit(void)
{	
 80049c8:	2100      	movs	r1, #0
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <mainMenuInit+0x3c>)
 80049cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ce:	4618      	mov	r0, r3
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
	{
		mainMenu[i].menuItemCount = MAIN_MENU_ITEMNUM;
 80049d0:	2705      	movs	r7, #5
		mainMenu[i].isSelect = false;
 80049d2:	460a      	mov	r2, r1
		mainMenu[i].icoSelected = finger_img;
 80049d4:	4e0c      	ldr	r6, [pc, #48]	; (8004a08 <mainMenuInit+0x40>)
		mainMenu[i].icoUnselected = NULL;
		mainMenu[i].title = mainMenuLanguage[1][i];
 80049d6:	4d0d      	ldr	r5, [pc, #52]	; (8004a0c <mainMenuInit+0x44>)
 80049d8:	186c      	adds	r4, r5, r1
 80049da:	6964      	ldr	r4, [r4, #20]
 80049dc:	3104      	adds	r1, #4
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
 80049de:	2914      	cmp	r1, #20
		mainMenu[i].menuItemCount = MAIN_MENU_ITEMNUM;
 80049e0:	705f      	strb	r7, [r3, #1]
		mainMenu[i].isSelect = false;
 80049e2:	709a      	strb	r2, [r3, #2]
		mainMenu[i].icoSelected = finger_img;
 80049e4:	605e      	str	r6, [r3, #4]
		mainMenu[i].icoUnselected = NULL;
 80049e6:	609a      	str	r2, [r3, #8]
		mainMenu[i].title = mainMenuLanguage[1][i];
 80049e8:	60dc      	str	r4, [r3, #12]
		mainMenu[i].Function = NULL;
 80049ea:	611a      	str	r2, [r3, #16]
		mainMenu[i].parentMenu = NULL;
 80049ec:	615a      	str	r2, [r3, #20]
		mainMenu[i].childrenMenu = NULL;
 80049ee:	619a      	str	r2, [r3, #24]
 80049f0:	f103 031c 	add.w	r3, r3, #28
	for(int i=0; i<MAIN_MENU_ITEMNUM; i++)
 80049f4:	d1f0      	bne.n	80049d8 <mainMenuInit+0x10>
	}
	mainMenu[0].isSelect = true;
 80049f6:	2301      	movs	r3, #1
 80049f8:	7083      	strb	r3, [r0, #2]
	mainMenu[0].Function = gotoTimeSettingUI;
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <mainMenuInit+0x48>)
	mainMenu[0].childrenMenu = NULL;
 80049fc:	6182      	str	r2, [r0, #24]
	mainMenu[0].Function = gotoTimeSettingUI;
 80049fe:	6103      	str	r3, [r0, #16]
	mainMenu[0].childrenMenu = NULL;
 8004a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200045cc 	.word	0x200045cc
 8004a08:	08008258 	.word	0x08008258
 8004a0c:	20000018 	.word	0x20000018
 8004a10:	0800498d 	.word	0x0800498d

08004a14 <getMenuSelectitem>:
//  從menu清單中取得被選中的Menu項目
//  返回值 : 被選中的menu項目位於清單中的索引
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
uint8_t getMenuSelectitem(MenuItem_Typedef menu[]) {
	int i;
	for (i = 0; i < menu->menuItemCount; i++) {
 8004a14:	2300      	movs	r3, #0
		if (menu[i].isSelect == true)
 8004a16:	211c      	movs	r1, #28
uint8_t getMenuSelectitem(MenuItem_Typedef menu[]) {
 8004a18:	b510      	push	{r4, lr}
	for (i = 0; i < menu->menuItemCount; i++) {
 8004a1a:	7842      	ldrb	r2, [r0, #1]
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	db01      	blt.n	8004a24 <getMenuSelectitem+0x10>
			break;
	}
	return i;
 8004a20:	b2d8      	uxtb	r0, r3
}
 8004a22:	bd10      	pop	{r4, pc}
		if (menu[i].isSelect == true)
 8004a24:	fb01 0403 	mla	r4, r1, r3, r0
 8004a28:	78a4      	ldrb	r4, [r4, #2]
 8004a2a:	2c00      	cmp	r4, #0
 8004a2c:	d1f8      	bne.n	8004a20 <getMenuSelectitem+0xc>
	for (i = 0; i < menu->menuItemCount; i++) {
 8004a2e:	3301      	adds	r3, #1
 8004a30:	e7f4      	b.n	8004a1c <getMenuSelectitem+0x8>
	...

08004a34 <exitMenu>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  返回主menu選單
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
void exitMenu(void) {
	CurMenu = mainMenu;
 8004a34:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <exitMenu+0x18>)
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <exitMenu+0x1c>)
 8004a38:	601a      	str	r2, [r3, #0]
	MenuWindow.title = defaultTitle;
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <exitMenu+0x20>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <exitMenu+0x24>)
 8004a40:	619a      	str	r2, [r3, #24]
	//setShow_ui(MAIN_UI);
	isChangeMenu = true;
 8004a42:	2201      	movs	r2, #1
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <exitMenu+0x28>)
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	200045cc 	.word	0x200045cc
 8004a50:	20000054 	.word	0x20000054
 8004a54:	20000094 	.word	0x20000094
 8004a58:	20000078 	.word	0x20000078
 8004a5c:	20000098 	.word	0x20000098

08004a60 <DisplayMenuInit>:
		exitMenu();
	}
}

/*顯示菜單*/
void DisplayMenuInit(MenuItem_Typedef* menu) {
 8004a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t topitem;
	uint8_t showItems;

	if (isChangeMenu == false)
 8004a64:	4f20      	ldr	r7, [pc, #128]	; (8004ae8 <DisplayMenuInit+0x88>)
void DisplayMenuInit(MenuItem_Typedef* menu) {
 8004a66:	4606      	mov	r6, r0
	if (isChangeMenu == false)
 8004a68:	783b      	ldrb	r3, [r7, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d02f      	beq.n	8004ace <DisplayMenuInit+0x6e>
		return;

	selected = getMenuSelectitem(menu);
 8004a6e:	f7ff ffd1 	bl	8004a14 <getMenuSelectitem>
 8004a72:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <DisplayMenuInit+0x8c>)
	cur_sequence = selected;
	if (selected < menu->cursorPosition)
		menu->cursorPosition = 0;
	topitem = selected - menu->cursorPosition;
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 8004a74:	4d1e      	ldr	r5, [pc, #120]	; (8004af0 <DisplayMenuInit+0x90>)
	selected = getMenuSelectitem(menu);
 8004a76:	6018      	str	r0, [r3, #0]
	cur_sequence = selected;
 8004a78:	4b1e      	ldr	r3, [pc, #120]	; (8004af4 <DisplayMenuInit+0x94>)
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 8004a7a:	7872      	ldrb	r2, [r6, #1]
	cur_sequence = selected;
 8004a7c:	6018      	str	r0, [r3, #0]
	if (selected < menu->cursorPosition)
 8004a7e:	f996 3000 	ldrsb.w	r3, [r6]
	showItems = MenuWindow.itemsperpage;
	if (menu->menuItemCount < MenuWindow.itemsperpage)
		showItems = menu->menuItemCount;
	for (int i = 0; i < showItems; i++) {
		MenuItem_Typedef* Item = &menu[topitem + i];
		GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
 8004a82:	f04f 091c 	mov.w	r9, #28
	if (selected < menu->cursorPosition)
 8004a86:	4298      	cmp	r0, r3
		menu->cursorPosition = 0;
 8004a88:	bfbc      	itt	lt
 8004a8a:	2300      	movlt	r3, #0
 8004a8c:	7033      	strblt	r3, [r6, #0]
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 8004a8e:	692b      	ldr	r3, [r5, #16]
	topitem = selected - menu->cursorPosition;
 8004a90:	f996 4000 	ldrsb.w	r4, [r6]
	if (menu->menuItemCount <= MenuWindow.itemsperpage)
 8004a94:	429a      	cmp	r2, r3
		topitem = 0;
 8004a96:	bf92      	itee	ls
 8004a98:	2400      	movls	r4, #0
	topitem = selected - menu->cursorPosition;
 8004a9a:	1b00      	subhi	r0, r0, r4
 8004a9c:	b2c4      	uxtbhi	r4, r0
	GUI_WindowsDraw(&MenuWindow);
 8004a9e:	4814      	ldr	r0, [pc, #80]	; (8004af0 <DisplayMenuInit+0x90>)
	MenuWindow.topitem = topitem;
 8004aa0:	616c      	str	r4, [r5, #20]
	GUI_WindowsDraw(&MenuWindow);
 8004aa2:	f000 fbdb 	bl	800525c <GUI_WindowsDraw>
	MenuScrollbar.topitem = topitem;
 8004aa6:	4814      	ldr	r0, [pc, #80]	; (8004af8 <DisplayMenuInit+0x98>)
 8004aa8:	6184      	str	r4, [r0, #24]
	MenuScrollbar.totalitems = menu->menuItemCount;
 8004aaa:	7873      	ldrb	r3, [r6, #1]
 8004aac:	6103      	str	r3, [r0, #16]
	GUI_ScrollbarDraw(&MenuScrollbar);
 8004aae:	f000 fb01 	bl	80050b4 <GUI_ScrollbarDraw>
	showItems = MenuWindow.itemsperpage;
 8004ab2:	692b      	ldr	r3, [r5, #16]
	for (int i = 0; i < showItems; i++) {
 8004ab4:	2500      	movs	r5, #0
	if (menu->menuItemCount < MenuWindow.itemsperpage)
 8004ab6:	f896 8001 	ldrb.w	r8, [r6, #1]
 8004aba:	4543      	cmp	r3, r8
	showItems = MenuWindow.itemsperpage;
 8004abc:	bf98      	it	ls
 8004abe:	fa5f f883 	uxtbls.w	r8, r3
	for (int i = 0; i < showItems; i++) {
 8004ac2:	4545      	cmp	r5, r8
 8004ac4:	db05      	blt.n	8004ad2 <DisplayMenuInit+0x72>
	}

//	CurItem = menu + cur_sequence;
//	CurItem->isSelect = true;

	GUI_Refresh(); //刷新屏幕
 8004ac6:	f000 faba 	bl	800503e <GUI_Refresh>
	isChangeMenu = false;
 8004aca:	2300      	movs	r3, #0
 8004acc:	703b      	strb	r3, [r7, #0]
 8004ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
 8004ad2:	1962      	adds	r2, r4, r5
 8004ad4:	ebc5 1105 	rsb	r1, r5, r5, lsl #4
 8004ad8:	fb09 6202 	mla	r2, r9, r2, r6
 8004adc:	3113      	adds	r1, #19
 8004ade:	2014      	movs	r0, #20
 8004ae0:	f000 fa48 	bl	8004f74 <GUI_MenuItemDraw>
	for (int i = 0; i < showItems; i++) {
 8004ae4:	3501      	adds	r5, #1
 8004ae6:	e7ec      	b.n	8004ac2 <DisplayMenuInit+0x62>
 8004ae8:	20000098 	.word	0x20000098
 8004aec:	200044c0 	.word	0x200044c0
 8004af0:	20000078 	.word	0x20000078
 8004af4:	200044bc 	.word	0x200044bc
 8004af8:	20000058 	.word	0x20000058

08004afc <Menu_SetSelected>:
}

void Menu_SetSelected(int item_index, bool selected) {
	//判斷index是否越界
	CurItem = CurMenu + item_index;
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <Menu_SetSelected+0x14>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	231c      	movs	r3, #28
 8004b02:	fb03 2000 	mla	r0, r3, r0, r2
 8004b06:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <Menu_SetSelected+0x18>)
	CurItem->isSelect = selected;
 8004b08:	7081      	strb	r1, [r0, #2]
	CurItem = CurMenu + item_index;
 8004b0a:	6018      	str	r0, [r3, #0]
	CurItem->isSelect = selected;
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000054 	.word	0x20000054
 8004b14:	200044b4 	.word	0x200044b4

08004b18 <Menu_Task>:
}

/*菜單運行*/
void Menu_Task(void *pvParameters) {
 8004b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint8_t showItems;
	Rotary_state rstate = state_no_changed;
	DisplayMenuInit(CurMenu);
 8004b1c:	4d3a      	ldr	r5, [pc, #232]	; (8004c08 <Menu_Task+0xf0>)
	RotaryEcncorder_SetRange(0, CurMenu->menuItemCount - 1);

	while (1) {

		//按鈕事件處理
		if (EventGroupHandler != NULL) {
 8004b1e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8004c1c <Menu_Task+0x104>
	DisplayMenuInit(CurMenu);
 8004b22:	6828      	ldr	r0, [r5, #0]
 8004b24:	f7ff ff9c 	bl	8004a60 <DisplayMenuInit>
	RotaryEcncorder_SetRange(0, CurMenu->menuItemCount - 1);
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	7859      	ldrb	r1, [r3, #1]
			val = xEventGroupWaitBits(EventGroupHandler,
			BUTTON_PRESS_EVENT,
			pdTRUE,
			pdFALSE, 10 / portTICK_PERIOD_MS);
			if (val == BUTTON_PRESS_EVENT) {
				CurItem = CurMenu + cur_sequence;
 8004b2e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004c20 <Menu_Task+0x108>
	RotaryEcncorder_SetRange(0, CurMenu->menuItemCount - 1);
 8004b32:	3901      	subs	r1, #1
 8004b34:	f7fc ff46 	bl	80019c4 <RotaryEcncorder_SetRange>
		if (EventGroupHandler != NULL) {
 8004b38:	f8d9 0000 	ldr.w	r0, [r9]
 8004b3c:	b198      	cbz	r0, 8004b66 <Menu_Task+0x4e>
			val = xEventGroupWaitBits(EventGroupHandler,
 8004b3e:	230a      	movs	r3, #10
 8004b40:	2201      	movs	r2, #1
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	4611      	mov	r1, r2
 8004b46:	2300      	movs	r3, #0
 8004b48:	f7fe f9a0 	bl	8002e8c <xEventGroupWaitBits>
			if (val == BUTTON_PRESS_EVENT) {
 8004b4c:	2801      	cmp	r0, #1
 8004b4e:	d10a      	bne.n	8004b66 <Menu_Task+0x4e>
				CurItem = CurMenu + cur_sequence;
 8004b50:	211c      	movs	r1, #28
 8004b52:	682a      	ldr	r2, [r5, #0]
 8004b54:	f8d8 3000 	ldr.w	r3, [r8]
 8004b58:	fb01 2303 	mla	r3, r1, r3, r2
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <Menu_Task+0xf4>)
 8004b5e:	6013      	str	r3, [r2, #0]
				if (CurItem->Function != NULL) {
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	b103      	cbz	r3, 8004b66 <Menu_Task+0x4e>
					CurItem->Function();
 8004b64:	4798      	blx	r3
				}
			}
		}
		// 旋轉編碼器旋轉界面處理
		cur_rotateNum = RotaryEcncorder_GetCount();
 8004b66:	f7fc ff47 	bl	80019f8 <RotaryEcncorder_GetCount>
 8004b6a:	4c29      	ldr	r4, [pc, #164]	; (8004c10 <Menu_Task+0xf8>)
 8004b6c:	6020      	str	r0, [r4, #0]
		rstate = RotaryEcncorder_GetState();
 8004b6e:	f7fc ff5f 	bl	8001a30 <RotaryEcncorder_GetState>
		switch (rstate) {
 8004b72:	3801      	subs	r0, #1
 8004b74:	2801      	cmp	r0, #1
 8004b76:	d835      	bhi.n	8004be4 <Menu_Task+0xcc>
		case state_no_changed:
			break;
		case state_counter_clock_wise:
		case state_clock_wise:
			//清除窗口內容
			GUI_RectangleFill(MenuWindow.x + 1, MenuScrollbar.y,
 8004b78:	2700      	movs	r7, #0
					MenuScrollbar.x - 1, MenuWindow.height - 2, 0);
 8004b7a:	4e26      	ldr	r6, [pc, #152]	; (8004c14 <Menu_Task+0xfc>)
 8004b7c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004c18 <Menu_Task+0x100>
			GUI_RectangleFill(MenuWindow.x + 1, MenuScrollbar.y,
 8004b80:	68f3      	ldr	r3, [r6, #12]
 8004b82:	6830      	ldr	r0, [r6, #0]
 8004b84:	f8da 2000 	ldr.w	r2, [sl]
 8004b88:	3b02      	subs	r3, #2
 8004b8a:	3a01      	subs	r2, #1
 8004b8c:	9700      	str	r7, [sp, #0]
 8004b8e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004b92:	3001      	adds	r0, #1
 8004b94:	f000 f94e 	bl	8004e34 <GUI_RectangleFill>
			Menu_SetSelected(cur_sequence, false);
 8004b98:	4639      	mov	r1, r7
 8004b9a:	f8d8 0000 	ldr.w	r0, [r8]
 8004b9e:	f7ff ffad 	bl	8004afc <Menu_SetSelected>
			cur_sequence = cur_rotateNum;
 8004ba2:	6827      	ldr	r7, [r4, #0]
			Menu_SetSelected(cur_sequence, true);
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4638      	mov	r0, r7
			cur_sequence = cur_rotateNum;
 8004ba8:	f8c8 7000 	str.w	r7, [r8]
			Menu_SetSelected(cur_sequence, true);
 8004bac:	f7ff ffa6 	bl	8004afc <Menu_SetSelected>
			CurMenu->cursorPosition = cur_sequence;
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	46b3      	mov	fp, r6
 8004bb4:	701f      	strb	r7, [r3, #0]
			if (CurMenu->menuItemCount <= MenuWindow.itemsperpage) {
 8004bb6:	785c      	ldrb	r4, [r3, #1]
 8004bb8:	6933      	ldr	r3, [r6, #16]
 8004bba:	429c      	cmp	r4, r3
 8004bbc:	d905      	bls.n	8004bca <Menu_Task+0xb2>
				showItems = CurMenu->menuItemCount;
			} else {
				if (CurMenu->menuItemCount - cur_sequence< MenuWindow.itemsperpage) {
 8004bbe:	1be4      	subs	r4, r4, r7
 8004bc0:	42a3      	cmp	r3, r4
					showItems = CurMenu->menuItemCount - cur_sequence;
 8004bc2:	bf8c      	ite	hi
 8004bc4:	b2e4      	uxtbhi	r4, r4
				} else {
					showItems = MenuWindow.itemsperpage;
 8004bc6:	b2dc      	uxtbls	r4, r3
				}
				MenuWindow.topitem = cur_sequence;
 8004bc8:	6177      	str	r7, [r6, #20]
			}
			for (int i = 0; i < showItems; i++) {
 8004bca:	2600      	movs	r6, #0
				MenuItem_Typedef* Item = CurMenu + MenuWindow.topitem + i;
 8004bcc:	271c      	movs	r7, #28
			for (int i = 0; i < showItems; i++) {
 8004bce:	42a6      	cmp	r6, r4
 8004bd0:	db0c      	blt.n	8004bec <Menu_Task+0xd4>
				GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
			}
			MenuScrollbar.topitem = cur_sequence;
 8004bd2:	f8d8 3000 	ldr.w	r3, [r8]
			GUI_Scrollbar_SetPos(&MenuScrollbar);
 8004bd6:	4810      	ldr	r0, [pc, #64]	; (8004c18 <Menu_Task+0x100>)
			MenuScrollbar.topitem = cur_sequence;
 8004bd8:	f8ca 3018 	str.w	r3, [sl, #24]
			GUI_Scrollbar_SetPos(&MenuScrollbar);
 8004bdc:	f000 fa31 	bl	8005042 <GUI_Scrollbar_SetPos>
			GUI_Refresh();
 8004be0:	f000 fa2d 	bl	800503e <GUI_Refresh>
			break;
		}
		vTaskDelay(100 / portTICK_PERIOD_MS);
 8004be4:	2064      	movs	r0, #100	; 0x64
 8004be6:	f7ff faa7 	bl	8004138 <vTaskDelay>
		if (EventGroupHandler != NULL) {
 8004bea:	e7a5      	b.n	8004b38 <Menu_Task+0x20>
				MenuItem_Typedef* Item = CurMenu + MenuWindow.topitem + i;
 8004bec:	f8db 2014 	ldr.w	r2, [fp, #20]
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	4432      	add	r2, r6
				GUI_MenuItemDraw(MEMU_POSX_1, MEMU_POSY_1 + i * 15, Item);
 8004bf4:	ebc6 1106 	rsb	r1, r6, r6, lsl #4
 8004bf8:	fb07 3202 	mla	r2, r7, r2, r3
 8004bfc:	3113      	adds	r1, #19
 8004bfe:	2014      	movs	r0, #20
 8004c00:	f000 f9b8 	bl	8004f74 <GUI_MenuItemDraw>
			for (int i = 0; i < showItems; i++) {
 8004c04:	3601      	adds	r6, #1
 8004c06:	e7e2      	b.n	8004bce <Menu_Task+0xb6>
 8004c08:	20000054 	.word	0x20000054
 8004c0c:	200044b4 	.word	0x200044b4
 8004c10:	200044b8 	.word	0x200044b8
 8004c14:	20000078 	.word	0x20000078
 8004c18:	20000058 	.word	0x20000058
 8004c1c:	2000456c 	.word	0x2000456c
 8004c20:	200044bc 	.word	0x200044bc

08004c24 <RTCUI_Task>:

static button_press_count = 0;
TaskHandle_t RTCUITaskHandler;
static EventBits_t val;
void RTCUI_Task(void *pvParameters)
{
 8004c24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	GUI_ClearSCR();
 8004c28:	f000 f9da 	bl	8004fe0 <GUI_ClearSCR>
	GUI_WindowsDraw(&RTCWindow);
 8004c2c:	4865      	ldr	r0, [pc, #404]	; (8004dc4 <RTCUI_Task+0x1a0>)
 8004c2e:	f000 fb15 	bl	800525c <GUI_WindowsDraw>
	while(1)
	{
		if (EventGroupHandler != NULL) {
 8004c32:	4e65      	ldr	r6, [pc, #404]	; (8004dc8 <RTCUI_Task+0x1a4>)
 8004c34:	4d65      	ldr	r5, [pc, #404]	; (8004dcc <RTCUI_Task+0x1a8>)
 8004c36:	4c66      	ldr	r4, [pc, #408]	; (8004dd0 <RTCUI_Task+0x1ac>)
 8004c38:	6830      	ldr	r0, [r6, #0]
 8004c3a:	b188      	cbz	r0, 8004c60 <RTCUI_Task+0x3c>

			val = xEventGroupWaitBits(EventGroupHandler,
 8004c3c:	230a      	movs	r3, #10
 8004c3e:	2201      	movs	r2, #1
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	4611      	mov	r1, r2
 8004c44:	2300      	movs	r3, #0
 8004c46:	f7fe f921 	bl	8002e8c <xEventGroupWaitBits>
					BUTTON_PRESS_EVENT,
					pdTRUE,
					pdFALSE, 10 / portTICK_PERIOD_MS);
			if (val == BUTTON_PRESS_EVENT) {
 8004c4a:	2801      	cmp	r0, #1
 8004c4c:	d108      	bne.n	8004c60 <RTCUI_Task+0x3c>
				button_press_count++;
				button_press_count %=7;
 8004c4e:	2207      	movs	r2, #7
				button_press_count++;
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	3301      	adds	r3, #1
				button_press_count %=7;
 8004c54:	fb93 f2f2 	sdiv	r2, r3, r2
 8004c58:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	602b      	str	r3, [r5, #0]
			}
		}
		rtcmode = (RTC_Mode)button_press_count;
		switch(rtcmode)
 8004c60:	782b      	ldrb	r3, [r5, #0]
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d850      	bhi.n	8004d08 <RTCUI_Task+0xe4>
 8004c66:	e8df f003 	tbb	[pc, r3]
 8004c6a:	5f02      	.short	0x5f02
 8004c6c:	937a      	.short	0x937a
		{
			case RTC_Mode_Normal:
				if(HAL_RTC_GetTime(&hrtc,&rtcTime,RTC_FORMAT_BIN) == HAL_OK){
 8004c6e:	4f59      	ldr	r7, [pc, #356]	; (8004dd4 <RTCUI_Task+0x1b0>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	4639      	mov	r1, r7
 8004c74:	4858      	ldr	r0, [pc, #352]	; (8004dd8 <RTCUI_Task+0x1b4>)
 8004c76:	f7fd fd41 	bl	80026fc <HAL_RTC_GetTime>
 8004c7a:	b9f0      	cbnz	r0, 8004cba <RTCUI_Task+0x96>
					time = pvPortMalloc(sizeof(char) * 9);
 8004c7c:	2009      	movs	r0, #9
 8004c7e:	f7fe fb97 	bl	80033b0 <pvPortMalloc>
					snprintf(time,9,"%2d:%2d:%2d",rtcTime.Hours,rtcTime.Minutes,rtcTime.Seconds);
 8004c82:	78ba      	ldrb	r2, [r7, #2]
 8004c84:	783b      	ldrb	r3, [r7, #0]
 8004c86:	9201      	str	r2, [sp, #4]
 8004c88:	787a      	ldrb	r2, [r7, #1]
					time = pvPortMalloc(sizeof(char) * 9);
 8004c8a:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8004de0 <RTCUI_Task+0x1bc>
					snprintf(time,9,"%2d:%2d:%2d",rtcTime.Hours,rtcTime.Minutes,rtcTime.Seconds);
 8004c8e:	9200      	str	r2, [sp, #0]
 8004c90:	2109      	movs	r1, #9
 8004c92:	4a52      	ldr	r2, [pc, #328]	; (8004ddc <RTCUI_Task+0x1b8>)
					time = pvPortMalloc(sizeof(char) * 9);
 8004c94:	f8c8 0000 	str.w	r0, [r8]
					snprintf(time,9,"%2d:%2d:%2d",rtcTime.Hours,rtcTime.Minutes,rtcTime.Seconds);
 8004c98:	f000 fb92 	bl	80053c0 <snprintf>
					show_str_mid(RTCWindow.x, RTCWindow.y+30, time,12,12,1,RTCWindow.width);
 8004c9c:	4b49      	ldr	r3, [pc, #292]	; (8004dc4 <RTCUI_Task+0x1a0>)
 8004c9e:	f8d8 2000 	ldr.w	r2, [r8]
 8004ca2:	6859      	ldr	r1, [r3, #4]
 8004ca4:	8818      	ldrh	r0, [r3, #0]
 8004ca6:	891b      	ldrh	r3, [r3, #8]
 8004ca8:	311e      	adds	r1, #30
 8004caa:	9302      	str	r3, [sp, #8]
 8004cac:	2301      	movs	r3, #1
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	b289      	uxth	r1, r1
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	f000 fa98 	bl	80051ea <show_str_mid>

				}
				if(HAL_RTC_GetDate(&hrtc,&rtcDate,RTC_FORMAT_BIN) == HAL_OK){
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4846      	ldr	r0, [pc, #280]	; (8004dd8 <RTCUI_Task+0x1b4>)
 8004cc0:	f7fd fe2a 	bl	8002918 <HAL_RTC_GetDate>
 8004cc4:	bb00      	cbnz	r0, 8004d08 <RTCUI_Task+0xe4>
					time = pvPortMalloc(sizeof(char) * 11);
 8004cc6:	200b      	movs	r0, #11
 8004cc8:	f7fe fb72 	bl	80033b0 <pvPortMalloc>
 8004ccc:	4f44      	ldr	r7, [pc, #272]	; (8004de0 <RTCUI_Task+0x1bc>)
					snprintf(time,11,"%4d/%2d/%2d/",rtcDate.Year+2000,rtcDate.Month,rtcDate.Date);
 8004cce:	78a2      	ldrb	r2, [r4, #2]
					time = pvPortMalloc(sizeof(char) * 11);
 8004cd0:	6038      	str	r0, [r7, #0]
					snprintf(time,11,"%4d/%2d/%2d/",rtcDate.Year+2000,rtcDate.Month,rtcDate.Date);
 8004cd2:	78e3      	ldrb	r3, [r4, #3]
 8004cd4:	9201      	str	r2, [sp, #4]
 8004cd6:	7862      	ldrb	r2, [r4, #1]
 8004cd8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004cdc:	9200      	str	r2, [sp, #0]
 8004cde:	210b      	movs	r1, #11
 8004ce0:	4a40      	ldr	r2, [pc, #256]	; (8004de4 <RTCUI_Task+0x1c0>)
 8004ce2:	f000 fb6d 	bl	80053c0 <snprintf>
					show_str_mid(RTCWindow.x, RTCWindow.y+15, time,12,12,1,RTCWindow.width);
 8004ce6:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <RTCUI_Task+0x1a0>)
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	8818      	ldrh	r0, [r3, #0]
 8004cec:	891b      	ldrh	r3, [r3, #8]
 8004cee:	310f      	adds	r1, #15
 8004cf0:	9302      	str	r3, [sp, #8]
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	b289      	uxth	r1, r1
 8004cfe:	f000 fa74 	bl	80051ea <show_str_mid>
				int32_t date = RotaryEcncorder_GetCount();
				rtcDate.Date = date;
				time = pvPortMalloc(sizeof(char) * 3);
				snprintf(time,3,"%2d",rtcDate.Date);
				show_str(146, 15, time,12,12,0);
				vPortFree(time);
 8004d02:	6838      	ldr	r0, [r7, #0]
 8004d04:	f7fe fbe2 	bl	80034cc <vPortFree>
//				show_str(128, 15, time,12,12,0);
//				vPortFree(time);
//				break;

		}
		OLED_ShowNum(30,50,rtcDate.Year,2,6,12);
 8004d08:	2106      	movs	r1, #6
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	78e2      	ldrb	r2, [r4, #3]
 8004d0e:	e88d 000a 	stmia.w	sp, {r1, r3}
 8004d12:	201e      	movs	r0, #30
 8004d14:	2302      	movs	r3, #2
 8004d16:	2132      	movs	r1, #50	; 0x32
 8004d18:	f7fc fc56 	bl	80015c8 <OLED_ShowNum>
		GUI_Refresh();
 8004d1c:	f000 f98f 	bl	800503e <GUI_Refresh>
		vTaskDelay(100/portTICK_PERIOD_MS);
 8004d20:	2064      	movs	r0, #100	; 0x64
 8004d22:	f7ff fa09 	bl	8004138 <vTaskDelay>
		if (EventGroupHandler != NULL) {
 8004d26:	e787      	b.n	8004c38 <RTCUI_Task+0x14>
				RotaryEcncorder_SetRange(20,50);
 8004d28:	2132      	movs	r1, #50	; 0x32
 8004d2a:	2014      	movs	r0, #20
 8004d2c:	f7fc fe4a 	bl	80019c4 <RotaryEcncorder_SetRange>
				int32_t year = RotaryEcncorder_GetCount();
 8004d30:	f7fc fe62 	bl	80019f8 <RotaryEcncorder_GetCount>
				rtcDate.Year = year;
 8004d34:	70e0      	strb	r0, [r4, #3]
				time = pvPortMalloc(sizeof(char) * 3);
 8004d36:	2003      	movs	r0, #3
 8004d38:	f7fe fb3a 	bl	80033b0 <pvPortMalloc>
 8004d3c:	4f28      	ldr	r7, [pc, #160]	; (8004de0 <RTCUI_Task+0x1bc>)
				snprintf(time,3,"%2d",rtcDate.Year);
 8004d3e:	78e3      	ldrb	r3, [r4, #3]
 8004d40:	4a29      	ldr	r2, [pc, #164]	; (8004de8 <RTCUI_Task+0x1c4>)
 8004d42:	2103      	movs	r1, #3
				time = pvPortMalloc(sizeof(char) * 3);
 8004d44:	6038      	str	r0, [r7, #0]
				snprintf(time,3,"%2d",rtcDate.Year);
 8004d46:	f000 fb3b 	bl	80053c0 <snprintf>
				show_str(110, 15, time,12,12,0);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	230c      	movs	r3, #12
 8004d50:	210f      	movs	r1, #15
 8004d52:	206e      	movs	r0, #110	; 0x6e
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	683a      	ldr	r2, [r7, #0]
				show_str(146, 15, time,12,12,0);
 8004d58:	f000 fa0e 	bl	8005178 <show_str>
 8004d5c:	e7d1      	b.n	8004d02 <RTCUI_Task+0xde>
				RotaryEcncorder_SetRange(1,12);
 8004d5e:	210c      	movs	r1, #12
 8004d60:	2001      	movs	r0, #1
 8004d62:	f7fc fe2f 	bl	80019c4 <RotaryEcncorder_SetRange>
				int32_t mounth = RotaryEcncorder_GetCount();
 8004d66:	f7fc fe47 	bl	80019f8 <RotaryEcncorder_GetCount>
				rtcDate.Month = mounth;
 8004d6a:	7060      	strb	r0, [r4, #1]
				time = pvPortMalloc(sizeof(char) * 3);
 8004d6c:	2003      	movs	r0, #3
 8004d6e:	f7fe fb1f 	bl	80033b0 <pvPortMalloc>
 8004d72:	4f1b      	ldr	r7, [pc, #108]	; (8004de0 <RTCUI_Task+0x1bc>)
				snprintf(time,3,"%2d",rtcDate.Month);
 8004d74:	7863      	ldrb	r3, [r4, #1]
 8004d76:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <RTCUI_Task+0x1c4>)
 8004d78:	2103      	movs	r1, #3
				time = pvPortMalloc(sizeof(char) * 3);
 8004d7a:	6038      	str	r0, [r7, #0]
				snprintf(time,3,"%2d",rtcDate.Month);
 8004d7c:	f000 fb20 	bl	80053c0 <snprintf>
				show_str(128, 15, time,12,12,0);
 8004d80:	2300      	movs	r3, #0
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	230c      	movs	r3, #12
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	210f      	movs	r1, #15
 8004d8c:	2080      	movs	r0, #128	; 0x80
 8004d8e:	e7e3      	b.n	8004d58 <RTCUI_Task+0x134>
				RotaryEcncorder_SetRange(1,31);
 8004d90:	211f      	movs	r1, #31
 8004d92:	2001      	movs	r0, #1
 8004d94:	f7fc fe16 	bl	80019c4 <RotaryEcncorder_SetRange>
				int32_t date = RotaryEcncorder_GetCount();
 8004d98:	f7fc fe2e 	bl	80019f8 <RotaryEcncorder_GetCount>
				rtcDate.Date = date;
 8004d9c:	70a0      	strb	r0, [r4, #2]
				time = pvPortMalloc(sizeof(char) * 3);
 8004d9e:	2003      	movs	r0, #3
 8004da0:	f7fe fb06 	bl	80033b0 <pvPortMalloc>
 8004da4:	4f0e      	ldr	r7, [pc, #56]	; (8004de0 <RTCUI_Task+0x1bc>)
				snprintf(time,3,"%2d",rtcDate.Date);
 8004da6:	78a3      	ldrb	r3, [r4, #2]
 8004da8:	4a0f      	ldr	r2, [pc, #60]	; (8004de8 <RTCUI_Task+0x1c4>)
 8004daa:	2103      	movs	r1, #3
				time = pvPortMalloc(sizeof(char) * 3);
 8004dac:	6038      	str	r0, [r7, #0]
				snprintf(time,3,"%2d",rtcDate.Date);
 8004dae:	f000 fb07 	bl	80053c0 <snprintf>
				show_str(146, 15, time,12,12,0);
 8004db2:	2300      	movs	r3, #0
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	230c      	movs	r3, #12
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	210f      	movs	r1, #15
 8004dbe:	2092      	movs	r0, #146	; 0x92
 8004dc0:	e7ca      	b.n	8004d58 <RTCUI_Task+0x134>
 8004dc2:	bf00      	nop
 8004dc4:	2000009c 	.word	0x2000009c
 8004dc8:	2000456c 	.word	0x2000456c
 8004dcc:	200044c4 	.word	0x200044c4
 8004dd0:	200044c8 	.word	0x200044c8
 8004dd4:	200044cc 	.word	0x200044cc
 8004dd8:	20004570 	.word	0x20004570
 8004ddc:	0800832d 	.word	0x0800832d
 8004de0:	200044d0 	.word	0x200044d0
 8004de4:	08008339 	.word	0x08008339
 8004de8:	08008335 	.word	0x08008335

08004dec <GUI_Rectangle>:
*           color	顯示顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_Rectangle(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8004dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df0:	461c      	mov	r4, r3
 8004df2:	f89d 5018 	ldrb.w	r5, [sp, #24]
	GUI_HLine(x0, y0, x1, color);
 8004df6:	fa1f f880 	uxth.w	r8, r0
 8004dfa:	b2cf      	uxtb	r7, r1
 8004dfc:	b296      	uxth	r6, r2
	GUI_HLine(x0, y1, x1, color);
 8004dfe:	b2e4      	uxtb	r4, r4
	GUI_HLine(x0, y0, x1, color);
 8004e00:	462b      	mov	r3, r5
 8004e02:	4632      	mov	r2, r6
 8004e04:	4639      	mov	r1, r7
 8004e06:	4640      	mov	r0, r8
 8004e08:	f000 f8ef 	bl	8004fea <GUI_HLine>
	GUI_HLine(x0, y1, x1, color);
 8004e0c:	462b      	mov	r3, r5
 8004e0e:	4632      	mov	r2, r6
 8004e10:	4621      	mov	r1, r4
 8004e12:	4640      	mov	r0, r8
 8004e14:	f000 f8e9 	bl	8004fea <GUI_HLine>
	GUI_RLine(x0, y0, y1, color);
 8004e18:	462b      	mov	r3, r5
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	4639      	mov	r1, r7
 8004e1e:	4640      	mov	r0, r8
 8004e20:	f000 f8f8 	bl	8005014 <GUI_RLine>
	GUI_RLine(x1, y0, y1, color);
 8004e24:	462b      	mov	r3, r5
 8004e26:	4622      	mov	r2, r4
 8004e28:	4639      	mov	r1, r7
 8004e2a:	4630      	mov	r0, r6
}
 8004e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	GUI_RLine(x1, y0, y1, color);
 8004e30:	f000 b8f0 	b.w	8005014 <GUI_RLine>

08004e34 <GUI_RectangleFill>:
*           color	填充顏色
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_RectangleFill(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8004e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t  i;

	/* 先找出矩形左上角與右下角的兩個點，保存在(x0,y0)，(x1,y1) */
	if(x0>x1) 						// 若x0>x1，則x0與x1交換
 8004e38:	4290      	cmp	r0, r2
{  
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	461f      	mov	r7, r3
 8004e3e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if(x0>x1) 						// 若x0>x1，則x0與x1交換
 8004e42:	d82b      	bhi.n	8004e9c <GUI_RectangleFill+0x68>
	{  
		i = x0;
		x0 = x1;
		x1 = i;
	}
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 8004e44:	4299      	cmp	r1, r3
 8004e46:	d809      	bhi.n	8004e5c <GUI_RectangleFill+0x28>
		y0 = y1;
		y1 = i;
	}

	/* 判斷是否只是直線 */
	if(y0==y1) 
 8004e48:	42bc      	cmp	r4, r7
 8004e4a:	d109      	bne.n	8004e60 <GUI_RectangleFill+0x2c>
	{  
		GUI_HLine(x0, y0, x1, color);
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	b2e1      	uxtb	r1, r4
 8004e50:	b292      	uxth	r2, r2
 8004e52:	b280      	uxth	r0, r0
	while(y0<=y1)						
	{  
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
		y0++;							// 下一行
	}
}
 8004e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GUI_HLine(x0, y0, x1, color);
 8004e58:	f000 b8c7 	b.w	8004fea <GUI_HLine>
 8004e5c:	463c      	mov	r4, r7
 8004e5e:	460f      	mov	r7, r1
	if(x0==x1) 
 8004e60:	4290      	cmp	r0, r2
 8004e62:	d10d      	bne.n	8004e80 <GUI_RectangleFill+0x4c>
		GUI_RLine(x0, y0, y1, color);
 8004e64:	4643      	mov	r3, r8
 8004e66:	b2fa      	uxtb	r2, r7
 8004e68:	b2e1      	uxtb	r1, r4
 8004e6a:	b280      	uxth	r0, r0
}
 8004e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GUI_RLine(x0, y0, y1, color);
 8004e70:	f000 b8d0 	b.w	8005014 <GUI_RLine>
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 8004e74:	463b      	mov	r3, r7
 8004e76:	4627      	mov	r7, r4
 8004e78:	461c      	mov	r4, r3
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	461a      	mov	r2, r3
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
 8004e80:	b296      	uxth	r6, r2
 8004e82:	b285      	uxth	r5, r0
	while(y0<=y1)						
 8004e84:	42bc      	cmp	r4, r7
 8004e86:	d901      	bls.n	8004e8c <GUI_RectangleFill+0x58>
 8004e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		GUI_HLine(x0, y0, x1, color);	// 當前畫水平線
 8004e8c:	b2e1      	uxtb	r1, r4
 8004e8e:	4643      	mov	r3, r8
 8004e90:	4632      	mov	r2, r6
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 f8a9 	bl	8004fea <GUI_HLine>
		y0++;							// 下一行
 8004e98:	3401      	adds	r4, #1
 8004e9a:	e7f3      	b.n	8004e84 <GUI_RectangleFill+0x50>
	if(y0>y1)						// 若y0>y1，則y0與y1交換
 8004e9c:	4299      	cmp	r1, r3
 8004e9e:	d8e9      	bhi.n	8004e74 <GUI_RectangleFill+0x40>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	e7cf      	b.n	8004e48 <GUI_RectangleFill+0x14>

08004ea8 <GUI_Line>:
*           color	顯示顏色(對於黑白色LCM，為0時滅，為1時顯示)
* 出口參數：無
* 說明：操作失敗原因是指定地址超出有效範圍。
****************************************************************************/
void  GUI_Line(uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, TCOLOR color)
{  
 8004ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	4699      	mov	r9, r3
	int8_t    dy_sym;				// y軸增長方向，為-1時減值方向，為1時增值方向
	int32_t   dx_x2;				// dx*2值變量，用於加快運算速度
	int32_t   dy_x2;				// dy*2值變量，用於加快運算速度
	int32_t   di;					// 決策變量

	dx = x1-x0;						// 求取兩點之間的差值
 8004eae:	1a13      	subs	r3, r2, r0
	dy = y1-y0;
	/* 判斷增長方向，或是否為水平線、垂直線、點 */
	if(dx>0)						// 判斷x軸方向
 8004eb0:	2b00      	cmp	r3, #0
{  
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	460d      	mov	r5, r1
 8004eb6:	4692      	mov	sl, r2
 8004eb8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	dy = y1-y0;
 8004ebc:	eba9 0201 	sub.w	r2, r9, r1
 8004ec0:	b280      	uxth	r0, r0
 8004ec2:	b2c9      	uxtb	r1, r1
	if(dx>0)						// 判斷x軸方向
 8004ec4:	dc08      	bgt.n	8004ed8 <GUI_Line+0x30>
	{  
		dx_sym = 1;					// dx>0，設置dx_sym=1
	}
	else
	{  
		if(dx<0)
 8004ec6:	d113      	bne.n	8004ef0 <GUI_Line+0x48>
			dx_sym = -1;			// dx<0，設置dx_sym=-1
		else
		{  							// dx==0，畫垂直線，或一點
			GUI_RLine(x0, y0, y1, color);
 8004ec8:	4633      	mov	r3, r6
 8004eca:	fa5f f289 	uxtb.w	r2, r9
				x0 += dx_sym;
			}
		}
		GUI_Point(x0, y0, color);		// 顯示最後一點
	} 
}
 8004ece:	b003      	add	sp, #12
 8004ed0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			GUI_RLine(x0, y0, y1, color);
 8004ed4:	f000 b89e 	b.w	8005014 <GUI_RLine>
		dx_sym = 1;					// dx>0，設置dx_sym=1
 8004ed8:	2701      	movs	r7, #1
	if(dy>0)						// 判斷y軸方向
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	dc0b      	bgt.n	8004ef6 <GUI_Line+0x4e>
		if(dy<0)
 8004ede:	d124      	bne.n	8004f2a <GUI_Line+0x82>
			GUI_HLine(x0, y0, x1, color);
 8004ee0:	4633      	mov	r3, r6
 8004ee2:	fa1f f28a 	uxth.w	r2, sl
}
 8004ee6:	b003      	add	sp, #12
 8004ee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			GUI_HLine(x0, y0, x1, color);
 8004eec:	f000 b87d 	b.w	8004fea <GUI_HLine>
			dx_sym = -1;			// dx<0，設置dx_sym=-1
 8004ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8004ef4:	e7f1      	b.n	8004eda <GUI_Line+0x32>
		dy_sym = 1;					// dy>0，設置dy_sym=1
 8004ef6:	f04f 0801 	mov.w	r8, #1
	dx = dx_sym * dx;
 8004efa:	fb03 f107 	mul.w	r1, r3, r7
	dy = dy_sym * dy;
 8004efe:	fb02 f208 	mul.w	r2, r2, r8
	if(dx>=dy)						// 對於dx>=dy，則使用x軸為基準
 8004f02:	4291      	cmp	r1, r2
	dx_x2 = dx*2;
 8004f04:	ea4f 0b41 	mov.w	fp, r1, lsl #1
	dy_x2 = dy*2;
 8004f08:	ea4f 0342 	mov.w	r3, r2, lsl #1
	if(dx>=dy)						// 對於dx>=dy，則使用x軸為基準
 8004f0c:	db1d      	blt.n	8004f4a <GUI_Line+0xa2>
		di = dy_x2 - dx;
 8004f0e:	eba3 0901 	sub.w	r9, r3, r1
				di += dy_x2 - dx_x2;
 8004f12:	eba9 0b01 	sub.w	fp, r9, r1
		while(x0!=x1)
 8004f16:	4554      	cmp	r4, sl
 8004f18:	b2e9      	uxtb	r1, r5
 8004f1a:	b2a0      	uxth	r0, r4
 8004f1c:	d108      	bne.n	8004f30 <GUI_Line+0x88>
		GUI_Point(x0, y0, color);		// 顯示最後一點
 8004f1e:	4632      	mov	r2, r6
}
 8004f20:	b003      	add	sp, #12
 8004f22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Point(x0, y0, color);		// 顯示最後一點
 8004f26:	f000 b85d 	b.w	8004fe4 <GUI_Point>
			dy_sym = -1;			// dy<0，設置dy_sym=-1
 8004f2a:	f04f 38ff 	mov.w	r8, #4294967295
 8004f2e:	e7e4      	b.n	8004efa <GUI_Line+0x52>
			GUI_Point(x0, y0, color);
 8004f30:	4632      	mov	r2, r6
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	f000 f856 	bl	8004fe4 <GUI_Point>
			if(di<0)
 8004f38:	9b01      	ldr	r3, [sp, #4]
 8004f3a:	f1b9 0f00 	cmp.w	r9, #0
 8004f3e:	443c      	add	r4, r7
				di += dy_x2;		// 計算出下一步的決策值
 8004f40:	bfb2      	itee	lt
 8004f42:	4499      	addlt	r9, r3
				di += dy_x2 - dx_x2;
 8004f44:	44d9      	addge	r9, fp
				y0 += dy_sym;
 8004f46:	4445      	addge	r5, r8
 8004f48:	e7e5      	b.n	8004f16 <GUI_Line+0x6e>
		di = dx_x2 - dy;
 8004f4a:	ebab 0a02 	sub.w	sl, fp, r2
				di += dx_x2 - dy_x2;
 8004f4e:	ebaa 0302 	sub.w	r3, sl, r2
		while(y0!=y1)
 8004f52:	454d      	cmp	r5, r9
 8004f54:	b2e9      	uxtb	r1, r5
 8004f56:	b2a0      	uxth	r0, r4
 8004f58:	d0e1      	beq.n	8004f1e <GUI_Line+0x76>
			GUI_Point(x0, y0, color);
 8004f5a:	4632      	mov	r2, r6
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	f000 f841 	bl	8004fe4 <GUI_Point>
			if(di<0)
 8004f62:	9b01      	ldr	r3, [sp, #4]
 8004f64:	f1ba 0f00 	cmp.w	sl, #0
 8004f68:	4445      	add	r5, r8
				di += dx_x2;
 8004f6a:	bfb2      	itee	lt
 8004f6c:	44da      	addlt	sl, fp
				di += dx_x2 - dy_x2;
 8004f6e:	449a      	addge	sl, r3
				x0 += dx_sym;
 8004f70:	19e4      	addge	r4, r4, r7
 8004f72:	e7ee      	b.n	8004f52 <GUI_Line+0xaa>

08004f74 <GUI_MenuItemDraw>:
* 功能：顯示條目菜單
* 入口參數：ico		圖標菜單句柄
* 出口參數：返回0表示操作失敗，返回1表示操作成功
****************************************************************************/
uint8_t  GUI_MenuItemDraw(uint32_t x, uint32_t y, MenuItem_Typedef *item)
{  
 8004f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( x>GUI_LCM_XMAX || y>GUI_LCM_YMAX) return(0);
	if(y<2) return(0);
 8004f76:	f1a1 0e02 	sub.w	lr, r1, #2
 8004f7a:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
{  
 8004f7e:	4615      	mov	r5, r2
	if(y<2) return(0);
 8004f80:	d82a      	bhi.n	8004fd8 <GUI_MenuItemDraw+0x64>
	if(x<18) return(0);
 8004f82:	f1a0 0412 	sub.w	r4, r0, #18
 8004f86:	2cee      	cmp	r4, #238	; 0xee
 8004f88:	d826      	bhi.n	8004fd8 <GUI_MenuItemDraw+0x64>
	if( (item->title)==NULL )  return(0);
 8004f8a:	68d3      	ldr	r3, [r2, #12]
 8004f8c:	b333      	cbz	r3, 8004fdc <GUI_MenuItemDraw+0x68>

	if(item->isSelect == false)
 8004f8e:	7893      	ldrb	r3, [r2, #2]
 8004f90:	b28f      	uxth	r7, r1
 8004f92:	b286      	uxth	r6, r0
 8004f94:	b9a3      	cbnz	r3, 8004fc0 <GUI_MenuItemDraw+0x4c>
	{  
		if(item->icoUnselected != NULL)
 8004f96:	6892      	ldr	r2, [r2, #8]
 8004f98:	b132      	cbz	r2, 8004fa8 <GUI_MenuItemDraw+0x34>
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoUnselected ,16, 16);
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	fa5f f18e 	uxtb.w	r1, lr
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	b2e0      	uxtb	r0, r4
 8004fa4:	f7fc fb56 	bl	8001654 <OLED_ShowPicture>
		show_str(x, y,(uint8_t *) item->title,12,12,1);
 8004fa8:	2401      	movs	r4, #1
 8004faa:	9401      	str	r4, [sp, #4]
	}
	else
	{  
		if(item->icoSelected != NULL)
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoSelected ,16, 16);
		show_str(x,y,(uint8_t *) item->title, 12,12,0);
 8004fac:	230c      	movs	r3, #12
 8004fae:	4630      	mov	r0, r6
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	68ea      	ldr	r2, [r5, #12]
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	f000 f8df 	bl	8005178 <show_str>
	}
	return(1);
 8004fba:	2001      	movs	r0, #1
}
 8004fbc:	b003      	add	sp, #12
 8004fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(item->icoSelected != NULL)
 8004fc0:	6852      	ldr	r2, [r2, #4]
 8004fc2:	b132      	cbz	r2, 8004fd2 <GUI_MenuItemDraw+0x5e>
			OLED_ShowPicture(x-18, y-2, (uint8_t *)item->icoSelected ,16, 16);
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	fa5f f18e 	uxtb.w	r1, lr
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	b2e0      	uxtb	r0, r4
 8004fce:	f7fc fb41 	bl	8001654 <OLED_ShowPicture>
		show_str(x,y,(uint8_t *) item->title, 12,12,0);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	e7e9      	b.n	8004fac <GUI_MenuItemDraw+0x38>
	if(y<2) return(0);
 8004fd8:	2000      	movs	r0, #0
 8004fda:	e7ef      	b.n	8004fbc <GUI_MenuItemDraw+0x48>
 8004fdc:	4618      	mov	r0, r3
 8004fde:	e7ed      	b.n	8004fbc <GUI_MenuItemDraw+0x48>

08004fe0 <GUI_ClearSCR>:
* 出口參數：無
* 說明：用戶根據LCM的實際情況編寫此函數。
****************************************************************************/
void  GUI_ClearSCR()
{
	OLED_Clear();
 8004fe0:	f7fc ba8e 	b.w	8001500 <OLED_Clear>

08004fe4 <GUI_Point>:
*          效範圍)
* 說明：用戶根據LCM的實際情況編寫此函數。
****************************************************************************/
void  GUI_Point(uint16_t x, uint8_t y, TCOLOR color)
{
	OLED_DrawPoint(x,y,color);
 8004fe4:	b2c0      	uxtb	r0, r0
 8004fe6:	f7fc ba13 	b.w	8001410 <OLED_DrawPoint>

08004fea <GUI_HLine>:
*      新8個點，而不需要一個點一個點的寫到LCM中。
****************************************************************************/
void  GUI_HLine(uint16_t x0, uint8_t y0, uint16_t x1, TCOLOR color)
{
	uint8_t  temp;
	if(x0>x1)               // 對x0、x1大小進行排列，以便畫圖
 8004fea:	4290      	cmp	r0, r2
{
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	461f      	mov	r7, r3
 8004ff0:	bf88      	it	hi
 8004ff2:	b2d3      	uxtbhi	r3, r2
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	4615      	mov	r5, r2
 8004ff8:	460e      	mov	r6, r1
	if(x0>x1)               // 對x0、x1大小進行排列，以便畫圖
 8004ffa:	bf84      	itt	hi
 8004ffc:	4605      	movhi	r5, r0
	{
		temp = x1;
		x1 = x0;
		x0 = temp;
 8004ffe:	461c      	movhi	r4, r3
	OLED_DrawPoint(x,y,color);
 8005000:	b2e0      	uxtb	r0, r4
	}
	do
	{
		GUI_Point(x0, y0, color);   // 逐點顯示，描出垂直線
		x0++;
 8005002:	3401      	adds	r4, #1
	OLED_DrawPoint(x,y,color);
 8005004:	463a      	mov	r2, r7
 8005006:	4631      	mov	r1, r6
		x0++;
 8005008:	b2a4      	uxth	r4, r4
	OLED_DrawPoint(x,y,color);
 800500a:	f7fc fa01 	bl	8001410 <OLED_DrawPoint>
	}
	while(x1>=x0);
 800500e:	42a5      	cmp	r5, r4
 8005010:	d2f6      	bcs.n	8005000 <GUI_HLine+0x16>
}
 8005012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005014 <GUI_RLine>:
*      新8個點，而不需要一個點一個點的寫到LCM中。
****************************************************************************/
void  GUI_RLine(uint16_t x0, uint8_t y0, uint8_t y1, TCOLOR color)
{
    uint8_t  temp;
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8005014:	4291      	cmp	r1, r2
{
 8005016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005018:	461f      	mov	r7, r3
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 800501a:	bf88      	it	hi
 800501c:	460b      	movhi	r3, r1
{
 800501e:	460c      	mov	r4, r1
 8005020:	4615      	mov	r5, r2
    if(y0>y1)       // 對y0、y1大小進行排列，以便畫圖
 8005022:	bf84      	itt	hi
 8005024:	4614      	movhi	r4, r2
 8005026:	461d      	movhi	r5, r3
	OLED_DrawPoint(x,y,color);
 8005028:	b2c6      	uxtb	r6, r0
 800502a:	4621      	mov	r1, r4
        y0 = temp;
    }
    do
    {
        GUI_Point(x0, y0, color);   // 逐點顯示，描出垂直線
        y0++;
 800502c:	3401      	adds	r4, #1
	OLED_DrawPoint(x,y,color);
 800502e:	463a      	mov	r2, r7
 8005030:	4630      	mov	r0, r6
        y0++;
 8005032:	b2e4      	uxtb	r4, r4
	OLED_DrawPoint(x,y,color);
 8005034:	f7fc f9ec 	bl	8001410 <OLED_DrawPoint>
    }
    while(y1>=y0);
 8005038:	42a5      	cmp	r5, r4
 800503a:	d2f6      	bcs.n	800502a <GUI_RLine+0x16>
}
 800503c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800503e <GUI_Refresh>:
* 功能：刷新屏幕
*           
****************************************************************************/
void  GUI_Refresh(void)
{
	OLED_RefreshGram();
 800503e:	f7fc ba29 	b.w	8001494 <OLED_RefreshGram>

08005042 <GUI_Scrollbar_SetPos>:
0x40,0x70,0x7C,0x7E,0x7E,0x7C,0x70,0x40,
};

//設置滾動條的位置
void GUI_Scrollbar_SetPos(Scrollbar_Typedef *scbx)
{	
 8005042:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint16_t x,y,xlen,ylen;
//	uint8_t scbplen;
//	
//	scbplen = SCROLL_BTN_HEIGHT;  //得到按鈕的高度
	
	scblen=scbx->height-2*SCROLL_BTN_HEIGHT-scbx->scbbarlen;//得到滾動條滾動空間的長度
 8005046:	68c4      	ldr	r4, [r0, #12]
 8005048:	8b82      	ldrh	r2, [r0, #28]
 800504a:	3c14      	subs	r4, #20
 800504c:	1aa4      	subs	r4, r4, r2
 800504e:	fa1f f984 	uxth.w	r9, r4
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
	xlen=scbx->width-2-1;         //滾動條寬度 -1
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
	
	//清除滾動條
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 8005052:	2400      	movs	r4, #0
{	
 8005054:	4605      	mov	r5, r0
	x=scbx->x+1;                  //滾動條起始坐標x
 8005056:	6807      	ldr	r7, [r0, #0]
	xlen=scbx->width-2-1;         //滾動條寬度 -1
 8005058:	6886      	ldr	r6, [r0, #8]
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 800505a:	6841      	ldr	r1, [r0, #4]
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
 800505c:	1e53      	subs	r3, r2, #1
	x=scbx->x+1;                  //滾動條起始坐標x
 800505e:	3701      	adds	r7, #1
	xlen=scbx->width-2-1;         //滾動條寬度 -1
 8005060:	3e03      	subs	r6, #3
	x=scbx->x+1;                  //滾動條起始坐標x
 8005062:	b2bf      	uxth	r7, r7
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 8005064:	310a      	adds	r1, #10
	ylen=scblen+scbx->scbbarlen-1;//滾動條長度 -1
 8005066:	444b      	add	r3, r9
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 8005068:	b2b6      	uxth	r6, r6
	y=scbx->y+SCROLL_BTN_HEIGHT;  //滾動條起始坐標y
 800506a:	fa1f f881 	uxth.w	r8, r1
	GUI_RectangleFill(x ,y,x+xlen,y+ylen, 0);
 800506e:	443e      	add	r6, r7
 8005070:	b29b      	uxth	r3, r3
 8005072:	9400      	str	r4, [sp, #0]
 8005074:	4443      	add	r3, r8
 8005076:	4632      	mov	r2, r6
 8005078:	4641      	mov	r1, r8
 800507a:	4638      	mov	r0, r7
 800507c:	f7ff feda 	bl	8004e34 <GUI_RectangleFill>
	if(scbx->totalitems <= scbx->itemsperpage)//總條目不夠一頁顯示的
 8005080:	6929      	ldr	r1, [r5, #16]
 8005082:	696b      	ldr	r3, [r5, #20]
	{
		scbpos=(scbx->topitem*scblen)/(scbx->totalitems-1);//計算當前滾動條偏移的位置
	}
	
	//畫出滾動條
	GUI_RectangleFill(x ,y+scbpos,x+xlen,y+scbpos+scbx->scbbarlen, 1);
 8005084:	2201      	movs	r2, #1
	if(scbx->totalitems <= scbx->itemsperpage)//總條目不夠一頁顯示的
 8005086:	4299      	cmp	r1, r3
		scbpos=(scbx->topitem*scblen)/(scbx->totalitems-1);//計算當前滾動條偏移的位置
 8005088:	bf81      	itttt	hi
 800508a:	69ab      	ldrhi	r3, [r5, #24]
 800508c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005090:	fb03 f409 	mulhi.w	r4, r3, r9
 8005094:	fbb4 f4f1 	udivhi	r4, r4, r1
	GUI_RectangleFill(x ,y+scbpos,x+xlen,y+scbpos+scbx->scbbarlen, 1);
 8005098:	69eb      	ldr	r3, [r5, #28]
 800509a:	b2a4      	uxth	r4, r4
 800509c:	eb04 0108 	add.w	r1, r4, r8
 80050a0:	9200      	str	r2, [sp, #0]
 80050a2:	440b      	add	r3, r1
 80050a4:	4632      	mov	r2, r6
 80050a6:	4638      	mov	r0, r7
 80050a8:	f7ff fec4 	bl	8004e34 <GUI_RectangleFill>
	//GUI_Refresh();	//刷新屏幕
}
 80050ac:	b003      	add	sp, #12
 80050ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080050b4 <GUI_ScrollbarDraw>:



//創建一個滾動條
void GUI_ScrollbarDraw(Scrollbar_Typedef *scbx)
{
 80050b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t scbactlen=0;//滾動條可以滾動的空間長度
	if(scbx==NULL) return;
 80050b6:	4604      	mov	r4, r0
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d057      	beq.n	800516c <GUI_ScrollbarDraw+0xb8>
	if(scbx->width<SCROLL_BTN_WIDTH) return;
 80050bc:	6882      	ldr	r2, [r0, #8]
 80050be:	2a09      	cmp	r2, #9
 80050c0:	d954      	bls.n	800516c <GUI_ScrollbarDraw+0xb8>
	if(scbx->height<2*SCROLL_BTN_HEIGHT) return;
 80050c2:	68c3      	ldr	r3, [r0, #12]
 80050c4:	2b13      	cmp	r3, #19
 80050c6:	d951      	bls.n	800516c <GUI_ScrollbarDraw+0xb8>
	
	//畫外邊框
	GUI_Rectangle(scbx->x, scbx->y, scbx->x+scbx->width-1, scbx->y+scbx->height-1, 1);
 80050c8:	c803      	ldmia	r0, {r0, r1}
 80050ca:	2501      	movs	r5, #1
	//畫上下兩個按鈕
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+1, (uint8_t *)scroll_btn_up, 8, 8);
 80050cc:	2608      	movs	r6, #8
	GUI_Rectangle(scbx->x, scbx->y, scbx->x+scbx->width-1, scbx->y+scbx->height-1, 1);
 80050ce:	440b      	add	r3, r1
 80050d0:	4402      	add	r2, r0
 80050d2:	9500      	str	r5, [sp, #0]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	3a01      	subs	r2, #1
 80050d8:	f7ff fe88 	bl	8004dec <GUI_Rectangle>
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+1, (uint8_t *)scroll_btn_up, 8, 8);
 80050dc:	68a0      	ldr	r0, [r4, #8]
 80050de:	6861      	ldr	r1, [r4, #4]
 80050e0:	f1a0 0308 	sub.w	r3, r0, #8
 80050e4:	6820      	ldr	r0, [r4, #0]
 80050e6:	4429      	add	r1, r5
 80050e8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80050ec:	9600      	str	r6, [sp, #0]
 80050ee:	4633      	mov	r3, r6
 80050f0:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <GUI_ScrollbarDraw+0xbc>)
 80050f2:	b2c9      	uxtb	r1, r1
 80050f4:	b2c0      	uxtb	r0, r0
 80050f6:	f7fc faad 	bl	8001654 <OLED_ShowPicture>
	OLED_ShowPicture(scbx->x+(scbx->width-8)/2, scbx->y+scbx->height-9, (uint8_t *)scroll_btn_down, 8, 8);
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	68a0      	ldr	r0, [r4, #8]
 80050fe:	6861      	ldr	r1, [r4, #4]
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <GUI_ScrollbarDraw+0xc0>)
 8005102:	4419      	add	r1, r3
 8005104:	f1a0 0308 	sub.w	r3, r0, #8
 8005108:	6820      	ldr	r0, [r4, #0]
 800510a:	3909      	subs	r1, #9
 800510c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005110:	9600      	str	r6, [sp, #0]
 8005112:	4633      	mov	r3, r6
 8005114:	b2c9      	uxtb	r1, r1
 8005116:	b2c0      	uxtb	r0, r0
 8005118:	f7fc fa9c 	bl	8001654 <OLED_ShowPicture>
	//畫按鈕邊框
	GUI_Line(scbx->x, scbx->y+9, scbx->x+scbx->width-1, scbx->y+9,1);
 800511c:	e894 0009 	ldmia.w	r4, {r0, r3}
 8005120:	68a2      	ldr	r2, [r4, #8]
 8005122:	3309      	adds	r3, #9
 8005124:	4402      	add	r2, r0
 8005126:	4619      	mov	r1, r3
 8005128:	9500      	str	r5, [sp, #0]
 800512a:	3a01      	subs	r2, #1
 800512c:	f7ff febc 	bl	8004ea8 <GUI_Line>
	GUI_Line(scbx->x, scbx->y+scbx->height-10, scbx->x+scbx->width-1, scbx->y+scbx->height-10,1);
 8005130:	e894 0009 	ldmia.w	r4, {r0, r3}
 8005134:	68e2      	ldr	r2, [r4, #12]
 8005136:	4413      	add	r3, r2
 8005138:	68a2      	ldr	r2, [r4, #8]
 800513a:	3b0a      	subs	r3, #10
 800513c:	4402      	add	r2, r0
 800513e:	4619      	mov	r1, r3
 8005140:	9500      	str	r5, [sp, #0]
 8005142:	3a01      	subs	r2, #1
 8005144:	f7ff feb0 	bl	8004ea8 <GUI_Line>
	
	
	//可供滾動條滾動的空間範圍
	scbactlen=scbx->height -2*SCROLL_BTN_HEIGHT;
 8005148:	68e3      	ldr	r3, [r4, #12]
	
	//每頁滾動條目大於總條目數 滾動條目等於最大可滾動的控件
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 800514a:	6921      	ldr	r1, [r4, #16]
	scbactlen=scbx->height -2*SCROLL_BTN_HEIGHT;
 800514c:	f1a3 0214 	sub.w	r2, r3, #20
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8005150:	6963      	ldr	r3, [r4, #20]
	//每頁滾動條目小於總條目數
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
	//設置滾動條的位置
	GUI_Scrollbar_SetPos(scbx);
 8005152:	4620      	mov	r0, r4
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 8005154:	428b      	cmp	r3, r1
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
 8005156:	bf3b      	ittet	cc
 8005158:	4353      	mulcc	r3, r2
 800515a:	fbb3 f3f1 	udivcc	r3, r3, r1
	if(scbx->itemsperpage >= scbx->totalitems)scbx->scbbarlen=scbactlen;
 800515e:	61e2      	strcs	r2, [r4, #28]
	else scbx->scbbarlen=(scbactlen*scbx->itemsperpage)/scbx->totalitems;//得到滾動條的長度
 8005160:	61e3      	strcc	r3, [r4, #28]
}
 8005162:	b002      	add	sp, #8
 8005164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GUI_Scrollbar_SetPos(scbx);
 8005168:	f7ff bf6b 	b.w	8005042 <GUI_Scrollbar_SetPos>
}
 800516c:	b002      	add	sp, #8
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	080089fc 	.word	0x080089fc
 8005174:	080089f4 	.word	0x080089f4

08005178 <show_str>:
//str  :字符串
//f_w:字寬
//f_h:字高
//mode:0,非疊加方式;1,疊加方式
void show_str(uint16_t x,uint16_t y,const uint8_t*str,uint8_t f_w,uint8_t f_h,uint8_t mode)
{					
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	4680      	mov	r8, r0
	uint16_t x0 = x;
	uint16_t y0 = y;
	while (*str != 0)
 800517e:	460c      	mov	r4, r1
 8005180:	4645      	mov	r5, r8
{					
 8005182:	b085      	sub	sp, #20
 8005184:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8005188:	4616      	mov	r6, r2
 800518a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
			y += f_h;
			x = x0;
			str++;
		}
		else
			OLED_ShowChar(x, y, *str, f_w / 2, f_h, mode);     //有效部分寫入
 800518e:	ea4f 0a53 	mov.w	sl, r3, lsr #1
{					
 8005192:	9203      	str	r2, [sp, #12]
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 8005194:	087a      	lsrs	r2, r7, #1
 8005196:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
		str++;
		x += f_h / 2; //字符,為全字的一半
 800519a:	b293      	uxth	r3, r2
		if (y > (y0 + LCD_HIGH - f_h))
 800519c:	f101 0940 	add.w	r9, r1, #64	; 0x40
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 80051a0:	eb00 0b08 	add.w	fp, r0, r8
		x += f_h / 2; //字符,為全字的一半
 80051a4:	9302      	str	r3, [sp, #8]
		if (y > (y0 + LCD_HIGH - f_h))
 80051a6:	eba9 0907 	sub.w	r9, r9, r7
	while (*str != 0)
 80051aa:	7832      	ldrb	r2, [r6, #0]
 80051ac:	b912      	cbnz	r2, 80051b4 <show_str+0x3c>

	}
}  			 		 
 80051ae:	b005      	add	sp, #20
 80051b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (x > (x0 + LCD_WIDTH - f_h / 2))     //換行
 80051b4:	455d      	cmp	r5, fp
			y += f_h;
 80051b6:	bfc2      	ittt	gt
 80051b8:	19e4      	addgt	r4, r4, r7
 80051ba:	b2a4      	uxthgt	r4, r4
			x = x0;
 80051bc:	4645      	movgt	r5, r8
		if (y > (y0 + LCD_HIGH - f_h))
 80051be:	454c      	cmp	r4, r9
 80051c0:	dcf5      	bgt.n	80051ae <show_str+0x36>
		if (*str == 13) //換行符號
 80051c2:	2a0d      	cmp	r2, #13
 80051c4:	d108      	bne.n	80051d8 <show_str+0x60>
			x = x0;
 80051c6:	4645      	mov	r5, r8
			y += f_h;
 80051c8:	443c      	add	r4, r7
 80051ca:	b2a4      	uxth	r4, r4
			str++;
 80051cc:	3601      	adds	r6, #1
		x += f_h / 2; //字符,為全字的一半
 80051ce:	9b02      	ldr	r3, [sp, #8]
		str++;
 80051d0:	3601      	adds	r6, #1
		x += f_h / 2; //字符,為全字的一半
 80051d2:	441d      	add	r5, r3
 80051d4:	b2ad      	uxth	r5, r5
 80051d6:	e7e8      	b.n	80051aa <show_str+0x32>
			OLED_ShowChar(x, y, *str, f_w / 2, f_h, mode);     //有效部分寫入
 80051d8:	9b03      	ldr	r3, [sp, #12]
 80051da:	9700      	str	r7, [sp, #0]
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	b2e1      	uxtb	r1, r4
 80051e0:	4653      	mov	r3, sl
 80051e2:	b2e8      	uxtb	r0, r5
 80051e4:	f7fc f994 	bl	8001510 <OLED_ShowChar>
 80051e8:	e7f1      	b.n	80051ce <show_str+0x56>

080051ea <show_str_mid>:
//在指定寬度的中間顯示字符串(置中顯示)
//如果字符長度超過了len,則用Show_Str顯示
//len:指定要顯示的寬度
void show_str_mid(uint16_t x,uint16_t y,const uint8_t*str,uint8_t f_w,uint8_t f_h,uint8_t mode,uint16_t len)
{
 80051ea:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ee:	4606      	mov	r6, r0
	uint16_t strlenth=0;
   	strlenth=strlen((char*)str);
 80051f0:	4610      	mov	r0, r2
{
 80051f2:	4689      	mov	r9, r1
 80051f4:	4617      	mov	r7, r2
 80051f6:	469a      	mov	sl, r3
   	strlenth=strlen((char*)str);
 80051f8:	f7fb f81a 	bl	8000230 <strlen>
{
 80051fc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8005200:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	strlenth*=f_h/2;
 8005204:	ea4f 0558 	mov.w	r5, r8, lsr #1
 8005208:	4368      	muls	r0, r5
 800520a:	b280      	uxth	r0, r0
	if(strlenth>len)show_str(x,y,str,f_w,f_h,mode);
 800520c:	42a0      	cmp	r0, r4
{
 800520e:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
	if(strlenth>len)show_str(x,y,str,f_w,f_h,mode);
 8005212:	d90c      	bls.n	800522e <show_str_mid+0x44>
 8005214:	4653      	mov	r3, sl
 8005216:	463a      	mov	r2, r7
 8005218:	4649      	mov	r1, r9
 800521a:	4630      	mov	r0, r6
 800521c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005220:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	else
	{
		strlenth=(len-strlenth)/2;
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
	}
}   
 8005224:	b001      	add	sp, #4
 8005226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
 800522a:	f7ff bfa5 	b.w	8005178 <show_str>
		strlenth=(len-strlenth)/2;
 800522e:	1a24      	subs	r4, r4, r0
 8005230:	2002      	movs	r0, #2
 8005232:	fb94 f0f0 	sdiv	r0, r4, r0
	    show_str(strlenth+x,y,str,f_w,f_h,mode);
 8005236:	4430      	add	r0, r6
 8005238:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800523c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005240:	4653      	mov	r3, sl
 8005242:	463a      	mov	r2, r7
 8005244:	4649      	mov	r1, r9
 8005246:	b280      	uxth	r0, r0
 8005248:	e7ec      	b.n	8005224 <show_str_mid+0x3a>

0800524a <getWindowStringlen>:

#if  GUI_WINDOW_EN==1

//得到字符串的長度
uint16_t getWindowStringlen(const unsigned char *str)
{
 800524a:	b508      	push	{r3, lr}
	uint16_t strlenth=0;
	strlenth=strlen((const char*)str);
 800524c:	f7fa fff0 	bl	8000230 <strlen>
 8005250:	b280      	uxth	r0, r0
	strlenth*=6;
 8005252:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005256:	0040      	lsls	r0, r0, #1

	return strlenth;
 8005258:	b280      	uxth	r0, r0
}
 800525a:	bd08      	pop	{r3, pc}

0800525c <GUI_WindowsDraw>:
* 功能：顯示視窗。根據提供的視窗參數進行描繪視窗。
* 入口參數：win		窗口句柄
* 出口參數：返回0表示操作失敗，返回1表示操作成功
****************************************************************************/
uint8_t  GUI_WindowsDraw(WINDOWS *win)
{  
 800525c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* 參數過濾，若窗口起出範圍，則返回0 */
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 800525e:	6882      	ldr	r2, [r0, #8]
{  
 8005260:	b085      	sub	sp, #20
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8005262:	2a13      	cmp	r2, #19
{  
 8005264:	4604      	mov	r4, r0
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 8005266:	d802      	bhi.n	800526e <GUI_WindowsDraw+0x12>
 8005268:	2000      	movs	r0, #0
	{  
		return 0;//顯示的標題超過了窗體的寬度
	}	
	show_str_mid(win->x, win->y+1, win->title,12,12,0,win->width);//顯示標題
	return(1);
}
 800526a:	b005      	add	sp, #20
 800526c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( (win->width)<20 ) || ( (win->height)<20 ) ) return(0);	// 寬度、高度檢查，限制最小窗口
 800526e:	68c3      	ldr	r3, [r0, #12]
 8005270:	2b13      	cmp	r3, #19
 8005272:	d9f9      	bls.n	8005268 <GUI_WindowsDraw+0xc>
	if( (win->x + win->width ) > GUI_LCM_XMAX ) return(0);			// 窗口寬度是否溢出
 8005274:	6800      	ldr	r0, [r0, #0]
 8005276:	4402      	add	r2, r0
 8005278:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800527c:	d8f4      	bhi.n	8005268 <GUI_WindowsDraw+0xc>
	if( (win->y + win->height ) > GUI_LCM_YMAX ) return(0);			// 窗口高度是否溢出
 800527e:	6861      	ldr	r1, [r4, #4]
 8005280:	440b      	add	r3, r1
 8005282:	2b40      	cmp	r3, #64	; 0x40
 8005284:	d8f0      	bhi.n	8005268 <GUI_WindowsDraw+0xc>
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 0);// 清除視窗(全螢幕清除)
 8005286:	2600      	movs	r6, #0
	GUI_Rectangle(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 1);	// 畫窗口邊框
 8005288:	2501      	movs	r5, #1
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 0);// 清除視窗(全螢幕清除)
 800528a:	3b01      	subs	r3, #1
 800528c:	3a01      	subs	r2, #1
 800528e:	9600      	str	r6, [sp, #0]
 8005290:	f7ff fdd0 	bl	8004e34 <GUI_RectangleFill>
	GUI_Rectangle(win->x, win->y, win->x + win->width - 1, win->y + win->height - 1, 1);	// 畫窗口邊框
 8005294:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005298:	68e3      	ldr	r3, [r4, #12]
 800529a:	68a2      	ldr	r2, [r4, #8]
 800529c:	440b      	add	r3, r1
 800529e:	4402      	add	r2, r0
 80052a0:	3b01      	subs	r3, #1
 80052a2:	3a01      	subs	r2, #1
 80052a4:	9500      	str	r5, [sp, #0]
 80052a6:	f7ff fda1 	bl	8004dec <GUI_Rectangle>
	GUI_HLine(win->x, win->y + 14, win->x + win->width - 1, disp_color);					// 畫標題目欄下邊框
 80052aa:	8820      	ldrh	r0, [r4, #0]
 80052ac:	68a2      	ldr	r2, [r4, #8]
 80052ae:	6861      	ldr	r1, [r4, #4]
 80052b0:	4402      	add	r2, r0
 80052b2:	4b13      	ldr	r3, [pc, #76]	; (8005300 <GUI_WindowsDraw+0xa4>)
 80052b4:	3a01      	subs	r2, #1
 80052b6:	310e      	adds	r1, #14
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	b292      	uxth	r2, r2
 80052bc:	b2c9      	uxtb	r1, r1
 80052be:	f7ff fe94 	bl	8004fea <GUI_HLine>
	GUI_RectangleFill(win->x, win->y, win->x + win->width - 1, win->y + 14-1, 1);
 80052c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80052c6:	4402      	add	r2, r0
 80052c8:	f101 030d 	add.w	r3, r1, #13
 80052cc:	3a01      	subs	r2, #1
 80052ce:	9500      	str	r5, [sp, #0]
 80052d0:	f7ff fdb0 	bl	8004e34 <GUI_RectangleFill>
	if(getWindowStringlen(win->title)>(win->width-2))
 80052d4:	69a7      	ldr	r7, [r4, #24]
 80052d6:	4638      	mov	r0, r7
 80052d8:	f7ff ffb7 	bl	800524a <getWindowStringlen>
 80052dc:	68a3      	ldr	r3, [r4, #8]
 80052de:	1e9a      	subs	r2, r3, #2
 80052e0:	4290      	cmp	r0, r2
 80052e2:	d8c1      	bhi.n	8005268 <GUI_WindowsDraw+0xc>
	show_str_mid(win->x, win->y+1, win->title,12,12,0,win->width);//顯示標題
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	9302      	str	r3, [sp, #8]
 80052e8:	230c      	movs	r3, #12
 80052ea:	6861      	ldr	r1, [r4, #4]
 80052ec:	8820      	ldrh	r0, [r4, #0]
 80052ee:	4429      	add	r1, r5
 80052f0:	9601      	str	r6, [sp, #4]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	463a      	mov	r2, r7
 80052f6:	b289      	uxth	r1, r1
 80052f8:	f7ff ff77 	bl	80051ea <show_str_mid>
	return(1);
 80052fc:	4628      	mov	r0, r5
 80052fe:	e7b4      	b.n	800526a <GUI_WindowsDraw+0xe>
 8005300:	200000b8 	.word	0x200000b8

08005304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005304:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005306:	e003      	b.n	8005310 <LoopCopyDataInit>

08005308 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800530a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800530c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800530e:	3104      	adds	r1, #4

08005310 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005310:	480a      	ldr	r0, [pc, #40]	; (800533c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005312:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005314:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005316:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005318:	d3f6      	bcc.n	8005308 <CopyDataInit>
  ldr r2, =_sbss
 800531a:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800531c:	e002      	b.n	8005324 <LoopFillZerobss>

0800531e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800531e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005320:	f842 3b04 	str.w	r3, [r2], #4

08005324 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005324:	4b08      	ldr	r3, [pc, #32]	; (8005348 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005326:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005328:	d3f9      	bcc.n	800531e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800532a:	f7fc f823 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800532e:	f000 f80f 	bl	8005350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005332:	f7fb fe3d 	bl	8000fb0 <main>
  bx lr
 8005336:	4770      	bx	lr
  ldr r3, =_sidata
 8005338:	08008c80 	.word	0x08008c80
  ldr r0, =_sdata
 800533c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005340:	2000072c 	.word	0x2000072c
  ldr r2, =_sbss
 8005344:	2000072c 	.word	0x2000072c
  ldr r3, = _ebss
 8005348:	20004670 	.word	0x20004670

0800534c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800534c:	e7fe      	b.n	800534c <ADC1_2_IRQHandler>
	...

08005350 <__libc_init_array>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	2500      	movs	r5, #0
 8005354:	4e0c      	ldr	r6, [pc, #48]	; (8005388 <__libc_init_array+0x38>)
 8005356:	4c0d      	ldr	r4, [pc, #52]	; (800538c <__libc_init_array+0x3c>)
 8005358:	1ba4      	subs	r4, r4, r6
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	42a5      	cmp	r5, r4
 800535e:	d109      	bne.n	8005374 <__libc_init_array+0x24>
 8005360:	f002 ff36 	bl	80081d0 <_init>
 8005364:	2500      	movs	r5, #0
 8005366:	4e0a      	ldr	r6, [pc, #40]	; (8005390 <__libc_init_array+0x40>)
 8005368:	4c0a      	ldr	r4, [pc, #40]	; (8005394 <__libc_init_array+0x44>)
 800536a:	1ba4      	subs	r4, r4, r6
 800536c:	10a4      	asrs	r4, r4, #2
 800536e:	42a5      	cmp	r5, r4
 8005370:	d105      	bne.n	800537e <__libc_init_array+0x2e>
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005378:	4798      	blx	r3
 800537a:	3501      	adds	r5, #1
 800537c:	e7ee      	b.n	800535c <__libc_init_array+0xc>
 800537e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005382:	4798      	blx	r3
 8005384:	3501      	adds	r5, #1
 8005386:	e7f2      	b.n	800536e <__libc_init_array+0x1e>
 8005388:	08008c78 	.word	0x08008c78
 800538c:	08008c78 	.word	0x08008c78
 8005390:	08008c78 	.word	0x08008c78
 8005394:	08008c7c 	.word	0x08008c7c

08005398 <memcpy>:
 8005398:	b510      	push	{r4, lr}
 800539a:	1e43      	subs	r3, r0, #1
 800539c:	440a      	add	r2, r1
 800539e:	4291      	cmp	r1, r2
 80053a0:	d100      	bne.n	80053a4 <memcpy+0xc>
 80053a2:	bd10      	pop	{r4, pc}
 80053a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ac:	e7f7      	b.n	800539e <memcpy+0x6>

080053ae <memset>:
 80053ae:	4603      	mov	r3, r0
 80053b0:	4402      	add	r2, r0
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d100      	bne.n	80053b8 <memset+0xa>
 80053b6:	4770      	bx	lr
 80053b8:	f803 1b01 	strb.w	r1, [r3], #1
 80053bc:	e7f9      	b.n	80053b2 <memset+0x4>
	...

080053c0 <snprintf>:
 80053c0:	b40c      	push	{r2, r3}
 80053c2:	b530      	push	{r4, r5, lr}
 80053c4:	4b17      	ldr	r3, [pc, #92]	; (8005424 <snprintf+0x64>)
 80053c6:	1e0c      	subs	r4, r1, #0
 80053c8:	b09d      	sub	sp, #116	; 0x74
 80053ca:	681d      	ldr	r5, [r3, #0]
 80053cc:	da08      	bge.n	80053e0 <snprintf+0x20>
 80053ce:	238b      	movs	r3, #139	; 0x8b
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295
 80053d4:	602b      	str	r3, [r5, #0]
 80053d6:	b01d      	add	sp, #116	; 0x74
 80053d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053dc:	b002      	add	sp, #8
 80053de:	4770      	bx	lr
 80053e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80053e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80053e8:	bf0c      	ite	eq
 80053ea:	4623      	moveq	r3, r4
 80053ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80053f0:	9304      	str	r3, [sp, #16]
 80053f2:	9307      	str	r3, [sp, #28]
 80053f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053f8:	9002      	str	r0, [sp, #8]
 80053fa:	9006      	str	r0, [sp, #24]
 80053fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005400:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005402:	ab21      	add	r3, sp, #132	; 0x84
 8005404:	a902      	add	r1, sp, #8
 8005406:	4628      	mov	r0, r5
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	f000 f80d 	bl	8005428 <_svfprintf_r>
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	bfbc      	itt	lt
 8005412:	238b      	movlt	r3, #139	; 0x8b
 8005414:	602b      	strlt	r3, [r5, #0]
 8005416:	2c00      	cmp	r4, #0
 8005418:	d0dd      	beq.n	80053d6 <snprintf+0x16>
 800541a:	2200      	movs	r2, #0
 800541c:	9b02      	ldr	r3, [sp, #8]
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e7d9      	b.n	80053d6 <snprintf+0x16>
 8005422:	bf00      	nop
 8005424:	200000bc 	.word	0x200000bc

08005428 <_svfprintf_r>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	b0bf      	sub	sp, #252	; 0xfc
 800542e:	4689      	mov	r9, r1
 8005430:	4615      	mov	r5, r2
 8005432:	461f      	mov	r7, r3
 8005434:	4682      	mov	sl, r0
 8005436:	f001 fe27 	bl	8007088 <_localeconv_r>
 800543a:	6803      	ldr	r3, [r0, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	9311      	str	r3, [sp, #68]	; 0x44
 8005440:	f7fa fef6 	bl	8000230 <strlen>
 8005444:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005448:	900a      	str	r0, [sp, #40]	; 0x28
 800544a:	061b      	lsls	r3, r3, #24
 800544c:	d518      	bpl.n	8005480 <_svfprintf_r+0x58>
 800544e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005452:	b9ab      	cbnz	r3, 8005480 <_svfprintf_r+0x58>
 8005454:	2140      	movs	r1, #64	; 0x40
 8005456:	4650      	mov	r0, sl
 8005458:	f001 fe2c 	bl	80070b4 <_malloc_r>
 800545c:	f8c9 0000 	str.w	r0, [r9]
 8005460:	f8c9 0010 	str.w	r0, [r9, #16]
 8005464:	b948      	cbnz	r0, 800547a <_svfprintf_r+0x52>
 8005466:	230c      	movs	r3, #12
 8005468:	f8ca 3000 	str.w	r3, [sl]
 800546c:	f04f 33ff 	mov.w	r3, #4294967295
 8005470:	930b      	str	r3, [sp, #44]	; 0x2c
 8005472:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005474:	b03f      	add	sp, #252	; 0xfc
 8005476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547a:	2340      	movs	r3, #64	; 0x40
 800547c:	f8c9 3014 	str.w	r3, [r9, #20]
 8005480:	2300      	movs	r3, #0
 8005482:	ac2e      	add	r4, sp, #184	; 0xb8
 8005484:	9421      	str	r4, [sp, #132]	; 0x84
 8005486:	9323      	str	r3, [sp, #140]	; 0x8c
 8005488:	9322      	str	r3, [sp, #136]	; 0x88
 800548a:	9509      	str	r5, [sp, #36]	; 0x24
 800548c:	9307      	str	r3, [sp, #28]
 800548e:	930d      	str	r3, [sp, #52]	; 0x34
 8005490:	930e      	str	r3, [sp, #56]	; 0x38
 8005492:	9315      	str	r3, [sp, #84]	; 0x54
 8005494:	9314      	str	r3, [sp, #80]	; 0x50
 8005496:	930b      	str	r3, [sp, #44]	; 0x2c
 8005498:	9312      	str	r3, [sp, #72]	; 0x48
 800549a:	9313      	str	r3, [sp, #76]	; 0x4c
 800549c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800549e:	462b      	mov	r3, r5
 80054a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054a4:	b112      	cbz	r2, 80054ac <_svfprintf_r+0x84>
 80054a6:	2a25      	cmp	r2, #37	; 0x25
 80054a8:	f040 8083 	bne.w	80055b2 <_svfprintf_r+0x18a>
 80054ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ae:	1aee      	subs	r6, r5, r3
 80054b0:	d00d      	beq.n	80054ce <_svfprintf_r+0xa6>
 80054b2:	e884 0048 	stmia.w	r4, {r3, r6}
 80054b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054b8:	4433      	add	r3, r6
 80054ba:	9323      	str	r3, [sp, #140]	; 0x8c
 80054bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054be:	3301      	adds	r3, #1
 80054c0:	2b07      	cmp	r3, #7
 80054c2:	9322      	str	r3, [sp, #136]	; 0x88
 80054c4:	dc77      	bgt.n	80055b6 <_svfprintf_r+0x18e>
 80054c6:	3408      	adds	r4, #8
 80054c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ca:	4433      	add	r3, r6
 80054cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80054ce:	782b      	ldrb	r3, [r5, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8725 	beq.w	8006320 <_svfprintf_r+0xef8>
 80054d6:	2300      	movs	r3, #0
 80054d8:	1c69      	adds	r1, r5, #1
 80054da:	461a      	mov	r2, r3
 80054dc:	f04f 3bff 	mov.w	fp, #4294967295
 80054e0:	461d      	mov	r5, r3
 80054e2:	200a      	movs	r0, #10
 80054e4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80054e8:	930c      	str	r3, [sp, #48]	; 0x30
 80054ea:	1c4e      	adds	r6, r1, #1
 80054ec:	7809      	ldrb	r1, [r1, #0]
 80054ee:	9609      	str	r6, [sp, #36]	; 0x24
 80054f0:	9106      	str	r1, [sp, #24]
 80054f2:	9906      	ldr	r1, [sp, #24]
 80054f4:	3920      	subs	r1, #32
 80054f6:	2958      	cmp	r1, #88	; 0x58
 80054f8:	f200 8414 	bhi.w	8005d24 <_svfprintf_r+0x8fc>
 80054fc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005500:	041200a5 	.word	0x041200a5
 8005504:	00aa0412 	.word	0x00aa0412
 8005508:	04120412 	.word	0x04120412
 800550c:	04120412 	.word	0x04120412
 8005510:	04120412 	.word	0x04120412
 8005514:	006500ad 	.word	0x006500ad
 8005518:	00b50412 	.word	0x00b50412
 800551c:	041200b8 	.word	0x041200b8
 8005520:	00d800d5 	.word	0x00d800d5
 8005524:	00d800d8 	.word	0x00d800d8
 8005528:	00d800d8 	.word	0x00d800d8
 800552c:	00d800d8 	.word	0x00d800d8
 8005530:	00d800d8 	.word	0x00d800d8
 8005534:	04120412 	.word	0x04120412
 8005538:	04120412 	.word	0x04120412
 800553c:	04120412 	.word	0x04120412
 8005540:	04120412 	.word	0x04120412
 8005544:	04120412 	.word	0x04120412
 8005548:	0122010c 	.word	0x0122010c
 800554c:	01220412 	.word	0x01220412
 8005550:	04120412 	.word	0x04120412
 8005554:	04120412 	.word	0x04120412
 8005558:	041200eb 	.word	0x041200eb
 800555c:	033c0412 	.word	0x033c0412
 8005560:	04120412 	.word	0x04120412
 8005564:	04120412 	.word	0x04120412
 8005568:	03a40412 	.word	0x03a40412
 800556c:	04120412 	.word	0x04120412
 8005570:	04120085 	.word	0x04120085
 8005574:	04120412 	.word	0x04120412
 8005578:	04120412 	.word	0x04120412
 800557c:	04120412 	.word	0x04120412
 8005580:	04120412 	.word	0x04120412
 8005584:	00fe0412 	.word	0x00fe0412
 8005588:	0122006b 	.word	0x0122006b
 800558c:	01220122 	.word	0x01220122
 8005590:	006b00ee 	.word	0x006b00ee
 8005594:	04120412 	.word	0x04120412
 8005598:	041200f1 	.word	0x041200f1
 800559c:	033e031e 	.word	0x033e031e
 80055a0:	00f80372 	.word	0x00f80372
 80055a4:	03830412 	.word	0x03830412
 80055a8:	03a60412 	.word	0x03a60412
 80055ac:	04120412 	.word	0x04120412
 80055b0:	03be      	.short	0x03be
 80055b2:	461d      	mov	r5, r3
 80055b4:	e773      	b.n	800549e <_svfprintf_r+0x76>
 80055b6:	aa21      	add	r2, sp, #132	; 0x84
 80055b8:	4649      	mov	r1, r9
 80055ba:	4650      	mov	r0, sl
 80055bc:	f002 fa82 	bl	8007ac4 <__ssprint_r>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	f040 868e 	bne.w	80062e2 <_svfprintf_r+0xeba>
 80055c6:	ac2e      	add	r4, sp, #184	; 0xb8
 80055c8:	e77e      	b.n	80054c8 <_svfprintf_r+0xa0>
 80055ca:	2301      	movs	r3, #1
 80055cc:	222b      	movs	r2, #43	; 0x2b
 80055ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055d0:	e78b      	b.n	80054ea <_svfprintf_r+0xc2>
 80055d2:	460f      	mov	r7, r1
 80055d4:	e7fb      	b.n	80055ce <_svfprintf_r+0x1a6>
 80055d6:	b10b      	cbz	r3, 80055dc <_svfprintf_r+0x1b4>
 80055d8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80055dc:	06ae      	lsls	r6, r5, #26
 80055de:	f140 80a1 	bpl.w	8005724 <_svfprintf_r+0x2fc>
 80055e2:	3707      	adds	r7, #7
 80055e4:	f027 0707 	bic.w	r7, r7, #7
 80055e8:	f107 0308 	add.w	r3, r7, #8
 80055ec:	9308      	str	r3, [sp, #32]
 80055ee:	e9d7 6700 	ldrd	r6, r7, [r7]
 80055f2:	2e00      	cmp	r6, #0
 80055f4:	f177 0300 	sbcs.w	r3, r7, #0
 80055f8:	da05      	bge.n	8005606 <_svfprintf_r+0x1de>
 80055fa:	232d      	movs	r3, #45	; 0x2d
 80055fc:	4276      	negs	r6, r6
 80055fe:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005602:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005606:	2301      	movs	r3, #1
 8005608:	e2c7      	b.n	8005b9a <_svfprintf_r+0x772>
 800560a:	b10b      	cbz	r3, 8005610 <_svfprintf_r+0x1e8>
 800560c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005610:	4ba0      	ldr	r3, [pc, #640]	; (8005894 <_svfprintf_r+0x46c>)
 8005612:	9315      	str	r3, [sp, #84]	; 0x54
 8005614:	06ab      	lsls	r3, r5, #26
 8005616:	f140 8336 	bpl.w	8005c86 <_svfprintf_r+0x85e>
 800561a:	3707      	adds	r7, #7
 800561c:	f027 0707 	bic.w	r7, r7, #7
 8005620:	f107 0308 	add.w	r3, r7, #8
 8005624:	9308      	str	r3, [sp, #32]
 8005626:	e9d7 6700 	ldrd	r6, r7, [r7]
 800562a:	07e8      	lsls	r0, r5, #31
 800562c:	d50b      	bpl.n	8005646 <_svfprintf_r+0x21e>
 800562e:	ea56 0307 	orrs.w	r3, r6, r7
 8005632:	d008      	beq.n	8005646 <_svfprintf_r+0x21e>
 8005634:	2330      	movs	r3, #48	; 0x30
 8005636:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800563a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800563e:	f045 0502 	orr.w	r5, r5, #2
 8005642:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8005646:	2302      	movs	r3, #2
 8005648:	e2a4      	b.n	8005b94 <_svfprintf_r+0x76c>
 800564a:	2a00      	cmp	r2, #0
 800564c:	d1bf      	bne.n	80055ce <_svfprintf_r+0x1a6>
 800564e:	2301      	movs	r3, #1
 8005650:	2220      	movs	r2, #32
 8005652:	e7bc      	b.n	80055ce <_svfprintf_r+0x1a6>
 8005654:	f045 0501 	orr.w	r5, r5, #1
 8005658:	e7b9      	b.n	80055ce <_svfprintf_r+0x1a6>
 800565a:	683e      	ldr	r6, [r7, #0]
 800565c:	1d39      	adds	r1, r7, #4
 800565e:	2e00      	cmp	r6, #0
 8005660:	960c      	str	r6, [sp, #48]	; 0x30
 8005662:	dab6      	bge.n	80055d2 <_svfprintf_r+0x1aa>
 8005664:	460f      	mov	r7, r1
 8005666:	4276      	negs	r6, r6
 8005668:	960c      	str	r6, [sp, #48]	; 0x30
 800566a:	f045 0504 	orr.w	r5, r5, #4
 800566e:	e7ae      	b.n	80055ce <_svfprintf_r+0x1a6>
 8005670:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005672:	1c4e      	adds	r6, r1, #1
 8005674:	7809      	ldrb	r1, [r1, #0]
 8005676:	292a      	cmp	r1, #42	; 0x2a
 8005678:	9106      	str	r1, [sp, #24]
 800567a:	d010      	beq.n	800569e <_svfprintf_r+0x276>
 800567c:	f04f 0b00 	mov.w	fp, #0
 8005680:	9609      	str	r6, [sp, #36]	; 0x24
 8005682:	9906      	ldr	r1, [sp, #24]
 8005684:	3930      	subs	r1, #48	; 0x30
 8005686:	2909      	cmp	r1, #9
 8005688:	f63f af33 	bhi.w	80054f2 <_svfprintf_r+0xca>
 800568c:	fb00 1b0b 	mla	fp, r0, fp, r1
 8005690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005692:	460e      	mov	r6, r1
 8005694:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005698:	9106      	str	r1, [sp, #24]
 800569a:	9609      	str	r6, [sp, #36]	; 0x24
 800569c:	e7f1      	b.n	8005682 <_svfprintf_r+0x25a>
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	9609      	str	r6, [sp, #36]	; 0x24
 80056a2:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 80056a6:	3704      	adds	r7, #4
 80056a8:	e791      	b.n	80055ce <_svfprintf_r+0x1a6>
 80056aa:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80056ae:	e78e      	b.n	80055ce <_svfprintf_r+0x1a6>
 80056b0:	2100      	movs	r1, #0
 80056b2:	910c      	str	r1, [sp, #48]	; 0x30
 80056b4:	9906      	ldr	r1, [sp, #24]
 80056b6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80056b8:	3930      	subs	r1, #48	; 0x30
 80056ba:	fb00 1106 	mla	r1, r0, r6, r1
 80056be:	910c      	str	r1, [sp, #48]	; 0x30
 80056c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056c2:	460e      	mov	r6, r1
 80056c4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80056c8:	9106      	str	r1, [sp, #24]
 80056ca:	9906      	ldr	r1, [sp, #24]
 80056cc:	9609      	str	r6, [sp, #36]	; 0x24
 80056ce:	3930      	subs	r1, #48	; 0x30
 80056d0:	2909      	cmp	r1, #9
 80056d2:	d9ef      	bls.n	80056b4 <_svfprintf_r+0x28c>
 80056d4:	e70d      	b.n	80054f2 <_svfprintf_r+0xca>
 80056d6:	f045 0508 	orr.w	r5, r5, #8
 80056da:	e778      	b.n	80055ce <_svfprintf_r+0x1a6>
 80056dc:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80056e0:	e775      	b.n	80055ce <_svfprintf_r+0x1a6>
 80056e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056e4:	7809      	ldrb	r1, [r1, #0]
 80056e6:	296c      	cmp	r1, #108	; 0x6c
 80056e8:	d105      	bne.n	80056f6 <_svfprintf_r+0x2ce>
 80056ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056ec:	3101      	adds	r1, #1
 80056ee:	9109      	str	r1, [sp, #36]	; 0x24
 80056f0:	f045 0520 	orr.w	r5, r5, #32
 80056f4:	e76b      	b.n	80055ce <_svfprintf_r+0x1a6>
 80056f6:	f045 0510 	orr.w	r5, r5, #16
 80056fa:	e768      	b.n	80055ce <_svfprintf_r+0x1a6>
 80056fc:	2600      	movs	r6, #0
 80056fe:	1d3b      	adds	r3, r7, #4
 8005700:	9308      	str	r3, [sp, #32]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005708:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800570c:	f04f 0b01 	mov.w	fp, #1
 8005710:	4637      	mov	r7, r6
 8005712:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8005716:	e11c      	b.n	8005952 <_svfprintf_r+0x52a>
 8005718:	b10b      	cbz	r3, 800571e <_svfprintf_r+0x2f6>
 800571a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800571e:	f045 0510 	orr.w	r5, r5, #16
 8005722:	e75b      	b.n	80055dc <_svfprintf_r+0x1b4>
 8005724:	f015 0f10 	tst.w	r5, #16
 8005728:	f107 0304 	add.w	r3, r7, #4
 800572c:	d003      	beq.n	8005736 <_svfprintf_r+0x30e>
 800572e:	683e      	ldr	r6, [r7, #0]
 8005730:	9308      	str	r3, [sp, #32]
 8005732:	17f7      	asrs	r7, r6, #31
 8005734:	e75d      	b.n	80055f2 <_svfprintf_r+0x1ca>
 8005736:	683e      	ldr	r6, [r7, #0]
 8005738:	f015 0f40 	tst.w	r5, #64	; 0x40
 800573c:	9308      	str	r3, [sp, #32]
 800573e:	bf18      	it	ne
 8005740:	b236      	sxthne	r6, r6
 8005742:	e7f6      	b.n	8005732 <_svfprintf_r+0x30a>
 8005744:	b10b      	cbz	r3, 800574a <_svfprintf_r+0x322>
 8005746:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800574a:	3707      	adds	r7, #7
 800574c:	f027 0707 	bic.w	r7, r7, #7
 8005750:	f107 0308 	add.w	r3, r7, #8
 8005754:	9308      	str	r3, [sp, #32]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f04f 32ff 	mov.w	r2, #4294967295
 800575c:	930d      	str	r3, [sp, #52]	; 0x34
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005762:	930e      	str	r3, [sp, #56]	; 0x38
 8005764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005766:	4638      	mov	r0, r7
 8005768:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800576c:	4631      	mov	r1, r6
 800576e:	4b4a      	ldr	r3, [pc, #296]	; (8005898 <_svfprintf_r+0x470>)
 8005770:	f7fb f9b8 	bl	8000ae4 <__aeabi_dcmpun>
 8005774:	2800      	cmp	r0, #0
 8005776:	f040 85dc 	bne.w	8006332 <_svfprintf_r+0xf0a>
 800577a:	f04f 32ff 	mov.w	r2, #4294967295
 800577e:	4b46      	ldr	r3, [pc, #280]	; (8005898 <_svfprintf_r+0x470>)
 8005780:	4638      	mov	r0, r7
 8005782:	4631      	mov	r1, r6
 8005784:	f7fb f990 	bl	8000aa8 <__aeabi_dcmple>
 8005788:	2800      	cmp	r0, #0
 800578a:	f040 85d2 	bne.w	8006332 <_svfprintf_r+0xf0a>
 800578e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005792:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005794:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005796:	f7fb f97d 	bl	8000a94 <__aeabi_dcmplt>
 800579a:	b110      	cbz	r0, 80057a2 <_svfprintf_r+0x37a>
 800579c:	232d      	movs	r3, #45	; 0x2d
 800579e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80057a2:	4b3e      	ldr	r3, [pc, #248]	; (800589c <_svfprintf_r+0x474>)
 80057a4:	4a3e      	ldr	r2, [pc, #248]	; (80058a0 <_svfprintf_r+0x478>)
 80057a6:	9906      	ldr	r1, [sp, #24]
 80057a8:	f04f 0b03 	mov.w	fp, #3
 80057ac:	2947      	cmp	r1, #71	; 0x47
 80057ae:	bfcc      	ite	gt
 80057b0:	4690      	movgt	r8, r2
 80057b2:	4698      	movle	r8, r3
 80057b4:	2600      	movs	r6, #0
 80057b6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80057ba:	4637      	mov	r7, r6
 80057bc:	e0c9      	b.n	8005952 <_svfprintf_r+0x52a>
 80057be:	f1bb 3fff 	cmp.w	fp, #4294967295
 80057c2:	d026      	beq.n	8005812 <_svfprintf_r+0x3ea>
 80057c4:	9b06      	ldr	r3, [sp, #24]
 80057c6:	f023 0320 	bic.w	r3, r3, #32
 80057ca:	2b47      	cmp	r3, #71	; 0x47
 80057cc:	d104      	bne.n	80057d8 <_svfprintf_r+0x3b0>
 80057ce:	f1bb 0f00 	cmp.w	fp, #0
 80057d2:	bf08      	it	eq
 80057d4:	f04f 0b01 	moveq.w	fp, #1
 80057d8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80057dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80057de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057e0:	1e1f      	subs	r7, r3, #0
 80057e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e4:	bfa8      	it	ge
 80057e6:	9710      	strge	r7, [sp, #64]	; 0x40
 80057e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80057ea:	bfbd      	ittte	lt
 80057ec:	463b      	movlt	r3, r7
 80057ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80057f2:	9310      	strlt	r3, [sp, #64]	; 0x40
 80057f4:	2300      	movge	r3, #0
 80057f6:	bfb8      	it	lt
 80057f8:	232d      	movlt	r3, #45	; 0x2d
 80057fa:	9316      	str	r3, [sp, #88]	; 0x58
 80057fc:	9b06      	ldr	r3, [sp, #24]
 80057fe:	f023 0720 	bic.w	r7, r3, #32
 8005802:	2f46      	cmp	r7, #70	; 0x46
 8005804:	d008      	beq.n	8005818 <_svfprintf_r+0x3f0>
 8005806:	2f45      	cmp	r7, #69	; 0x45
 8005808:	d142      	bne.n	8005890 <_svfprintf_r+0x468>
 800580a:	f10b 0601 	add.w	r6, fp, #1
 800580e:	2302      	movs	r3, #2
 8005810:	e004      	b.n	800581c <_svfprintf_r+0x3f4>
 8005812:	f04f 0b06 	mov.w	fp, #6
 8005816:	e7df      	b.n	80057d8 <_svfprintf_r+0x3b0>
 8005818:	465e      	mov	r6, fp
 800581a:	2303      	movs	r3, #3
 800581c:	aa1f      	add	r2, sp, #124	; 0x7c
 800581e:	9204      	str	r2, [sp, #16]
 8005820:	aa1c      	add	r2, sp, #112	; 0x70
 8005822:	9203      	str	r2, [sp, #12]
 8005824:	aa1b      	add	r2, sp, #108	; 0x6c
 8005826:	9202      	str	r2, [sp, #8]
 8005828:	e88d 0048 	stmia.w	sp, {r3, r6}
 800582c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800582e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005830:	4650      	mov	r0, sl
 8005832:	f000 fe55 	bl	80064e0 <_dtoa_r>
 8005836:	2f47      	cmp	r7, #71	; 0x47
 8005838:	4680      	mov	r8, r0
 800583a:	d102      	bne.n	8005842 <_svfprintf_r+0x41a>
 800583c:	07e8      	lsls	r0, r5, #31
 800583e:	f140 8585 	bpl.w	800634c <_svfprintf_r+0xf24>
 8005842:	eb08 0306 	add.w	r3, r8, r6
 8005846:	2f46      	cmp	r7, #70	; 0x46
 8005848:	9307      	str	r3, [sp, #28]
 800584a:	d111      	bne.n	8005870 <_svfprintf_r+0x448>
 800584c:	f898 3000 	ldrb.w	r3, [r8]
 8005850:	2b30      	cmp	r3, #48	; 0x30
 8005852:	d109      	bne.n	8005868 <_svfprintf_r+0x440>
 8005854:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005858:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800585a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800585c:	f7fb f910 	bl	8000a80 <__aeabi_dcmpeq>
 8005860:	b910      	cbnz	r0, 8005868 <_svfprintf_r+0x440>
 8005862:	f1c6 0601 	rsb	r6, r6, #1
 8005866:	961b      	str	r6, [sp, #108]	; 0x6c
 8005868:	9a07      	ldr	r2, [sp, #28]
 800586a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800586c:	441a      	add	r2, r3
 800586e:	9207      	str	r2, [sp, #28]
 8005870:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005874:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005876:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005878:	f7fb f902 	bl	8000a80 <__aeabi_dcmpeq>
 800587c:	b990      	cbnz	r0, 80058a4 <_svfprintf_r+0x47c>
 800587e:	2230      	movs	r2, #48	; 0x30
 8005880:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005882:	9907      	ldr	r1, [sp, #28]
 8005884:	4299      	cmp	r1, r3
 8005886:	d90f      	bls.n	80058a8 <_svfprintf_r+0x480>
 8005888:	1c59      	adds	r1, r3, #1
 800588a:	911f      	str	r1, [sp, #124]	; 0x7c
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e7f7      	b.n	8005880 <_svfprintf_r+0x458>
 8005890:	465e      	mov	r6, fp
 8005892:	e7bc      	b.n	800580e <_svfprintf_r+0x3e6>
 8005894:	08008a14 	.word	0x08008a14
 8005898:	7fefffff 	.word	0x7fefffff
 800589c:	08008a04 	.word	0x08008a04
 80058a0:	08008a08 	.word	0x08008a08
 80058a4:	9b07      	ldr	r3, [sp, #28]
 80058a6:	931f      	str	r3, [sp, #124]	; 0x7c
 80058a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80058aa:	2f47      	cmp	r7, #71	; 0x47
 80058ac:	eba3 0308 	sub.w	r3, r3, r8
 80058b0:	9307      	str	r3, [sp, #28]
 80058b2:	f040 8100 	bne.w	8005ab6 <_svfprintf_r+0x68e>
 80058b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058b8:	1cd9      	adds	r1, r3, #3
 80058ba:	db02      	blt.n	80058c2 <_svfprintf_r+0x49a>
 80058bc:	459b      	cmp	fp, r3
 80058be:	f280 8126 	bge.w	8005b0e <_svfprintf_r+0x6e6>
 80058c2:	9b06      	ldr	r3, [sp, #24]
 80058c4:	3b02      	subs	r3, #2
 80058c6:	9306      	str	r3, [sp, #24]
 80058c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80058ca:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80058ce:	1e53      	subs	r3, r2, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bfa8      	it	ge
 80058d4:	222b      	movge	r2, #43	; 0x2b
 80058d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80058d8:	bfbc      	itt	lt
 80058da:	f1c2 0301 	rsblt	r3, r2, #1
 80058de:	222d      	movlt	r2, #45	; 0x2d
 80058e0:	2b09      	cmp	r3, #9
 80058e2:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 80058e6:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 80058ea:	f340 8100 	ble.w	8005aee <_svfprintf_r+0x6c6>
 80058ee:	260a      	movs	r6, #10
 80058f0:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 80058f4:	fb93 f0f6 	sdiv	r0, r3, r6
 80058f8:	fb06 3310 	mls	r3, r6, r0, r3
 80058fc:	2809      	cmp	r0, #9
 80058fe:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8005902:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005906:	f102 31ff 	add.w	r1, r2, #4294967295
 800590a:	4603      	mov	r3, r0
 800590c:	f300 80e8 	bgt.w	8005ae0 <_svfprintf_r+0x6b8>
 8005910:	3330      	adds	r3, #48	; 0x30
 8005912:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005916:	3a02      	subs	r2, #2
 8005918:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 800591c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8005920:	4282      	cmp	r2, r0
 8005922:	4619      	mov	r1, r3
 8005924:	f0c0 80de 	bcc.w	8005ae4 <_svfprintf_r+0x6bc>
 8005928:	9a07      	ldr	r2, [sp, #28]
 800592a:	ab1d      	add	r3, sp, #116	; 0x74
 800592c:	1acb      	subs	r3, r1, r3
 800592e:	2a01      	cmp	r2, #1
 8005930:	9314      	str	r3, [sp, #80]	; 0x50
 8005932:	eb03 0b02 	add.w	fp, r3, r2
 8005936:	dc02      	bgt.n	800593e <_svfprintf_r+0x516>
 8005938:	f015 0701 	ands.w	r7, r5, #1
 800593c:	d002      	beq.n	8005944 <_svfprintf_r+0x51c>
 800593e:	2700      	movs	r7, #0
 8005940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005942:	449b      	add	fp, r3
 8005944:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005946:	b113      	cbz	r3, 800594e <_svfprintf_r+0x526>
 8005948:	232d      	movs	r3, #45	; 0x2d
 800594a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800594e:	2600      	movs	r6, #0
 8005950:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005952:	455e      	cmp	r6, fp
 8005954:	4633      	mov	r3, r6
 8005956:	bfb8      	it	lt
 8005958:	465b      	movlt	r3, fp
 800595a:	930f      	str	r3, [sp, #60]	; 0x3c
 800595c:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8005960:	b113      	cbz	r3, 8005968 <_svfprintf_r+0x540>
 8005962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005964:	3301      	adds	r3, #1
 8005966:	930f      	str	r3, [sp, #60]	; 0x3c
 8005968:	f015 0302 	ands.w	r3, r5, #2
 800596c:	9316      	str	r3, [sp, #88]	; 0x58
 800596e:	bf1e      	ittt	ne
 8005970:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8005972:	3302      	addne	r3, #2
 8005974:	930f      	strne	r3, [sp, #60]	; 0x3c
 8005976:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800597a:	9317      	str	r3, [sp, #92]	; 0x5c
 800597c:	d118      	bne.n	80059b0 <_svfprintf_r+0x588>
 800597e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005982:	1a9b      	subs	r3, r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	9310      	str	r3, [sp, #64]	; 0x40
 8005988:	dd12      	ble.n	80059b0 <_svfprintf_r+0x588>
 800598a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800598c:	2b10      	cmp	r3, #16
 800598e:	4bab      	ldr	r3, [pc, #684]	; (8005c3c <_svfprintf_r+0x814>)
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	f300 81d9 	bgt.w	8005d48 <_svfprintf_r+0x920>
 8005996:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005998:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800599e:	4413      	add	r3, r2
 80059a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80059a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059a4:	3301      	adds	r3, #1
 80059a6:	2b07      	cmp	r3, #7
 80059a8:	9322      	str	r3, [sp, #136]	; 0x88
 80059aa:	f300 81e6 	bgt.w	8005d7a <_svfprintf_r+0x952>
 80059ae:	3408      	adds	r4, #8
 80059b0:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80059b4:	b173      	cbz	r3, 80059d4 <_svfprintf_r+0x5ac>
 80059b6:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	2301      	movs	r3, #1
 80059be:	6063      	str	r3, [r4, #4]
 80059c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059c2:	3301      	adds	r3, #1
 80059c4:	9323      	str	r3, [sp, #140]	; 0x8c
 80059c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059c8:	3301      	adds	r3, #1
 80059ca:	2b07      	cmp	r3, #7
 80059cc:	9322      	str	r3, [sp, #136]	; 0x88
 80059ce:	f300 81de 	bgt.w	8005d8e <_svfprintf_r+0x966>
 80059d2:	3408      	adds	r4, #8
 80059d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059d6:	b16b      	cbz	r3, 80059f4 <_svfprintf_r+0x5cc>
 80059d8:	ab1a      	add	r3, sp, #104	; 0x68
 80059da:	6023      	str	r3, [r4, #0]
 80059dc:	2302      	movs	r3, #2
 80059de:	6063      	str	r3, [r4, #4]
 80059e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059e2:	3302      	adds	r3, #2
 80059e4:	9323      	str	r3, [sp, #140]	; 0x8c
 80059e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059e8:	3301      	adds	r3, #1
 80059ea:	2b07      	cmp	r3, #7
 80059ec:	9322      	str	r3, [sp, #136]	; 0x88
 80059ee:	f300 81d8 	bgt.w	8005da2 <_svfprintf_r+0x97a>
 80059f2:	3408      	adds	r4, #8
 80059f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d118      	bne.n	8005a2c <_svfprintf_r+0x604>
 80059fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	9310      	str	r3, [sp, #64]	; 0x40
 8005a04:	dd12      	ble.n	8005a2c <_svfprintf_r+0x604>
 8005a06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	4b8d      	ldr	r3, [pc, #564]	; (8005c40 <_svfprintf_r+0x818>)
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	f300 81d2 	bgt.w	8005db6 <_svfprintf_r+0x98e>
 8005a12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a16:	6063      	str	r3, [r4, #4]
 8005a18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a1a:	4413      	add	r3, r2
 8005a1c:	9323      	str	r3, [sp, #140]	; 0x8c
 8005a1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a20:	3301      	adds	r3, #1
 8005a22:	2b07      	cmp	r3, #7
 8005a24:	9322      	str	r3, [sp, #136]	; 0x88
 8005a26:	f300 81df 	bgt.w	8005de8 <_svfprintf_r+0x9c0>
 8005a2a:	3408      	adds	r4, #8
 8005a2c:	eba6 060b 	sub.w	r6, r6, fp
 8005a30:	2e00      	cmp	r6, #0
 8005a32:	dd0f      	ble.n	8005a54 <_svfprintf_r+0x62c>
 8005a34:	4b82      	ldr	r3, [pc, #520]	; (8005c40 <_svfprintf_r+0x818>)
 8005a36:	2e10      	cmp	r6, #16
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	f300 81df 	bgt.w	8005dfc <_svfprintf_r+0x9d4>
 8005a3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a40:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005a42:	3301      	adds	r3, #1
 8005a44:	6066      	str	r6, [r4, #4]
 8005a46:	2b07      	cmp	r3, #7
 8005a48:	4406      	add	r6, r0
 8005a4a:	9623      	str	r6, [sp, #140]	; 0x8c
 8005a4c:	9322      	str	r3, [sp, #136]	; 0x88
 8005a4e:	f300 81ec 	bgt.w	8005e2a <_svfprintf_r+0xa02>
 8005a52:	3408      	adds	r4, #8
 8005a54:	05eb      	lsls	r3, r5, #23
 8005a56:	f100 81f2 	bmi.w	8005e3e <_svfprintf_r+0xa16>
 8005a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a5c:	e884 0900 	stmia.w	r4, {r8, fp}
 8005a60:	445b      	add	r3, fp
 8005a62:	9323      	str	r3, [sp, #140]	; 0x8c
 8005a64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a66:	3301      	adds	r3, #1
 8005a68:	2b07      	cmp	r3, #7
 8005a6a:	9322      	str	r3, [sp, #136]	; 0x88
 8005a6c:	f340 8419 	ble.w	80062a2 <_svfprintf_r+0xe7a>
 8005a70:	aa21      	add	r2, sp, #132	; 0x84
 8005a72:	4649      	mov	r1, r9
 8005a74:	4650      	mov	r0, sl
 8005a76:	f002 f825 	bl	8007ac4 <__ssprint_r>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f040 8431 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005a80:	ac2e      	add	r4, sp, #184	; 0xb8
 8005a82:	076b      	lsls	r3, r5, #29
 8005a84:	f100 8410 	bmi.w	80062a8 <_svfprintf_r+0xe80>
 8005a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005a8e:	428a      	cmp	r2, r1
 8005a90:	bfac      	ite	ge
 8005a92:	189b      	addge	r3, r3, r2
 8005a94:	185b      	addlt	r3, r3, r1
 8005a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a9a:	b13b      	cbz	r3, 8005aac <_svfprintf_r+0x684>
 8005a9c:	aa21      	add	r2, sp, #132	; 0x84
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	4650      	mov	r0, sl
 8005aa2:	f002 f80f 	bl	8007ac4 <__ssprint_r>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f040 841b 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005aac:	2300      	movs	r3, #0
 8005aae:	9f08      	ldr	r7, [sp, #32]
 8005ab0:	9322      	str	r3, [sp, #136]	; 0x88
 8005ab2:	ac2e      	add	r4, sp, #184	; 0xb8
 8005ab4:	e4f2      	b.n	800549c <_svfprintf_r+0x74>
 8005ab6:	9b06      	ldr	r3, [sp, #24]
 8005ab8:	2b65      	cmp	r3, #101	; 0x65
 8005aba:	f77f af05 	ble.w	80058c8 <_svfprintf_r+0x4a0>
 8005abe:	9b06      	ldr	r3, [sp, #24]
 8005ac0:	2b66      	cmp	r3, #102	; 0x66
 8005ac2:	d124      	bne.n	8005b0e <_svfprintf_r+0x6e6>
 8005ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	dd19      	ble.n	8005afe <_svfprintf_r+0x6d6>
 8005aca:	f1bb 0f00 	cmp.w	fp, #0
 8005ace:	d101      	bne.n	8005ad4 <_svfprintf_r+0x6ac>
 8005ad0:	07ea      	lsls	r2, r5, #31
 8005ad2:	d502      	bpl.n	8005ada <_svfprintf_r+0x6b2>
 8005ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ad6:	4413      	add	r3, r2
 8005ad8:	445b      	add	r3, fp
 8005ada:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005adc:	469b      	mov	fp, r3
 8005ade:	e731      	b.n	8005944 <_svfprintf_r+0x51c>
 8005ae0:	460a      	mov	r2, r1
 8005ae2:	e707      	b.n	80058f4 <_svfprintf_r+0x4cc>
 8005ae4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8005aec:	e718      	b.n	8005920 <_svfprintf_r+0x4f8>
 8005aee:	2230      	movs	r2, #48	; 0x30
 8005af0:	4413      	add	r3, r2
 8005af2:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8005af6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8005afa:	a91e      	add	r1, sp, #120	; 0x78
 8005afc:	e714      	b.n	8005928 <_svfprintf_r+0x500>
 8005afe:	f1bb 0f00 	cmp.w	fp, #0
 8005b02:	d101      	bne.n	8005b08 <_svfprintf_r+0x6e0>
 8005b04:	07eb      	lsls	r3, r5, #31
 8005b06:	d515      	bpl.n	8005b34 <_svfprintf_r+0x70c>
 8005b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	e7e4      	b.n	8005ad8 <_svfprintf_r+0x6b0>
 8005b0e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005b10:	9b07      	ldr	r3, [sp, #28]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	db06      	blt.n	8005b24 <_svfprintf_r+0x6fc>
 8005b16:	07ef      	lsls	r7, r5, #31
 8005b18:	d50e      	bpl.n	8005b38 <_svfprintf_r+0x710>
 8005b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1c:	4413      	add	r3, r2
 8005b1e:	2267      	movs	r2, #103	; 0x67
 8005b20:	9206      	str	r2, [sp, #24]
 8005b22:	e7da      	b.n	8005ada <_svfprintf_r+0x6b2>
 8005b24:	9b07      	ldr	r3, [sp, #28]
 8005b26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b28:	2a00      	cmp	r2, #0
 8005b2a:	440b      	add	r3, r1
 8005b2c:	dcf7      	bgt.n	8005b1e <_svfprintf_r+0x6f6>
 8005b2e:	f1c2 0201 	rsb	r2, r2, #1
 8005b32:	e7f3      	b.n	8005b1c <_svfprintf_r+0x6f4>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e7d0      	b.n	8005ada <_svfprintf_r+0x6b2>
 8005b38:	4613      	mov	r3, r2
 8005b3a:	e7f0      	b.n	8005b1e <_svfprintf_r+0x6f6>
 8005b3c:	b10b      	cbz	r3, 8005b42 <_svfprintf_r+0x71a>
 8005b3e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005b42:	f015 0f20 	tst.w	r5, #32
 8005b46:	f107 0304 	add.w	r3, r7, #4
 8005b4a:	d008      	beq.n	8005b5e <_svfprintf_r+0x736>
 8005b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	17ce      	asrs	r6, r1, #31
 8005b52:	4608      	mov	r0, r1
 8005b54:	4631      	mov	r1, r6
 8005b56:	e9c2 0100 	strd	r0, r1, [r2]
 8005b5a:	461f      	mov	r7, r3
 8005b5c:	e49e      	b.n	800549c <_svfprintf_r+0x74>
 8005b5e:	06ee      	lsls	r6, r5, #27
 8005b60:	d503      	bpl.n	8005b6a <_svfprintf_r+0x742>
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b66:	6011      	str	r1, [r2, #0]
 8005b68:	e7f7      	b.n	8005b5a <_svfprintf_r+0x732>
 8005b6a:	0668      	lsls	r0, r5, #25
 8005b6c:	d5f9      	bpl.n	8005b62 <_svfprintf_r+0x73a>
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8005b74:	8011      	strh	r1, [r2, #0]
 8005b76:	e7f0      	b.n	8005b5a <_svfprintf_r+0x732>
 8005b78:	f045 0510 	orr.w	r5, r5, #16
 8005b7c:	f015 0320 	ands.w	r3, r5, #32
 8005b80:	d022      	beq.n	8005bc8 <_svfprintf_r+0x7a0>
 8005b82:	3707      	adds	r7, #7
 8005b84:	f027 0707 	bic.w	r7, r7, #7
 8005b88:	f107 0308 	add.w	r3, r7, #8
 8005b8c:	9308      	str	r3, [sp, #32]
 8005b8e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005b92:	2300      	movs	r3, #0
 8005b94:	2200      	movs	r2, #0
 8005b96:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005b9a:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005b9e:	f000 83db 	beq.w	8006358 <_svfprintf_r+0xf30>
 8005ba2:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8005ba6:	920f      	str	r2, [sp, #60]	; 0x3c
 8005ba8:	ea56 0207 	orrs.w	r2, r6, r7
 8005bac:	f040 83d9 	bne.w	8006362 <_svfprintf_r+0xf3a>
 8005bb0:	f1bb 0f00 	cmp.w	fp, #0
 8005bb4:	f000 80aa 	beq.w	8005d0c <_svfprintf_r+0x8e4>
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d076      	beq.n	8005caa <_svfprintf_r+0x882>
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	f000 8091 	beq.w	8005ce4 <_svfprintf_r+0x8bc>
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	2700      	movs	r7, #0
 8005bc6:	e3d2      	b.n	800636e <_svfprintf_r+0xf46>
 8005bc8:	1d3a      	adds	r2, r7, #4
 8005bca:	f015 0110 	ands.w	r1, r5, #16
 8005bce:	9208      	str	r2, [sp, #32]
 8005bd0:	d002      	beq.n	8005bd8 <_svfprintf_r+0x7b0>
 8005bd2:	683e      	ldr	r6, [r7, #0]
 8005bd4:	2700      	movs	r7, #0
 8005bd6:	e7dd      	b.n	8005b94 <_svfprintf_r+0x76c>
 8005bd8:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005bdc:	d0f9      	beq.n	8005bd2 <_svfprintf_r+0x7aa>
 8005bde:	883e      	ldrh	r6, [r7, #0]
 8005be0:	2700      	movs	r7, #0
 8005be2:	e7d6      	b.n	8005b92 <_svfprintf_r+0x76a>
 8005be4:	1d3b      	adds	r3, r7, #4
 8005be6:	9308      	str	r3, [sp, #32]
 8005be8:	2330      	movs	r3, #48	; 0x30
 8005bea:	2278      	movs	r2, #120	; 0x78
 8005bec:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8005bf0:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <_svfprintf_r+0x81c>)
 8005bf2:	683e      	ldr	r6, [r7, #0]
 8005bf4:	9315      	str	r3, [sp, #84]	; 0x54
 8005bf6:	2700      	movs	r7, #0
 8005bf8:	f045 0502 	orr.w	r5, r5, #2
 8005bfc:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8005c00:	2302      	movs	r3, #2
 8005c02:	9206      	str	r2, [sp, #24]
 8005c04:	e7c6      	b.n	8005b94 <_svfprintf_r+0x76c>
 8005c06:	2600      	movs	r6, #0
 8005c08:	1d3b      	adds	r3, r7, #4
 8005c0a:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005c0e:	9308      	str	r3, [sp, #32]
 8005c10:	f8d7 8000 	ldr.w	r8, [r7]
 8005c14:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005c18:	d00a      	beq.n	8005c30 <_svfprintf_r+0x808>
 8005c1a:	465a      	mov	r2, fp
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4640      	mov	r0, r8
 8005c20:	f001 fc54 	bl	80074cc <memchr>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	f000 808d 	beq.w	8005d44 <_svfprintf_r+0x91c>
 8005c2a:	eba0 0b08 	sub.w	fp, r0, r8
 8005c2e:	e5c4      	b.n	80057ba <_svfprintf_r+0x392>
 8005c30:	4640      	mov	r0, r8
 8005c32:	f7fa fafd 	bl	8000230 <strlen>
 8005c36:	4683      	mov	fp, r0
 8005c38:	e5bf      	b.n	80057ba <_svfprintf_r+0x392>
 8005c3a:	bf00      	nop
 8005c3c:	08008a38 	.word	0x08008a38
 8005c40:	08008a48 	.word	0x08008a48
 8005c44:	08008a25 	.word	0x08008a25
 8005c48:	f045 0510 	orr.w	r5, r5, #16
 8005c4c:	06a9      	lsls	r1, r5, #26
 8005c4e:	d509      	bpl.n	8005c64 <_svfprintf_r+0x83c>
 8005c50:	3707      	adds	r7, #7
 8005c52:	f027 0707 	bic.w	r7, r7, #7
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	9308      	str	r3, [sp, #32]
 8005c5c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005c60:	2301      	movs	r3, #1
 8005c62:	e797      	b.n	8005b94 <_svfprintf_r+0x76c>
 8005c64:	1d3b      	adds	r3, r7, #4
 8005c66:	f015 0f10 	tst.w	r5, #16
 8005c6a:	9308      	str	r3, [sp, #32]
 8005c6c:	d001      	beq.n	8005c72 <_svfprintf_r+0x84a>
 8005c6e:	683e      	ldr	r6, [r7, #0]
 8005c70:	e002      	b.n	8005c78 <_svfprintf_r+0x850>
 8005c72:	066a      	lsls	r2, r5, #25
 8005c74:	d5fb      	bpl.n	8005c6e <_svfprintf_r+0x846>
 8005c76:	883e      	ldrh	r6, [r7, #0]
 8005c78:	2700      	movs	r7, #0
 8005c7a:	e7f1      	b.n	8005c60 <_svfprintf_r+0x838>
 8005c7c:	b10b      	cbz	r3, 8005c82 <_svfprintf_r+0x85a>
 8005c7e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005c82:	4ba3      	ldr	r3, [pc, #652]	; (8005f10 <_svfprintf_r+0xae8>)
 8005c84:	e4c5      	b.n	8005612 <_svfprintf_r+0x1ea>
 8005c86:	1d3b      	adds	r3, r7, #4
 8005c88:	f015 0f10 	tst.w	r5, #16
 8005c8c:	9308      	str	r3, [sp, #32]
 8005c8e:	d001      	beq.n	8005c94 <_svfprintf_r+0x86c>
 8005c90:	683e      	ldr	r6, [r7, #0]
 8005c92:	e002      	b.n	8005c9a <_svfprintf_r+0x872>
 8005c94:	066e      	lsls	r6, r5, #25
 8005c96:	d5fb      	bpl.n	8005c90 <_svfprintf_r+0x868>
 8005c98:	883e      	ldrh	r6, [r7, #0]
 8005c9a:	2700      	movs	r7, #0
 8005c9c:	e4c5      	b.n	800562a <_svfprintf_r+0x202>
 8005c9e:	4643      	mov	r3, r8
 8005ca0:	e366      	b.n	8006370 <_svfprintf_r+0xf48>
 8005ca2:	2f00      	cmp	r7, #0
 8005ca4:	bf08      	it	eq
 8005ca6:	2e0a      	cmpeq	r6, #10
 8005ca8:	d205      	bcs.n	8005cb6 <_svfprintf_r+0x88e>
 8005caa:	3630      	adds	r6, #48	; 0x30
 8005cac:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8005cb0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005cb4:	e377      	b.n	80063a6 <_svfprintf_r+0xf7e>
 8005cb6:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005cba:	4630      	mov	r0, r6
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	220a      	movs	r2, #10
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f7fa ff4d 	bl	8000b60 <__aeabi_uldivmod>
 8005cc6:	3230      	adds	r2, #48	; 0x30
 8005cc8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4630      	mov	r0, r6
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	220a      	movs	r2, #10
 8005cd4:	f7fa ff44 	bl	8000b60 <__aeabi_uldivmod>
 8005cd8:	4606      	mov	r6, r0
 8005cda:	460f      	mov	r7, r1
 8005cdc:	ea56 0307 	orrs.w	r3, r6, r7
 8005ce0:	d1eb      	bne.n	8005cba <_svfprintf_r+0x892>
 8005ce2:	e360      	b.n	80063a6 <_svfprintf_r+0xf7e>
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	2700      	movs	r7, #0
 8005ce8:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005cec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cee:	f006 030f 	and.w	r3, r6, #15
 8005cf2:	5cd3      	ldrb	r3, [r2, r3]
 8005cf4:	093a      	lsrs	r2, r7, #4
 8005cf6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005cfa:	0933      	lsrs	r3, r6, #4
 8005cfc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005d00:	461e      	mov	r6, r3
 8005d02:	4617      	mov	r7, r2
 8005d04:	ea56 0307 	orrs.w	r3, r6, r7
 8005d08:	d1f0      	bne.n	8005cec <_svfprintf_r+0x8c4>
 8005d0a:	e34c      	b.n	80063a6 <_svfprintf_r+0xf7e>
 8005d0c:	b93b      	cbnz	r3, 8005d1e <_svfprintf_r+0x8f6>
 8005d0e:	07ea      	lsls	r2, r5, #31
 8005d10:	d505      	bpl.n	8005d1e <_svfprintf_r+0x8f6>
 8005d12:	2330      	movs	r3, #48	; 0x30
 8005d14:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8005d18:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005d1c:	e343      	b.n	80063a6 <_svfprintf_r+0xf7e>
 8005d1e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8005d22:	e340      	b.n	80063a6 <_svfprintf_r+0xf7e>
 8005d24:	b10b      	cbz	r3, 8005d2a <_svfprintf_r+0x902>
 8005d26:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005d2a:	9b06      	ldr	r3, [sp, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 82f7 	beq.w	8006320 <_svfprintf_r+0xef8>
 8005d32:	2600      	movs	r6, #0
 8005d34:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005d38:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005d3c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8005d40:	9708      	str	r7, [sp, #32]
 8005d42:	e4e3      	b.n	800570c <_svfprintf_r+0x2e4>
 8005d44:	4606      	mov	r6, r0
 8005d46:	e538      	b.n	80057ba <_svfprintf_r+0x392>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	6063      	str	r3, [r4, #4]
 8005d4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d4e:	3310      	adds	r3, #16
 8005d50:	9323      	str	r3, [sp, #140]	; 0x8c
 8005d52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d54:	3301      	adds	r3, #1
 8005d56:	2b07      	cmp	r3, #7
 8005d58:	9322      	str	r3, [sp, #136]	; 0x88
 8005d5a:	dc04      	bgt.n	8005d66 <_svfprintf_r+0x93e>
 8005d5c:	3408      	adds	r4, #8
 8005d5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d60:	3b10      	subs	r3, #16
 8005d62:	9310      	str	r3, [sp, #64]	; 0x40
 8005d64:	e611      	b.n	800598a <_svfprintf_r+0x562>
 8005d66:	aa21      	add	r2, sp, #132	; 0x84
 8005d68:	4649      	mov	r1, r9
 8005d6a:	4650      	mov	r0, sl
 8005d6c:	f001 feaa 	bl	8007ac4 <__ssprint_r>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	f040 82b6 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005d76:	ac2e      	add	r4, sp, #184	; 0xb8
 8005d78:	e7f1      	b.n	8005d5e <_svfprintf_r+0x936>
 8005d7a:	aa21      	add	r2, sp, #132	; 0x84
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	4650      	mov	r0, sl
 8005d80:	f001 fea0 	bl	8007ac4 <__ssprint_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	f040 82ac 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005d8a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005d8c:	e610      	b.n	80059b0 <_svfprintf_r+0x588>
 8005d8e:	aa21      	add	r2, sp, #132	; 0x84
 8005d90:	4649      	mov	r1, r9
 8005d92:	4650      	mov	r0, sl
 8005d94:	f001 fe96 	bl	8007ac4 <__ssprint_r>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	f040 82a2 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005d9e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005da0:	e618      	b.n	80059d4 <_svfprintf_r+0x5ac>
 8005da2:	aa21      	add	r2, sp, #132	; 0x84
 8005da4:	4649      	mov	r1, r9
 8005da6:	4650      	mov	r0, sl
 8005da8:	f001 fe8c 	bl	8007ac4 <__ssprint_r>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	f040 8298 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005db2:	ac2e      	add	r4, sp, #184	; 0xb8
 8005db4:	e61e      	b.n	80059f4 <_svfprintf_r+0x5cc>
 8005db6:	2310      	movs	r3, #16
 8005db8:	6063      	str	r3, [r4, #4]
 8005dba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	9323      	str	r3, [sp, #140]	; 0x8c
 8005dc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	2b07      	cmp	r3, #7
 8005dc6:	9322      	str	r3, [sp, #136]	; 0x88
 8005dc8:	dc04      	bgt.n	8005dd4 <_svfprintf_r+0x9ac>
 8005dca:	3408      	adds	r4, #8
 8005dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005dce:	3b10      	subs	r3, #16
 8005dd0:	9310      	str	r3, [sp, #64]	; 0x40
 8005dd2:	e618      	b.n	8005a06 <_svfprintf_r+0x5de>
 8005dd4:	aa21      	add	r2, sp, #132	; 0x84
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	4650      	mov	r0, sl
 8005dda:	f001 fe73 	bl	8007ac4 <__ssprint_r>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	f040 827f 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005de4:	ac2e      	add	r4, sp, #184	; 0xb8
 8005de6:	e7f1      	b.n	8005dcc <_svfprintf_r+0x9a4>
 8005de8:	aa21      	add	r2, sp, #132	; 0x84
 8005dea:	4649      	mov	r1, r9
 8005dec:	4650      	mov	r0, sl
 8005dee:	f001 fe69 	bl	8007ac4 <__ssprint_r>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	f040 8275 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005df8:	ac2e      	add	r4, sp, #184	; 0xb8
 8005dfa:	e617      	b.n	8005a2c <_svfprintf_r+0x604>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	6063      	str	r3, [r4, #4]
 8005e00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e02:	3310      	adds	r3, #16
 8005e04:	9323      	str	r3, [sp, #140]	; 0x8c
 8005e06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e08:	3301      	adds	r3, #1
 8005e0a:	2b07      	cmp	r3, #7
 8005e0c:	9322      	str	r3, [sp, #136]	; 0x88
 8005e0e:	dc02      	bgt.n	8005e16 <_svfprintf_r+0x9ee>
 8005e10:	3408      	adds	r4, #8
 8005e12:	3e10      	subs	r6, #16
 8005e14:	e60e      	b.n	8005a34 <_svfprintf_r+0x60c>
 8005e16:	aa21      	add	r2, sp, #132	; 0x84
 8005e18:	4649      	mov	r1, r9
 8005e1a:	4650      	mov	r0, sl
 8005e1c:	f001 fe52 	bl	8007ac4 <__ssprint_r>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	f040 825e 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005e26:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e28:	e7f3      	b.n	8005e12 <_svfprintf_r+0x9ea>
 8005e2a:	aa21      	add	r2, sp, #132	; 0x84
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	4650      	mov	r0, sl
 8005e30:	f001 fe48 	bl	8007ac4 <__ssprint_r>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	f040 8254 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005e3a:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e3c:	e60a      	b.n	8005a54 <_svfprintf_r+0x62c>
 8005e3e:	9b06      	ldr	r3, [sp, #24]
 8005e40:	2b65      	cmp	r3, #101	; 0x65
 8005e42:	f340 81a9 	ble.w	8006198 <_svfprintf_r+0xd70>
 8005e46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005e4e:	f7fa fe17 	bl	8000a80 <__aeabi_dcmpeq>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d062      	beq.n	8005f1c <_svfprintf_r+0xaf4>
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <_svfprintf_r+0xaec>)
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	6063      	str	r3, [r4, #4]
 8005e5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e60:	3301      	adds	r3, #1
 8005e62:	9323      	str	r3, [sp, #140]	; 0x8c
 8005e64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e66:	3301      	adds	r3, #1
 8005e68:	2b07      	cmp	r3, #7
 8005e6a:	9322      	str	r3, [sp, #136]	; 0x88
 8005e6c:	dc25      	bgt.n	8005eba <_svfprintf_r+0xa92>
 8005e6e:	3408      	adds	r4, #8
 8005e70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e72:	9a07      	ldr	r2, [sp, #28]
 8005e74:	4293      	cmp	r3, r2
 8005e76:	db02      	blt.n	8005e7e <_svfprintf_r+0xa56>
 8005e78:	07ee      	lsls	r6, r5, #31
 8005e7a:	f57f ae02 	bpl.w	8005a82 <_svfprintf_r+0x65a>
 8005e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e8a:	4413      	add	r3, r2
 8005e8c:	9323      	str	r3, [sp, #140]	; 0x8c
 8005e8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e90:	3301      	adds	r3, #1
 8005e92:	2b07      	cmp	r3, #7
 8005e94:	9322      	str	r3, [sp, #136]	; 0x88
 8005e96:	dc1a      	bgt.n	8005ece <_svfprintf_r+0xaa6>
 8005e98:	3408      	adds	r4, #8
 8005e9a:	9b07      	ldr	r3, [sp, #28]
 8005e9c:	1e5e      	subs	r6, r3, #1
 8005e9e:	2e00      	cmp	r6, #0
 8005ea0:	f77f adef 	ble.w	8005a82 <_svfprintf_r+0x65a>
 8005ea4:	f04f 0810 	mov.w	r8, #16
 8005ea8:	4f1b      	ldr	r7, [pc, #108]	; (8005f18 <_svfprintf_r+0xaf0>)
 8005eaa:	2e10      	cmp	r6, #16
 8005eac:	6027      	str	r7, [r4, #0]
 8005eae:	dc18      	bgt.n	8005ee2 <_svfprintf_r+0xaba>
 8005eb0:	6066      	str	r6, [r4, #4]
 8005eb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eb4:	441e      	add	r6, r3
 8005eb6:	9623      	str	r6, [sp, #140]	; 0x8c
 8005eb8:	e5d4      	b.n	8005a64 <_svfprintf_r+0x63c>
 8005eba:	aa21      	add	r2, sp, #132	; 0x84
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4650      	mov	r0, sl
 8005ec0:	f001 fe00 	bl	8007ac4 <__ssprint_r>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	f040 820c 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005eca:	ac2e      	add	r4, sp, #184	; 0xb8
 8005ecc:	e7d0      	b.n	8005e70 <_svfprintf_r+0xa48>
 8005ece:	aa21      	add	r2, sp, #132	; 0x84
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	4650      	mov	r0, sl
 8005ed4:	f001 fdf6 	bl	8007ac4 <__ssprint_r>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	f040 8202 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005ede:	ac2e      	add	r4, sp, #184	; 0xb8
 8005ee0:	e7db      	b.n	8005e9a <_svfprintf_r+0xa72>
 8005ee2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ee4:	f8c4 8004 	str.w	r8, [r4, #4]
 8005ee8:	3310      	adds	r3, #16
 8005eea:	9323      	str	r3, [sp, #140]	; 0x8c
 8005eec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eee:	3301      	adds	r3, #1
 8005ef0:	2b07      	cmp	r3, #7
 8005ef2:	9322      	str	r3, [sp, #136]	; 0x88
 8005ef4:	dc02      	bgt.n	8005efc <_svfprintf_r+0xad4>
 8005ef6:	3408      	adds	r4, #8
 8005ef8:	3e10      	subs	r6, #16
 8005efa:	e7d6      	b.n	8005eaa <_svfprintf_r+0xa82>
 8005efc:	aa21      	add	r2, sp, #132	; 0x84
 8005efe:	4649      	mov	r1, r9
 8005f00:	4650      	mov	r0, sl
 8005f02:	f001 fddf 	bl	8007ac4 <__ssprint_r>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	f040 81eb 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005f0c:	ac2e      	add	r4, sp, #184	; 0xb8
 8005f0e:	e7f3      	b.n	8005ef8 <_svfprintf_r+0xad0>
 8005f10:	08008a25 	.word	0x08008a25
 8005f14:	08008a36 	.word	0x08008a36
 8005f18:	08008a48 	.word	0x08008a48
 8005f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dc7a      	bgt.n	8006018 <_svfprintf_r+0xbf0>
 8005f22:	4b9b      	ldr	r3, [pc, #620]	; (8006190 <_svfprintf_r+0xd68>)
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	2301      	movs	r3, #1
 8005f28:	6063      	str	r3, [r4, #4]
 8005f2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f32:	3301      	adds	r3, #1
 8005f34:	2b07      	cmp	r3, #7
 8005f36:	9322      	str	r3, [sp, #136]	; 0x88
 8005f38:	dc44      	bgt.n	8005fc4 <_svfprintf_r+0xb9c>
 8005f3a:	3408      	adds	r4, #8
 8005f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f3e:	b923      	cbnz	r3, 8005f4a <_svfprintf_r+0xb22>
 8005f40:	9b07      	ldr	r3, [sp, #28]
 8005f42:	b913      	cbnz	r3, 8005f4a <_svfprintf_r+0xb22>
 8005f44:	07e8      	lsls	r0, r5, #31
 8005f46:	f57f ad9c 	bpl.w	8005a82 <_svfprintf_r+0x65a>
 8005f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f52:	6063      	str	r3, [r4, #4]
 8005f54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f56:	4413      	add	r3, r2
 8005f58:	9323      	str	r3, [sp, #140]	; 0x8c
 8005f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	2b07      	cmp	r3, #7
 8005f60:	9322      	str	r3, [sp, #136]	; 0x88
 8005f62:	dc39      	bgt.n	8005fd8 <_svfprintf_r+0xbb0>
 8005f64:	f104 0308 	add.w	r3, r4, #8
 8005f68:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005f6a:	2e00      	cmp	r6, #0
 8005f6c:	da19      	bge.n	8005fa2 <_svfprintf_r+0xb7a>
 8005f6e:	2410      	movs	r4, #16
 8005f70:	4f88      	ldr	r7, [pc, #544]	; (8006194 <_svfprintf_r+0xd6c>)
 8005f72:	4276      	negs	r6, r6
 8005f74:	2e10      	cmp	r6, #16
 8005f76:	601f      	str	r7, [r3, #0]
 8005f78:	dc38      	bgt.n	8005fec <_svfprintf_r+0xbc4>
 8005f7a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005f7c:	605e      	str	r6, [r3, #4]
 8005f7e:	4416      	add	r6, r2
 8005f80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f82:	9623      	str	r6, [sp, #140]	; 0x8c
 8005f84:	3201      	adds	r2, #1
 8005f86:	2a07      	cmp	r2, #7
 8005f88:	f103 0308 	add.w	r3, r3, #8
 8005f8c:	9222      	str	r2, [sp, #136]	; 0x88
 8005f8e:	dd08      	ble.n	8005fa2 <_svfprintf_r+0xb7a>
 8005f90:	aa21      	add	r2, sp, #132	; 0x84
 8005f92:	4649      	mov	r1, r9
 8005f94:	4650      	mov	r0, sl
 8005f96:	f001 fd95 	bl	8007ac4 <__ssprint_r>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	f040 81a1 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005fa0:	ab2e      	add	r3, sp, #184	; 0xb8
 8005fa2:	9a07      	ldr	r2, [sp, #28]
 8005fa4:	9907      	ldr	r1, [sp, #28]
 8005fa6:	605a      	str	r2, [r3, #4]
 8005fa8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005faa:	f8c3 8000 	str.w	r8, [r3]
 8005fae:	440a      	add	r2, r1
 8005fb0:	9223      	str	r2, [sp, #140]	; 0x8c
 8005fb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005fb4:	3201      	adds	r2, #1
 8005fb6:	2a07      	cmp	r2, #7
 8005fb8:	9222      	str	r2, [sp, #136]	; 0x88
 8005fba:	f73f ad59 	bgt.w	8005a70 <_svfprintf_r+0x648>
 8005fbe:	f103 0408 	add.w	r4, r3, #8
 8005fc2:	e55e      	b.n	8005a82 <_svfprintf_r+0x65a>
 8005fc4:	aa21      	add	r2, sp, #132	; 0x84
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	4650      	mov	r0, sl
 8005fca:	f001 fd7b 	bl	8007ac4 <__ssprint_r>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	f040 8187 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005fd4:	ac2e      	add	r4, sp, #184	; 0xb8
 8005fd6:	e7b1      	b.n	8005f3c <_svfprintf_r+0xb14>
 8005fd8:	aa21      	add	r2, sp, #132	; 0x84
 8005fda:	4649      	mov	r1, r9
 8005fdc:	4650      	mov	r0, sl
 8005fde:	f001 fd71 	bl	8007ac4 <__ssprint_r>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	f040 817d 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8005fe8:	ab2e      	add	r3, sp, #184	; 0xb8
 8005fea:	e7bd      	b.n	8005f68 <_svfprintf_r+0xb40>
 8005fec:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005fee:	605c      	str	r4, [r3, #4]
 8005ff0:	3210      	adds	r2, #16
 8005ff2:	9223      	str	r2, [sp, #140]	; 0x8c
 8005ff4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ff6:	3201      	adds	r2, #1
 8005ff8:	2a07      	cmp	r2, #7
 8005ffa:	9222      	str	r2, [sp, #136]	; 0x88
 8005ffc:	dc02      	bgt.n	8006004 <_svfprintf_r+0xbdc>
 8005ffe:	3308      	adds	r3, #8
 8006000:	3e10      	subs	r6, #16
 8006002:	e7b7      	b.n	8005f74 <_svfprintf_r+0xb4c>
 8006004:	aa21      	add	r2, sp, #132	; 0x84
 8006006:	4649      	mov	r1, r9
 8006008:	4650      	mov	r0, sl
 800600a:	f001 fd5b 	bl	8007ac4 <__ssprint_r>
 800600e:	2800      	cmp	r0, #0
 8006010:	f040 8167 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8006014:	ab2e      	add	r3, sp, #184	; 0xb8
 8006016:	e7f3      	b.n	8006000 <_svfprintf_r+0xbd8>
 8006018:	9b07      	ldr	r3, [sp, #28]
 800601a:	42bb      	cmp	r3, r7
 800601c:	bfa8      	it	ge
 800601e:	463b      	movge	r3, r7
 8006020:	2b00      	cmp	r3, #0
 8006022:	461e      	mov	r6, r3
 8006024:	dd0b      	ble.n	800603e <_svfprintf_r+0xc16>
 8006026:	6063      	str	r3, [r4, #4]
 8006028:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800602a:	f8c4 8000 	str.w	r8, [r4]
 800602e:	4433      	add	r3, r6
 8006030:	9323      	str	r3, [sp, #140]	; 0x8c
 8006032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006034:	3301      	adds	r3, #1
 8006036:	2b07      	cmp	r3, #7
 8006038:	9322      	str	r3, [sp, #136]	; 0x88
 800603a:	dc5f      	bgt.n	80060fc <_svfprintf_r+0xcd4>
 800603c:	3408      	adds	r4, #8
 800603e:	2e00      	cmp	r6, #0
 8006040:	bfb4      	ite	lt
 8006042:	463e      	movlt	r6, r7
 8006044:	1bbe      	subge	r6, r7, r6
 8006046:	2e00      	cmp	r6, #0
 8006048:	dd0f      	ble.n	800606a <_svfprintf_r+0xc42>
 800604a:	f8df b148 	ldr.w	fp, [pc, #328]	; 8006194 <_svfprintf_r+0xd6c>
 800604e:	2e10      	cmp	r6, #16
 8006050:	f8c4 b000 	str.w	fp, [r4]
 8006054:	dc5c      	bgt.n	8006110 <_svfprintf_r+0xce8>
 8006056:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006058:	6066      	str	r6, [r4, #4]
 800605a:	441e      	add	r6, r3
 800605c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800605e:	9623      	str	r6, [sp, #140]	; 0x8c
 8006060:	3301      	adds	r3, #1
 8006062:	2b07      	cmp	r3, #7
 8006064:	9322      	str	r3, [sp, #136]	; 0x88
 8006066:	dc6a      	bgt.n	800613e <_svfprintf_r+0xd16>
 8006068:	3408      	adds	r4, #8
 800606a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800606c:	9a07      	ldr	r2, [sp, #28]
 800606e:	4293      	cmp	r3, r2
 8006070:	db01      	blt.n	8006076 <_svfprintf_r+0xc4e>
 8006072:	07e9      	lsls	r1, r5, #31
 8006074:	d50d      	bpl.n	8006092 <_svfprintf_r+0xc6a>
 8006076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800607e:	6063      	str	r3, [r4, #4]
 8006080:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006082:	4413      	add	r3, r2
 8006084:	9323      	str	r3, [sp, #140]	; 0x8c
 8006086:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006088:	3301      	adds	r3, #1
 800608a:	2b07      	cmp	r3, #7
 800608c:	9322      	str	r3, [sp, #136]	; 0x88
 800608e:	dc60      	bgt.n	8006152 <_svfprintf_r+0xd2a>
 8006090:	3408      	adds	r4, #8
 8006092:	9b07      	ldr	r3, [sp, #28]
 8006094:	9a07      	ldr	r2, [sp, #28]
 8006096:	1bde      	subs	r6, r3, r7
 8006098:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	429e      	cmp	r6, r3
 800609e:	bfa8      	it	ge
 80060a0:	461e      	movge	r6, r3
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	dd0b      	ble.n	80060be <_svfprintf_r+0xc96>
 80060a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060a8:	4447      	add	r7, r8
 80060aa:	4433      	add	r3, r6
 80060ac:	9323      	str	r3, [sp, #140]	; 0x8c
 80060ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060b0:	6027      	str	r7, [r4, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	2b07      	cmp	r3, #7
 80060b6:	6066      	str	r6, [r4, #4]
 80060b8:	9322      	str	r3, [sp, #136]	; 0x88
 80060ba:	dc54      	bgt.n	8006166 <_svfprintf_r+0xd3e>
 80060bc:	3408      	adds	r4, #8
 80060be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060c0:	9a07      	ldr	r2, [sp, #28]
 80060c2:	2e00      	cmp	r6, #0
 80060c4:	eba2 0303 	sub.w	r3, r2, r3
 80060c8:	bfb4      	ite	lt
 80060ca:	461e      	movlt	r6, r3
 80060cc:	1b9e      	subge	r6, r3, r6
 80060ce:	2e00      	cmp	r6, #0
 80060d0:	f77f acd7 	ble.w	8005a82 <_svfprintf_r+0x65a>
 80060d4:	f04f 0810 	mov.w	r8, #16
 80060d8:	4f2e      	ldr	r7, [pc, #184]	; (8006194 <_svfprintf_r+0xd6c>)
 80060da:	2e10      	cmp	r6, #16
 80060dc:	6027      	str	r7, [r4, #0]
 80060de:	f77f aee7 	ble.w	8005eb0 <_svfprintf_r+0xa88>
 80060e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060e4:	f8c4 8004 	str.w	r8, [r4, #4]
 80060e8:	3310      	adds	r3, #16
 80060ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80060ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ee:	3301      	adds	r3, #1
 80060f0:	2b07      	cmp	r3, #7
 80060f2:	9322      	str	r3, [sp, #136]	; 0x88
 80060f4:	dc41      	bgt.n	800617a <_svfprintf_r+0xd52>
 80060f6:	3408      	adds	r4, #8
 80060f8:	3e10      	subs	r6, #16
 80060fa:	e7ee      	b.n	80060da <_svfprintf_r+0xcb2>
 80060fc:	aa21      	add	r2, sp, #132	; 0x84
 80060fe:	4649      	mov	r1, r9
 8006100:	4650      	mov	r0, sl
 8006102:	f001 fcdf 	bl	8007ac4 <__ssprint_r>
 8006106:	2800      	cmp	r0, #0
 8006108:	f040 80eb 	bne.w	80062e2 <_svfprintf_r+0xeba>
 800610c:	ac2e      	add	r4, sp, #184	; 0xb8
 800610e:	e796      	b.n	800603e <_svfprintf_r+0xc16>
 8006110:	2310      	movs	r3, #16
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006116:	3310      	adds	r3, #16
 8006118:	9323      	str	r3, [sp, #140]	; 0x8c
 800611a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800611c:	3301      	adds	r3, #1
 800611e:	2b07      	cmp	r3, #7
 8006120:	9322      	str	r3, [sp, #136]	; 0x88
 8006122:	dc02      	bgt.n	800612a <_svfprintf_r+0xd02>
 8006124:	3408      	adds	r4, #8
 8006126:	3e10      	subs	r6, #16
 8006128:	e791      	b.n	800604e <_svfprintf_r+0xc26>
 800612a:	aa21      	add	r2, sp, #132	; 0x84
 800612c:	4649      	mov	r1, r9
 800612e:	4650      	mov	r0, sl
 8006130:	f001 fcc8 	bl	8007ac4 <__ssprint_r>
 8006134:	2800      	cmp	r0, #0
 8006136:	f040 80d4 	bne.w	80062e2 <_svfprintf_r+0xeba>
 800613a:	ac2e      	add	r4, sp, #184	; 0xb8
 800613c:	e7f3      	b.n	8006126 <_svfprintf_r+0xcfe>
 800613e:	aa21      	add	r2, sp, #132	; 0x84
 8006140:	4649      	mov	r1, r9
 8006142:	4650      	mov	r0, sl
 8006144:	f001 fcbe 	bl	8007ac4 <__ssprint_r>
 8006148:	2800      	cmp	r0, #0
 800614a:	f040 80ca 	bne.w	80062e2 <_svfprintf_r+0xeba>
 800614e:	ac2e      	add	r4, sp, #184	; 0xb8
 8006150:	e78b      	b.n	800606a <_svfprintf_r+0xc42>
 8006152:	aa21      	add	r2, sp, #132	; 0x84
 8006154:	4649      	mov	r1, r9
 8006156:	4650      	mov	r0, sl
 8006158:	f001 fcb4 	bl	8007ac4 <__ssprint_r>
 800615c:	2800      	cmp	r0, #0
 800615e:	f040 80c0 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8006162:	ac2e      	add	r4, sp, #184	; 0xb8
 8006164:	e795      	b.n	8006092 <_svfprintf_r+0xc6a>
 8006166:	aa21      	add	r2, sp, #132	; 0x84
 8006168:	4649      	mov	r1, r9
 800616a:	4650      	mov	r0, sl
 800616c:	f001 fcaa 	bl	8007ac4 <__ssprint_r>
 8006170:	2800      	cmp	r0, #0
 8006172:	f040 80b6 	bne.w	80062e2 <_svfprintf_r+0xeba>
 8006176:	ac2e      	add	r4, sp, #184	; 0xb8
 8006178:	e7a1      	b.n	80060be <_svfprintf_r+0xc96>
 800617a:	aa21      	add	r2, sp, #132	; 0x84
 800617c:	4649      	mov	r1, r9
 800617e:	4650      	mov	r0, sl
 8006180:	f001 fca0 	bl	8007ac4 <__ssprint_r>
 8006184:	2800      	cmp	r0, #0
 8006186:	f040 80ac 	bne.w	80062e2 <_svfprintf_r+0xeba>
 800618a:	ac2e      	add	r4, sp, #184	; 0xb8
 800618c:	e7b4      	b.n	80060f8 <_svfprintf_r+0xcd0>
 800618e:	bf00      	nop
 8006190:	08008a36 	.word	0x08008a36
 8006194:	08008a48 	.word	0x08008a48
 8006198:	9b07      	ldr	r3, [sp, #28]
 800619a:	2b01      	cmp	r3, #1
 800619c:	dc01      	bgt.n	80061a2 <_svfprintf_r+0xd7a>
 800619e:	07ea      	lsls	r2, r5, #31
 80061a0:	d576      	bpl.n	8006290 <_svfprintf_r+0xe68>
 80061a2:	2301      	movs	r3, #1
 80061a4:	6063      	str	r3, [r4, #4]
 80061a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061a8:	f8c4 8000 	str.w	r8, [r4]
 80061ac:	3301      	adds	r3, #1
 80061ae:	9323      	str	r3, [sp, #140]	; 0x8c
 80061b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061b2:	3301      	adds	r3, #1
 80061b4:	2b07      	cmp	r3, #7
 80061b6:	9322      	str	r3, [sp, #136]	; 0x88
 80061b8:	dc36      	bgt.n	8006228 <_svfprintf_r+0xe00>
 80061ba:	3408      	adds	r4, #8
 80061bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c4:	6063      	str	r3, [r4, #4]
 80061c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061c8:	4413      	add	r3, r2
 80061ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80061cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ce:	3301      	adds	r3, #1
 80061d0:	2b07      	cmp	r3, #7
 80061d2:	9322      	str	r3, [sp, #136]	; 0x88
 80061d4:	dc31      	bgt.n	800623a <_svfprintf_r+0xe12>
 80061d6:	3408      	adds	r4, #8
 80061d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80061de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80061e0:	f7fa fc4e 	bl	8000a80 <__aeabi_dcmpeq>
 80061e4:	9b07      	ldr	r3, [sp, #28]
 80061e6:	1e5e      	subs	r6, r3, #1
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d12f      	bne.n	800624c <_svfprintf_r+0xe24>
 80061ec:	f108 0301 	add.w	r3, r8, #1
 80061f0:	e884 0048 	stmia.w	r4, {r3, r6}
 80061f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061f6:	9a07      	ldr	r2, [sp, #28]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80061fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006200:	3301      	adds	r3, #1
 8006202:	2b07      	cmp	r3, #7
 8006204:	9322      	str	r3, [sp, #136]	; 0x88
 8006206:	dd4a      	ble.n	800629e <_svfprintf_r+0xe76>
 8006208:	aa21      	add	r2, sp, #132	; 0x84
 800620a:	4649      	mov	r1, r9
 800620c:	4650      	mov	r0, sl
 800620e:	f001 fc59 	bl	8007ac4 <__ssprint_r>
 8006212:	2800      	cmp	r0, #0
 8006214:	d165      	bne.n	80062e2 <_svfprintf_r+0xeba>
 8006216:	ac2e      	add	r4, sp, #184	; 0xb8
 8006218:	ab1d      	add	r3, sp, #116	; 0x74
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800621e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006220:	6063      	str	r3, [r4, #4]
 8006222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006224:	4413      	add	r3, r2
 8006226:	e41c      	b.n	8005a62 <_svfprintf_r+0x63a>
 8006228:	aa21      	add	r2, sp, #132	; 0x84
 800622a:	4649      	mov	r1, r9
 800622c:	4650      	mov	r0, sl
 800622e:	f001 fc49 	bl	8007ac4 <__ssprint_r>
 8006232:	2800      	cmp	r0, #0
 8006234:	d155      	bne.n	80062e2 <_svfprintf_r+0xeba>
 8006236:	ac2e      	add	r4, sp, #184	; 0xb8
 8006238:	e7c0      	b.n	80061bc <_svfprintf_r+0xd94>
 800623a:	aa21      	add	r2, sp, #132	; 0x84
 800623c:	4649      	mov	r1, r9
 800623e:	4650      	mov	r0, sl
 8006240:	f001 fc40 	bl	8007ac4 <__ssprint_r>
 8006244:	2800      	cmp	r0, #0
 8006246:	d14c      	bne.n	80062e2 <_svfprintf_r+0xeba>
 8006248:	ac2e      	add	r4, sp, #184	; 0xb8
 800624a:	e7c5      	b.n	80061d8 <_svfprintf_r+0xdb0>
 800624c:	2e00      	cmp	r6, #0
 800624e:	dde3      	ble.n	8006218 <_svfprintf_r+0xdf0>
 8006250:	f04f 0810 	mov.w	r8, #16
 8006254:	4f58      	ldr	r7, [pc, #352]	; (80063b8 <_svfprintf_r+0xf90>)
 8006256:	2e10      	cmp	r6, #16
 8006258:	6027      	str	r7, [r4, #0]
 800625a:	dc04      	bgt.n	8006266 <_svfprintf_r+0xe3e>
 800625c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800625e:	6066      	str	r6, [r4, #4]
 8006260:	441e      	add	r6, r3
 8006262:	9623      	str	r6, [sp, #140]	; 0x8c
 8006264:	e7cb      	b.n	80061fe <_svfprintf_r+0xdd6>
 8006266:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006268:	f8c4 8004 	str.w	r8, [r4, #4]
 800626c:	3310      	adds	r3, #16
 800626e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006270:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006272:	3301      	adds	r3, #1
 8006274:	2b07      	cmp	r3, #7
 8006276:	9322      	str	r3, [sp, #136]	; 0x88
 8006278:	dc02      	bgt.n	8006280 <_svfprintf_r+0xe58>
 800627a:	3408      	adds	r4, #8
 800627c:	3e10      	subs	r6, #16
 800627e:	e7ea      	b.n	8006256 <_svfprintf_r+0xe2e>
 8006280:	aa21      	add	r2, sp, #132	; 0x84
 8006282:	4649      	mov	r1, r9
 8006284:	4650      	mov	r0, sl
 8006286:	f001 fc1d 	bl	8007ac4 <__ssprint_r>
 800628a:	bb50      	cbnz	r0, 80062e2 <_svfprintf_r+0xeba>
 800628c:	ac2e      	add	r4, sp, #184	; 0xb8
 800628e:	e7f5      	b.n	800627c <_svfprintf_r+0xe54>
 8006290:	2301      	movs	r3, #1
 8006292:	6063      	str	r3, [r4, #4]
 8006294:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006296:	f8c4 8000 	str.w	r8, [r4]
 800629a:	3301      	adds	r3, #1
 800629c:	e7ae      	b.n	80061fc <_svfprintf_r+0xdd4>
 800629e:	3408      	adds	r4, #8
 80062a0:	e7ba      	b.n	8006218 <_svfprintf_r+0xdf0>
 80062a2:	3408      	adds	r4, #8
 80062a4:	f7ff bbed 	b.w	8005a82 <_svfprintf_r+0x65a>
 80062a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062ac:	1a9d      	subs	r5, r3, r2
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	f77f abea 	ble.w	8005a88 <_svfprintf_r+0x660>
 80062b4:	2610      	movs	r6, #16
 80062b6:	4b41      	ldr	r3, [pc, #260]	; (80063bc <_svfprintf_r+0xf94>)
 80062b8:	2d10      	cmp	r5, #16
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	dc1b      	bgt.n	80062f6 <_svfprintf_r+0xece>
 80062be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062c0:	6065      	str	r5, [r4, #4]
 80062c2:	441d      	add	r5, r3
 80062c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062c6:	9523      	str	r5, [sp, #140]	; 0x8c
 80062c8:	3301      	adds	r3, #1
 80062ca:	2b07      	cmp	r3, #7
 80062cc:	9322      	str	r3, [sp, #136]	; 0x88
 80062ce:	f77f abdb 	ble.w	8005a88 <_svfprintf_r+0x660>
 80062d2:	aa21      	add	r2, sp, #132	; 0x84
 80062d4:	4649      	mov	r1, r9
 80062d6:	4650      	mov	r0, sl
 80062d8:	f001 fbf4 	bl	8007ac4 <__ssprint_r>
 80062dc:	2800      	cmp	r0, #0
 80062de:	f43f abd3 	beq.w	8005a88 <_svfprintf_r+0x660>
 80062e2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80062e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80062ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ec:	bf18      	it	ne
 80062ee:	f04f 33ff 	movne.w	r3, #4294967295
 80062f2:	f7ff b8bd 	b.w	8005470 <_svfprintf_r+0x48>
 80062f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062f8:	6066      	str	r6, [r4, #4]
 80062fa:	3310      	adds	r3, #16
 80062fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80062fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006300:	3301      	adds	r3, #1
 8006302:	2b07      	cmp	r3, #7
 8006304:	9322      	str	r3, [sp, #136]	; 0x88
 8006306:	dc02      	bgt.n	800630e <_svfprintf_r+0xee6>
 8006308:	3408      	adds	r4, #8
 800630a:	3d10      	subs	r5, #16
 800630c:	e7d3      	b.n	80062b6 <_svfprintf_r+0xe8e>
 800630e:	aa21      	add	r2, sp, #132	; 0x84
 8006310:	4649      	mov	r1, r9
 8006312:	4650      	mov	r0, sl
 8006314:	f001 fbd6 	bl	8007ac4 <__ssprint_r>
 8006318:	2800      	cmp	r0, #0
 800631a:	d1e2      	bne.n	80062e2 <_svfprintf_r+0xeba>
 800631c:	ac2e      	add	r4, sp, #184	; 0xb8
 800631e:	e7f4      	b.n	800630a <_svfprintf_r+0xee2>
 8006320:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0dd      	beq.n	80062e2 <_svfprintf_r+0xeba>
 8006326:	aa21      	add	r2, sp, #132	; 0x84
 8006328:	4649      	mov	r1, r9
 800632a:	4650      	mov	r0, sl
 800632c:	f001 fbca 	bl	8007ac4 <__ssprint_r>
 8006330:	e7d7      	b.n	80062e2 <_svfprintf_r+0xeba>
 8006332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006336:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006338:	990e      	ldr	r1, [sp, #56]	; 0x38
 800633a:	f7fa fbd3 	bl	8000ae4 <__aeabi_dcmpun>
 800633e:	2800      	cmp	r0, #0
 8006340:	f43f aa3d 	beq.w	80057be <_svfprintf_r+0x396>
 8006344:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <_svfprintf_r+0xf98>)
 8006346:	4a1f      	ldr	r2, [pc, #124]	; (80063c4 <_svfprintf_r+0xf9c>)
 8006348:	f7ff ba2d 	b.w	80057a6 <_svfprintf_r+0x37e>
 800634c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800634e:	eba3 0308 	sub.w	r3, r3, r8
 8006352:	9307      	str	r3, [sp, #28]
 8006354:	f7ff baaf 	b.w	80058b6 <_svfprintf_r+0x48e>
 8006358:	ea56 0207 	orrs.w	r2, r6, r7
 800635c:	950f      	str	r5, [sp, #60]	; 0x3c
 800635e:	f43f ac2b 	beq.w	8005bb8 <_svfprintf_r+0x790>
 8006362:	2b01      	cmp	r3, #1
 8006364:	f43f ac9d 	beq.w	8005ca2 <_svfprintf_r+0x87a>
 8006368:	2b02      	cmp	r3, #2
 800636a:	f43f acbd 	beq.w	8005ce8 <_svfprintf_r+0x8c0>
 800636e:	ab2e      	add	r3, sp, #184	; 0xb8
 8006370:	08f1      	lsrs	r1, r6, #3
 8006372:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8006376:	08f8      	lsrs	r0, r7, #3
 8006378:	f006 0207 	and.w	r2, r6, #7
 800637c:	4607      	mov	r7, r0
 800637e:	460e      	mov	r6, r1
 8006380:	3230      	adds	r2, #48	; 0x30
 8006382:	ea56 0107 	orrs.w	r1, r6, r7
 8006386:	f103 38ff 	add.w	r8, r3, #4294967295
 800638a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800638e:	f47f ac86 	bne.w	8005c9e <_svfprintf_r+0x876>
 8006392:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006394:	07c9      	lsls	r1, r1, #31
 8006396:	d506      	bpl.n	80063a6 <_svfprintf_r+0xf7e>
 8006398:	2a30      	cmp	r2, #48	; 0x30
 800639a:	d004      	beq.n	80063a6 <_svfprintf_r+0xf7e>
 800639c:	2230      	movs	r2, #48	; 0x30
 800639e:	f808 2c01 	strb.w	r2, [r8, #-1]
 80063a2:	f1a3 0802 	sub.w	r8, r3, #2
 80063a6:	ab2e      	add	r3, sp, #184	; 0xb8
 80063a8:	465e      	mov	r6, fp
 80063aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063ac:	eba3 0b08 	sub.w	fp, r3, r8
 80063b0:	2700      	movs	r7, #0
 80063b2:	f7ff bace 	b.w	8005952 <_svfprintf_r+0x52a>
 80063b6:	bf00      	nop
 80063b8:	08008a48 	.word	0x08008a48
 80063bc:	08008a38 	.word	0x08008a38
 80063c0:	08008a0c 	.word	0x08008a0c
 80063c4:	08008a10 	.word	0x08008a10

080063c8 <quorem>:
 80063c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	6903      	ldr	r3, [r0, #16]
 80063ce:	690c      	ldr	r4, [r1, #16]
 80063d0:	4680      	mov	r8, r0
 80063d2:	429c      	cmp	r4, r3
 80063d4:	f300 8082 	bgt.w	80064dc <quorem+0x114>
 80063d8:	3c01      	subs	r4, #1
 80063da:	f101 0714 	add.w	r7, r1, #20
 80063de:	f100 0614 	add.w	r6, r0, #20
 80063e2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80063e6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80063ea:	3501      	adds	r5, #1
 80063ec:	fbb0 f5f5 	udiv	r5, r0, r5
 80063f0:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80063f4:	eb06 030e 	add.w	r3, r6, lr
 80063f8:	eb07 090e 	add.w	r9, r7, lr
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	b38d      	cbz	r5, 8006464 <quorem+0x9c>
 8006400:	f04f 0a00 	mov.w	sl, #0
 8006404:	4638      	mov	r0, r7
 8006406:	46b4      	mov	ip, r6
 8006408:	46d3      	mov	fp, sl
 800640a:	f850 2b04 	ldr.w	r2, [r0], #4
 800640e:	b293      	uxth	r3, r2
 8006410:	fb05 a303 	mla	r3, r5, r3, sl
 8006414:	0c12      	lsrs	r2, r2, #16
 8006416:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800641a:	fb05 a202 	mla	r2, r5, r2, sl
 800641e:	b29b      	uxth	r3, r3
 8006420:	ebab 0303 	sub.w	r3, fp, r3
 8006424:	f8bc b000 	ldrh.w	fp, [ip]
 8006428:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800642c:	445b      	add	r3, fp
 800642e:	fa1f fb82 	uxth.w	fp, r2
 8006432:	f8dc 2000 	ldr.w	r2, [ip]
 8006436:	4581      	cmp	r9, r0
 8006438:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800643c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006440:	b29b      	uxth	r3, r3
 8006442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006446:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800644a:	f84c 3b04 	str.w	r3, [ip], #4
 800644e:	d2dc      	bcs.n	800640a <quorem+0x42>
 8006450:	f856 300e 	ldr.w	r3, [r6, lr]
 8006454:	b933      	cbnz	r3, 8006464 <quorem+0x9c>
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	3b04      	subs	r3, #4
 800645a:	429e      	cmp	r6, r3
 800645c:	461a      	mov	r2, r3
 800645e:	d331      	bcc.n	80064c4 <quorem+0xfc>
 8006460:	f8c8 4010 	str.w	r4, [r8, #16]
 8006464:	4640      	mov	r0, r8
 8006466:	f001 fa54 	bl	8007912 <__mcmp>
 800646a:	2800      	cmp	r0, #0
 800646c:	db26      	blt.n	80064bc <quorem+0xf4>
 800646e:	4630      	mov	r0, r6
 8006470:	f04f 0e00 	mov.w	lr, #0
 8006474:	3501      	adds	r5, #1
 8006476:	f857 1b04 	ldr.w	r1, [r7], #4
 800647a:	f8d0 c000 	ldr.w	ip, [r0]
 800647e:	b28b      	uxth	r3, r1
 8006480:	ebae 0303 	sub.w	r3, lr, r3
 8006484:	fa1f f28c 	uxth.w	r2, ip
 8006488:	4413      	add	r3, r2
 800648a:	0c0a      	lsrs	r2, r1, #16
 800648c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006494:	b29b      	uxth	r3, r3
 8006496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800649a:	45b9      	cmp	r9, r7
 800649c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80064a0:	f840 3b04 	str.w	r3, [r0], #4
 80064a4:	d2e7      	bcs.n	8006476 <quorem+0xae>
 80064a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80064aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80064ae:	b92a      	cbnz	r2, 80064bc <quorem+0xf4>
 80064b0:	3b04      	subs	r3, #4
 80064b2:	429e      	cmp	r6, r3
 80064b4:	461a      	mov	r2, r3
 80064b6:	d30b      	bcc.n	80064d0 <quorem+0x108>
 80064b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80064bc:	4628      	mov	r0, r5
 80064be:	b003      	add	sp, #12
 80064c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	3b04      	subs	r3, #4
 80064c8:	2a00      	cmp	r2, #0
 80064ca:	d1c9      	bne.n	8006460 <quorem+0x98>
 80064cc:	3c01      	subs	r4, #1
 80064ce:	e7c4      	b.n	800645a <quorem+0x92>
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	3b04      	subs	r3, #4
 80064d4:	2a00      	cmp	r2, #0
 80064d6:	d1ef      	bne.n	80064b8 <quorem+0xf0>
 80064d8:	3c01      	subs	r4, #1
 80064da:	e7ea      	b.n	80064b2 <quorem+0xea>
 80064dc:	2000      	movs	r0, #0
 80064de:	e7ee      	b.n	80064be <quorem+0xf6>

080064e0 <_dtoa_r>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064e6:	b095      	sub	sp, #84	; 0x54
 80064e8:	4604      	mov	r4, r0
 80064ea:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80064ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064f0:	b93e      	cbnz	r6, 8006502 <_dtoa_r+0x22>
 80064f2:	2010      	movs	r0, #16
 80064f4:	f000 fdd6 	bl	80070a4 <malloc>
 80064f8:	6260      	str	r0, [r4, #36]	; 0x24
 80064fa:	6046      	str	r6, [r0, #4]
 80064fc:	6086      	str	r6, [r0, #8]
 80064fe:	6006      	str	r6, [r0, #0]
 8006500:	60c6      	str	r6, [r0, #12]
 8006502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006504:	6819      	ldr	r1, [r3, #0]
 8006506:	b151      	cbz	r1, 800651e <_dtoa_r+0x3e>
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	2301      	movs	r3, #1
 800650c:	4093      	lsls	r3, r2
 800650e:	604a      	str	r2, [r1, #4]
 8006510:	608b      	str	r3, [r1, #8]
 8006512:	4620      	mov	r0, r4
 8006514:	f001 f828 	bl	8007568 <_Bfree>
 8006518:	2200      	movs	r2, #0
 800651a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfb7      	itett	lt
 8006524:	2301      	movlt	r3, #1
 8006526:	2300      	movge	r3, #0
 8006528:	602b      	strlt	r3, [r5, #0]
 800652a:	9b03      	ldrlt	r3, [sp, #12]
 800652c:	bfae      	itee	ge
 800652e:	602b      	strge	r3, [r5, #0]
 8006530:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006534:	9303      	strlt	r3, [sp, #12]
 8006536:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800653a:	4bab      	ldr	r3, [pc, #684]	; (80067e8 <_dtoa_r+0x308>)
 800653c:	ea33 0309 	bics.w	r3, r3, r9
 8006540:	d11b      	bne.n	800657a <_dtoa_r+0x9a>
 8006542:	f242 730f 	movw	r3, #9999	; 0x270f
 8006546:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	9b02      	ldr	r3, [sp, #8]
 800654c:	b923      	cbnz	r3, 8006558 <_dtoa_r+0x78>
 800654e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8006552:	2800      	cmp	r0, #0
 8006554:	f000 8583 	beq.w	800705e <_dtoa_r+0xb7e>
 8006558:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800655a:	b953      	cbnz	r3, 8006572 <_dtoa_r+0x92>
 800655c:	4ba3      	ldr	r3, [pc, #652]	; (80067ec <_dtoa_r+0x30c>)
 800655e:	e021      	b.n	80065a4 <_dtoa_r+0xc4>
 8006560:	4ba3      	ldr	r3, [pc, #652]	; (80067f0 <_dtoa_r+0x310>)
 8006562:	9306      	str	r3, [sp, #24]
 8006564:	3308      	adds	r3, #8
 8006566:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	9806      	ldr	r0, [sp, #24]
 800656c:	b015      	add	sp, #84	; 0x54
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	4b9e      	ldr	r3, [pc, #632]	; (80067ec <_dtoa_r+0x30c>)
 8006574:	9306      	str	r3, [sp, #24]
 8006576:	3303      	adds	r3, #3
 8006578:	e7f5      	b.n	8006566 <_dtoa_r+0x86>
 800657a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800657e:	2200      	movs	r2, #0
 8006580:	2300      	movs	r3, #0
 8006582:	4630      	mov	r0, r6
 8006584:	4639      	mov	r1, r7
 8006586:	f7fa fa7b 	bl	8000a80 <__aeabi_dcmpeq>
 800658a:	4680      	mov	r8, r0
 800658c:	b160      	cbz	r0, 80065a8 <_dtoa_r+0xc8>
 800658e:	2301      	movs	r3, #1
 8006590:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 855e 	beq.w	8007058 <_dtoa_r+0xb78>
 800659c:	4b95      	ldr	r3, [pc, #596]	; (80067f4 <_dtoa_r+0x314>)
 800659e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	9306      	str	r3, [sp, #24]
 80065a6:	e7e0      	b.n	800656a <_dtoa_r+0x8a>
 80065a8:	ab12      	add	r3, sp, #72	; 0x48
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	ab13      	add	r3, sp, #76	; 0x4c
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	4632      	mov	r2, r6
 80065b2:	463b      	mov	r3, r7
 80065b4:	4620      	mov	r0, r4
 80065b6:	f001 fa25 	bl	8007a04 <__d2b>
 80065ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065be:	4682      	mov	sl, r0
 80065c0:	2d00      	cmp	r5, #0
 80065c2:	d07d      	beq.n	80066c0 <_dtoa_r+0x1e0>
 80065c4:	4630      	mov	r0, r6
 80065c6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065ca:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80065ce:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80065d2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065d6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80065da:	2200      	movs	r2, #0
 80065dc:	4b86      	ldr	r3, [pc, #536]	; (80067f8 <_dtoa_r+0x318>)
 80065de:	f7f9 fe33 	bl	8000248 <__aeabi_dsub>
 80065e2:	a37b      	add	r3, pc, #492	; (adr r3, 80067d0 <_dtoa_r+0x2f0>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f7f9 ffe2 	bl	80005b0 <__aeabi_dmul>
 80065ec:	a37a      	add	r3, pc, #488	; (adr r3, 80067d8 <_dtoa_r+0x2f8>)
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f7f9 fe2b 	bl	800024c <__adddf3>
 80065f6:	4606      	mov	r6, r0
 80065f8:	4628      	mov	r0, r5
 80065fa:	460f      	mov	r7, r1
 80065fc:	f7f9 ff72 	bl	80004e4 <__aeabi_i2d>
 8006600:	a377      	add	r3, pc, #476	; (adr r3, 80067e0 <_dtoa_r+0x300>)
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f7f9 ffd3 	bl	80005b0 <__aeabi_dmul>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4630      	mov	r0, r6
 8006610:	4639      	mov	r1, r7
 8006612:	f7f9 fe1b 	bl	800024c <__adddf3>
 8006616:	4606      	mov	r6, r0
 8006618:	460f      	mov	r7, r1
 800661a:	f7fa fa79 	bl	8000b10 <__aeabi_d2iz>
 800661e:	2200      	movs	r2, #0
 8006620:	4683      	mov	fp, r0
 8006622:	2300      	movs	r3, #0
 8006624:	4630      	mov	r0, r6
 8006626:	4639      	mov	r1, r7
 8006628:	f7fa fa34 	bl	8000a94 <__aeabi_dcmplt>
 800662c:	b158      	cbz	r0, 8006646 <_dtoa_r+0x166>
 800662e:	4658      	mov	r0, fp
 8006630:	f7f9 ff58 	bl	80004e4 <__aeabi_i2d>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4630      	mov	r0, r6
 800663a:	4639      	mov	r1, r7
 800663c:	f7fa fa20 	bl	8000a80 <__aeabi_dcmpeq>
 8006640:	b908      	cbnz	r0, 8006646 <_dtoa_r+0x166>
 8006642:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006646:	f1bb 0f16 	cmp.w	fp, #22
 800664a:	d858      	bhi.n	80066fe <_dtoa_r+0x21e>
 800664c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006650:	496a      	ldr	r1, [pc, #424]	; (80067fc <_dtoa_r+0x31c>)
 8006652:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800665a:	f7fa fa39 	bl	8000ad0 <__aeabi_dcmpgt>
 800665e:	2800      	cmp	r0, #0
 8006660:	d04f      	beq.n	8006702 <_dtoa_r+0x222>
 8006662:	2300      	movs	r3, #0
 8006664:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006668:	930d      	str	r3, [sp, #52]	; 0x34
 800666a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800666c:	1b5d      	subs	r5, r3, r5
 800666e:	1e6b      	subs	r3, r5, #1
 8006670:	9307      	str	r3, [sp, #28]
 8006672:	bf43      	ittte	mi
 8006674:	2300      	movmi	r3, #0
 8006676:	f1c5 0801 	rsbmi	r8, r5, #1
 800667a:	9307      	strmi	r3, [sp, #28]
 800667c:	f04f 0800 	movpl.w	r8, #0
 8006680:	f1bb 0f00 	cmp.w	fp, #0
 8006684:	db3f      	blt.n	8006706 <_dtoa_r+0x226>
 8006686:	9b07      	ldr	r3, [sp, #28]
 8006688:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800668c:	445b      	add	r3, fp
 800668e:	9307      	str	r3, [sp, #28]
 8006690:	2300      	movs	r3, #0
 8006692:	9308      	str	r3, [sp, #32]
 8006694:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006696:	2b09      	cmp	r3, #9
 8006698:	f200 80b4 	bhi.w	8006804 <_dtoa_r+0x324>
 800669c:	2b05      	cmp	r3, #5
 800669e:	bfc4      	itt	gt
 80066a0:	3b04      	subgt	r3, #4
 80066a2:	931e      	strgt	r3, [sp, #120]	; 0x78
 80066a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80066a6:	bfc8      	it	gt
 80066a8:	2600      	movgt	r6, #0
 80066aa:	f1a3 0302 	sub.w	r3, r3, #2
 80066ae:	bfd8      	it	le
 80066b0:	2601      	movle	r6, #1
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	f200 80b2 	bhi.w	800681c <_dtoa_r+0x33c>
 80066b8:	e8df f003 	tbb	[pc, r3]
 80066bc:	782d8684 	.word	0x782d8684
 80066c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80066c4:	441d      	add	r5, r3
 80066c6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	dd11      	ble.n	80066f2 <_dtoa_r+0x212>
 80066ce:	9a02      	ldr	r2, [sp, #8]
 80066d0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80066d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80066d8:	fa22 f000 	lsr.w	r0, r2, r0
 80066dc:	fa09 f303 	lsl.w	r3, r9, r3
 80066e0:	4318      	orrs	r0, r3
 80066e2:	f7f9 feef 	bl	80004c4 <__aeabi_ui2d>
 80066e6:	2301      	movs	r3, #1
 80066e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80066ec:	3d01      	subs	r5, #1
 80066ee:	9310      	str	r3, [sp, #64]	; 0x40
 80066f0:	e773      	b.n	80065da <_dtoa_r+0xfa>
 80066f2:	f1c3 0020 	rsb	r0, r3, #32
 80066f6:	9b02      	ldr	r3, [sp, #8]
 80066f8:	fa03 f000 	lsl.w	r0, r3, r0
 80066fc:	e7f1      	b.n	80066e2 <_dtoa_r+0x202>
 80066fe:	2301      	movs	r3, #1
 8006700:	e7b2      	b.n	8006668 <_dtoa_r+0x188>
 8006702:	900d      	str	r0, [sp, #52]	; 0x34
 8006704:	e7b1      	b.n	800666a <_dtoa_r+0x18a>
 8006706:	f1cb 0300 	rsb	r3, fp, #0
 800670a:	9308      	str	r3, [sp, #32]
 800670c:	2300      	movs	r3, #0
 800670e:	eba8 080b 	sub.w	r8, r8, fp
 8006712:	930c      	str	r3, [sp, #48]	; 0x30
 8006714:	e7be      	b.n	8006694 <_dtoa_r+0x1b4>
 8006716:	2301      	movs	r3, #1
 8006718:	9309      	str	r3, [sp, #36]	; 0x24
 800671a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800671c:	2b00      	cmp	r3, #0
 800671e:	f340 8080 	ble.w	8006822 <_dtoa_r+0x342>
 8006722:	4699      	mov	r9, r3
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	2200      	movs	r2, #0
 8006728:	2104      	movs	r1, #4
 800672a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800672c:	606a      	str	r2, [r5, #4]
 800672e:	f101 0214 	add.w	r2, r1, #20
 8006732:	429a      	cmp	r2, r3
 8006734:	d97a      	bls.n	800682c <_dtoa_r+0x34c>
 8006736:	6869      	ldr	r1, [r5, #4]
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fee1 	bl	8007500 <_Balloc>
 800673e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006740:	6028      	str	r0, [r5, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f1b9 0f0e 	cmp.w	r9, #14
 8006748:	9306      	str	r3, [sp, #24]
 800674a:	f200 80f0 	bhi.w	800692e <_dtoa_r+0x44e>
 800674e:	2e00      	cmp	r6, #0
 8006750:	f000 80ed 	beq.w	800692e <_dtoa_r+0x44e>
 8006754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006758:	f1bb 0f00 	cmp.w	fp, #0
 800675c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006760:	dd79      	ble.n	8006856 <_dtoa_r+0x376>
 8006762:	4a26      	ldr	r2, [pc, #152]	; (80067fc <_dtoa_r+0x31c>)
 8006764:	f00b 030f 	and.w	r3, fp, #15
 8006768:	ea4f 162b 	mov.w	r6, fp, asr #4
 800676c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006770:	06f0      	lsls	r0, r6, #27
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800677a:	d55c      	bpl.n	8006836 <_dtoa_r+0x356>
 800677c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006780:	4b1f      	ldr	r3, [pc, #124]	; (8006800 <_dtoa_r+0x320>)
 8006782:	2503      	movs	r5, #3
 8006784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006788:	f7fa f83c 	bl	8000804 <__aeabi_ddiv>
 800678c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006790:	f006 060f 	and.w	r6, r6, #15
 8006794:	4f1a      	ldr	r7, [pc, #104]	; (8006800 <_dtoa_r+0x320>)
 8006796:	2e00      	cmp	r6, #0
 8006798:	d14f      	bne.n	800683a <_dtoa_r+0x35a>
 800679a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800679e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a2:	f7fa f82f 	bl	8000804 <__aeabi_ddiv>
 80067a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067aa:	e06e      	b.n	800688a <_dtoa_r+0x3aa>
 80067ac:	2301      	movs	r3, #1
 80067ae:	9309      	str	r3, [sp, #36]	; 0x24
 80067b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067b2:	445b      	add	r3, fp
 80067b4:	f103 0901 	add.w	r9, r3, #1
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	464b      	mov	r3, r9
 80067bc:	2b01      	cmp	r3, #1
 80067be:	bfb8      	it	lt
 80067c0:	2301      	movlt	r3, #1
 80067c2:	e7b0      	b.n	8006726 <_dtoa_r+0x246>
 80067c4:	2300      	movs	r3, #0
 80067c6:	e7a7      	b.n	8006718 <_dtoa_r+0x238>
 80067c8:	2300      	movs	r3, #0
 80067ca:	e7f0      	b.n	80067ae <_dtoa_r+0x2ce>
 80067cc:	f3af 8000 	nop.w
 80067d0:	636f4361 	.word	0x636f4361
 80067d4:	3fd287a7 	.word	0x3fd287a7
 80067d8:	8b60c8b3 	.word	0x8b60c8b3
 80067dc:	3fc68a28 	.word	0x3fc68a28
 80067e0:	509f79fb 	.word	0x509f79fb
 80067e4:	3fd34413 	.word	0x3fd34413
 80067e8:	7ff00000 	.word	0x7ff00000
 80067ec:	08008a61 	.word	0x08008a61
 80067f0:	08008a58 	.word	0x08008a58
 80067f4:	08008a37 	.word	0x08008a37
 80067f8:	3ff80000 	.word	0x3ff80000
 80067fc:	08008a90 	.word	0x08008a90
 8006800:	08008a68 	.word	0x08008a68
 8006804:	2601      	movs	r6, #1
 8006806:	2300      	movs	r3, #0
 8006808:	9609      	str	r6, [sp, #36]	; 0x24
 800680a:	931e      	str	r3, [sp, #120]	; 0x78
 800680c:	f04f 33ff 	mov.w	r3, #4294967295
 8006810:	2200      	movs	r2, #0
 8006812:	9304      	str	r3, [sp, #16]
 8006814:	4699      	mov	r9, r3
 8006816:	2312      	movs	r3, #18
 8006818:	921f      	str	r2, [sp, #124]	; 0x7c
 800681a:	e784      	b.n	8006726 <_dtoa_r+0x246>
 800681c:	2301      	movs	r3, #1
 800681e:	9309      	str	r3, [sp, #36]	; 0x24
 8006820:	e7f4      	b.n	800680c <_dtoa_r+0x32c>
 8006822:	2301      	movs	r3, #1
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	4699      	mov	r9, r3
 8006828:	461a      	mov	r2, r3
 800682a:	e7f5      	b.n	8006818 <_dtoa_r+0x338>
 800682c:	686a      	ldr	r2, [r5, #4]
 800682e:	0049      	lsls	r1, r1, #1
 8006830:	3201      	adds	r2, #1
 8006832:	606a      	str	r2, [r5, #4]
 8006834:	e77b      	b.n	800672e <_dtoa_r+0x24e>
 8006836:	2502      	movs	r5, #2
 8006838:	e7ac      	b.n	8006794 <_dtoa_r+0x2b4>
 800683a:	07f1      	lsls	r1, r6, #31
 800683c:	d508      	bpl.n	8006850 <_dtoa_r+0x370>
 800683e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006846:	f7f9 feb3 	bl	80005b0 <__aeabi_dmul>
 800684a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800684e:	3501      	adds	r5, #1
 8006850:	1076      	asrs	r6, r6, #1
 8006852:	3708      	adds	r7, #8
 8006854:	e79f      	b.n	8006796 <_dtoa_r+0x2b6>
 8006856:	f000 80a5 	beq.w	80069a4 <_dtoa_r+0x4c4>
 800685a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800685e:	f1cb 0600 	rsb	r6, fp, #0
 8006862:	4ba2      	ldr	r3, [pc, #648]	; (8006aec <_dtoa_r+0x60c>)
 8006864:	f006 020f 	and.w	r2, r6, #15
 8006868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f7f9 fe9e 	bl	80005b0 <__aeabi_dmul>
 8006874:	2502      	movs	r5, #2
 8006876:	2300      	movs	r3, #0
 8006878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800687c:	4f9c      	ldr	r7, [pc, #624]	; (8006af0 <_dtoa_r+0x610>)
 800687e:	1136      	asrs	r6, r6, #4
 8006880:	2e00      	cmp	r6, #0
 8006882:	f040 8084 	bne.w	800698e <_dtoa_r+0x4ae>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d18d      	bne.n	80067a6 <_dtoa_r+0x2c6>
 800688a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 808b 	beq.w	80069a8 <_dtoa_r+0x4c8>
 8006892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006896:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800689a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800689e:	2200      	movs	r2, #0
 80068a0:	4b94      	ldr	r3, [pc, #592]	; (8006af4 <_dtoa_r+0x614>)
 80068a2:	f7fa f8f7 	bl	8000a94 <__aeabi_dcmplt>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d07e      	beq.n	80069a8 <_dtoa_r+0x4c8>
 80068aa:	f1b9 0f00 	cmp.w	r9, #0
 80068ae:	d07b      	beq.n	80069a8 <_dtoa_r+0x4c8>
 80068b0:	9b04      	ldr	r3, [sp, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dd37      	ble.n	8006926 <_dtoa_r+0x446>
 80068b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068ba:	2200      	movs	r2, #0
 80068bc:	4b8e      	ldr	r3, [pc, #568]	; (8006af8 <_dtoa_r+0x618>)
 80068be:	f7f9 fe77 	bl	80005b0 <__aeabi_dmul>
 80068c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068c6:	9e04      	ldr	r6, [sp, #16]
 80068c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80068cc:	3501      	adds	r5, #1
 80068ce:	4628      	mov	r0, r5
 80068d0:	f7f9 fe08 	bl	80004e4 <__aeabi_i2d>
 80068d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068d8:	f7f9 fe6a 	bl	80005b0 <__aeabi_dmul>
 80068dc:	4b87      	ldr	r3, [pc, #540]	; (8006afc <_dtoa_r+0x61c>)
 80068de:	2200      	movs	r2, #0
 80068e0:	f7f9 fcb4 	bl	800024c <__adddf3>
 80068e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80068e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ea:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80068ee:	950b      	str	r5, [sp, #44]	; 0x2c
 80068f0:	2e00      	cmp	r6, #0
 80068f2:	d15c      	bne.n	80069ae <_dtoa_r+0x4ce>
 80068f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f8:	2200      	movs	r2, #0
 80068fa:	4b81      	ldr	r3, [pc, #516]	; (8006b00 <_dtoa_r+0x620>)
 80068fc:	f7f9 fca4 	bl	8000248 <__aeabi_dsub>
 8006900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006902:	462b      	mov	r3, r5
 8006904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006908:	f7fa f8e2 	bl	8000ad0 <__aeabi_dcmpgt>
 800690c:	2800      	cmp	r0, #0
 800690e:	f040 82f7 	bne.w	8006f00 <_dtoa_r+0xa20>
 8006912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006918:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800691c:	f7fa f8ba 	bl	8000a94 <__aeabi_dcmplt>
 8006920:	2800      	cmp	r0, #0
 8006922:	f040 82eb 	bne.w	8006efc <_dtoa_r+0xa1c>
 8006926:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800692a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800692e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006930:	2b00      	cmp	r3, #0
 8006932:	f2c0 8150 	blt.w	8006bd6 <_dtoa_r+0x6f6>
 8006936:	f1bb 0f0e 	cmp.w	fp, #14
 800693a:	f300 814c 	bgt.w	8006bd6 <_dtoa_r+0x6f6>
 800693e:	4b6b      	ldr	r3, [pc, #428]	; (8006aec <_dtoa_r+0x60c>)
 8006940:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800694c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800694e:	2b00      	cmp	r3, #0
 8006950:	f280 80da 	bge.w	8006b08 <_dtoa_r+0x628>
 8006954:	f1b9 0f00 	cmp.w	r9, #0
 8006958:	f300 80d6 	bgt.w	8006b08 <_dtoa_r+0x628>
 800695c:	f040 82cd 	bne.w	8006efa <_dtoa_r+0xa1a>
 8006960:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006964:	2200      	movs	r2, #0
 8006966:	4b66      	ldr	r3, [pc, #408]	; (8006b00 <_dtoa_r+0x620>)
 8006968:	f7f9 fe22 	bl	80005b0 <__aeabi_dmul>
 800696c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006970:	f7fa f8a4 	bl	8000abc <__aeabi_dcmpge>
 8006974:	464e      	mov	r6, r9
 8006976:	464f      	mov	r7, r9
 8006978:	2800      	cmp	r0, #0
 800697a:	f040 82a4 	bne.w	8006ec6 <_dtoa_r+0x9e6>
 800697e:	9b06      	ldr	r3, [sp, #24]
 8006980:	9a06      	ldr	r2, [sp, #24]
 8006982:	1c5d      	adds	r5, r3, #1
 8006984:	2331      	movs	r3, #49	; 0x31
 8006986:	f10b 0b01 	add.w	fp, fp, #1
 800698a:	7013      	strb	r3, [r2, #0]
 800698c:	e29f      	b.n	8006ece <_dtoa_r+0x9ee>
 800698e:	07f2      	lsls	r2, r6, #31
 8006990:	d505      	bpl.n	800699e <_dtoa_r+0x4be>
 8006992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006996:	f7f9 fe0b 	bl	80005b0 <__aeabi_dmul>
 800699a:	2301      	movs	r3, #1
 800699c:	3501      	adds	r5, #1
 800699e:	1076      	asrs	r6, r6, #1
 80069a0:	3708      	adds	r7, #8
 80069a2:	e76d      	b.n	8006880 <_dtoa_r+0x3a0>
 80069a4:	2502      	movs	r5, #2
 80069a6:	e770      	b.n	800688a <_dtoa_r+0x3aa>
 80069a8:	465f      	mov	r7, fp
 80069aa:	464e      	mov	r6, r9
 80069ac:	e78f      	b.n	80068ce <_dtoa_r+0x3ee>
 80069ae:	9a06      	ldr	r2, [sp, #24]
 80069b0:	4b4e      	ldr	r3, [pc, #312]	; (8006aec <_dtoa_r+0x60c>)
 80069b2:	4432      	add	r2, r6
 80069b4:	9211      	str	r2, [sp, #68]	; 0x44
 80069b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b8:	1e71      	subs	r1, r6, #1
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	d048      	beq.n	8006a50 <_dtoa_r+0x570>
 80069be:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	2000      	movs	r0, #0
 80069c8:	494e      	ldr	r1, [pc, #312]	; (8006b04 <_dtoa_r+0x624>)
 80069ca:	f7f9 ff1b 	bl	8000804 <__aeabi_ddiv>
 80069ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069d2:	f7f9 fc39 	bl	8000248 <__aeabi_dsub>
 80069d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069da:	9d06      	ldr	r5, [sp, #24]
 80069dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e0:	f7fa f896 	bl	8000b10 <__aeabi_d2iz>
 80069e4:	4606      	mov	r6, r0
 80069e6:	f7f9 fd7d 	bl	80004e4 <__aeabi_i2d>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069f2:	f7f9 fc29 	bl	8000248 <__aeabi_dsub>
 80069f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069fa:	3630      	adds	r6, #48	; 0x30
 80069fc:	f805 6b01 	strb.w	r6, [r5], #1
 8006a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a04:	f7fa f846 	bl	8000a94 <__aeabi_dcmplt>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d164      	bne.n	8006ad6 <_dtoa_r+0x5f6>
 8006a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a10:	2000      	movs	r0, #0
 8006a12:	4938      	ldr	r1, [pc, #224]	; (8006af4 <_dtoa_r+0x614>)
 8006a14:	f7f9 fc18 	bl	8000248 <__aeabi_dsub>
 8006a18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a1c:	f7fa f83a 	bl	8000a94 <__aeabi_dcmplt>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	f040 80b9 	bne.w	8006b98 <_dtoa_r+0x6b8>
 8006a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a28:	429d      	cmp	r5, r3
 8006a2a:	f43f af7c 	beq.w	8006926 <_dtoa_r+0x446>
 8006a2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a32:	2200      	movs	r2, #0
 8006a34:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <_dtoa_r+0x618>)
 8006a36:	f7f9 fdbb 	bl	80005b0 <__aeabi_dmul>
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a44:	4b2c      	ldr	r3, [pc, #176]	; (8006af8 <_dtoa_r+0x618>)
 8006a46:	f7f9 fdb3 	bl	80005b0 <__aeabi_dmul>
 8006a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a4e:	e7c5      	b.n	80069dc <_dtoa_r+0x4fc>
 8006a50:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a5c:	f7f9 fda8 	bl	80005b0 <__aeabi_dmul>
 8006a60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a64:	9d06      	ldr	r5, [sp, #24]
 8006a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a6a:	f7fa f851 	bl	8000b10 <__aeabi_d2iz>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	f7f9 fd38 	bl	80004e4 <__aeabi_i2d>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7c:	f7f9 fbe4 	bl	8000248 <__aeabi_dsub>
 8006a80:	3630      	adds	r6, #48	; 0x30
 8006a82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a84:	f805 6b01 	strb.w	r6, [r5], #1
 8006a88:	42ab      	cmp	r3, r5
 8006a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a8e:	f04f 0200 	mov.w	r2, #0
 8006a92:	d124      	bne.n	8006ade <_dtoa_r+0x5fe>
 8006a94:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <_dtoa_r+0x624>)
 8006a96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a9a:	f7f9 fbd7 	bl	800024c <__adddf3>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa6:	f7fa f813 	bl	8000ad0 <__aeabi_dcmpgt>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d174      	bne.n	8006b98 <_dtoa_r+0x6b8>
 8006aae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	4913      	ldr	r1, [pc, #76]	; (8006b04 <_dtoa_r+0x624>)
 8006ab6:	f7f9 fbc7 	bl	8000248 <__aeabi_dsub>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac2:	f7f9 ffe7 	bl	8000a94 <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f af2d 	beq.w	8006926 <_dtoa_r+0x446>
 8006acc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ad0:	1e6a      	subs	r2, r5, #1
 8006ad2:	2b30      	cmp	r3, #48	; 0x30
 8006ad4:	d001      	beq.n	8006ada <_dtoa_r+0x5fa>
 8006ad6:	46bb      	mov	fp, r7
 8006ad8:	e04d      	b.n	8006b76 <_dtoa_r+0x696>
 8006ada:	4615      	mov	r5, r2
 8006adc:	e7f6      	b.n	8006acc <_dtoa_r+0x5ec>
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <_dtoa_r+0x618>)
 8006ae0:	f7f9 fd66 	bl	80005b0 <__aeabi_dmul>
 8006ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae8:	e7bd      	b.n	8006a66 <_dtoa_r+0x586>
 8006aea:	bf00      	nop
 8006aec:	08008a90 	.word	0x08008a90
 8006af0:	08008a68 	.word	0x08008a68
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	40240000 	.word	0x40240000
 8006afc:	401c0000 	.word	0x401c0000
 8006b00:	40140000 	.word	0x40140000
 8006b04:	3fe00000 	.word	0x3fe00000
 8006b08:	9d06      	ldr	r5, [sp, #24]
 8006b0a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b12:	4630      	mov	r0, r6
 8006b14:	4639      	mov	r1, r7
 8006b16:	f7f9 fe75 	bl	8000804 <__aeabi_ddiv>
 8006b1a:	f7f9 fff9 	bl	8000b10 <__aeabi_d2iz>
 8006b1e:	4680      	mov	r8, r0
 8006b20:	f7f9 fce0 	bl	80004e4 <__aeabi_i2d>
 8006b24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b28:	f7f9 fd42 	bl	80005b0 <__aeabi_dmul>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4630      	mov	r0, r6
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7f9 fb88 	bl	8000248 <__aeabi_dsub>
 8006b38:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b40:	9e06      	ldr	r6, [sp, #24]
 8006b42:	4602      	mov	r2, r0
 8006b44:	1bae      	subs	r6, r5, r6
 8006b46:	45b1      	cmp	r9, r6
 8006b48:	460b      	mov	r3, r1
 8006b4a:	d137      	bne.n	8006bbc <_dtoa_r+0x6dc>
 8006b4c:	f7f9 fb7e 	bl	800024c <__adddf3>
 8006b50:	4606      	mov	r6, r0
 8006b52:	460f      	mov	r7, r1
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b5c:	f7f9 ff9a 	bl	8000a94 <__aeabi_dcmplt>
 8006b60:	b9c8      	cbnz	r0, 8006b96 <_dtoa_r+0x6b6>
 8006b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b66:	4632      	mov	r2, r6
 8006b68:	463b      	mov	r3, r7
 8006b6a:	f7f9 ff89 	bl	8000a80 <__aeabi_dcmpeq>
 8006b6e:	b110      	cbz	r0, 8006b76 <_dtoa_r+0x696>
 8006b70:	f018 0f01 	tst.w	r8, #1
 8006b74:	d10f      	bne.n	8006b96 <_dtoa_r+0x6b6>
 8006b76:	4651      	mov	r1, sl
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 fcf5 	bl	8007568 <_Bfree>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b82:	702b      	strb	r3, [r5, #0]
 8006b84:	f10b 0301 	add.w	r3, fp, #1
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f43f acec 	beq.w	800656a <_dtoa_r+0x8a>
 8006b92:	601d      	str	r5, [r3, #0]
 8006b94:	e4e9      	b.n	800656a <_dtoa_r+0x8a>
 8006b96:	465f      	mov	r7, fp
 8006b98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b9c:	1e6b      	subs	r3, r5, #1
 8006b9e:	2a39      	cmp	r2, #57	; 0x39
 8006ba0:	d106      	bne.n	8006bb0 <_dtoa_r+0x6d0>
 8006ba2:	9a06      	ldr	r2, [sp, #24]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d107      	bne.n	8006bb8 <_dtoa_r+0x6d8>
 8006ba8:	2330      	movs	r3, #48	; 0x30
 8006baa:	7013      	strb	r3, [r2, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	3701      	adds	r7, #1
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	e78e      	b.n	8006ad6 <_dtoa_r+0x5f6>
 8006bb8:	461d      	mov	r5, r3
 8006bba:	e7ed      	b.n	8006b98 <_dtoa_r+0x6b8>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4bb5      	ldr	r3, [pc, #724]	; (8006e94 <_dtoa_r+0x9b4>)
 8006bc0:	f7f9 fcf6 	bl	80005b0 <__aeabi_dmul>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4606      	mov	r6, r0
 8006bca:	460f      	mov	r7, r1
 8006bcc:	f7f9 ff58 	bl	8000a80 <__aeabi_dcmpeq>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d09c      	beq.n	8006b0e <_dtoa_r+0x62e>
 8006bd4:	e7cf      	b.n	8006b76 <_dtoa_r+0x696>
 8006bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bd8:	2a00      	cmp	r2, #0
 8006bda:	f000 8129 	beq.w	8006e30 <_dtoa_r+0x950>
 8006bde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006be0:	2a01      	cmp	r2, #1
 8006be2:	f300 810e 	bgt.w	8006e02 <_dtoa_r+0x922>
 8006be6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006be8:	2a00      	cmp	r2, #0
 8006bea:	f000 8106 	beq.w	8006dfa <_dtoa_r+0x91a>
 8006bee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bf2:	4645      	mov	r5, r8
 8006bf4:	9e08      	ldr	r6, [sp, #32]
 8006bf6:	9a07      	ldr	r2, [sp, #28]
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	441a      	add	r2, r3
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4498      	add	r8, r3
 8006c00:	9207      	str	r2, [sp, #28]
 8006c02:	f000 fd51 	bl	80076a8 <__i2b>
 8006c06:	4607      	mov	r7, r0
 8006c08:	2d00      	cmp	r5, #0
 8006c0a:	dd0b      	ble.n	8006c24 <_dtoa_r+0x744>
 8006c0c:	9b07      	ldr	r3, [sp, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	dd08      	ble.n	8006c24 <_dtoa_r+0x744>
 8006c12:	42ab      	cmp	r3, r5
 8006c14:	bfa8      	it	ge
 8006c16:	462b      	movge	r3, r5
 8006c18:	9a07      	ldr	r2, [sp, #28]
 8006c1a:	eba8 0803 	sub.w	r8, r8, r3
 8006c1e:	1aed      	subs	r5, r5, r3
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	9307      	str	r3, [sp, #28]
 8006c24:	9b08      	ldr	r3, [sp, #32]
 8006c26:	b1fb      	cbz	r3, 8006c68 <_dtoa_r+0x788>
 8006c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 8104 	beq.w	8006e38 <_dtoa_r+0x958>
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	dd11      	ble.n	8006c58 <_dtoa_r+0x778>
 8006c34:	4639      	mov	r1, r7
 8006c36:	4632      	mov	r2, r6
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fdcb 	bl	80077d4 <__pow5mult>
 8006c3e:	4652      	mov	r2, sl
 8006c40:	4601      	mov	r1, r0
 8006c42:	4607      	mov	r7, r0
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fd38 	bl	80076ba <__multiply>
 8006c4a:	4651      	mov	r1, sl
 8006c4c:	900a      	str	r0, [sp, #40]	; 0x28
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 fc8a 	bl	8007568 <_Bfree>
 8006c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c56:	469a      	mov	sl, r3
 8006c58:	9b08      	ldr	r3, [sp, #32]
 8006c5a:	1b9a      	subs	r2, r3, r6
 8006c5c:	d004      	beq.n	8006c68 <_dtoa_r+0x788>
 8006c5e:	4651      	mov	r1, sl
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fdb7 	bl	80077d4 <__pow5mult>
 8006c66:	4682      	mov	sl, r0
 8006c68:	2101      	movs	r1, #1
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 fd1c 	bl	80076a8 <__i2b>
 8006c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c72:	4606      	mov	r6, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f340 80e1 	ble.w	8006e3c <_dtoa_r+0x95c>
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4601      	mov	r1, r0
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 fda8 	bl	80077d4 <__pow5mult>
 8006c84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c86:	4606      	mov	r6, r0
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	f340 80da 	ble.w	8006e42 <_dtoa_r+0x962>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	9308      	str	r3, [sp, #32]
 8006c92:	6933      	ldr	r3, [r6, #16]
 8006c94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c98:	6918      	ldr	r0, [r3, #16]
 8006c9a:	f000 fcb7 	bl	800760c <__hi0bits>
 8006c9e:	f1c0 0020 	rsb	r0, r0, #32
 8006ca2:	9b07      	ldr	r3, [sp, #28]
 8006ca4:	4418      	add	r0, r3
 8006ca6:	f010 001f 	ands.w	r0, r0, #31
 8006caa:	f000 80f0 	beq.w	8006e8e <_dtoa_r+0x9ae>
 8006cae:	f1c0 0320 	rsb	r3, r0, #32
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	f340 80e2 	ble.w	8006e7c <_dtoa_r+0x99c>
 8006cb8:	9b07      	ldr	r3, [sp, #28]
 8006cba:	f1c0 001c 	rsb	r0, r0, #28
 8006cbe:	4480      	add	r8, r0
 8006cc0:	4405      	add	r5, r0
 8006cc2:	4403      	add	r3, r0
 8006cc4:	9307      	str	r3, [sp, #28]
 8006cc6:	f1b8 0f00 	cmp.w	r8, #0
 8006cca:	dd05      	ble.n	8006cd8 <_dtoa_r+0x7f8>
 8006ccc:	4651      	mov	r1, sl
 8006cce:	4642      	mov	r2, r8
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 fdcd 	bl	8007870 <__lshift>
 8006cd6:	4682      	mov	sl, r0
 8006cd8:	9b07      	ldr	r3, [sp, #28]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dd05      	ble.n	8006cea <_dtoa_r+0x80a>
 8006cde:	4631      	mov	r1, r6
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 fdc4 	bl	8007870 <__lshift>
 8006ce8:	4606      	mov	r6, r0
 8006cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80d3 	beq.w	8006e98 <_dtoa_r+0x9b8>
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4650      	mov	r0, sl
 8006cf6:	f000 fe0c 	bl	8007912 <__mcmp>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f280 80cc 	bge.w	8006e98 <_dtoa_r+0x9b8>
 8006d00:	2300      	movs	r3, #0
 8006d02:	4651      	mov	r1, sl
 8006d04:	220a      	movs	r2, #10
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fc45 	bl	8007596 <__multadd>
 8006d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d12:	4682      	mov	sl, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 81a9 	beq.w	800706c <_dtoa_r+0xb8c>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	220a      	movs	r2, #10
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 fc38 	bl	8007596 <__multadd>
 8006d26:	9b04      	ldr	r3, [sp, #16]
 8006d28:	4607      	mov	r7, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	dc03      	bgt.n	8006d36 <_dtoa_r+0x856>
 8006d2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	f300 80b9 	bgt.w	8006ea8 <_dtoa_r+0x9c8>
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	dd05      	ble.n	8006d46 <_dtoa_r+0x866>
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	462a      	mov	r2, r5
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 fd96 	bl	8007870 <__lshift>
 8006d44:	4607      	mov	r7, r0
 8006d46:	9b08      	ldr	r3, [sp, #32]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 8110 	beq.w	8006f6e <_dtoa_r+0xa8e>
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	4620      	mov	r0, r4
 8006d52:	f000 fbd5 	bl	8007500 <_Balloc>
 8006d56:	4605      	mov	r5, r0
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	f107 010c 	add.w	r1, r7, #12
 8006d5e:	3202      	adds	r2, #2
 8006d60:	0092      	lsls	r2, r2, #2
 8006d62:	300c      	adds	r0, #12
 8006d64:	f7fe fb18 	bl	8005398 <memcpy>
 8006d68:	2201      	movs	r2, #1
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 fd7f 	bl	8007870 <__lshift>
 8006d72:	9707      	str	r7, [sp, #28]
 8006d74:	4607      	mov	r7, r0
 8006d76:	9b02      	ldr	r3, [sp, #8]
 8006d78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	9308      	str	r3, [sp, #32]
 8006d82:	4631      	mov	r1, r6
 8006d84:	4650      	mov	r0, sl
 8006d86:	f7ff fb1f 	bl	80063c8 <quorem>
 8006d8a:	9907      	ldr	r1, [sp, #28]
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d92:	4650      	mov	r0, sl
 8006d94:	f000 fdbd 	bl	8007912 <__mcmp>
 8006d98:	463a      	mov	r2, r7
 8006d9a:	9002      	str	r0, [sp, #8]
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 fdd1 	bl	8007946 <__mdiff>
 8006da4:	68c3      	ldr	r3, [r0, #12]
 8006da6:	4602      	mov	r2, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 80e2 	bne.w	8006f72 <_dtoa_r+0xa92>
 8006dae:	4601      	mov	r1, r0
 8006db0:	9009      	str	r0, [sp, #36]	; 0x24
 8006db2:	4650      	mov	r0, sl
 8006db4:	f000 fdad 	bl	8007912 <__mcmp>
 8006db8:	4603      	mov	r3, r0
 8006dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc2:	f000 fbd1 	bl	8007568 <_Bfree>
 8006dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f040 80d4 	bne.w	8006f76 <_dtoa_r+0xa96>
 8006dce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	f040 80d0 	bne.w	8006f76 <_dtoa_r+0xa96>
 8006dd6:	9a08      	ldr	r2, [sp, #32]
 8006dd8:	2a00      	cmp	r2, #0
 8006dda:	f040 80cc 	bne.w	8006f76 <_dtoa_r+0xa96>
 8006dde:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006de2:	f000 80e8 	beq.w	8006fb6 <_dtoa_r+0xad6>
 8006de6:	9b02      	ldr	r3, [sp, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	dd01      	ble.n	8006df0 <_dtoa_r+0x910>
 8006dec:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006df0:	f108 0501 	add.w	r5, r8, #1
 8006df4:	f888 9000 	strb.w	r9, [r8]
 8006df8:	e06b      	b.n	8006ed2 <_dtoa_r+0x9f2>
 8006dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dfc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e00:	e6f7      	b.n	8006bf2 <_dtoa_r+0x712>
 8006e02:	9b08      	ldr	r3, [sp, #32]
 8006e04:	f109 36ff 	add.w	r6, r9, #4294967295
 8006e08:	42b3      	cmp	r3, r6
 8006e0a:	bfb7      	itett	lt
 8006e0c:	9b08      	ldrlt	r3, [sp, #32]
 8006e0e:	1b9e      	subge	r6, r3, r6
 8006e10:	1af2      	sublt	r2, r6, r3
 8006e12:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006e14:	bfbf      	itttt	lt
 8006e16:	9608      	strlt	r6, [sp, #32]
 8006e18:	189b      	addlt	r3, r3, r2
 8006e1a:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006e1c:	2600      	movlt	r6, #0
 8006e1e:	f1b9 0f00 	cmp.w	r9, #0
 8006e22:	bfb9      	ittee	lt
 8006e24:	eba8 0509 	sublt.w	r5, r8, r9
 8006e28:	2300      	movlt	r3, #0
 8006e2a:	4645      	movge	r5, r8
 8006e2c:	464b      	movge	r3, r9
 8006e2e:	e6e2      	b.n	8006bf6 <_dtoa_r+0x716>
 8006e30:	9e08      	ldr	r6, [sp, #32]
 8006e32:	4645      	mov	r5, r8
 8006e34:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006e36:	e6e7      	b.n	8006c08 <_dtoa_r+0x728>
 8006e38:	9a08      	ldr	r2, [sp, #32]
 8006e3a:	e710      	b.n	8006c5e <_dtoa_r+0x77e>
 8006e3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	dc18      	bgt.n	8006e74 <_dtoa_r+0x994>
 8006e42:	9b02      	ldr	r3, [sp, #8]
 8006e44:	b9b3      	cbnz	r3, 8006e74 <_dtoa_r+0x994>
 8006e46:	9b03      	ldr	r3, [sp, #12]
 8006e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e4c:	b9a3      	cbnz	r3, 8006e78 <_dtoa_r+0x998>
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e54:	0d1b      	lsrs	r3, r3, #20
 8006e56:	051b      	lsls	r3, r3, #20
 8006e58:	b12b      	cbz	r3, 8006e66 <_dtoa_r+0x986>
 8006e5a:	9b07      	ldr	r3, [sp, #28]
 8006e5c:	f108 0801 	add.w	r8, r8, #1
 8006e60:	3301      	adds	r3, #1
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	2301      	movs	r3, #1
 8006e66:	9308      	str	r3, [sp, #32]
 8006e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f47f af11 	bne.w	8006c92 <_dtoa_r+0x7b2>
 8006e70:	2001      	movs	r0, #1
 8006e72:	e716      	b.n	8006ca2 <_dtoa_r+0x7c2>
 8006e74:	2300      	movs	r3, #0
 8006e76:	e7f6      	b.n	8006e66 <_dtoa_r+0x986>
 8006e78:	9b02      	ldr	r3, [sp, #8]
 8006e7a:	e7f4      	b.n	8006e66 <_dtoa_r+0x986>
 8006e7c:	f43f af23 	beq.w	8006cc6 <_dtoa_r+0x7e6>
 8006e80:	9a07      	ldr	r2, [sp, #28]
 8006e82:	331c      	adds	r3, #28
 8006e84:	441a      	add	r2, r3
 8006e86:	4498      	add	r8, r3
 8006e88:	441d      	add	r5, r3
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	e71a      	b.n	8006cc4 <_dtoa_r+0x7e4>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	e7f6      	b.n	8006e80 <_dtoa_r+0x9a0>
 8006e92:	bf00      	nop
 8006e94:	40240000 	.word	0x40240000
 8006e98:	f1b9 0f00 	cmp.w	r9, #0
 8006e9c:	dc33      	bgt.n	8006f06 <_dtoa_r+0xa26>
 8006e9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	dd30      	ble.n	8006f06 <_dtoa_r+0xa26>
 8006ea4:	f8cd 9010 	str.w	r9, [sp, #16]
 8006ea8:	9b04      	ldr	r3, [sp, #16]
 8006eaa:	b963      	cbnz	r3, 8006ec6 <_dtoa_r+0x9e6>
 8006eac:	4631      	mov	r1, r6
 8006eae:	2205      	movs	r2, #5
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 fb70 	bl	8007596 <__multadd>
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	4606      	mov	r6, r0
 8006eba:	4650      	mov	r0, sl
 8006ebc:	f000 fd29 	bl	8007912 <__mcmp>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f73f ad5c 	bgt.w	800697e <_dtoa_r+0x49e>
 8006ec6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ec8:	9d06      	ldr	r5, [sp, #24]
 8006eca:	ea6f 0b03 	mvn.w	fp, r3
 8006ece:	2300      	movs	r3, #0
 8006ed0:	9307      	str	r3, [sp, #28]
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fb47 	bl	8007568 <_Bfree>
 8006eda:	2f00      	cmp	r7, #0
 8006edc:	f43f ae4b 	beq.w	8006b76 <_dtoa_r+0x696>
 8006ee0:	9b07      	ldr	r3, [sp, #28]
 8006ee2:	b12b      	cbz	r3, 8006ef0 <_dtoa_r+0xa10>
 8006ee4:	42bb      	cmp	r3, r7
 8006ee6:	d003      	beq.n	8006ef0 <_dtoa_r+0xa10>
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 fb3c 	bl	8007568 <_Bfree>
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fb38 	bl	8007568 <_Bfree>
 8006ef8:	e63d      	b.n	8006b76 <_dtoa_r+0x696>
 8006efa:	2600      	movs	r6, #0
 8006efc:	4637      	mov	r7, r6
 8006efe:	e7e2      	b.n	8006ec6 <_dtoa_r+0x9e6>
 8006f00:	46bb      	mov	fp, r7
 8006f02:	4637      	mov	r7, r6
 8006f04:	e53b      	b.n	800697e <_dtoa_r+0x49e>
 8006f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f08:	f8cd 9010 	str.w	r9, [sp, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f47f af12 	bne.w	8006d36 <_dtoa_r+0x856>
 8006f12:	9d06      	ldr	r5, [sp, #24]
 8006f14:	4631      	mov	r1, r6
 8006f16:	4650      	mov	r0, sl
 8006f18:	f7ff fa56 	bl	80063c8 <quorem>
 8006f1c:	9b06      	ldr	r3, [sp, #24]
 8006f1e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f22:	f805 9b01 	strb.w	r9, [r5], #1
 8006f26:	9a04      	ldr	r2, [sp, #16]
 8006f28:	1aeb      	subs	r3, r5, r3
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	f300 8081 	bgt.w	8007032 <_dtoa_r+0xb52>
 8006f30:	9b06      	ldr	r3, [sp, #24]
 8006f32:	2a01      	cmp	r2, #1
 8006f34:	bfac      	ite	ge
 8006f36:	189b      	addge	r3, r3, r2
 8006f38:	3301      	addlt	r3, #1
 8006f3a:	4698      	mov	r8, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	9307      	str	r3, [sp, #28]
 8006f40:	4651      	mov	r1, sl
 8006f42:	2201      	movs	r2, #1
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 fc93 	bl	8007870 <__lshift>
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	f000 fce0 	bl	8007912 <__mcmp>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	dc34      	bgt.n	8006fc0 <_dtoa_r+0xae0>
 8006f56:	d102      	bne.n	8006f5e <_dtoa_r+0xa7e>
 8006f58:	f019 0f01 	tst.w	r9, #1
 8006f5c:	d130      	bne.n	8006fc0 <_dtoa_r+0xae0>
 8006f5e:	4645      	mov	r5, r8
 8006f60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f64:	1e6a      	subs	r2, r5, #1
 8006f66:	2b30      	cmp	r3, #48	; 0x30
 8006f68:	d1b3      	bne.n	8006ed2 <_dtoa_r+0x9f2>
 8006f6a:	4615      	mov	r5, r2
 8006f6c:	e7f8      	b.n	8006f60 <_dtoa_r+0xa80>
 8006f6e:	4638      	mov	r0, r7
 8006f70:	e6ff      	b.n	8006d72 <_dtoa_r+0x892>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e722      	b.n	8006dbc <_dtoa_r+0x8dc>
 8006f76:	9a02      	ldr	r2, [sp, #8]
 8006f78:	2a00      	cmp	r2, #0
 8006f7a:	db04      	blt.n	8006f86 <_dtoa_r+0xaa6>
 8006f7c:	d128      	bne.n	8006fd0 <_dtoa_r+0xaf0>
 8006f7e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006f80:	bb32      	cbnz	r2, 8006fd0 <_dtoa_r+0xaf0>
 8006f82:	9a08      	ldr	r2, [sp, #32]
 8006f84:	bb22      	cbnz	r2, 8006fd0 <_dtoa_r+0xaf0>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f77f af32 	ble.w	8006df0 <_dtoa_r+0x910>
 8006f8c:	4651      	mov	r1, sl
 8006f8e:	2201      	movs	r2, #1
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fc6d 	bl	8007870 <__lshift>
 8006f96:	4631      	mov	r1, r6
 8006f98:	4682      	mov	sl, r0
 8006f9a:	f000 fcba 	bl	8007912 <__mcmp>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	dc05      	bgt.n	8006fae <_dtoa_r+0xace>
 8006fa2:	f47f af25 	bne.w	8006df0 <_dtoa_r+0x910>
 8006fa6:	f019 0f01 	tst.w	r9, #1
 8006faa:	f43f af21 	beq.w	8006df0 <_dtoa_r+0x910>
 8006fae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fb2:	f47f af1b 	bne.w	8006dec <_dtoa_r+0x90c>
 8006fb6:	2339      	movs	r3, #57	; 0x39
 8006fb8:	f108 0801 	add.w	r8, r8, #1
 8006fbc:	f808 3c01 	strb.w	r3, [r8, #-1]
 8006fc0:	4645      	mov	r5, r8
 8006fc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fc6:	1e6a      	subs	r2, r5, #1
 8006fc8:	2b39      	cmp	r3, #57	; 0x39
 8006fca:	d03a      	beq.n	8007042 <_dtoa_r+0xb62>
 8006fcc:	3301      	adds	r3, #1
 8006fce:	e03f      	b.n	8007050 <_dtoa_r+0xb70>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f108 0501 	add.w	r5, r8, #1
 8006fd6:	dd05      	ble.n	8006fe4 <_dtoa_r+0xb04>
 8006fd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fdc:	d0eb      	beq.n	8006fb6 <_dtoa_r+0xad6>
 8006fde:	f109 0901 	add.w	r9, r9, #1
 8006fe2:	e707      	b.n	8006df4 <_dtoa_r+0x914>
 8006fe4:	9b06      	ldr	r3, [sp, #24]
 8006fe6:	9a04      	ldr	r2, [sp, #16]
 8006fe8:	1aeb      	subs	r3, r5, r3
 8006fea:	4293      	cmp	r3, r2
 8006fec:	46a8      	mov	r8, r5
 8006fee:	f805 9c01 	strb.w	r9, [r5, #-1]
 8006ff2:	d0a5      	beq.n	8006f40 <_dtoa_r+0xa60>
 8006ff4:	4651      	mov	r1, sl
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	220a      	movs	r2, #10
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 facb 	bl	8007596 <__multadd>
 8007000:	9b07      	ldr	r3, [sp, #28]
 8007002:	4682      	mov	sl, r0
 8007004:	42bb      	cmp	r3, r7
 8007006:	f04f 020a 	mov.w	r2, #10
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	9907      	ldr	r1, [sp, #28]
 8007010:	4620      	mov	r0, r4
 8007012:	d104      	bne.n	800701e <_dtoa_r+0xb3e>
 8007014:	f000 fabf 	bl	8007596 <__multadd>
 8007018:	9007      	str	r0, [sp, #28]
 800701a:	4607      	mov	r7, r0
 800701c:	e6b1      	b.n	8006d82 <_dtoa_r+0x8a2>
 800701e:	f000 faba 	bl	8007596 <__multadd>
 8007022:	2300      	movs	r3, #0
 8007024:	9007      	str	r0, [sp, #28]
 8007026:	220a      	movs	r2, #10
 8007028:	4639      	mov	r1, r7
 800702a:	4620      	mov	r0, r4
 800702c:	f000 fab3 	bl	8007596 <__multadd>
 8007030:	e7f3      	b.n	800701a <_dtoa_r+0xb3a>
 8007032:	4651      	mov	r1, sl
 8007034:	2300      	movs	r3, #0
 8007036:	220a      	movs	r2, #10
 8007038:	4620      	mov	r0, r4
 800703a:	f000 faac 	bl	8007596 <__multadd>
 800703e:	4682      	mov	sl, r0
 8007040:	e768      	b.n	8006f14 <_dtoa_r+0xa34>
 8007042:	9b06      	ldr	r3, [sp, #24]
 8007044:	4293      	cmp	r3, r2
 8007046:	d105      	bne.n	8007054 <_dtoa_r+0xb74>
 8007048:	2331      	movs	r3, #49	; 0x31
 800704a:	9a06      	ldr	r2, [sp, #24]
 800704c:	f10b 0b01 	add.w	fp, fp, #1
 8007050:	7013      	strb	r3, [r2, #0]
 8007052:	e73e      	b.n	8006ed2 <_dtoa_r+0x9f2>
 8007054:	4615      	mov	r5, r2
 8007056:	e7b4      	b.n	8006fc2 <_dtoa_r+0xae2>
 8007058:	4b09      	ldr	r3, [pc, #36]	; (8007080 <_dtoa_r+0xba0>)
 800705a:	f7ff baa3 	b.w	80065a4 <_dtoa_r+0xc4>
 800705e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007060:	2b00      	cmp	r3, #0
 8007062:	f47f aa7d 	bne.w	8006560 <_dtoa_r+0x80>
 8007066:	4b07      	ldr	r3, [pc, #28]	; (8007084 <_dtoa_r+0xba4>)
 8007068:	f7ff ba9c 	b.w	80065a4 <_dtoa_r+0xc4>
 800706c:	9b04      	ldr	r3, [sp, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f73f af4f 	bgt.w	8006f12 <_dtoa_r+0xa32>
 8007074:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007076:	2b02      	cmp	r3, #2
 8007078:	f77f af4b 	ble.w	8006f12 <_dtoa_r+0xa32>
 800707c:	e714      	b.n	8006ea8 <_dtoa_r+0x9c8>
 800707e:	bf00      	nop
 8007080:	08008a36 	.word	0x08008a36
 8007084:	08008a58 	.word	0x08008a58

08007088 <_localeconv_r>:
 8007088:	4b04      	ldr	r3, [pc, #16]	; (800709c <_localeconv_r+0x14>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6a18      	ldr	r0, [r3, #32]
 800708e:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <_localeconv_r+0x18>)
 8007090:	2800      	cmp	r0, #0
 8007092:	bf08      	it	eq
 8007094:	4618      	moveq	r0, r3
 8007096:	30f0      	adds	r0, #240	; 0xf0
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	200000bc 	.word	0x200000bc
 80070a0:	200005c0 	.word	0x200005c0

080070a4 <malloc>:
 80070a4:	4b02      	ldr	r3, [pc, #8]	; (80070b0 <malloc+0xc>)
 80070a6:	4601      	mov	r1, r0
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	f000 b803 	b.w	80070b4 <_malloc_r>
 80070ae:	bf00      	nop
 80070b0:	200000bc 	.word	0x200000bc

080070b4 <_malloc_r>:
 80070b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	f101 040b 	add.w	r4, r1, #11
 80070bc:	2c16      	cmp	r4, #22
 80070be:	4681      	mov	r9, r0
 80070c0:	d907      	bls.n	80070d2 <_malloc_r+0x1e>
 80070c2:	f034 0407 	bics.w	r4, r4, #7
 80070c6:	d505      	bpl.n	80070d4 <_malloc_r+0x20>
 80070c8:	230c      	movs	r3, #12
 80070ca:	f8c9 3000 	str.w	r3, [r9]
 80070ce:	2600      	movs	r6, #0
 80070d0:	e131      	b.n	8007336 <_malloc_r+0x282>
 80070d2:	2410      	movs	r4, #16
 80070d4:	428c      	cmp	r4, r1
 80070d6:	d3f7      	bcc.n	80070c8 <_malloc_r+0x14>
 80070d8:	4648      	mov	r0, r9
 80070da:	f000 fa05 	bl	80074e8 <__malloc_lock>
 80070de:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80070e2:	4d9b      	ldr	r5, [pc, #620]	; (8007350 <_malloc_r+0x29c>)
 80070e4:	d236      	bcs.n	8007154 <_malloc_r+0xa0>
 80070e6:	f104 0208 	add.w	r2, r4, #8
 80070ea:	442a      	add	r2, r5
 80070ec:	6856      	ldr	r6, [r2, #4]
 80070ee:	f1a2 0108 	sub.w	r1, r2, #8
 80070f2:	428e      	cmp	r6, r1
 80070f4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80070f8:	d102      	bne.n	8007100 <_malloc_r+0x4c>
 80070fa:	68d6      	ldr	r6, [r2, #12]
 80070fc:	42b2      	cmp	r2, r6
 80070fe:	d010      	beq.n	8007122 <_malloc_r+0x6e>
 8007100:	6873      	ldr	r3, [r6, #4]
 8007102:	68f2      	ldr	r2, [r6, #12]
 8007104:	68b1      	ldr	r1, [r6, #8]
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	60ca      	str	r2, [r1, #12]
 800710c:	4433      	add	r3, r6
 800710e:	6091      	str	r1, [r2, #8]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	605a      	str	r2, [r3, #4]
 8007118:	4648      	mov	r0, r9
 800711a:	f000 f9eb 	bl	80074f4 <__malloc_unlock>
 800711e:	3608      	adds	r6, #8
 8007120:	e109      	b.n	8007336 <_malloc_r+0x282>
 8007122:	3302      	adds	r3, #2
 8007124:	4a8b      	ldr	r2, [pc, #556]	; (8007354 <_malloc_r+0x2a0>)
 8007126:	692e      	ldr	r6, [r5, #16]
 8007128:	4611      	mov	r1, r2
 800712a:	4296      	cmp	r6, r2
 800712c:	d06d      	beq.n	800720a <_malloc_r+0x156>
 800712e:	6870      	ldr	r0, [r6, #4]
 8007130:	f020 0003 	bic.w	r0, r0, #3
 8007134:	1b07      	subs	r7, r0, r4
 8007136:	2f0f      	cmp	r7, #15
 8007138:	dd47      	ble.n	80071ca <_malloc_r+0x116>
 800713a:	1933      	adds	r3, r6, r4
 800713c:	f044 0401 	orr.w	r4, r4, #1
 8007140:	6074      	str	r4, [r6, #4]
 8007142:	616b      	str	r3, [r5, #20]
 8007144:	612b      	str	r3, [r5, #16]
 8007146:	60da      	str	r2, [r3, #12]
 8007148:	609a      	str	r2, [r3, #8]
 800714a:	f047 0201 	orr.w	r2, r7, #1
 800714e:	605a      	str	r2, [r3, #4]
 8007150:	5037      	str	r7, [r6, r0]
 8007152:	e7e1      	b.n	8007118 <_malloc_r+0x64>
 8007154:	0a63      	lsrs	r3, r4, #9
 8007156:	d02a      	beq.n	80071ae <_malloc_r+0xfa>
 8007158:	2b04      	cmp	r3, #4
 800715a:	d812      	bhi.n	8007182 <_malloc_r+0xce>
 800715c:	09a3      	lsrs	r3, r4, #6
 800715e:	3338      	adds	r3, #56	; 0x38
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007166:	6856      	ldr	r6, [r2, #4]
 8007168:	f1a2 0008 	sub.w	r0, r2, #8
 800716c:	4286      	cmp	r6, r0
 800716e:	d006      	beq.n	800717e <_malloc_r+0xca>
 8007170:	6872      	ldr	r2, [r6, #4]
 8007172:	f022 0203 	bic.w	r2, r2, #3
 8007176:	1b11      	subs	r1, r2, r4
 8007178:	290f      	cmp	r1, #15
 800717a:	dd1c      	ble.n	80071b6 <_malloc_r+0x102>
 800717c:	3b01      	subs	r3, #1
 800717e:	3301      	adds	r3, #1
 8007180:	e7d0      	b.n	8007124 <_malloc_r+0x70>
 8007182:	2b14      	cmp	r3, #20
 8007184:	d801      	bhi.n	800718a <_malloc_r+0xd6>
 8007186:	335b      	adds	r3, #91	; 0x5b
 8007188:	e7ea      	b.n	8007160 <_malloc_r+0xac>
 800718a:	2b54      	cmp	r3, #84	; 0x54
 800718c:	d802      	bhi.n	8007194 <_malloc_r+0xe0>
 800718e:	0b23      	lsrs	r3, r4, #12
 8007190:	336e      	adds	r3, #110	; 0x6e
 8007192:	e7e5      	b.n	8007160 <_malloc_r+0xac>
 8007194:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007198:	d802      	bhi.n	80071a0 <_malloc_r+0xec>
 800719a:	0be3      	lsrs	r3, r4, #15
 800719c:	3377      	adds	r3, #119	; 0x77
 800719e:	e7df      	b.n	8007160 <_malloc_r+0xac>
 80071a0:	f240 5254 	movw	r2, #1364	; 0x554
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d804      	bhi.n	80071b2 <_malloc_r+0xfe>
 80071a8:	0ca3      	lsrs	r3, r4, #18
 80071aa:	337c      	adds	r3, #124	; 0x7c
 80071ac:	e7d8      	b.n	8007160 <_malloc_r+0xac>
 80071ae:	233f      	movs	r3, #63	; 0x3f
 80071b0:	e7d6      	b.n	8007160 <_malloc_r+0xac>
 80071b2:	237e      	movs	r3, #126	; 0x7e
 80071b4:	e7d4      	b.n	8007160 <_malloc_r+0xac>
 80071b6:	2900      	cmp	r1, #0
 80071b8:	68f1      	ldr	r1, [r6, #12]
 80071ba:	db04      	blt.n	80071c6 <_malloc_r+0x112>
 80071bc:	68b3      	ldr	r3, [r6, #8]
 80071be:	60d9      	str	r1, [r3, #12]
 80071c0:	608b      	str	r3, [r1, #8]
 80071c2:	18b3      	adds	r3, r6, r2
 80071c4:	e7a4      	b.n	8007110 <_malloc_r+0x5c>
 80071c6:	460e      	mov	r6, r1
 80071c8:	e7d0      	b.n	800716c <_malloc_r+0xb8>
 80071ca:	2f00      	cmp	r7, #0
 80071cc:	616a      	str	r2, [r5, #20]
 80071ce:	612a      	str	r2, [r5, #16]
 80071d0:	db05      	blt.n	80071de <_malloc_r+0x12a>
 80071d2:	4430      	add	r0, r6
 80071d4:	6843      	ldr	r3, [r0, #4]
 80071d6:	f043 0301 	orr.w	r3, r3, #1
 80071da:	6043      	str	r3, [r0, #4]
 80071dc:	e79c      	b.n	8007118 <_malloc_r+0x64>
 80071de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80071e2:	d244      	bcs.n	800726e <_malloc_r+0x1ba>
 80071e4:	2201      	movs	r2, #1
 80071e6:	08c0      	lsrs	r0, r0, #3
 80071e8:	1087      	asrs	r7, r0, #2
 80071ea:	fa02 f707 	lsl.w	r7, r2, r7
 80071ee:	686a      	ldr	r2, [r5, #4]
 80071f0:	3001      	adds	r0, #1
 80071f2:	433a      	orrs	r2, r7
 80071f4:	606a      	str	r2, [r5, #4]
 80071f6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80071fa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80071fe:	3a08      	subs	r2, #8
 8007200:	60f2      	str	r2, [r6, #12]
 8007202:	60b7      	str	r7, [r6, #8]
 8007204:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007208:	60fe      	str	r6, [r7, #12]
 800720a:	2001      	movs	r0, #1
 800720c:	109a      	asrs	r2, r3, #2
 800720e:	fa00 f202 	lsl.w	r2, r0, r2
 8007212:	6868      	ldr	r0, [r5, #4]
 8007214:	4282      	cmp	r2, r0
 8007216:	f200 809f 	bhi.w	8007358 <_malloc_r+0x2a4>
 800721a:	4202      	tst	r2, r0
 800721c:	d106      	bne.n	800722c <_malloc_r+0x178>
 800721e:	f023 0303 	bic.w	r3, r3, #3
 8007222:	0052      	lsls	r2, r2, #1
 8007224:	4202      	tst	r2, r0
 8007226:	f103 0304 	add.w	r3, r3, #4
 800722a:	d0fa      	beq.n	8007222 <_malloc_r+0x16e>
 800722c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8007230:	46e0      	mov	r8, ip
 8007232:	469e      	mov	lr, r3
 8007234:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007238:	4546      	cmp	r6, r8
 800723a:	d153      	bne.n	80072e4 <_malloc_r+0x230>
 800723c:	f10e 0e01 	add.w	lr, lr, #1
 8007240:	f01e 0f03 	tst.w	lr, #3
 8007244:	f108 0808 	add.w	r8, r8, #8
 8007248:	d1f4      	bne.n	8007234 <_malloc_r+0x180>
 800724a:	0798      	lsls	r0, r3, #30
 800724c:	d179      	bne.n	8007342 <_malloc_r+0x28e>
 800724e:	686b      	ldr	r3, [r5, #4]
 8007250:	ea23 0302 	bic.w	r3, r3, r2
 8007254:	606b      	str	r3, [r5, #4]
 8007256:	6868      	ldr	r0, [r5, #4]
 8007258:	0052      	lsls	r2, r2, #1
 800725a:	4282      	cmp	r2, r0
 800725c:	d87c      	bhi.n	8007358 <_malloc_r+0x2a4>
 800725e:	2a00      	cmp	r2, #0
 8007260:	d07a      	beq.n	8007358 <_malloc_r+0x2a4>
 8007262:	4673      	mov	r3, lr
 8007264:	4202      	tst	r2, r0
 8007266:	d1e1      	bne.n	800722c <_malloc_r+0x178>
 8007268:	3304      	adds	r3, #4
 800726a:	0052      	lsls	r2, r2, #1
 800726c:	e7fa      	b.n	8007264 <_malloc_r+0x1b0>
 800726e:	0a42      	lsrs	r2, r0, #9
 8007270:	2a04      	cmp	r2, #4
 8007272:	d815      	bhi.n	80072a0 <_malloc_r+0x1ec>
 8007274:	0982      	lsrs	r2, r0, #6
 8007276:	3238      	adds	r2, #56	; 0x38
 8007278:	1c57      	adds	r7, r2, #1
 800727a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800727e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007282:	45be      	cmp	lr, r7
 8007284:	d126      	bne.n	80072d4 <_malloc_r+0x220>
 8007286:	2001      	movs	r0, #1
 8007288:	1092      	asrs	r2, r2, #2
 800728a:	fa00 f202 	lsl.w	r2, r0, r2
 800728e:	6868      	ldr	r0, [r5, #4]
 8007290:	4310      	orrs	r0, r2
 8007292:	6068      	str	r0, [r5, #4]
 8007294:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007298:	60b7      	str	r7, [r6, #8]
 800729a:	f8ce 6008 	str.w	r6, [lr, #8]
 800729e:	e7b3      	b.n	8007208 <_malloc_r+0x154>
 80072a0:	2a14      	cmp	r2, #20
 80072a2:	d801      	bhi.n	80072a8 <_malloc_r+0x1f4>
 80072a4:	325b      	adds	r2, #91	; 0x5b
 80072a6:	e7e7      	b.n	8007278 <_malloc_r+0x1c4>
 80072a8:	2a54      	cmp	r2, #84	; 0x54
 80072aa:	d802      	bhi.n	80072b2 <_malloc_r+0x1fe>
 80072ac:	0b02      	lsrs	r2, r0, #12
 80072ae:	326e      	adds	r2, #110	; 0x6e
 80072b0:	e7e2      	b.n	8007278 <_malloc_r+0x1c4>
 80072b2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80072b6:	d802      	bhi.n	80072be <_malloc_r+0x20a>
 80072b8:	0bc2      	lsrs	r2, r0, #15
 80072ba:	3277      	adds	r2, #119	; 0x77
 80072bc:	e7dc      	b.n	8007278 <_malloc_r+0x1c4>
 80072be:	f240 5754 	movw	r7, #1364	; 0x554
 80072c2:	42ba      	cmp	r2, r7
 80072c4:	bf9a      	itte	ls
 80072c6:	0c82      	lsrls	r2, r0, #18
 80072c8:	327c      	addls	r2, #124	; 0x7c
 80072ca:	227e      	movhi	r2, #126	; 0x7e
 80072cc:	e7d4      	b.n	8007278 <_malloc_r+0x1c4>
 80072ce:	68bf      	ldr	r7, [r7, #8]
 80072d0:	45be      	cmp	lr, r7
 80072d2:	d004      	beq.n	80072de <_malloc_r+0x22a>
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	f022 0203 	bic.w	r2, r2, #3
 80072da:	4290      	cmp	r0, r2
 80072dc:	d3f7      	bcc.n	80072ce <_malloc_r+0x21a>
 80072de:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80072e2:	e7d7      	b.n	8007294 <_malloc_r+0x1e0>
 80072e4:	6870      	ldr	r0, [r6, #4]
 80072e6:	68f7      	ldr	r7, [r6, #12]
 80072e8:	f020 0003 	bic.w	r0, r0, #3
 80072ec:	eba0 0a04 	sub.w	sl, r0, r4
 80072f0:	f1ba 0f0f 	cmp.w	sl, #15
 80072f4:	dd10      	ble.n	8007318 <_malloc_r+0x264>
 80072f6:	68b2      	ldr	r2, [r6, #8]
 80072f8:	1933      	adds	r3, r6, r4
 80072fa:	f044 0401 	orr.w	r4, r4, #1
 80072fe:	6074      	str	r4, [r6, #4]
 8007300:	60d7      	str	r7, [r2, #12]
 8007302:	60ba      	str	r2, [r7, #8]
 8007304:	f04a 0201 	orr.w	r2, sl, #1
 8007308:	616b      	str	r3, [r5, #20]
 800730a:	612b      	str	r3, [r5, #16]
 800730c:	60d9      	str	r1, [r3, #12]
 800730e:	6099      	str	r1, [r3, #8]
 8007310:	605a      	str	r2, [r3, #4]
 8007312:	f846 a000 	str.w	sl, [r6, r0]
 8007316:	e6ff      	b.n	8007118 <_malloc_r+0x64>
 8007318:	f1ba 0f00 	cmp.w	sl, #0
 800731c:	db0f      	blt.n	800733e <_malloc_r+0x28a>
 800731e:	4430      	add	r0, r6
 8007320:	6843      	ldr	r3, [r0, #4]
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	6043      	str	r3, [r0, #4]
 8007328:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800732c:	4648      	mov	r0, r9
 800732e:	60df      	str	r7, [r3, #12]
 8007330:	60bb      	str	r3, [r7, #8]
 8007332:	f000 f8df 	bl	80074f4 <__malloc_unlock>
 8007336:	4630      	mov	r0, r6
 8007338:	b003      	add	sp, #12
 800733a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733e:	463e      	mov	r6, r7
 8007340:	e77a      	b.n	8007238 <_malloc_r+0x184>
 8007342:	f85c 0908 	ldr.w	r0, [ip], #-8
 8007346:	3b01      	subs	r3, #1
 8007348:	4584      	cmp	ip, r0
 800734a:	f43f af7e 	beq.w	800724a <_malloc_r+0x196>
 800734e:	e782      	b.n	8007256 <_malloc_r+0x1a2>
 8007350:	200001b0 	.word	0x200001b0
 8007354:	200001b8 	.word	0x200001b8
 8007358:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800735c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007360:	f026 0603 	bic.w	r6, r6, #3
 8007364:	42b4      	cmp	r4, r6
 8007366:	d803      	bhi.n	8007370 <_malloc_r+0x2bc>
 8007368:	1b33      	subs	r3, r6, r4
 800736a:	2b0f      	cmp	r3, #15
 800736c:	f300 8095 	bgt.w	800749a <_malloc_r+0x3e6>
 8007370:	4a4f      	ldr	r2, [pc, #316]	; (80074b0 <_malloc_r+0x3fc>)
 8007372:	eb0b 0306 	add.w	r3, fp, r6
 8007376:	6817      	ldr	r7, [r2, #0]
 8007378:	4a4e      	ldr	r2, [pc, #312]	; (80074b4 <_malloc_r+0x400>)
 800737a:	3710      	adds	r7, #16
 800737c:	6811      	ldr	r1, [r2, #0]
 800737e:	4427      	add	r7, r4
 8007380:	3101      	adds	r1, #1
 8007382:	d005      	beq.n	8007390 <_malloc_r+0x2dc>
 8007384:	494c      	ldr	r1, [pc, #304]	; (80074b8 <_malloc_r+0x404>)
 8007386:	3901      	subs	r1, #1
 8007388:	440f      	add	r7, r1
 800738a:	3101      	adds	r1, #1
 800738c:	4249      	negs	r1, r1
 800738e:	400f      	ands	r7, r1
 8007390:	4639      	mov	r1, r7
 8007392:	4648      	mov	r0, r9
 8007394:	9201      	str	r2, [sp, #4]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	f000 fb84 	bl	8007aa4 <_sbrk_r>
 800739c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80073a0:	4680      	mov	r8, r0
 80073a2:	d055      	beq.n	8007450 <_malloc_r+0x39c>
 80073a4:	9b00      	ldr	r3, [sp, #0]
 80073a6:	9a01      	ldr	r2, [sp, #4]
 80073a8:	4283      	cmp	r3, r0
 80073aa:	d901      	bls.n	80073b0 <_malloc_r+0x2fc>
 80073ac:	45ab      	cmp	fp, r5
 80073ae:	d14f      	bne.n	8007450 <_malloc_r+0x39c>
 80073b0:	4842      	ldr	r0, [pc, #264]	; (80074bc <_malloc_r+0x408>)
 80073b2:	4543      	cmp	r3, r8
 80073b4:	6801      	ldr	r1, [r0, #0]
 80073b6:	4682      	mov	sl, r0
 80073b8:	eb07 0e01 	add.w	lr, r7, r1
 80073bc:	f8c0 e000 	str.w	lr, [r0]
 80073c0:	493f      	ldr	r1, [pc, #252]	; (80074c0 <_malloc_r+0x40c>)
 80073c2:	d113      	bne.n	80073ec <_malloc_r+0x338>
 80073c4:	420b      	tst	r3, r1
 80073c6:	d111      	bne.n	80073ec <_malloc_r+0x338>
 80073c8:	68ab      	ldr	r3, [r5, #8]
 80073ca:	443e      	add	r6, r7
 80073cc:	f046 0601 	orr.w	r6, r6, #1
 80073d0:	605e      	str	r6, [r3, #4]
 80073d2:	4a3c      	ldr	r2, [pc, #240]	; (80074c4 <_malloc_r+0x410>)
 80073d4:	f8da 3000 	ldr.w	r3, [sl]
 80073d8:	6811      	ldr	r1, [r2, #0]
 80073da:	428b      	cmp	r3, r1
 80073dc:	bf88      	it	hi
 80073de:	6013      	strhi	r3, [r2, #0]
 80073e0:	4a39      	ldr	r2, [pc, #228]	; (80074c8 <_malloc_r+0x414>)
 80073e2:	6811      	ldr	r1, [r2, #0]
 80073e4:	428b      	cmp	r3, r1
 80073e6:	bf88      	it	hi
 80073e8:	6013      	strhi	r3, [r2, #0]
 80073ea:	e031      	b.n	8007450 <_malloc_r+0x39c>
 80073ec:	6810      	ldr	r0, [r2, #0]
 80073ee:	3001      	adds	r0, #1
 80073f0:	bf1b      	ittet	ne
 80073f2:	eba8 0303 	subne.w	r3, r8, r3
 80073f6:	4473      	addne	r3, lr
 80073f8:	f8c2 8000 	streq.w	r8, [r2]
 80073fc:	f8ca 3000 	strne.w	r3, [sl]
 8007400:	f018 0007 	ands.w	r0, r8, #7
 8007404:	bf1c      	itt	ne
 8007406:	f1c0 0008 	rsbne	r0, r0, #8
 800740a:	4480      	addne	r8, r0
 800740c:	4b2a      	ldr	r3, [pc, #168]	; (80074b8 <_malloc_r+0x404>)
 800740e:	4447      	add	r7, r8
 8007410:	4418      	add	r0, r3
 8007412:	400f      	ands	r7, r1
 8007414:	1bc7      	subs	r7, r0, r7
 8007416:	4639      	mov	r1, r7
 8007418:	4648      	mov	r0, r9
 800741a:	f000 fb43 	bl	8007aa4 <_sbrk_r>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	bf04      	itt	eq
 8007422:	4640      	moveq	r0, r8
 8007424:	2700      	moveq	r7, #0
 8007426:	f8da 3000 	ldr.w	r3, [sl]
 800742a:	eba0 0008 	sub.w	r0, r0, r8
 800742e:	443b      	add	r3, r7
 8007430:	4407      	add	r7, r0
 8007432:	f047 0701 	orr.w	r7, r7, #1
 8007436:	45ab      	cmp	fp, r5
 8007438:	f8c5 8008 	str.w	r8, [r5, #8]
 800743c:	f8ca 3000 	str.w	r3, [sl]
 8007440:	f8c8 7004 	str.w	r7, [r8, #4]
 8007444:	d0c5      	beq.n	80073d2 <_malloc_r+0x31e>
 8007446:	2e0f      	cmp	r6, #15
 8007448:	d810      	bhi.n	800746c <_malloc_r+0x3b8>
 800744a:	2301      	movs	r3, #1
 800744c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007450:	68ab      	ldr	r3, [r5, #8]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	f022 0203 	bic.w	r2, r2, #3
 8007458:	4294      	cmp	r4, r2
 800745a:	eba2 0304 	sub.w	r3, r2, r4
 800745e:	d801      	bhi.n	8007464 <_malloc_r+0x3b0>
 8007460:	2b0f      	cmp	r3, #15
 8007462:	dc1a      	bgt.n	800749a <_malloc_r+0x3e6>
 8007464:	4648      	mov	r0, r9
 8007466:	f000 f845 	bl	80074f4 <__malloc_unlock>
 800746a:	e630      	b.n	80070ce <_malloc_r+0x1a>
 800746c:	2205      	movs	r2, #5
 800746e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007472:	3e0c      	subs	r6, #12
 8007474:	f026 0607 	bic.w	r6, r6, #7
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	4333      	orrs	r3, r6
 800747e:	f8cb 3004 	str.w	r3, [fp, #4]
 8007482:	2e0f      	cmp	r6, #15
 8007484:	eb0b 0306 	add.w	r3, fp, r6
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	d9a1      	bls.n	80073d2 <_malloc_r+0x31e>
 800748e:	f10b 0108 	add.w	r1, fp, #8
 8007492:	4648      	mov	r0, r9
 8007494:	f000 fc14 	bl	8007cc0 <_free_r>
 8007498:	e79b      	b.n	80073d2 <_malloc_r+0x31e>
 800749a:	68ae      	ldr	r6, [r5, #8]
 800749c:	f044 0201 	orr.w	r2, r4, #1
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	4434      	add	r4, r6
 80074a6:	6072      	str	r2, [r6, #4]
 80074a8:	60ac      	str	r4, [r5, #8]
 80074aa:	6063      	str	r3, [r4, #4]
 80074ac:	e634      	b.n	8007118 <_malloc_r+0x64>
 80074ae:	bf00      	nop
 80074b0:	20004504 	.word	0x20004504
 80074b4:	200005b8 	.word	0x200005b8
 80074b8:	00000080 	.word	0x00000080
 80074bc:	200044d4 	.word	0x200044d4
 80074c0:	0000007f 	.word	0x0000007f
 80074c4:	200044fc 	.word	0x200044fc
 80074c8:	20004500 	.word	0x20004500

080074cc <memchr>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	b2c9      	uxtb	r1, r1
 80074d0:	4402      	add	r2, r0
 80074d2:	4290      	cmp	r0, r2
 80074d4:	4603      	mov	r3, r0
 80074d6:	d101      	bne.n	80074dc <memchr+0x10>
 80074d8:	2000      	movs	r0, #0
 80074da:	bd10      	pop	{r4, pc}
 80074dc:	781c      	ldrb	r4, [r3, #0]
 80074de:	3001      	adds	r0, #1
 80074e0:	428c      	cmp	r4, r1
 80074e2:	d1f6      	bne.n	80074d2 <memchr+0x6>
 80074e4:	4618      	mov	r0, r3
 80074e6:	bd10      	pop	{r4, pc}

080074e8 <__malloc_lock>:
 80074e8:	4801      	ldr	r0, [pc, #4]	; (80074f0 <__malloc_lock+0x8>)
 80074ea:	f000 bca5 	b.w	8007e38 <__retarget_lock_acquire_recursive>
 80074ee:	bf00      	nop
 80074f0:	20004664 	.word	0x20004664

080074f4 <__malloc_unlock>:
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <__malloc_unlock+0x8>)
 80074f6:	f000 bca0 	b.w	8007e3a <__retarget_lock_release_recursive>
 80074fa:	bf00      	nop
 80074fc:	20004664 	.word	0x20004664

08007500 <_Balloc>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007504:	4604      	mov	r4, r0
 8007506:	460e      	mov	r6, r1
 8007508:	b93d      	cbnz	r5, 800751a <_Balloc+0x1a>
 800750a:	2010      	movs	r0, #16
 800750c:	f7ff fdca 	bl	80070a4 <malloc>
 8007510:	6260      	str	r0, [r4, #36]	; 0x24
 8007512:	6045      	str	r5, [r0, #4]
 8007514:	6085      	str	r5, [r0, #8]
 8007516:	6005      	str	r5, [r0, #0]
 8007518:	60c5      	str	r5, [r0, #12]
 800751a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800751c:	68eb      	ldr	r3, [r5, #12]
 800751e:	b183      	cbz	r3, 8007542 <_Balloc+0x42>
 8007520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007528:	b9b8      	cbnz	r0, 800755a <_Balloc+0x5a>
 800752a:	2101      	movs	r1, #1
 800752c:	fa01 f506 	lsl.w	r5, r1, r6
 8007530:	1d6a      	adds	r2, r5, #5
 8007532:	0092      	lsls	r2, r2, #2
 8007534:	4620      	mov	r0, r4
 8007536:	f000 fb3f 	bl	8007bb8 <_calloc_r>
 800753a:	b160      	cbz	r0, 8007556 <_Balloc+0x56>
 800753c:	6046      	str	r6, [r0, #4]
 800753e:	6085      	str	r5, [r0, #8]
 8007540:	e00e      	b.n	8007560 <_Balloc+0x60>
 8007542:	2221      	movs	r2, #33	; 0x21
 8007544:	2104      	movs	r1, #4
 8007546:	4620      	mov	r0, r4
 8007548:	f000 fb36 	bl	8007bb8 <_calloc_r>
 800754c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800754e:	60e8      	str	r0, [r5, #12]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e4      	bne.n	8007520 <_Balloc+0x20>
 8007556:	2000      	movs	r0, #0
 8007558:	bd70      	pop	{r4, r5, r6, pc}
 800755a:	6802      	ldr	r2, [r0, #0]
 800755c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007560:	2300      	movs	r3, #0
 8007562:	6103      	str	r3, [r0, #16]
 8007564:	60c3      	str	r3, [r0, #12]
 8007566:	bd70      	pop	{r4, r5, r6, pc}

08007568 <_Bfree>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800756c:	4606      	mov	r6, r0
 800756e:	460d      	mov	r5, r1
 8007570:	b93c      	cbnz	r4, 8007582 <_Bfree+0x1a>
 8007572:	2010      	movs	r0, #16
 8007574:	f7ff fd96 	bl	80070a4 <malloc>
 8007578:	6270      	str	r0, [r6, #36]	; 0x24
 800757a:	6044      	str	r4, [r0, #4]
 800757c:	6084      	str	r4, [r0, #8]
 800757e:	6004      	str	r4, [r0, #0]
 8007580:	60c4      	str	r4, [r0, #12]
 8007582:	b13d      	cbz	r5, 8007594 <_Bfree+0x2c>
 8007584:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007586:	686a      	ldr	r2, [r5, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800758e:	6029      	str	r1, [r5, #0]
 8007590:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007594:	bd70      	pop	{r4, r5, r6, pc}

08007596 <__multadd>:
 8007596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759a:	461f      	mov	r7, r3
 800759c:	4606      	mov	r6, r0
 800759e:	460c      	mov	r4, r1
 80075a0:	2300      	movs	r3, #0
 80075a2:	690d      	ldr	r5, [r1, #16]
 80075a4:	f101 0e14 	add.w	lr, r1, #20
 80075a8:	f8de 0000 	ldr.w	r0, [lr]
 80075ac:	3301      	adds	r3, #1
 80075ae:	b281      	uxth	r1, r0
 80075b0:	fb02 7101 	mla	r1, r2, r1, r7
 80075b4:	0c00      	lsrs	r0, r0, #16
 80075b6:	0c0f      	lsrs	r7, r1, #16
 80075b8:	fb02 7000 	mla	r0, r2, r0, r7
 80075bc:	b289      	uxth	r1, r1
 80075be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80075c2:	429d      	cmp	r5, r3
 80075c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80075c8:	f84e 1b04 	str.w	r1, [lr], #4
 80075cc:	dcec      	bgt.n	80075a8 <__multadd+0x12>
 80075ce:	b1d7      	cbz	r7, 8007606 <__multadd+0x70>
 80075d0:	68a3      	ldr	r3, [r4, #8]
 80075d2:	429d      	cmp	r5, r3
 80075d4:	db12      	blt.n	80075fc <__multadd+0x66>
 80075d6:	6861      	ldr	r1, [r4, #4]
 80075d8:	4630      	mov	r0, r6
 80075da:	3101      	adds	r1, #1
 80075dc:	f7ff ff90 	bl	8007500 <_Balloc>
 80075e0:	4680      	mov	r8, r0
 80075e2:	6922      	ldr	r2, [r4, #16]
 80075e4:	f104 010c 	add.w	r1, r4, #12
 80075e8:	3202      	adds	r2, #2
 80075ea:	0092      	lsls	r2, r2, #2
 80075ec:	300c      	adds	r0, #12
 80075ee:	f7fd fed3 	bl	8005398 <memcpy>
 80075f2:	4621      	mov	r1, r4
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff ffb7 	bl	8007568 <_Bfree>
 80075fa:	4644      	mov	r4, r8
 80075fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007600:	3501      	adds	r5, #1
 8007602:	615f      	str	r7, [r3, #20]
 8007604:	6125      	str	r5, [r4, #16]
 8007606:	4620      	mov	r0, r4
 8007608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800760c <__hi0bits>:
 800760c:	0c02      	lsrs	r2, r0, #16
 800760e:	0412      	lsls	r2, r2, #16
 8007610:	4603      	mov	r3, r0
 8007612:	b9b2      	cbnz	r2, 8007642 <__hi0bits+0x36>
 8007614:	0403      	lsls	r3, r0, #16
 8007616:	2010      	movs	r0, #16
 8007618:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800761c:	bf04      	itt	eq
 800761e:	021b      	lsleq	r3, r3, #8
 8007620:	3008      	addeq	r0, #8
 8007622:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007626:	bf04      	itt	eq
 8007628:	011b      	lsleq	r3, r3, #4
 800762a:	3004      	addeq	r0, #4
 800762c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007630:	bf04      	itt	eq
 8007632:	009b      	lsleq	r3, r3, #2
 8007634:	3002      	addeq	r0, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	db06      	blt.n	8007648 <__hi0bits+0x3c>
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	d503      	bpl.n	8007646 <__hi0bits+0x3a>
 800763e:	3001      	adds	r0, #1
 8007640:	4770      	bx	lr
 8007642:	2000      	movs	r0, #0
 8007644:	e7e8      	b.n	8007618 <__hi0bits+0xc>
 8007646:	2020      	movs	r0, #32
 8007648:	4770      	bx	lr

0800764a <__lo0bits>:
 800764a:	6803      	ldr	r3, [r0, #0]
 800764c:	4601      	mov	r1, r0
 800764e:	f013 0207 	ands.w	r2, r3, #7
 8007652:	d00b      	beq.n	800766c <__lo0bits+0x22>
 8007654:	07da      	lsls	r2, r3, #31
 8007656:	d423      	bmi.n	80076a0 <__lo0bits+0x56>
 8007658:	0798      	lsls	r0, r3, #30
 800765a:	bf49      	itett	mi
 800765c:	085b      	lsrmi	r3, r3, #1
 800765e:	089b      	lsrpl	r3, r3, #2
 8007660:	2001      	movmi	r0, #1
 8007662:	600b      	strmi	r3, [r1, #0]
 8007664:	bf5c      	itt	pl
 8007666:	600b      	strpl	r3, [r1, #0]
 8007668:	2002      	movpl	r0, #2
 800766a:	4770      	bx	lr
 800766c:	b298      	uxth	r0, r3
 800766e:	b9a8      	cbnz	r0, 800769c <__lo0bits+0x52>
 8007670:	2010      	movs	r0, #16
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007678:	bf04      	itt	eq
 800767a:	0a1b      	lsreq	r3, r3, #8
 800767c:	3008      	addeq	r0, #8
 800767e:	071a      	lsls	r2, r3, #28
 8007680:	bf04      	itt	eq
 8007682:	091b      	lsreq	r3, r3, #4
 8007684:	3004      	addeq	r0, #4
 8007686:	079a      	lsls	r2, r3, #30
 8007688:	bf04      	itt	eq
 800768a:	089b      	lsreq	r3, r3, #2
 800768c:	3002      	addeq	r0, #2
 800768e:	07da      	lsls	r2, r3, #31
 8007690:	d402      	bmi.n	8007698 <__lo0bits+0x4e>
 8007692:	085b      	lsrs	r3, r3, #1
 8007694:	d006      	beq.n	80076a4 <__lo0bits+0x5a>
 8007696:	3001      	adds	r0, #1
 8007698:	600b      	str	r3, [r1, #0]
 800769a:	4770      	bx	lr
 800769c:	4610      	mov	r0, r2
 800769e:	e7e9      	b.n	8007674 <__lo0bits+0x2a>
 80076a0:	2000      	movs	r0, #0
 80076a2:	4770      	bx	lr
 80076a4:	2020      	movs	r0, #32
 80076a6:	4770      	bx	lr

080076a8 <__i2b>:
 80076a8:	b510      	push	{r4, lr}
 80076aa:	460c      	mov	r4, r1
 80076ac:	2101      	movs	r1, #1
 80076ae:	f7ff ff27 	bl	8007500 <_Balloc>
 80076b2:	2201      	movs	r2, #1
 80076b4:	6144      	str	r4, [r0, #20]
 80076b6:	6102      	str	r2, [r0, #16]
 80076b8:	bd10      	pop	{r4, pc}

080076ba <__multiply>:
 80076ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076be:	4614      	mov	r4, r2
 80076c0:	690a      	ldr	r2, [r1, #16]
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	4689      	mov	r9, r1
 80076c6:	429a      	cmp	r2, r3
 80076c8:	bfbe      	ittt	lt
 80076ca:	460b      	movlt	r3, r1
 80076cc:	46a1      	movlt	r9, r4
 80076ce:	461c      	movlt	r4, r3
 80076d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80076d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80076dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076e0:	eb07 060a 	add.w	r6, r7, sl
 80076e4:	429e      	cmp	r6, r3
 80076e6:	bfc8      	it	gt
 80076e8:	3101      	addgt	r1, #1
 80076ea:	f7ff ff09 	bl	8007500 <_Balloc>
 80076ee:	f100 0514 	add.w	r5, r0, #20
 80076f2:	462b      	mov	r3, r5
 80076f4:	2200      	movs	r2, #0
 80076f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076fa:	4543      	cmp	r3, r8
 80076fc:	d316      	bcc.n	800772c <__multiply+0x72>
 80076fe:	f104 0214 	add.w	r2, r4, #20
 8007702:	f109 0114 	add.w	r1, r9, #20
 8007706:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800770a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	9c01      	ldr	r4, [sp, #4]
 8007712:	4613      	mov	r3, r2
 8007714:	4294      	cmp	r4, r2
 8007716:	d80c      	bhi.n	8007732 <__multiply+0x78>
 8007718:	2e00      	cmp	r6, #0
 800771a:	dd03      	ble.n	8007724 <__multiply+0x6a>
 800771c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007720:	2b00      	cmp	r3, #0
 8007722:	d054      	beq.n	80077ce <__multiply+0x114>
 8007724:	6106      	str	r6, [r0, #16]
 8007726:	b003      	add	sp, #12
 8007728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772c:	f843 2b04 	str.w	r2, [r3], #4
 8007730:	e7e3      	b.n	80076fa <__multiply+0x40>
 8007732:	f8b3 a000 	ldrh.w	sl, [r3]
 8007736:	3204      	adds	r2, #4
 8007738:	f1ba 0f00 	cmp.w	sl, #0
 800773c:	d020      	beq.n	8007780 <__multiply+0xc6>
 800773e:	46ae      	mov	lr, r5
 8007740:	4689      	mov	r9, r1
 8007742:	f04f 0c00 	mov.w	ip, #0
 8007746:	f859 4b04 	ldr.w	r4, [r9], #4
 800774a:	f8be b000 	ldrh.w	fp, [lr]
 800774e:	b2a3      	uxth	r3, r4
 8007750:	fb0a b303 	mla	r3, sl, r3, fp
 8007754:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007758:	f8de 4000 	ldr.w	r4, [lr]
 800775c:	4463      	add	r3, ip
 800775e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007762:	fb0a c40b 	mla	r4, sl, fp, ip
 8007766:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800776a:	b29b      	uxth	r3, r3
 800776c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007770:	454f      	cmp	r7, r9
 8007772:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007776:	f84e 3b04 	str.w	r3, [lr], #4
 800777a:	d8e4      	bhi.n	8007746 <__multiply+0x8c>
 800777c:	f8ce c000 	str.w	ip, [lr]
 8007780:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007784:	f1b9 0f00 	cmp.w	r9, #0
 8007788:	d01f      	beq.n	80077ca <__multiply+0x110>
 800778a:	46ae      	mov	lr, r5
 800778c:	468c      	mov	ip, r1
 800778e:	f04f 0a00 	mov.w	sl, #0
 8007792:	682b      	ldr	r3, [r5, #0]
 8007794:	f8bc 4000 	ldrh.w	r4, [ip]
 8007798:	f8be b002 	ldrh.w	fp, [lr, #2]
 800779c:	b29b      	uxth	r3, r3
 800779e:	fb09 b404 	mla	r4, r9, r4, fp
 80077a2:	44a2      	add	sl, r4
 80077a4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80077a8:	f84e 3b04 	str.w	r3, [lr], #4
 80077ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077b0:	f8be 4000 	ldrh.w	r4, [lr]
 80077b4:	0c1b      	lsrs	r3, r3, #16
 80077b6:	fb09 4303 	mla	r3, r9, r3, r4
 80077ba:	4567      	cmp	r7, ip
 80077bc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80077c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077c4:	d8e6      	bhi.n	8007794 <__multiply+0xda>
 80077c6:	f8ce 3000 	str.w	r3, [lr]
 80077ca:	3504      	adds	r5, #4
 80077cc:	e7a0      	b.n	8007710 <__multiply+0x56>
 80077ce:	3e01      	subs	r6, #1
 80077d0:	e7a2      	b.n	8007718 <__multiply+0x5e>
	...

080077d4 <__pow5mult>:
 80077d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d8:	4615      	mov	r5, r2
 80077da:	f012 0203 	ands.w	r2, r2, #3
 80077de:	4606      	mov	r6, r0
 80077e0:	460f      	mov	r7, r1
 80077e2:	d007      	beq.n	80077f4 <__pow5mult+0x20>
 80077e4:	4c21      	ldr	r4, [pc, #132]	; (800786c <__pow5mult+0x98>)
 80077e6:	3a01      	subs	r2, #1
 80077e8:	2300      	movs	r3, #0
 80077ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077ee:	f7ff fed2 	bl	8007596 <__multadd>
 80077f2:	4607      	mov	r7, r0
 80077f4:	10ad      	asrs	r5, r5, #2
 80077f6:	d035      	beq.n	8007864 <__pow5mult+0x90>
 80077f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077fa:	b93c      	cbnz	r4, 800780c <__pow5mult+0x38>
 80077fc:	2010      	movs	r0, #16
 80077fe:	f7ff fc51 	bl	80070a4 <malloc>
 8007802:	6270      	str	r0, [r6, #36]	; 0x24
 8007804:	6044      	str	r4, [r0, #4]
 8007806:	6084      	str	r4, [r0, #8]
 8007808:	6004      	str	r4, [r0, #0]
 800780a:	60c4      	str	r4, [r0, #12]
 800780c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007810:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007814:	b94c      	cbnz	r4, 800782a <__pow5mult+0x56>
 8007816:	f240 2171 	movw	r1, #625	; 0x271
 800781a:	4630      	mov	r0, r6
 800781c:	f7ff ff44 	bl	80076a8 <__i2b>
 8007820:	2300      	movs	r3, #0
 8007822:	4604      	mov	r4, r0
 8007824:	f8c8 0008 	str.w	r0, [r8, #8]
 8007828:	6003      	str	r3, [r0, #0]
 800782a:	f04f 0800 	mov.w	r8, #0
 800782e:	07eb      	lsls	r3, r5, #31
 8007830:	d50a      	bpl.n	8007848 <__pow5mult+0x74>
 8007832:	4639      	mov	r1, r7
 8007834:	4622      	mov	r2, r4
 8007836:	4630      	mov	r0, r6
 8007838:	f7ff ff3f 	bl	80076ba <__multiply>
 800783c:	4681      	mov	r9, r0
 800783e:	4639      	mov	r1, r7
 8007840:	4630      	mov	r0, r6
 8007842:	f7ff fe91 	bl	8007568 <_Bfree>
 8007846:	464f      	mov	r7, r9
 8007848:	106d      	asrs	r5, r5, #1
 800784a:	d00b      	beq.n	8007864 <__pow5mult+0x90>
 800784c:	6820      	ldr	r0, [r4, #0]
 800784e:	b938      	cbnz	r0, 8007860 <__pow5mult+0x8c>
 8007850:	4622      	mov	r2, r4
 8007852:	4621      	mov	r1, r4
 8007854:	4630      	mov	r0, r6
 8007856:	f7ff ff30 	bl	80076ba <__multiply>
 800785a:	6020      	str	r0, [r4, #0]
 800785c:	f8c0 8000 	str.w	r8, [r0]
 8007860:	4604      	mov	r4, r0
 8007862:	e7e4      	b.n	800782e <__pow5mult+0x5a>
 8007864:	4638      	mov	r0, r7
 8007866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786a:	bf00      	nop
 800786c:	08008b58 	.word	0x08008b58

08007870 <__lshift>:
 8007870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007874:	460c      	mov	r4, r1
 8007876:	4607      	mov	r7, r0
 8007878:	4616      	mov	r6, r2
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007880:	eb0a 0903 	add.w	r9, sl, r3
 8007884:	6849      	ldr	r1, [r1, #4]
 8007886:	68a3      	ldr	r3, [r4, #8]
 8007888:	f109 0501 	add.w	r5, r9, #1
 800788c:	42ab      	cmp	r3, r5
 800788e:	db31      	blt.n	80078f4 <__lshift+0x84>
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff fe35 	bl	8007500 <_Balloc>
 8007896:	2200      	movs	r2, #0
 8007898:	4680      	mov	r8, r0
 800789a:	4611      	mov	r1, r2
 800789c:	f100 0314 	add.w	r3, r0, #20
 80078a0:	4552      	cmp	r2, sl
 80078a2:	db2a      	blt.n	80078fa <__lshift+0x8a>
 80078a4:	6920      	ldr	r0, [r4, #16]
 80078a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078aa:	f104 0114 	add.w	r1, r4, #20
 80078ae:	f016 021f 	ands.w	r2, r6, #31
 80078b2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80078b6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80078ba:	d022      	beq.n	8007902 <__lshift+0x92>
 80078bc:	2000      	movs	r0, #0
 80078be:	f1c2 0c20 	rsb	ip, r2, #32
 80078c2:	680e      	ldr	r6, [r1, #0]
 80078c4:	4096      	lsls	r6, r2
 80078c6:	4330      	orrs	r0, r6
 80078c8:	f843 0b04 	str.w	r0, [r3], #4
 80078cc:	f851 0b04 	ldr.w	r0, [r1], #4
 80078d0:	458e      	cmp	lr, r1
 80078d2:	fa20 f00c 	lsr.w	r0, r0, ip
 80078d6:	d8f4      	bhi.n	80078c2 <__lshift+0x52>
 80078d8:	6018      	str	r0, [r3, #0]
 80078da:	b108      	cbz	r0, 80078e0 <__lshift+0x70>
 80078dc:	f109 0502 	add.w	r5, r9, #2
 80078e0:	3d01      	subs	r5, #1
 80078e2:	4638      	mov	r0, r7
 80078e4:	f8c8 5010 	str.w	r5, [r8, #16]
 80078e8:	4621      	mov	r1, r4
 80078ea:	f7ff fe3d 	bl	8007568 <_Bfree>
 80078ee:	4640      	mov	r0, r8
 80078f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f4:	3101      	adds	r1, #1
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	e7c8      	b.n	800788c <__lshift+0x1c>
 80078fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80078fe:	3201      	adds	r2, #1
 8007900:	e7ce      	b.n	80078a0 <__lshift+0x30>
 8007902:	3b04      	subs	r3, #4
 8007904:	f851 2b04 	ldr.w	r2, [r1], #4
 8007908:	458e      	cmp	lr, r1
 800790a:	f843 2f04 	str.w	r2, [r3, #4]!
 800790e:	d8f9      	bhi.n	8007904 <__lshift+0x94>
 8007910:	e7e6      	b.n	80078e0 <__lshift+0x70>

08007912 <__mcmp>:
 8007912:	6903      	ldr	r3, [r0, #16]
 8007914:	690a      	ldr	r2, [r1, #16]
 8007916:	b530      	push	{r4, r5, lr}
 8007918:	1a9b      	subs	r3, r3, r2
 800791a:	d10c      	bne.n	8007936 <__mcmp+0x24>
 800791c:	0092      	lsls	r2, r2, #2
 800791e:	3014      	adds	r0, #20
 8007920:	3114      	adds	r1, #20
 8007922:	1884      	adds	r4, r0, r2
 8007924:	4411      	add	r1, r2
 8007926:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800792a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800792e:	4295      	cmp	r5, r2
 8007930:	d003      	beq.n	800793a <__mcmp+0x28>
 8007932:	d305      	bcc.n	8007940 <__mcmp+0x2e>
 8007934:	2301      	movs	r3, #1
 8007936:	4618      	mov	r0, r3
 8007938:	bd30      	pop	{r4, r5, pc}
 800793a:	42a0      	cmp	r0, r4
 800793c:	d3f3      	bcc.n	8007926 <__mcmp+0x14>
 800793e:	e7fa      	b.n	8007936 <__mcmp+0x24>
 8007940:	f04f 33ff 	mov.w	r3, #4294967295
 8007944:	e7f7      	b.n	8007936 <__mcmp+0x24>

08007946 <__mdiff>:
 8007946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794a:	460d      	mov	r5, r1
 800794c:	4607      	mov	r7, r0
 800794e:	4611      	mov	r1, r2
 8007950:	4628      	mov	r0, r5
 8007952:	4614      	mov	r4, r2
 8007954:	f7ff ffdd 	bl	8007912 <__mcmp>
 8007958:	1e06      	subs	r6, r0, #0
 800795a:	d108      	bne.n	800796e <__mdiff+0x28>
 800795c:	4631      	mov	r1, r6
 800795e:	4638      	mov	r0, r7
 8007960:	f7ff fdce 	bl	8007500 <_Balloc>
 8007964:	2301      	movs	r3, #1
 8007966:	6146      	str	r6, [r0, #20]
 8007968:	6103      	str	r3, [r0, #16]
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796e:	bfa4      	itt	ge
 8007970:	4623      	movge	r3, r4
 8007972:	462c      	movge	r4, r5
 8007974:	4638      	mov	r0, r7
 8007976:	6861      	ldr	r1, [r4, #4]
 8007978:	bfa6      	itte	ge
 800797a:	461d      	movge	r5, r3
 800797c:	2600      	movge	r6, #0
 800797e:	2601      	movlt	r6, #1
 8007980:	f7ff fdbe 	bl	8007500 <_Balloc>
 8007984:	f04f 0c00 	mov.w	ip, #0
 8007988:	60c6      	str	r6, [r0, #12]
 800798a:	692b      	ldr	r3, [r5, #16]
 800798c:	6926      	ldr	r6, [r4, #16]
 800798e:	f104 0214 	add.w	r2, r4, #20
 8007992:	f105 0914 	add.w	r9, r5, #20
 8007996:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800799a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800799e:	f100 0114 	add.w	r1, r0, #20
 80079a2:	f852 ab04 	ldr.w	sl, [r2], #4
 80079a6:	f859 5b04 	ldr.w	r5, [r9], #4
 80079aa:	fa1f f38a 	uxth.w	r3, sl
 80079ae:	4463      	add	r3, ip
 80079b0:	b2ac      	uxth	r4, r5
 80079b2:	1b1b      	subs	r3, r3, r4
 80079b4:	0c2c      	lsrs	r4, r5, #16
 80079b6:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80079ba:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80079be:	b29b      	uxth	r3, r3
 80079c0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80079c4:	45c8      	cmp	r8, r9
 80079c6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80079ca:	4696      	mov	lr, r2
 80079cc:	f841 4b04 	str.w	r4, [r1], #4
 80079d0:	d8e7      	bhi.n	80079a2 <__mdiff+0x5c>
 80079d2:	45be      	cmp	lr, r7
 80079d4:	d305      	bcc.n	80079e2 <__mdiff+0x9c>
 80079d6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80079da:	b18b      	cbz	r3, 8007a00 <__mdiff+0xba>
 80079dc:	6106      	str	r6, [r0, #16]
 80079de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80079e6:	b2a2      	uxth	r2, r4
 80079e8:	4462      	add	r2, ip
 80079ea:	1413      	asrs	r3, r2, #16
 80079ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80079f0:	b292      	uxth	r2, r2
 80079f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80079fa:	f841 2b04 	str.w	r2, [r1], #4
 80079fe:	e7e8      	b.n	80079d2 <__mdiff+0x8c>
 8007a00:	3e01      	subs	r6, #1
 8007a02:	e7e8      	b.n	80079d6 <__mdiff+0x90>

08007a04 <__d2b>:
 8007a04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a08:	461c      	mov	r4, r3
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	4690      	mov	r8, r2
 8007a0e:	9e08      	ldr	r6, [sp, #32]
 8007a10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a12:	f7ff fd75 	bl	8007500 <_Balloc>
 8007a16:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007a1a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007a1e:	4607      	mov	r7, r0
 8007a20:	bb34      	cbnz	r4, 8007a70 <__d2b+0x6c>
 8007a22:	9201      	str	r2, [sp, #4]
 8007a24:	f1b8 0f00 	cmp.w	r8, #0
 8007a28:	d027      	beq.n	8007a7a <__d2b+0x76>
 8007a2a:	a802      	add	r0, sp, #8
 8007a2c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007a30:	f7ff fe0b 	bl	800764a <__lo0bits>
 8007a34:	9900      	ldr	r1, [sp, #0]
 8007a36:	b1f0      	cbz	r0, 8007a76 <__d2b+0x72>
 8007a38:	9a01      	ldr	r2, [sp, #4]
 8007a3a:	f1c0 0320 	rsb	r3, r0, #32
 8007a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a42:	430b      	orrs	r3, r1
 8007a44:	40c2      	lsrs	r2, r0
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	9201      	str	r2, [sp, #4]
 8007a4a:	9b01      	ldr	r3, [sp, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bf14      	ite	ne
 8007a50:	2102      	movne	r1, #2
 8007a52:	2101      	moveq	r1, #1
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	6139      	str	r1, [r7, #16]
 8007a58:	b1c4      	cbz	r4, 8007a8c <__d2b+0x88>
 8007a5a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007a5e:	4404      	add	r4, r0
 8007a60:	6034      	str	r4, [r6, #0]
 8007a62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a66:	6028      	str	r0, [r5, #0]
 8007a68:	4638      	mov	r0, r7
 8007a6a:	b002      	add	sp, #8
 8007a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a70:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a74:	e7d5      	b.n	8007a22 <__d2b+0x1e>
 8007a76:	6179      	str	r1, [r7, #20]
 8007a78:	e7e7      	b.n	8007a4a <__d2b+0x46>
 8007a7a:	a801      	add	r0, sp, #4
 8007a7c:	f7ff fde5 	bl	800764a <__lo0bits>
 8007a80:	2101      	movs	r1, #1
 8007a82:	9b01      	ldr	r3, [sp, #4]
 8007a84:	6139      	str	r1, [r7, #16]
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	3020      	adds	r0, #32
 8007a8a:	e7e5      	b.n	8007a58 <__d2b+0x54>
 8007a8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a90:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007a94:	6030      	str	r0, [r6, #0]
 8007a96:	6918      	ldr	r0, [r3, #16]
 8007a98:	f7ff fdb8 	bl	800760c <__hi0bits>
 8007a9c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007aa0:	e7e1      	b.n	8007a66 <__d2b+0x62>
	...

08007aa4 <_sbrk_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4c05      	ldr	r4, [pc, #20]	; (8007ac0 <_sbrk_r+0x1c>)
 8007aaa:	4605      	mov	r5, r0
 8007aac:	4608      	mov	r0, r1
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	f000 fb80 	bl	80081b4 <_sbrk>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d102      	bne.n	8007abe <_sbrk_r+0x1a>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	b103      	cbz	r3, 8007abe <_sbrk_r+0x1a>
 8007abc:	602b      	str	r3, [r5, #0]
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	2000466c 	.word	0x2000466c

08007ac4 <__ssprint_r>:
 8007ac4:	6893      	ldr	r3, [r2, #8]
 8007ac6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aca:	4681      	mov	r9, r0
 8007acc:	460c      	mov	r4, r1
 8007ace:	4617      	mov	r7, r2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d060      	beq.n	8007b96 <__ssprint_r+0xd2>
 8007ad4:	f04f 0b00 	mov.w	fp, #0
 8007ad8:	465e      	mov	r6, fp
 8007ada:	f8d2 a000 	ldr.w	sl, [r2]
 8007ade:	b356      	cbz	r6, 8007b36 <__ssprint_r+0x72>
 8007ae0:	68a3      	ldr	r3, [r4, #8]
 8007ae2:	429e      	cmp	r6, r3
 8007ae4:	d344      	bcc.n	8007b70 <__ssprint_r+0xac>
 8007ae6:	89a2      	ldrh	r2, [r4, #12]
 8007ae8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007aec:	d03e      	beq.n	8007b6c <__ssprint_r+0xa8>
 8007aee:	2302      	movs	r3, #2
 8007af0:	6825      	ldr	r5, [r4, #0]
 8007af2:	6921      	ldr	r1, [r4, #16]
 8007af4:	eba5 0801 	sub.w	r8, r5, r1
 8007af8:	6965      	ldr	r5, [r4, #20]
 8007afa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007afe:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b02:	f108 0301 	add.w	r3, r8, #1
 8007b06:	4433      	add	r3, r6
 8007b08:	429d      	cmp	r5, r3
 8007b0a:	bf38      	it	cc
 8007b0c:	461d      	movcc	r5, r3
 8007b0e:	0553      	lsls	r3, r2, #21
 8007b10:	d546      	bpl.n	8007ba0 <__ssprint_r+0xdc>
 8007b12:	4629      	mov	r1, r5
 8007b14:	4648      	mov	r0, r9
 8007b16:	f7ff facd 	bl	80070b4 <_malloc_r>
 8007b1a:	b998      	cbnz	r0, 8007b44 <__ssprint_r+0x80>
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	f8c9 3000 	str.w	r3, [r9]
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b2c:	81a3      	strh	r3, [r4, #12]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60bb      	str	r3, [r7, #8]
 8007b32:	607b      	str	r3, [r7, #4]
 8007b34:	e031      	b.n	8007b9a <__ssprint_r+0xd6>
 8007b36:	f8da b000 	ldr.w	fp, [sl]
 8007b3a:	f8da 6004 	ldr.w	r6, [sl, #4]
 8007b3e:	f10a 0a08 	add.w	sl, sl, #8
 8007b42:	e7cc      	b.n	8007ade <__ssprint_r+0x1a>
 8007b44:	4642      	mov	r2, r8
 8007b46:	6921      	ldr	r1, [r4, #16]
 8007b48:	9001      	str	r0, [sp, #4]
 8007b4a:	f7fd fc25 	bl	8005398 <memcpy>
 8007b4e:	89a2      	ldrh	r2, [r4, #12]
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b5a:	81a2      	strh	r2, [r4, #12]
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	4443      	add	r3, r8
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	4633      	mov	r3, r6
 8007b64:	6165      	str	r5, [r4, #20]
 8007b66:	eba5 0508 	sub.w	r5, r5, r8
 8007b6a:	60a5      	str	r5, [r4, #8]
 8007b6c:	429e      	cmp	r6, r3
 8007b6e:	d200      	bcs.n	8007b72 <__ssprint_r+0xae>
 8007b70:	4633      	mov	r3, r6
 8007b72:	461a      	mov	r2, r3
 8007b74:	4659      	mov	r1, fp
 8007b76:	6820      	ldr	r0, [r4, #0]
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	f000 f971 	bl	8007e60 <memmove>
 8007b7e:	68a2      	ldr	r2, [r4, #8]
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	1ad2      	subs	r2, r2, r3
 8007b84:	60a2      	str	r2, [r4, #8]
 8007b86:	6822      	ldr	r2, [r4, #0]
 8007b88:	4413      	add	r3, r2
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	1b9e      	subs	r6, r3, r6
 8007b90:	60be      	str	r6, [r7, #8]
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	d1cf      	bne.n	8007b36 <__ssprint_r+0x72>
 8007b96:	2000      	movs	r0, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	b003      	add	sp, #12
 8007b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba0:	462a      	mov	r2, r5
 8007ba2:	4648      	mov	r0, r9
 8007ba4:	f000 f976 	bl	8007e94 <_realloc_r>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d1d6      	bne.n	8007b5c <__ssprint_r+0x98>
 8007bae:	6921      	ldr	r1, [r4, #16]
 8007bb0:	4648      	mov	r0, r9
 8007bb2:	f000 f885 	bl	8007cc0 <_free_r>
 8007bb6:	e7b1      	b.n	8007b1c <__ssprint_r+0x58>

08007bb8 <_calloc_r>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	4351      	muls	r1, r2
 8007bbc:	f7ff fa7a 	bl	80070b4 <_malloc_r>
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	b198      	cbz	r0, 8007bec <_calloc_r+0x34>
 8007bc4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007bc8:	f022 0203 	bic.w	r2, r2, #3
 8007bcc:	3a04      	subs	r2, #4
 8007bce:	2a24      	cmp	r2, #36	; 0x24
 8007bd0:	d81b      	bhi.n	8007c0a <_calloc_r+0x52>
 8007bd2:	2a13      	cmp	r2, #19
 8007bd4:	d917      	bls.n	8007c06 <_calloc_r+0x4e>
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	2a1b      	cmp	r2, #27
 8007bda:	6001      	str	r1, [r0, #0]
 8007bdc:	6041      	str	r1, [r0, #4]
 8007bde:	d807      	bhi.n	8007bf0 <_calloc_r+0x38>
 8007be0:	f100 0308 	add.w	r3, r0, #8
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	609a      	str	r2, [r3, #8]
 8007bec:	4620      	mov	r0, r4
 8007bee:	bd10      	pop	{r4, pc}
 8007bf0:	2a24      	cmp	r2, #36	; 0x24
 8007bf2:	6081      	str	r1, [r0, #8]
 8007bf4:	60c1      	str	r1, [r0, #12]
 8007bf6:	bf11      	iteee	ne
 8007bf8:	f100 0310 	addne.w	r3, r0, #16
 8007bfc:	6101      	streq	r1, [r0, #16]
 8007bfe:	f100 0318 	addeq.w	r3, r0, #24
 8007c02:	6141      	streq	r1, [r0, #20]
 8007c04:	e7ee      	b.n	8007be4 <_calloc_r+0x2c>
 8007c06:	4603      	mov	r3, r0
 8007c08:	e7ec      	b.n	8007be4 <_calloc_r+0x2c>
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	f7fd fbcf 	bl	80053ae <memset>
 8007c10:	e7ec      	b.n	8007bec <_calloc_r+0x34>
	...

08007c14 <_malloc_trim_r>:
 8007c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c18:	4689      	mov	r9, r1
 8007c1a:	4f25      	ldr	r7, [pc, #148]	; (8007cb0 <_malloc_trim_r+0x9c>)
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	f7ff fc63 	bl	80074e8 <__malloc_lock>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8007cbc <_malloc_trim_r+0xa8>
 8007c28:	685d      	ldr	r5, [r3, #4]
 8007c2a:	f1a8 0411 	sub.w	r4, r8, #17
 8007c2e:	f025 0503 	bic.w	r5, r5, #3
 8007c32:	eba4 0409 	sub.w	r4, r4, r9
 8007c36:	442c      	add	r4, r5
 8007c38:	fbb4 f4f8 	udiv	r4, r4, r8
 8007c3c:	3c01      	subs	r4, #1
 8007c3e:	fb08 f404 	mul.w	r4, r8, r4
 8007c42:	4544      	cmp	r4, r8
 8007c44:	da05      	bge.n	8007c52 <_malloc_trim_r+0x3e>
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff fc54 	bl	80074f4 <__malloc_unlock>
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c52:	2100      	movs	r1, #0
 8007c54:	4630      	mov	r0, r6
 8007c56:	f7ff ff25 	bl	8007aa4 <_sbrk_r>
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	442b      	add	r3, r5
 8007c5e:	4298      	cmp	r0, r3
 8007c60:	d1f1      	bne.n	8007c46 <_malloc_trim_r+0x32>
 8007c62:	4261      	negs	r1, r4
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff ff1d 	bl	8007aa4 <_sbrk_r>
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d110      	bne.n	8007c90 <_malloc_trim_r+0x7c>
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4630      	mov	r0, r6
 8007c72:	f7ff ff17 	bl	8007aa4 <_sbrk_r>
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	1a83      	subs	r3, r0, r2
 8007c7a:	2b0f      	cmp	r3, #15
 8007c7c:	dde3      	ble.n	8007c46 <_malloc_trim_r+0x32>
 8007c7e:	490d      	ldr	r1, [pc, #52]	; (8007cb4 <_malloc_trim_r+0xa0>)
 8007c80:	f043 0301 	orr.w	r3, r3, #1
 8007c84:	6809      	ldr	r1, [r1, #0]
 8007c86:	6053      	str	r3, [r2, #4]
 8007c88:	1a40      	subs	r0, r0, r1
 8007c8a:	490b      	ldr	r1, [pc, #44]	; (8007cb8 <_malloc_trim_r+0xa4>)
 8007c8c:	6008      	str	r0, [r1, #0]
 8007c8e:	e7da      	b.n	8007c46 <_malloc_trim_r+0x32>
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4a09      	ldr	r2, [pc, #36]	; (8007cb8 <_malloc_trim_r+0xa4>)
 8007c94:	1b2d      	subs	r5, r5, r4
 8007c96:	f045 0501 	orr.w	r5, r5, #1
 8007c9a:	605d      	str	r5, [r3, #4]
 8007c9c:	6813      	ldr	r3, [r2, #0]
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	1b1c      	subs	r4, r3, r4
 8007ca2:	6014      	str	r4, [r2, #0]
 8007ca4:	f7ff fc26 	bl	80074f4 <__malloc_unlock>
 8007ca8:	2001      	movs	r0, #1
 8007caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cae:	bf00      	nop
 8007cb0:	200001b0 	.word	0x200001b0
 8007cb4:	200005b8 	.word	0x200005b8
 8007cb8:	200044d4 	.word	0x200044d4
 8007cbc:	00000080 	.word	0x00000080

08007cc0 <_free_r>:
 8007cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	4688      	mov	r8, r1
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	f000 80ab 	beq.w	8007e24 <_free_r+0x164>
 8007cce:	f7ff fc0b 	bl	80074e8 <__malloc_lock>
 8007cd2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007cd6:	4d54      	ldr	r5, [pc, #336]	; (8007e28 <_free_r+0x168>)
 8007cd8:	f022 0001 	bic.w	r0, r2, #1
 8007cdc:	f1a8 0308 	sub.w	r3, r8, #8
 8007ce0:	181f      	adds	r7, r3, r0
 8007ce2:	68a9      	ldr	r1, [r5, #8]
 8007ce4:	687e      	ldr	r6, [r7, #4]
 8007ce6:	428f      	cmp	r7, r1
 8007ce8:	f026 0603 	bic.w	r6, r6, #3
 8007cec:	f002 0201 	and.w	r2, r2, #1
 8007cf0:	d11b      	bne.n	8007d2a <_free_r+0x6a>
 8007cf2:	4430      	add	r0, r6
 8007cf4:	b93a      	cbnz	r2, 8007d06 <_free_r+0x46>
 8007cf6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	6899      	ldr	r1, [r3, #8]
 8007cfe:	4410      	add	r0, r2
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	60ca      	str	r2, [r1, #12]
 8007d04:	6091      	str	r1, [r2, #8]
 8007d06:	f040 0201 	orr.w	r2, r0, #1
 8007d0a:	605a      	str	r2, [r3, #4]
 8007d0c:	60ab      	str	r3, [r5, #8]
 8007d0e:	4b47      	ldr	r3, [pc, #284]	; (8007e2c <_free_r+0x16c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4298      	cmp	r0, r3
 8007d14:	d304      	bcc.n	8007d20 <_free_r+0x60>
 8007d16:	4b46      	ldr	r3, [pc, #280]	; (8007e30 <_free_r+0x170>)
 8007d18:	4620      	mov	r0, r4
 8007d1a:	6819      	ldr	r1, [r3, #0]
 8007d1c:	f7ff ff7a 	bl	8007c14 <_malloc_trim_r>
 8007d20:	4620      	mov	r0, r4
 8007d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d26:	f7ff bbe5 	b.w	80074f4 <__malloc_unlock>
 8007d2a:	607e      	str	r6, [r7, #4]
 8007d2c:	2a00      	cmp	r2, #0
 8007d2e:	d139      	bne.n	8007da4 <_free_r+0xe4>
 8007d30:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8007d34:	f105 0e08 	add.w	lr, r5, #8
 8007d38:	1a5b      	subs	r3, r3, r1
 8007d3a:	4408      	add	r0, r1
 8007d3c:	6899      	ldr	r1, [r3, #8]
 8007d3e:	4571      	cmp	r1, lr
 8007d40:	d032      	beq.n	8007da8 <_free_r+0xe8>
 8007d42:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8007d46:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007d4a:	f8ce 1008 	str.w	r1, [lr, #8]
 8007d4e:	19b9      	adds	r1, r7, r6
 8007d50:	6849      	ldr	r1, [r1, #4]
 8007d52:	07c9      	lsls	r1, r1, #31
 8007d54:	d40a      	bmi.n	8007d6c <_free_r+0xac>
 8007d56:	4430      	add	r0, r6
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	bb3a      	cbnz	r2, 8007dac <_free_r+0xec>
 8007d5c:	4e35      	ldr	r6, [pc, #212]	; (8007e34 <_free_r+0x174>)
 8007d5e:	42b1      	cmp	r1, r6
 8007d60:	d124      	bne.n	8007dac <_free_r+0xec>
 8007d62:	2201      	movs	r2, #1
 8007d64:	616b      	str	r3, [r5, #20]
 8007d66:	612b      	str	r3, [r5, #16]
 8007d68:	60d9      	str	r1, [r3, #12]
 8007d6a:	6099      	str	r1, [r3, #8]
 8007d6c:	f040 0101 	orr.w	r1, r0, #1
 8007d70:	6059      	str	r1, [r3, #4]
 8007d72:	5018      	str	r0, [r3, r0]
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	d1d3      	bne.n	8007d20 <_free_r+0x60>
 8007d78:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007d7c:	d21a      	bcs.n	8007db4 <_free_r+0xf4>
 8007d7e:	2201      	movs	r2, #1
 8007d80:	08c0      	lsrs	r0, r0, #3
 8007d82:	1081      	asrs	r1, r0, #2
 8007d84:	408a      	lsls	r2, r1
 8007d86:	6869      	ldr	r1, [r5, #4]
 8007d88:	3001      	adds	r0, #1
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	606a      	str	r2, [r5, #4]
 8007d8e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8007d92:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007d96:	3a08      	subs	r2, #8
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	6099      	str	r1, [r3, #8]
 8007d9c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007da0:	60cb      	str	r3, [r1, #12]
 8007da2:	e7bd      	b.n	8007d20 <_free_r+0x60>
 8007da4:	2200      	movs	r2, #0
 8007da6:	e7d2      	b.n	8007d4e <_free_r+0x8e>
 8007da8:	2201      	movs	r2, #1
 8007daa:	e7d0      	b.n	8007d4e <_free_r+0x8e>
 8007dac:	68fe      	ldr	r6, [r7, #12]
 8007dae:	60ce      	str	r6, [r1, #12]
 8007db0:	60b1      	str	r1, [r6, #8]
 8007db2:	e7db      	b.n	8007d6c <_free_r+0xac>
 8007db4:	0a42      	lsrs	r2, r0, #9
 8007db6:	2a04      	cmp	r2, #4
 8007db8:	d813      	bhi.n	8007de2 <_free_r+0x122>
 8007dba:	0982      	lsrs	r2, r0, #6
 8007dbc:	3238      	adds	r2, #56	; 0x38
 8007dbe:	1c51      	adds	r1, r2, #1
 8007dc0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007dc4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007dc8:	428e      	cmp	r6, r1
 8007dca:	d124      	bne.n	8007e16 <_free_r+0x156>
 8007dcc:	2001      	movs	r0, #1
 8007dce:	1092      	asrs	r2, r2, #2
 8007dd0:	fa00 f202 	lsl.w	r2, r0, r2
 8007dd4:	6868      	ldr	r0, [r5, #4]
 8007dd6:	4302      	orrs	r2, r0
 8007dd8:	606a      	str	r2, [r5, #4]
 8007dda:	60de      	str	r6, [r3, #12]
 8007ddc:	6099      	str	r1, [r3, #8]
 8007dde:	60b3      	str	r3, [r6, #8]
 8007de0:	e7de      	b.n	8007da0 <_free_r+0xe0>
 8007de2:	2a14      	cmp	r2, #20
 8007de4:	d801      	bhi.n	8007dea <_free_r+0x12a>
 8007de6:	325b      	adds	r2, #91	; 0x5b
 8007de8:	e7e9      	b.n	8007dbe <_free_r+0xfe>
 8007dea:	2a54      	cmp	r2, #84	; 0x54
 8007dec:	d802      	bhi.n	8007df4 <_free_r+0x134>
 8007dee:	0b02      	lsrs	r2, r0, #12
 8007df0:	326e      	adds	r2, #110	; 0x6e
 8007df2:	e7e4      	b.n	8007dbe <_free_r+0xfe>
 8007df4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007df8:	d802      	bhi.n	8007e00 <_free_r+0x140>
 8007dfa:	0bc2      	lsrs	r2, r0, #15
 8007dfc:	3277      	adds	r2, #119	; 0x77
 8007dfe:	e7de      	b.n	8007dbe <_free_r+0xfe>
 8007e00:	f240 5154 	movw	r1, #1364	; 0x554
 8007e04:	428a      	cmp	r2, r1
 8007e06:	bf9a      	itte	ls
 8007e08:	0c82      	lsrls	r2, r0, #18
 8007e0a:	327c      	addls	r2, #124	; 0x7c
 8007e0c:	227e      	movhi	r2, #126	; 0x7e
 8007e0e:	e7d6      	b.n	8007dbe <_free_r+0xfe>
 8007e10:	6889      	ldr	r1, [r1, #8]
 8007e12:	428e      	cmp	r6, r1
 8007e14:	d004      	beq.n	8007e20 <_free_r+0x160>
 8007e16:	684a      	ldr	r2, [r1, #4]
 8007e18:	f022 0203 	bic.w	r2, r2, #3
 8007e1c:	4290      	cmp	r0, r2
 8007e1e:	d3f7      	bcc.n	8007e10 <_free_r+0x150>
 8007e20:	68ce      	ldr	r6, [r1, #12]
 8007e22:	e7da      	b.n	8007dda <_free_r+0x11a>
 8007e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e28:	200001b0 	.word	0x200001b0
 8007e2c:	200005bc 	.word	0x200005bc
 8007e30:	20004504 	.word	0x20004504
 8007e34:	200001b8 	.word	0x200001b8

08007e38 <__retarget_lock_acquire_recursive>:
 8007e38:	4770      	bx	lr

08007e3a <__retarget_lock_release_recursive>:
 8007e3a:	4770      	bx	lr

08007e3c <__ascii_mbtowc>:
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	b901      	cbnz	r1, 8007e42 <__ascii_mbtowc+0x6>
 8007e40:	a901      	add	r1, sp, #4
 8007e42:	b142      	cbz	r2, 8007e56 <__ascii_mbtowc+0x1a>
 8007e44:	b14b      	cbz	r3, 8007e5a <__ascii_mbtowc+0x1e>
 8007e46:	7813      	ldrb	r3, [r2, #0]
 8007e48:	600b      	str	r3, [r1, #0]
 8007e4a:	7812      	ldrb	r2, [r2, #0]
 8007e4c:	1c10      	adds	r0, r2, #0
 8007e4e:	bf18      	it	ne
 8007e50:	2001      	movne	r0, #1
 8007e52:	b002      	add	sp, #8
 8007e54:	4770      	bx	lr
 8007e56:	4610      	mov	r0, r2
 8007e58:	e7fb      	b.n	8007e52 <__ascii_mbtowc+0x16>
 8007e5a:	f06f 0001 	mvn.w	r0, #1
 8007e5e:	e7f8      	b.n	8007e52 <__ascii_mbtowc+0x16>

08007e60 <memmove>:
 8007e60:	4288      	cmp	r0, r1
 8007e62:	b510      	push	{r4, lr}
 8007e64:	eb01 0302 	add.w	r3, r1, r2
 8007e68:	d803      	bhi.n	8007e72 <memmove+0x12>
 8007e6a:	1e42      	subs	r2, r0, #1
 8007e6c:	4299      	cmp	r1, r3
 8007e6e:	d10c      	bne.n	8007e8a <memmove+0x2a>
 8007e70:	bd10      	pop	{r4, pc}
 8007e72:	4298      	cmp	r0, r3
 8007e74:	d2f9      	bcs.n	8007e6a <memmove+0xa>
 8007e76:	1881      	adds	r1, r0, r2
 8007e78:	1ad2      	subs	r2, r2, r3
 8007e7a:	42d3      	cmn	r3, r2
 8007e7c:	d100      	bne.n	8007e80 <memmove+0x20>
 8007e7e:	bd10      	pop	{r4, pc}
 8007e80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e84:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e88:	e7f7      	b.n	8007e7a <memmove+0x1a>
 8007e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e8e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e92:	e7eb      	b.n	8007e6c <memmove+0xc>

08007e94 <_realloc_r>:
 8007e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	4682      	mov	sl, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	b929      	cbnz	r1, 8007eaa <_realloc_r+0x16>
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	b003      	add	sp, #12
 8007ea2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea6:	f7ff b905 	b.w	80070b4 <_malloc_r>
 8007eaa:	9201      	str	r2, [sp, #4]
 8007eac:	f7ff fb1c 	bl	80074e8 <__malloc_lock>
 8007eb0:	9a01      	ldr	r2, [sp, #4]
 8007eb2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007eb6:	f102 080b 	add.w	r8, r2, #11
 8007eba:	f1b8 0f16 	cmp.w	r8, #22
 8007ebe:	f1a4 0908 	sub.w	r9, r4, #8
 8007ec2:	f025 0603 	bic.w	r6, r5, #3
 8007ec6:	d90a      	bls.n	8007ede <_realloc_r+0x4a>
 8007ec8:	f038 0807 	bics.w	r8, r8, #7
 8007ecc:	d509      	bpl.n	8007ee2 <_realloc_r+0x4e>
 8007ece:	230c      	movs	r3, #12
 8007ed0:	2700      	movs	r7, #0
 8007ed2:	f8ca 3000 	str.w	r3, [sl]
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	b003      	add	sp, #12
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	f04f 0810 	mov.w	r8, #16
 8007ee2:	4590      	cmp	r8, r2
 8007ee4:	d3f3      	bcc.n	8007ece <_realloc_r+0x3a>
 8007ee6:	45b0      	cmp	r8, r6
 8007ee8:	f340 8148 	ble.w	800817c <_realloc_r+0x2e8>
 8007eec:	4ba9      	ldr	r3, [pc, #676]	; (8008194 <_realloc_r+0x300>)
 8007eee:	eb09 0106 	add.w	r1, r9, r6
 8007ef2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8007ef6:	469b      	mov	fp, r3
 8007ef8:	4571      	cmp	r1, lr
 8007efa:	684b      	ldr	r3, [r1, #4]
 8007efc:	d005      	beq.n	8007f0a <_realloc_r+0x76>
 8007efe:	f023 0001 	bic.w	r0, r3, #1
 8007f02:	4408      	add	r0, r1
 8007f04:	6840      	ldr	r0, [r0, #4]
 8007f06:	07c7      	lsls	r7, r0, #31
 8007f08:	d447      	bmi.n	8007f9a <_realloc_r+0x106>
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	4571      	cmp	r1, lr
 8007f10:	eb06 0703 	add.w	r7, r6, r3
 8007f14:	d119      	bne.n	8007f4a <_realloc_r+0xb6>
 8007f16:	f108 0010 	add.w	r0, r8, #16
 8007f1a:	4287      	cmp	r7, r0
 8007f1c:	db3f      	blt.n	8007f9e <_realloc_r+0x10a>
 8007f1e:	eba7 0708 	sub.w	r7, r7, r8
 8007f22:	eb09 0308 	add.w	r3, r9, r8
 8007f26:	f047 0701 	orr.w	r7, r7, #1
 8007f2a:	f8cb 3008 	str.w	r3, [fp, #8]
 8007f2e:	605f      	str	r7, [r3, #4]
 8007f30:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007f34:	4650      	mov	r0, sl
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	ea43 0308 	orr.w	r3, r3, r8
 8007f3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f42:	f7ff fad7 	bl	80074f4 <__malloc_unlock>
 8007f46:	4627      	mov	r7, r4
 8007f48:	e7c5      	b.n	8007ed6 <_realloc_r+0x42>
 8007f4a:	45b8      	cmp	r8, r7
 8007f4c:	dc27      	bgt.n	8007f9e <_realloc_r+0x10a>
 8007f4e:	68cb      	ldr	r3, [r1, #12]
 8007f50:	688a      	ldr	r2, [r1, #8]
 8007f52:	60d3      	str	r3, [r2, #12]
 8007f54:	609a      	str	r2, [r3, #8]
 8007f56:	eba7 0008 	sub.w	r0, r7, r8
 8007f5a:	280f      	cmp	r0, #15
 8007f5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007f60:	eb09 0207 	add.w	r2, r9, r7
 8007f64:	f240 810c 	bls.w	8008180 <_realloc_r+0x2ec>
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	eb09 0108 	add.w	r1, r9, r8
 8007f70:	ea43 0308 	orr.w	r3, r3, r8
 8007f74:	f040 0001 	orr.w	r0, r0, #1
 8007f78:	f8c9 3004 	str.w	r3, [r9, #4]
 8007f7c:	6048      	str	r0, [r1, #4]
 8007f7e:	6853      	ldr	r3, [r2, #4]
 8007f80:	3108      	adds	r1, #8
 8007f82:	f043 0301 	orr.w	r3, r3, #1
 8007f86:	6053      	str	r3, [r2, #4]
 8007f88:	4650      	mov	r0, sl
 8007f8a:	f7ff fe99 	bl	8007cc0 <_free_r>
 8007f8e:	4650      	mov	r0, sl
 8007f90:	f7ff fab0 	bl	80074f4 <__malloc_unlock>
 8007f94:	f109 0708 	add.w	r7, r9, #8
 8007f98:	e79d      	b.n	8007ed6 <_realloc_r+0x42>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	07e8      	lsls	r0, r5, #31
 8007fa0:	f100 8085 	bmi.w	80080ae <_realloc_r+0x21a>
 8007fa4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007fa8:	eba9 0505 	sub.w	r5, r9, r5
 8007fac:	6868      	ldr	r0, [r5, #4]
 8007fae:	f020 0003 	bic.w	r0, r0, #3
 8007fb2:	4430      	add	r0, r6
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	d077      	beq.n	80080a8 <_realloc_r+0x214>
 8007fb8:	4571      	cmp	r1, lr
 8007fba:	d151      	bne.n	8008060 <_realloc_r+0x1cc>
 8007fbc:	4403      	add	r3, r0
 8007fbe:	f108 0110 	add.w	r1, r8, #16
 8007fc2:	428b      	cmp	r3, r1
 8007fc4:	db70      	blt.n	80080a8 <_realloc_r+0x214>
 8007fc6:	462f      	mov	r7, r5
 8007fc8:	68ea      	ldr	r2, [r5, #12]
 8007fca:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007fce:	60ca      	str	r2, [r1, #12]
 8007fd0:	6091      	str	r1, [r2, #8]
 8007fd2:	1f32      	subs	r2, r6, #4
 8007fd4:	2a24      	cmp	r2, #36	; 0x24
 8007fd6:	d83c      	bhi.n	8008052 <_realloc_r+0x1be>
 8007fd8:	2a13      	cmp	r2, #19
 8007fda:	d937      	bls.n	800804c <_realloc_r+0x1b8>
 8007fdc:	6821      	ldr	r1, [r4, #0]
 8007fde:	2a1b      	cmp	r2, #27
 8007fe0:	60a9      	str	r1, [r5, #8]
 8007fe2:	6861      	ldr	r1, [r4, #4]
 8007fe4:	60e9      	str	r1, [r5, #12]
 8007fe6:	d81c      	bhi.n	8008022 <_realloc_r+0x18e>
 8007fe8:	f105 0210 	add.w	r2, r5, #16
 8007fec:	f104 0108 	add.w	r1, r4, #8
 8007ff0:	6808      	ldr	r0, [r1, #0]
 8007ff2:	6010      	str	r0, [r2, #0]
 8007ff4:	6848      	ldr	r0, [r1, #4]
 8007ff6:	6050      	str	r0, [r2, #4]
 8007ff8:	6889      	ldr	r1, [r1, #8]
 8007ffa:	6091      	str	r1, [r2, #8]
 8007ffc:	eba3 0308 	sub.w	r3, r3, r8
 8008000:	eb05 0208 	add.w	r2, r5, r8
 8008004:	f043 0301 	orr.w	r3, r3, #1
 8008008:	f8cb 2008 	str.w	r2, [fp, #8]
 800800c:	6053      	str	r3, [r2, #4]
 800800e:	686b      	ldr	r3, [r5, #4]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	ea43 0308 	orr.w	r3, r3, r8
 8008018:	606b      	str	r3, [r5, #4]
 800801a:	4650      	mov	r0, sl
 800801c:	f7ff fa6a 	bl	80074f4 <__malloc_unlock>
 8008020:	e759      	b.n	8007ed6 <_realloc_r+0x42>
 8008022:	68a1      	ldr	r1, [r4, #8]
 8008024:	2a24      	cmp	r2, #36	; 0x24
 8008026:	6129      	str	r1, [r5, #16]
 8008028:	68e1      	ldr	r1, [r4, #12]
 800802a:	bf18      	it	ne
 800802c:	f105 0218 	addne.w	r2, r5, #24
 8008030:	6169      	str	r1, [r5, #20]
 8008032:	bf09      	itett	eq
 8008034:	6922      	ldreq	r2, [r4, #16]
 8008036:	f104 0110 	addne.w	r1, r4, #16
 800803a:	61aa      	streq	r2, [r5, #24]
 800803c:	6960      	ldreq	r0, [r4, #20]
 800803e:	bf02      	ittt	eq
 8008040:	f105 0220 	addeq.w	r2, r5, #32
 8008044:	f104 0118 	addeq.w	r1, r4, #24
 8008048:	61e8      	streq	r0, [r5, #28]
 800804a:	e7d1      	b.n	8007ff0 <_realloc_r+0x15c>
 800804c:	463a      	mov	r2, r7
 800804e:	4621      	mov	r1, r4
 8008050:	e7ce      	b.n	8007ff0 <_realloc_r+0x15c>
 8008052:	4621      	mov	r1, r4
 8008054:	4638      	mov	r0, r7
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	f7ff ff02 	bl	8007e60 <memmove>
 800805c:	9b01      	ldr	r3, [sp, #4]
 800805e:	e7cd      	b.n	8007ffc <_realloc_r+0x168>
 8008060:	18c7      	adds	r7, r0, r3
 8008062:	45b8      	cmp	r8, r7
 8008064:	dc20      	bgt.n	80080a8 <_realloc_r+0x214>
 8008066:	68cb      	ldr	r3, [r1, #12]
 8008068:	688a      	ldr	r2, [r1, #8]
 800806a:	60d3      	str	r3, [r2, #12]
 800806c:	609a      	str	r2, [r3, #8]
 800806e:	4628      	mov	r0, r5
 8008070:	68eb      	ldr	r3, [r5, #12]
 8008072:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008076:	60d3      	str	r3, [r2, #12]
 8008078:	609a      	str	r2, [r3, #8]
 800807a:	1f32      	subs	r2, r6, #4
 800807c:	2a24      	cmp	r2, #36	; 0x24
 800807e:	d843      	bhi.n	8008108 <_realloc_r+0x274>
 8008080:	2a13      	cmp	r2, #19
 8008082:	d93f      	bls.n	8008104 <_realloc_r+0x270>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	2a1b      	cmp	r2, #27
 8008088:	60ab      	str	r3, [r5, #8]
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	60eb      	str	r3, [r5, #12]
 800808e:	d824      	bhi.n	80080da <_realloc_r+0x246>
 8008090:	f105 0010 	add.w	r0, r5, #16
 8008094:	f104 0308 	add.w	r3, r4, #8
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	6002      	str	r2, [r0, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	6042      	str	r2, [r0, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	6083      	str	r3, [r0, #8]
 80080a4:	46a9      	mov	r9, r5
 80080a6:	e756      	b.n	8007f56 <_realloc_r+0xc2>
 80080a8:	4580      	cmp	r8, r0
 80080aa:	4607      	mov	r7, r0
 80080ac:	dddf      	ble.n	800806e <_realloc_r+0x1da>
 80080ae:	4611      	mov	r1, r2
 80080b0:	4650      	mov	r0, sl
 80080b2:	f7fe ffff 	bl	80070b4 <_malloc_r>
 80080b6:	4607      	mov	r7, r0
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d0ae      	beq.n	800801a <_realloc_r+0x186>
 80080bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80080c0:	f1a0 0208 	sub.w	r2, r0, #8
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	444b      	add	r3, r9
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d120      	bne.n	8008110 <_realloc_r+0x27c>
 80080ce:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80080d2:	f027 0703 	bic.w	r7, r7, #3
 80080d6:	4437      	add	r7, r6
 80080d8:	e73d      	b.n	8007f56 <_realloc_r+0xc2>
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	2a24      	cmp	r2, #36	; 0x24
 80080de:	612b      	str	r3, [r5, #16]
 80080e0:	68e3      	ldr	r3, [r4, #12]
 80080e2:	bf18      	it	ne
 80080e4:	f105 0018 	addne.w	r0, r5, #24
 80080e8:	616b      	str	r3, [r5, #20]
 80080ea:	bf09      	itett	eq
 80080ec:	6923      	ldreq	r3, [r4, #16]
 80080ee:	f104 0310 	addne.w	r3, r4, #16
 80080f2:	61ab      	streq	r3, [r5, #24]
 80080f4:	6962      	ldreq	r2, [r4, #20]
 80080f6:	bf02      	ittt	eq
 80080f8:	f105 0020 	addeq.w	r0, r5, #32
 80080fc:	f104 0318 	addeq.w	r3, r4, #24
 8008100:	61ea      	streq	r2, [r5, #28]
 8008102:	e7c9      	b.n	8008098 <_realloc_r+0x204>
 8008104:	4623      	mov	r3, r4
 8008106:	e7c7      	b.n	8008098 <_realloc_r+0x204>
 8008108:	4621      	mov	r1, r4
 800810a:	f7ff fea9 	bl	8007e60 <memmove>
 800810e:	e7c9      	b.n	80080a4 <_realloc_r+0x210>
 8008110:	1f32      	subs	r2, r6, #4
 8008112:	2a24      	cmp	r2, #36	; 0x24
 8008114:	d82e      	bhi.n	8008174 <_realloc_r+0x2e0>
 8008116:	2a13      	cmp	r2, #19
 8008118:	d929      	bls.n	800816e <_realloc_r+0x2da>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	2a1b      	cmp	r2, #27
 800811e:	6003      	str	r3, [r0, #0]
 8008120:	6863      	ldr	r3, [r4, #4]
 8008122:	6043      	str	r3, [r0, #4]
 8008124:	d80e      	bhi.n	8008144 <_realloc_r+0x2b0>
 8008126:	f100 0308 	add.w	r3, r0, #8
 800812a:	f104 0208 	add.w	r2, r4, #8
 800812e:	6811      	ldr	r1, [r2, #0]
 8008130:	6019      	str	r1, [r3, #0]
 8008132:	6851      	ldr	r1, [r2, #4]
 8008134:	6059      	str	r1, [r3, #4]
 8008136:	6892      	ldr	r2, [r2, #8]
 8008138:	609a      	str	r2, [r3, #8]
 800813a:	4621      	mov	r1, r4
 800813c:	4650      	mov	r0, sl
 800813e:	f7ff fdbf 	bl	8007cc0 <_free_r>
 8008142:	e76a      	b.n	800801a <_realloc_r+0x186>
 8008144:	68a3      	ldr	r3, [r4, #8]
 8008146:	2a24      	cmp	r2, #36	; 0x24
 8008148:	6083      	str	r3, [r0, #8]
 800814a:	68e3      	ldr	r3, [r4, #12]
 800814c:	bf18      	it	ne
 800814e:	f104 0210 	addne.w	r2, r4, #16
 8008152:	60c3      	str	r3, [r0, #12]
 8008154:	bf09      	itett	eq
 8008156:	6923      	ldreq	r3, [r4, #16]
 8008158:	f100 0310 	addne.w	r3, r0, #16
 800815c:	6103      	streq	r3, [r0, #16]
 800815e:	6961      	ldreq	r1, [r4, #20]
 8008160:	bf02      	ittt	eq
 8008162:	f100 0318 	addeq.w	r3, r0, #24
 8008166:	f104 0218 	addeq.w	r2, r4, #24
 800816a:	6141      	streq	r1, [r0, #20]
 800816c:	e7df      	b.n	800812e <_realloc_r+0x29a>
 800816e:	4603      	mov	r3, r0
 8008170:	4622      	mov	r2, r4
 8008172:	e7dc      	b.n	800812e <_realloc_r+0x29a>
 8008174:	4621      	mov	r1, r4
 8008176:	f7ff fe73 	bl	8007e60 <memmove>
 800817a:	e7de      	b.n	800813a <_realloc_r+0x2a6>
 800817c:	4637      	mov	r7, r6
 800817e:	e6ea      	b.n	8007f56 <_realloc_r+0xc2>
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	431f      	orrs	r7, r3
 8008186:	f8c9 7004 	str.w	r7, [r9, #4]
 800818a:	6853      	ldr	r3, [r2, #4]
 800818c:	f043 0301 	orr.w	r3, r3, #1
 8008190:	6053      	str	r3, [r2, #4]
 8008192:	e6fc      	b.n	8007f8e <_realloc_r+0xfa>
 8008194:	200001b0 	.word	0x200001b0

08008198 <__ascii_wctomb>:
 8008198:	b149      	cbz	r1, 80081ae <__ascii_wctomb+0x16>
 800819a:	2aff      	cmp	r2, #255	; 0xff
 800819c:	bf8b      	itete	hi
 800819e:	238a      	movhi	r3, #138	; 0x8a
 80081a0:	700a      	strbls	r2, [r1, #0]
 80081a2:	6003      	strhi	r3, [r0, #0]
 80081a4:	2001      	movls	r0, #1
 80081a6:	bf88      	it	hi
 80081a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80081ac:	4770      	bx	lr
 80081ae:	4608      	mov	r0, r1
 80081b0:	4770      	bx	lr
	...

080081b4 <_sbrk>:
 80081b4:	4b04      	ldr	r3, [pc, #16]	; (80081c8 <_sbrk+0x14>)
 80081b6:	4602      	mov	r2, r0
 80081b8:	6819      	ldr	r1, [r3, #0]
 80081ba:	b909      	cbnz	r1, 80081c0 <_sbrk+0xc>
 80081bc:	4903      	ldr	r1, [pc, #12]	; (80081cc <_sbrk+0x18>)
 80081be:	6019      	str	r1, [r3, #0]
 80081c0:	6818      	ldr	r0, [r3, #0]
 80081c2:	4402      	add	r2, r0
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	4770      	bx	lr
 80081c8:	20004508 	.word	0x20004508
 80081cc:	20004670 	.word	0x20004670

080081d0 <_init>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	bf00      	nop
 80081d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d6:	bc08      	pop	{r3}
 80081d8:	469e      	mov	lr, r3
 80081da:	4770      	bx	lr

080081dc <_fini>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr
